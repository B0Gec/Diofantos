0





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 0
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 28 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_2*an_26, p = 2.070108995246299e-07, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_37*n**3, p = 2.622950819672133e-06, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.505312955709952e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8*n + n, p = 6.499195614082239e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_1*an_2*an_39*n + C1*an_1*n + C2*n + n, p = 8.58515602483087e-12, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_25 + C2*n + n, p = 1.3987567242693637e-08, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_20 + n, p = 3.934426389557317e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_1, p = 5.419126640555824e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*an_6 + n, p = 9.309690943294819e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + an_1, p = 1.0394062572869364e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_3**2*n, p = 9.74356857301539e-07, parse trees = 1, valid = False
-> an_1*an_21*an_38*an_39*n**3, p = 4.45112943170025e-14, parse trees = 1, valid = False

Total time consumed by now:0.23348968800019065


Equation discovery for all (chosen) OEIS sequences took 0.2334949409996625 secconds, i.e. 0.0038915823499943753 minutes or 6.485970583323959e-05 hours.
1





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 1
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_1**3*an_2*n**4, p = 1.1625732116958468e-07, parse trees = 1, valid = False
-> C0*an_5*n**2 + C1*n + an_2**2, p = 5.399891699207331e-09, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.0019013260563659525, parse trees = 2, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 2.7095633202779127e-05, parse trees = 1, valid = False
-> C0*an_47 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + an_1*an_3, p = 2.64008160140551e-09, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*an_14*n**3, p = 4.288880211217417e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_17, p = 9.713602996855978e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0021190174684224683, parse trees = 2, valid = False
-> C0*an_1*an_2*an_3*n + an_2*an_4*n, p = 1.856352749618559e-10, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*an_3*n + C2*n + an_2, p = 7.021809711667218e-10, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**3 + C2*an_1 + an_1**2, p = 4.105854906505851e-10, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_2*an_3**2 + an_3, p = 3.460830367464482e-08, parse trees = 1, valid = False
-> C0*an_1*an_46 + C1*an_2 + C2*n**2 + C3*n + n, p = 3.3570161379146317e-10, parse trees = 1, valid = False

Total time consumed by now:0.2809171070002776


Equation discovery for all (chosen) OEIS sequences took 0.28092307599945343 secconds, i.e. 0.004682051266657558 minutes or 7.803418777762596e-05 hours.
2





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 2
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 27 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + an_1**3*an_17, p = 1.645153249909825e-08, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1**2*an_2*an_37*n**2, p = 2.195548098153468e-13, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1 + n, p = 1.254427463091625e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + an_1*an_2, p = 1.2121255125222264e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*n**2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_2*an_44, p = 1.2660873719728871e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*n + an_3*n**9, p = 6.546885245901655e-10, parse trees = 1, valid = False
-> C0*an_3*n + an_2**2, p = 1.9067414192116273e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n**3, p = 3.1817862295082025e-07, parse trees = 1, valid = False

Total time consumed by now:0.22624111799996172


Equation discovery for all (chosen) OEIS sequences took 0.22624696800085076 secconds, i.e. 0.0037707828000141793 minutes or 6.284638000023632e-05 hours.
3





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 3
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 28 models
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 5.741612007465676e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_5 + C1*n + n**2, p = 3.6212459016393457e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_18, p = 4.192423287033835e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_2 + n, p = 1.4826821275789621e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_45 + n, p = 2.96127138828187e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + C2*n + an_1, p = 3.55843710618951e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + an_6*n**2, p = 5.824524590163942e-07, parse trees = 1, valid = False

Total time consumed by now:0.23109408799973608


Equation discovery for all (chosen) OEIS sequences took 0.2311017339998216 secconds, i.e. 0.003851695566663693 minutes or 6.419492611106155e-05 hours.
4





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 4
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_2*an_4*n + an_31*n, p = 1.4791548033971875e-10, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**3*an_2**2*an_3*an_4*n**2 + an_1, p = 3.8810997838452866e-13, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_1**2*n**2, p = 6.416088007944056e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n**2 + C2*n + an_1, p = 4.919183455596385e-13, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_4*n, p = 2.6461226074233342e-05, parse trees = 1, valid = False
-> C0*an_30 + C1*n**3 + C2*n + n, p = 2.2662295081972685e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2*an_2, p = 1.9265934561296684e-09, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False

Total time consumed by now:0.2417304199989303


Equation discovery for all (chosen) OEIS sequences took 0.2417357929989521 secconds, i.e. 0.004028929883315868 minutes or 6.71488313885978e-05 hours.
5





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 5
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*an_6*n**4 + C1*an_1 + n**2, p = 2.922577442141657e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**4, p = 0.00024060330029790198, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_7 + C1*n**2 + an_1**2*an_3*n**2, p = 1.10128586163022e-12, parse trees = 1, valid = False
-> an_33*n, p = 6.557377049180372e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00888120976462463, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + n, p = 2.554170220239162e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2, p = 0.00013547816601389555, parse trees = 1, valid = False
-> an_1**2*an_39, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_13*an_3*n**2 + an_1*an_2*an_48*n**3, p = 1.3409392718643128e-15, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n + n, p = 1.5904098919588144e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**3 + C4*n + n**2, p = 6.832199243883868e-12, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n**2, p = 1.0171283848427862e-06, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + an_1, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_28*n, p = 6.55737704919783e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n**4 + n, p = 0.00017280000000000024, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False

Total time consumed by now:0.27550156399956904


Equation discovery for all (chosen) OEIS sequences took 0.27550718299971777 secconds, i.e. 0.00459178638332863 minutes or 7.652977305547716e-05 hours.
6





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 6
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 24 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1**2, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n**4, p = 8.532416017199693e-07, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> C0*n + an_2*n**4, p = 9.60881311475412e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + an_1*n**2, p = 6.929375048579584e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2*n, p = 5.419126640555827e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1*an_5*n**3 + C1*an_3**2*n + an_1*an_2*n, p = 1.2820149340158448e-14, parse trees = 1, valid = False

Total time consumed by now:0.21403658599956543


Equation discovery for all (chosen) OEIS sequences took 0.21404225599872007 secconds, i.e. 0.0035673709333120013 minutes or 5.9456182221866686e-05 hours.
7





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 7
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 27 models
-> C0*n + an_25, p = 3.9344262298971166e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2 + C1*an_4 + an_3, p = 5.639277687951366e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_11*an_3*n, p = 7.779788763474575e-07, parse trees = 1, valid = False
-> C0*an_1**3*n + n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_2 + an_1**2*an_3*n**3, p = 5.866848003123356e-12, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_4 + C3*an_5 + C4*n + an_1*an_3*n**2, p = 9.425096216643282e-15, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n**4, p = 3.34513990157767e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n**3 + an_11, p = 1.5770230268852472e-06, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_4 + an_2, p = 1.99162132167567e-08, parse trees = 1, valid = False

Total time consumed by now:0.22886167600154295


Equation discovery for all (chosen) OEIS sequences took 0.22886717400069756 secconds, i.e. 0.003814452900011626 minutes or 6.357421500019377e-05 hours.
8





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 8
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_33*n**4, p = 1.1591206664875131e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1*n**2 + an_3, p = 3.2080440039720275e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_2*n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1, p = 4.894488924396976e-10, parse trees = 1, valid = False
-> C0*an_1**4*an_3 + C1*an_2*n**2 + C2*an_2 + C3*n**2 + C4*n + n, p = 2.1140042263005248e-14, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + an_1*an_12*n, p = 3.048464423334404e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_4*n**3 + C4*an_7*n + C5*n**3 + C6*n + n, p = 4.35078384853393e-20, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**3, p = 8.524590163934434e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> C0*an_1**3*an_26*an_3*n**2 + n, p = 3.895621134264921e-11, parse trees = 1, valid = False
-> an_1**2*n**4, p = 2.3544638538027446e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False

Total time consumed by now:0.28156812700035516


Equation discovery for all (chosen) OEIS sequences took 0.28157368000029237 secconds, i.e. 0.0046928946666715396 minutes or 7.821491111119233e-05 hours.
9





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 9
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*n + n**4, p = 0.00017280000000000022, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_31, p = 0.00032786885245904, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1**2*n, p = 0.008829239451760288, parse trees = 3, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*an_2, p = 8.719299087718842e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_3*n**2, p = 5.232141897339435e-08, parse trees = 1, valid = False
-> C0*an_3 + an_2, p = 0.00024688703753471296, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**4, p = 8.418443247085303e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*n + an_1**3, p = 7.920244804216526e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3 + an_2*n, p = 4.4852361562339704e-08, parse trees = 1, valid = False
-> an_1*an_38, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1 + n, p = 2.5088549261832513e-06, parse trees = 1, valid = False

Total time consumed by now:0.22081431799961138


Equation discovery for all (chosen) OEIS sequences took 0.22081987199999276 secconds, i.e. 0.0036803311999998793 minutes or 6.133885333333133e-05 hours.
10





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 10
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n**2 + C2*n + an_1, p = 6.021251822839806e-08, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n, p = 1.8208265512267567e-05, parse trees = 2, valid = False
-> C0*an_3 + C1*n + an_1*n, p = 3.390427949475952e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2*n + C2*an_12*n + an_1*n, p = 5.852422501542422e-12, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + n**2, p = 3.013389764715634e-09, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1, p = 2.0907124384860418e-05, parse trees = 1, valid = False
-> C0*n + an_10, p = 3.96153068852459e-05, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649262, parse trees = 1, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_30 + an_1, p = 1.48063569414129e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1**2*n, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + C2*an_2*n**2 + C3*n + an_1, p = 1.3963685904256059e-11, parse trees = 1, valid = False

Total time consumed by now:0.26558289999957196


Equation discovery for all (chosen) OEIS sequences took 0.265588664000461 secconds, i.e. 0.004426477733341016 minutes or 7.377462888901694e-05 hours.
11





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 11
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> C0*n + an_1**3*an_2*n**2, p = 4.1852635621050477e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + an_1, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + C2*n + n, p = 4.266208008599842e-07, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_38, p = 6.037086804622418e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2*an_4*n, p = 1.0383666719847516e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1 + C2*an_2 + an_1, p = 1.2121255125222267e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**2 + an_1**2, p = 0.0003531695780704115, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*an_2*n, p = 8.237122930994234e-07, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_4, p = 0.0002628648212846009, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False

Total time consumed by now:0.2274186609993194


Equation discovery for all (chosen) OEIS sequences took 0.22742354799993336 secconds, i.e. 0.003790392466665556 minutes or 6.317320777775927e-05 hours.
12





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 12
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*an_4, p = 5.602037174917727e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3 + an_3, p = 7.569649735734121e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + C2*an_3*n + an_2, p = 2.2446768750411597e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_2**2, p = 4.55013269316036e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_49 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_3*n**2 + n, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1**3*n**3, p = 6.421978187098895e-10, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n**2, p = 2.6514885245901683e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_10, p = 0.00033012755737704913, parse trees = 1, valid = False
-> C0*an_1*an_5*n + n**3, p = 1.543481859715132e-07, parse trees = 1, valid = False
-> C0*an_2 + an_3, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2 + an_2, p = 5.084097195606045e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False

Total time consumed by now:0.24371255100049893


Equation discovery for all (chosen) OEIS sequences took 0.2437180270007957 secconds, i.e. 0.004061967116679928 minutes or 6.769945194466548e-05 hours.
13





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 13
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0018413114754098378, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + an_3*n, p = 4.181424876972086e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 3.0513851545283566e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n**2 + n, p = 3.2730907344667685e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1**3*n**5, p = 6.02125182283981e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2**2, p = 3.976024729897034e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n**2, p = 7.954465573770502e-06, parse trees = 1, valid = False
-> an_1*an_3*an_5, p = 1.9035807696092038e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*an_13*n**5 + C1*an_2**2 + an_2, p = 2.781561906215525e-13, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_2*n, p = 4.003672131147547e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n**2 + n, p = 8.476069873689882e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n, p = 4.181424876972086e-06, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*an_43, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + C2*n + an_2, p = 1.1783126644080357e-07, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False

Total time consumed by now:0.2607553210000333


Equation discovery for all (chosen) OEIS sequences took 0.2607611100011127 secconds, i.e. 0.004346018500018545 minutes or 7.243364166697574e-05 hours.
14





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 14
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 5.085641924213929e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_5*n, p = 9.710890143032045e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_45, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1*an_3*n**2 + C2*n + an_1**2*an_2*n**4, p = 4.697787169556725e-16, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8 + C2*n + n**3, p = 1.5598069473797382e-08, parse trees = 1, valid = False
-> an_32*an_46*n, p = 2.3888440980621025e-08, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> an_43, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_48 + an_1, p = 2.515452835259339e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False

Total time consumed by now:0.21782549400086282


Equation discovery for all (chosen) OEIS sequences took 0.2178305649995309 secconds, i.e. 0.0036305094166588486 minutes or 6.050849027764748e-05 hours.
15





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 15
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 38 models
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_3*n**2, p = 6.9690414616201425e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + an_1, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_1*an_18 + C1*an_1*an_2*n + C2*an_3 + an_1*an_3, p = 1.6029646598041878e-13, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + an_1, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_16 + C1*an_2*n + an_2, p = 4.501182676936089e-09, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_2 + an_3*n, p = 4.93774075069426e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + n, p = 4.607504649287831e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_4*n**2 + an_1*n, p = 1.910202839971948e-09, parse trees = 1, valid = False
-> C0*an_3*an_40*n + n, p = 9.316491982442e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_2*n**2 + n**3, p = 6.672786885245911e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + an_3**2*n**2, p = 3.871689700900078e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_2 + an_1, p = 3.1598143702502477e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + n, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + C2*n + an_4*n, p = 9.144999731255053e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 2.9934900209863806e-08, parse trees = 1, valid = False

Total time consumed by now:0.30603836000045703


Equation discovery for all (chosen) OEIS sequences took 0.30604507100179035 secconds, i.e. 0.0051007511833631725 minutes or 8.501251972271954e-05 hours.
16





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 16
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*n + an_1*an_3*n**2, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*an_13*an_2, p = 1.906212221918712e-09, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_2*n + n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_36*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00035551733404998696, parse trees = 2, valid = False
-> C0*an_1 + C1*an_3 + n, p = 7.526564778549751e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + an_1**4*an_2*n**2, p = 2.1000438210325035e-12, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_2, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_1**2*an_44 + C1*an_2*n + an_11*n**3, p = 4.352812738091847e-14, parse trees = 1, valid = False
-> C0*an_1**3*n + n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_4*n**2, p = 0.0001370491803278689, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2 + n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + C2*n**3 + C3*n + n, p = 3.3935404734951456e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False

Total time consumed by now:0.28804053900057625


Equation discovery for all (chosen) OEIS sequences took 0.2880470760010212 secconds, i.e. 0.00480078460001702 minutes or 8.001307666695033e-05 hours.
17





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 17
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*an_2**2*n + an_1**2, p = 2.633178641875206e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n**2 + n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*an_1*n + n, p = 8.066933531881532e-07, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_4*n, p = 0.0013704918032786885, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**2 + an_1, p = 5.266357283750414e-07, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_12, p = 3.936865630819672e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1*n, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_31, p = 0.00032786885245904, parse trees = 1, valid = False

Total time consumed by now:0.21730245700018713


Equation discovery for all (chosen) OEIS sequences took 0.21730826899874955 secconds, i.e. 0.0036218044833124926 minutes or 6.036340805520821e-05 hours.
18





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 18
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_36, p = 0.00032786885245901645, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1**3*n + n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*an_37*n**2, p = 1.0967671808451372e-10, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**5*n**3 + C1*n**2 + C2*n + an_1, p = 5.4383210271077526e-11, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_16*an_3 + n, p = 4.658269385479478e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n**3 + an_46*n, p = 3.147540983606561e-07, parse trees = 1, valid = False
-> an_1*an_18*n, p = 8.384846574067673e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_15*n + an_11, p = 1.4362927384955564e-08, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + C1*an_1 + C2*n + an_1*n**3, p = 3.1655505686407274e-10, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*an_48 + C2*an_1 + C3*an_3 + C4*n + an_1, p = 7.478788536440527e-14, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1 + an_39*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_42 + an_1*n**3, p = 9.325044827540645e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + C2*n + n, p = 5.085641924213927e-06, parse trees = 1, valid = False

Total time consumed by now:0.2532020079997892


Equation discovery for all (chosen) OEIS sequences took 0.2532075959989015 secconds, i.e. 0.004220126599981692 minutes or 7.03354433330282e-05 hours.
19





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 19
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 27 models
-> C0*n + an_1**2*an_31*n, p = 1.2865922698376576e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_3**2, p = 0.000126160828928902, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_31*n**2 + C1*an_2 + an_21, p = 4.193502223034491e-14, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*an_1 + n**3, p = 8.670602624889328e-09, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**2, p = 2.3190669174952992e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_28*n + n**3, p = 4.024724536425689e-08, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n**3 + C2*n + n, p = 3.927708881360121e-08, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*an_8, p = 2.674278585865607e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*n**5 + n, p = 1.7064832034399387e-07, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False

Total time consumed by now:0.2403769159991498


Equation discovery for all (chosen) OEIS sequences took 0.24038205500073673 secconds, i.e. 0.0040063675833456125 minutes or 6.67727930557602e-05 hours.
20





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 20
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.0006818939030139091, parse trees = 2, valid = False
-> C0*n + an_1*an_4, p = 6.308755710830424e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.0463158905262614e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_9*n + C1*n + n, p = 9.659458622950824e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_19*an_2, p = 1.4904786786378e-08, parse trees = 1, valid = False
-> C0*an_1**2*an_17 + C1*an_1*n + an_2, p = 1.905860595523951e-09, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> an_1*an_6*n**4, p = 1.2412921257726435e-07, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_32, p = 9.713588362021706e-07, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + C1*n + n, p = 4.185263562105048e-08, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + an_1*n**3, p = 9.884547517193087e-08, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*an_3*n + an_2**2, p = 5.7404851230560846e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**3, p = 1.7323437621448946e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*an_28 + an_2, p = 5.828153017228452e-07, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False

Total time consumed by now:0.24922431400045753


Equation discovery for all (chosen) OEIS sequences took 0.2492299820005428 secconds, i.e. 0.00415383303334238 minutes or 6.923055055570633e-05 hours.
21





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 21
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1*an_2 + C1*n + an_1*an_2*n**2, p = 6.319628740500497e-08, parse trees = 1, valid = False
-> C0*an_1**3*n + an_1, p = 2.8872396035748254e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1**2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**3*an_3 + an_1*an_2*n, p = 1.3200408007027546e-08, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n**2, p = 4.682125417440233e-08, parse trees = 1, valid = False
-> an_8, p = 0.0003529655737704918, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_1**2*n**3, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_2*an_3*an_4, p = 1.566466024430935e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1 + n, p = 1.254427463091625e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_4 + n**2, p = 1.1682880945982269e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_26, p = 2.5154528353339355e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + C2*n + an_1, p = 2.9653642551579244e-07, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1*an_15 + C1*an_2*n + an_1, p = 1.4905034277263547e-08, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_3*an_44*n, p = 2.2359580757860817e-09, parse trees = 1, valid = False

Total time consumed by now:0.2545698400008405


Equation discovery for all (chosen) OEIS sequences took 0.25457573600033356 secconds, i.e. 0.004242928933338893 minutes or 7.071548222231488e-05 hours.
22





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 22
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 26 models
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_49, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1**3*an_25*n**2 + an_3, p = 1.94781056726724e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n**2 + an_40*an_7*n, p = 7.196058407238201e-10, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n**2 + C3*n + n, p = 2.993490020986379e-08, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*n + an_1*an_3, p = 1.5398611219065739e-09, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False

Total time consumed by now:0.23048008699879574


Equation discovery for all (chosen) OEIS sequences took 0.23048551899955783 secconds, i.e. 0.003841425316659297 minutes or 6.402375527765495e-05 hours.
23





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 23
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 35 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004838400000000003, parse trees = 2, valid = False
-> an_1*an_3*n**2, p = 5.450147809728571e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**3*an_9*n + an_1*an_2*n, p = 8.309868046951956e-11, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_6 + n, p = 7.28065573770492e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_3 + an_1, p = 5.017709852366504e-07, parse trees = 1, valid = False
-> C0*an_1*an_9*n + C1*an_1*n**2 + C2*an_1 + C3*an_39 + an_1, p = 3.386663204040796e-14, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**2 + an_2*n**2, p = 4.185263562105047e-08, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + C1*n**2 + n, p = 8.370527124210095e-09, parse trees = 1, valid = False
-> C0*an_1**2*an_26*n + n**2, p = 2.5731845397514377e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**4, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1 + an_45, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + an_2*an_27, p = 1.519304846380981e-06, parse trees = 1, valid = False
-> C0*an_14 + C1*n + an_1*n**2, p = 1.2074847363889034e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 4.45450072131148e-05, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + C2*n**2 + an_1*n**2, p = 1.9638544406800602e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + n, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False

Total time consumed by now:0.27974575299958815


Equation discovery for all (chosen) OEIS sequences took 0.279750989000604 secconds, i.e. 0.0046625164833434 minutes or 7.770860805572333e-05 hours.
24





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 24
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1**4*an_2*n, p = 2.2298535371871152e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_3**2*n + an_1*n, p = 4.950685191314856e-08, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n**2 + n, p = 1.6952139747379761e-06, parse trees = 1, valid = False
-> C0*an_1*an_21*an_39*n + n, p = 3.665505087005154e-10, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> C0*n**2 + an_44*n, p = 1.57377049180328e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_30*n**2 + C3*an_42 + C4*n**4 + an_2*n**2, p = 6.956516882853079e-20, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1 + an_35, p = 1.9298884047563473e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_3*n**2, p = 1.3080354743348581e-06, parse trees = 1, valid = False
-> an_1**2*an_3**2, p = 2.062785496381188e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**3, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False

Total time consumed by now:0.2775013789996592


Equation discovery for all (chosen) OEIS sequences took 0.2775115269996604 secconds, i.e. 0.004625192116661007 minutes or 7.708653527768345e-05 hours.
25





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 25
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 22 models
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n**4 + C1*n + an_1*an_5*n, p = 1.829115186401466e-11, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n**3 + C2*n + an_36, p = 8.58515602483087e-12, parse trees = 1, valid = False
-> an_1*an_2**2*n, p = 3.4321345545809304e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + C2*n + n, p = 2.4022032786885275e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> an_1**2*an_45, p = 5.360801124323184e-06, parse trees = 1, valid = False
-> C0*an_1 + n**4, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_4 + C1*n**2 + n, p = 9.867540983606564e-06, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*n + an_5, p = 1.8106229508196725e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False

Total time consumed by now:0.2345516059995134


Equation discovery for all (chosen) OEIS sequences took 0.23456278499907057 secconds, i.e. 0.0039093797499845095 minutes or 6.51563291664085e-05 hours.
26





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 26
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 30 models
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_45 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*n + n, p = 6.308755710830425e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4*n, p = 6.7224446099012716e-06, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**3*an_2*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_2*n, p = 0.0001668196721311477, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_34, p = 0.000327868852459017, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*n + n, p = 3.901771181200195e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> C0*an_1**2*an_3**2*an_31*n + an_1, p = 1.1530754723120621e-11, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + an_2*an_37, p = 1.9058577240915505e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> an_47, p = 0.0003278688524590164, parse trees = 1, valid = False

Total time consumed by now:0.2207188970005518


Equation discovery for all (chosen) OEIS sequences took 0.22072422400015057 secconds, i.e. 0.0036787370666691763 minutes or 6.131228444448627e-05 hours.
27





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 27
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 27 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1*n**3, p = 1.6365453672333833e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 3.6616621854340286e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_2**2*an_3 + C1*n + an_1, p = 1.462877023264003e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**2 + C2*n + an_33, p = 5.595026896524424e-10, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*an_18*n + C1*an_1 + C2*an_4 + C3*n + an_1*n, p = 3.246719999425368e-13, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**3*an_26*n + C1*an_1 + an_44, p = 2.2990550956317562e-12, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 6.177842198245673e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2*n**3 + an_1, p = 2.1331040042999217e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**3 + C2*n + n, p = 4.804406557377057e-07, parse trees = 1, valid = False

Total time consumed by now:0.2453502970001864


Equation discovery for all (chosen) OEIS sequences took 0.24535593500149844 secconds, i.e. 0.004089265583358307 minutes or 6.815442638930511e-05 hours.
28





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 28
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499343, parse trees = 1, valid = False
-> an_1*an_4*n, p = 8.7621607094867e-05, parse trees = 1, valid = False
-> C0*an_37*n + an_1**2, p = 6.432961349187821e-07, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + n, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_2**2*n + C3*n**2 + an_1**2, p = 1.43643876915292e-11, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_2 + C2*n + an_1*n, p = 4.848502050088908e-09, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_25*n, p = 6.557377049828528e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + an_2, p = 1.6146850162442305e-07, parse trees = 1, valid = False
-> C0*an_41*n**2 + an_6*n**2, p = 2.1218668816626381e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_2, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + an_2, p = 3.976024729897034e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_16*n, p = 2.0123723745271357e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False

Total time consumed by now:0.2474741459991492


Equation discovery for all (chosen) OEIS sequences took 0.24747931300044002 secconds, i.e. 0.004124655216674 minutes or 6.874425361123334e-05 hours.
29





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 29
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*an_7*n, p = 3.030979801128732e-08, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_49, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_2 + C2*an_3 + an_1, p = 1.4865690247914101e-09, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*an_1*an_28*n + C2*n**4 + n, p = 3.3881915095051364e-14, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_34 + an_3, p = 8.966314872697976e-12, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2*n**4, p = 1.706483203439939e-07, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + an_2*n**2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> an_3*an_6*n, p = 1.4366807011257432e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**2 + an_1, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*n + an_2*an_28*n, p = 3.03860969274304e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False

Total time consumed by now:0.25187818499944115


Equation discovery for all (chosen) OEIS sequences took 0.25188387600064743 secconds, i.e. 0.004198064600010791 minutes or 6.996774333351318e-05 hours.
30





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 30
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1*n, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_3*an_38*an_42, p = 1.8082713095605418e-10, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.0900295619457144e-05, parse trees = 1, valid = False
-> C0*an_1*an_37 + C1*an_31 + C2*n + an_1, p = 1.0124004746263533e-11, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + an_1**3*n**2, p = 1.8063755468519417e-06, parse trees = 1, valid = False
-> C0*an_1*an_32*n + C1*an_2 + an_1*an_2*n**3, p = 4.604465384699919e-12, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2 + C2*n + an_1**2, p = 1.255579068631514e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*n, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*an_19 + C1*an_1*n + C2*n + n, p = 9.26346559893003e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_3*an_6*n, p = 4.408961102471137e-09, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False

Total time consumed by now:0.29234208299931197


Equation discovery for all (chosen) OEIS sequences took 0.29235062100087816 secconds, i.e. 0.004872510350014636 minutes or 8.120850583357727e-05 hours.
31





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 31
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*n + an_2, p = 1.2555790686315142e-07, parse trees = 1, valid = False
-> C0*an_10*an_2**2*an_34*n**3 + an_1, p = 1.1007088739217217e-13, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_28, p = 9.442622950844879e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**2, p = 2.104610811771325e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*an_4*n + n, p = 7.469382899890303e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_4*n**2 + n, p = 1.644590163934427e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*n + an_1*an_3*an_9*n, p = 1.4623743682510883e-09, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*an_5 + C1*an_1*n**2 + C2*an_1*n + C3*an_2 + C4*n + n, p = 4.651112438089829e-15, parse trees = 1, valid = False

Total time consumed by now:0.25233584600027825


Equation discovery for all (chosen) OEIS sequences took 0.25234145800095575 secconds, i.e. 0.004205690966682596 minutes or 7.009484944470994e-05 hours.
32





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 32
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 39 models
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + n, p = 9.031877734259707e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**3 + an_1, p = 5.419126640555824e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_5*n + an_1, p = 3.154576603905825e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1**2*n**2 + C2*an_1 + n, p = 1.2588706081267939e-10, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*an_1*n + C2*n**2 + an_2*n, p = 2.928439984669086e-10, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_2, p = 3.344780305780671e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_2*an_3 + C1*an_28*an_3*an_5 + C2*n + an_1*an_2*an_45, p = 1.9268078331463025e-19, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_33 + an_1*n**2, p = 5.922542776563781e-09, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2 + an_1**2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_2**2*an_3, p = 1.588951182676356e-05, parse trees = 1, valid = False
-> an_3*n**4, p = 1.7049180327868867e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*an_3*n, p = 7.576598922376768e-07, parse trees = 1, valid = False
-> an_49*n**5, p = 1.0491803278688537e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*an_4*n**2 + C2*an_1 + C3*an_3 + n, p = 2.6624565583738096e-14, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False

Total time consumed by now:0.28267068400054995


Equation discovery for all (chosen) OEIS sequences took 0.28267605700057175 secconds, i.e. 0.004711267616676196 minutes or 7.852112694460327e-05 hours.
33





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 33
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2*an_17*n + C1*n**2 + C2*n + n, p = 4.446469583756282e-11, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**2 + C1*an_19 + n, p = 1.8004642727704491e-10, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_10*an_2 + an_1, p = 1.2506220477349128e-07, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 5.1970312864346815e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3 + C1*an_1*n**2 + C2*an_1 + C3*n**2 + n, p = 1.094894641734894e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_2*an_4, p = 2.1652498471550865e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> C0*an_16*n + C1*an_34 + an_3*an_32, p = 3.709293109562015e-14, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1, p = 2.0788125145738735e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3, p = 0.00010453562192430208, parse trees = 1, valid = False
-> C0*an_2 + an_11, p = 7.612224082415124e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*an_10 + C1*n + an_1**2*an_2**2*n**3, p = 5.928237550864692e-13, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_2, p = 2.3190669174952997e-06, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + n, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_30 + C1*n + an_1, p = 3.0185434023119327e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n + an_1*n, p = 4.619583365719721e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + n**2, p = 3.1817862295082025e-07, parse trees = 1, valid = False

Total time consumed by now:0.27734888000122737


Equation discovery for all (chosen) OEIS sequences took 0.2773546259995783 secconds, i.e. 0.0046225770999929715 minutes or 7.704295166654952e-05 hours.
34





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 34
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 30 models
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2**2*an_3 + n, p = 1.9067414192116277e-06, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n, p = 1.0514592851384044e-05, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_18 + an_1, p = 2.5154539722203013e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1**2*n**4, p = 1.396368590425607e-11, parse trees = 1, valid = False
-> an_1**2*an_9*n**2, p = 2.1935615523766329e-07, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_11, p = 0.00032854646393442623, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*an_36*n**2, p = 1.6769685568395611e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n + an_41, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*an_36 + C1*an_1 + C2*n + an_1, p = 2.96127138828187e-08, parse trees = 1, valid = False

Total time consumed by now:0.2182879830015736


Equation discovery for all (chosen) OEIS sequences took 0.21829359400180692 secconds, i.e. 0.003638226566696782 minutes or 6.063710944494637e-05 hours.
35





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 35
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2 + n, p = 9.662778822897076e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_39*n + an_1, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**2 + n, p = 9.819272203400294e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_27, p = 3.0185434023380624e-06, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n + C2*an_21 + an_1**2, p = 4.483157491060288e-11, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1**2*an_5, p = 2.0558672311779404e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_39 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + C2*n + an_1, p = 2.27297967671303e-06, parse trees = 1, valid = False
-> C0*an_37*an_40 + an_1, p = 9.163762605680655e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_8, p = 5.4159963450685335e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_2, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_7 + n, p = 4.938295081967214e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1 + C2*n**2 + n, p = 6.021251822839804e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n**4, p = 5.455151224111279e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_31, p = 2.4677261569017355e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_2, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + n, p = 2.128475183532635e-12, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n**2 + C2*an_49 + C3*n**2 + C4*n + an_1, p = 7.5808547540016e-15, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_49, p = 0.0003278688524590164, parse trees = 1, valid = False

Total time consumed by now:0.26626304400087974


Equation discovery for all (chosen) OEIS sequences took 0.2662690659999498 secconds, i.e. 0.00443781776666583 minutes or 7.396362944443051e-05 hours.
36





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 36
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 35 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*an_4*n, p = 2.6461226074233342e-05, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00023544638538027445, parse trees = 2, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + n, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_2*an_42, p = 1.2660873719728871e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_4*n, p = 1.9052082773448003e-06, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> C0*an_3**2 + an_2, p = 2.9230705719046156e-06, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1*an_44 + C1*n + an_1, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1*n, p = 3.270088685837143e-05, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 4.7726793442623e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*an_2**2*n + C2*an_1 + an_1*n, p = 9.38594772606107e-13, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_41*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*an_23*n**2, p = 2.1443204520844615e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + an_1, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_24*n**2 + an_1, p = 1.2621812478802943e-09, parse trees = 1, valid = False

Total time consumed by now:0.27773684800013143


Equation discovery for all (chosen) OEIS sequences took 0.27774284000042826 secconds, i.e. 0.004629047333340471 minutes or 7.715078888900785e-05 hours.
37





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 37
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_9 + an_1, p = 2.5732164364418167e-05, parse trees = 1, valid = False
-> C0*an_17*n**3 + an_3, p = 1.863301203799418e-08, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_22 + an_3, p = 2.3291230041377067e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_16, p = 0.0003278704990549016, parse trees = 1, valid = False
-> C0*an_1*an_20 + n, p = 5.030905875171652e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n + n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + C2*an_28 + C3*n + an_1, p = 1.3722175613495788e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_4*n**2, p = 2.4897942999634357e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + an_1, p = 1.2472875087443242e-06, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_4, p = 2.9207202364955655e-06, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n**3, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n**3, p = 4.147200000000007e-06, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_1**2*n**5, p = 5.650713249126589e-07, parse trees = 1, valid = False
-> C0*an_2**2*n**3 + C1*n**3 + n**2, p = 1.236835689330828e-09, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099032e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1**2*an_44, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_3*n, p = 2.673370003310022e-06, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False

Total time consumed by now:0.26088102200083085


Equation discovery for all (chosen) OEIS sequences took 0.2608864670000912 secconds, i.e. 0.004348107783334854 minutes or 7.24684630555809e-05 hours.
38





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 38
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*an_1**3*an_2*n**2 + an_1, p = 2.2298535371871152e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*n, p = 1.4126783122816472e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n**2, p = 9.03187773425971e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.5551733404998704e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.70892770760549e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3, p = 0.00010453562192430208, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**4 + n, p = 4.213085827000335e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_30*n + C1*an_1 + an_1*an_2*n, p = 3.811715448184018e-10, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1**2*n**2, p = 1.3858750097159167e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False

Total time consumed by now:0.24583323400111112


Equation discovery for all (chosen) OEIS sequences took 0.24583902500125987 secconds, i.e. 0.004097317083354331 minutes or 6.828861805590552e-05 hours.
39





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 39
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_23*n + C2*an_4*n**2 + C3*n + an_1, p = 1.2620764150284965e-15, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1*an_32*n, p = 8.384842784197981e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_41 + n, p = 6.037086804622417e-07, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0011772319269013718, parse trees = 2, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 1.0394062572869367e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_2 + an_2*n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_3*an_4*n, p = 8.113111768043239e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1**2 + C2*an_49 + an_3*n, p = 8.966314872697957e-12, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False

Total time consumed by now:0.24329286399915873


Equation discovery for all (chosen) OEIS sequences took 0.2432995529998152 secconds, i.e. 0.00405499254999692 minutes or 6.758320916661534e-05 hours.
40





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 40
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_5, p = 0.00016077936038699274, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_3*n + n**2, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + an_12*n, p = 1.07995676973922e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*an_3 + C3*n**2 + n, p = 1.0910302448222555e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1 + an_1*an_2, p = 1.2916091526876182e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**2*an_34*n**5 + n, p = 2.400618704843499e-12, parse trees = 1, valid = False
-> C0*an_44*n + an_2, p = 1.5193048463674647e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*n**2 + n, p = 2.0926317810525234e-07, parse trees = 1, valid = False
-> C0*an_1**2 + an_8, p = 3.462686187830701e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**4 + n, p = 0.00017280000000000024, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n**2 + an_29, p = 7.868852459022698e-06, parse trees = 1, valid = False
-> an_43*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*an_1 + C3*n**2 + n, p = 9.632967280648337e-09, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n + an_4*n, p = 1.3444889219802553e-06, parse trees = 1, valid = False
-> C0*an_18*an_2**2 + C1*n + n, p = 7.04027919153515e-09, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False

Total time consumed by now:0.26333648200125026


Equation discovery for all (chosen) OEIS sequences took 0.26334319400120876 secconds, i.e. 0.004389053233353479 minutes or 7.315088722255798e-05 hours.
41





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 41
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1*n**2 + C1*n + an_1*n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_2*an_49*n + n, p = 3.885435344808601e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + n, p = 1.235568439649135e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2 + an_2, p = 4.942273758596542e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + n, p = 4.0913634180834555e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**3*n**2, p = 2.6011807874667982e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_14*n**2 + C1*an_2*n + n, p = 9.325565177211207e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2*n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_2, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2**2*an_3*an_43, p = 5.78852889863882e-09, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_19 + an_1, p = 2.4677264915182436e-07, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1*an_2*n, p = 1.61468501624423e-07, parse trees = 1, valid = False
-> an_21*n, p = 6.557377129204888e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*an_47 + n, p = 3.018543402311208e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False

Total time consumed by now:0.25953583999944385


Equation discovery for all (chosen) OEIS sequences took 0.25954164899849275 secconds, i.e. 0.0043256941499748795 minutes or 7.209490249958133e-05 hours.
42





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 42
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 37 models
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*an_1*an_12*n + an_1*n, p = 1.287389975700452e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n, p = 9.788977848793952e-11, parse trees = 1, valid = False
-> C0*an_1**3*an_2 + C1*an_1 + an_2, p = 1.291609152687618e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + n**3, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_10, p = 1.0131127662456337e-06, parse trees = 1, valid = False
-> an_39*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1**2*an_4*n, p = 1.1204074349835457e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*n + an_1*n**3, p = 5.35164848924908e-09, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n, p = 7.533474411789082e-08, parse trees = 1, valid = False
-> C0*an_4*n**2 + n, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_42 + C1*an_9*n + C2*n + an_8, p = 4.1402020099115503e-13, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.5876735644540003e-05, parse trees = 1, valid = False

Total time consumed by now:0.27913388300112274


Equation discovery for all (chosen) OEIS sequences took 0.2791394569994736 secconds, i.e. 0.00465232428332456 minutes or 7.753873805540934e-05 hours.
43





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 43
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*n + an_18*an_2, p = 1.519305533078929e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_26*n, p = 6.432961349378593e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_12*an_48, p = 1.195162608020544e-07, parse trees = 1, valid = False
-> C0*an_4 + an_1*n, p = 5.2572964256920205e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + an_1*n, p = 2.673370003310022e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 2.4548180508500734e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_47, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2*an_3*an_38 + an_2, p = 3.4731173391832917e-09, parse trees = 1, valid = False
-> an_1*an_41, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099035e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2*n + an_1, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.00021190174684224692, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n**2 + C1*n + an_1**2, p = 1.0490588401056613e-09, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + C2*n + n, p = 5.3731386503716244e-08, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*an_34 + an_1, p = 3.2164806745939162e-06, parse trees = 1, valid = False

Total time consumed by now:0.2420555160006188


Equation discovery for all (chosen) OEIS sequences took 0.24206180600049265 secconds, i.e. 0.004034363433341544 minutes or 6.72393905556924e-05 hours.
44





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 44
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 30 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1, p = 4.0913634180834555e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1**2*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_1**3*an_2*n**2, p = 6.975439270175079e-08, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**3*an_2*an_3*n + C1*an_1**2*n**2 + C2*n + n, p = 9.722425097372696e-13, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_18, p = 2.978224192974856e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> C0*an_3 + an_1*an_2, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**4, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_34*n + C1*n**2 + n, p = 1.8885245901639395e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False

Total time consumed by now:0.23531097900013265


Equation discovery for all (chosen) OEIS sequences took 0.2353167900000699 secconds, i.e. 0.0039219465000011645 minutes or 6.536577500001941e-05 hours.
45





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 45
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_39, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_36 + C1*an_3 + n, p = 1.7646830778625469e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_14*n, p = 6.557742959377051e-05, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**4, p = 8.418443247085307e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n + an_2, p = 6.0055081967213155e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_19 + C3*n + n, p = 1.0731446486192163e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_40*n, p = 1.1656306034425799e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_37 + an_1, p = 2.515452835259339e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**4 + an_1*an_3, p = 2.007083940946603e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*n + an_6, p = 7.280655737704919e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False

Total time consumed by now:0.23827751999851898


Equation discovery for all (chosen) OEIS sequences took 0.23828305600000022 secconds, i.e. 0.00397138426666667 minutes or 6.618973777777783e-05 hours.
46





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 46
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 28 models
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**4 + n, p = 1.0238899220639635e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.00021190174684224692, parse trees = 1, valid = False
-> C0*an_2 + C1*an_47*n**2 + C2*n + an_1, p = 2.797513448262193e-09, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_49 + an_1*n**2, p = 2.9809569530662715e-09, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_3*n**2 + C1*n + an_1**3*n, p = 1.2832176015888118e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 3.138947671578783e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False

Total time consumed by now:0.23255975600113743


Equation discovery for all (chosen) OEIS sequences took 0.23256559100082086 secconds, i.e. 0.0038760931833470144 minutes or 6.460155305578357e-05 hours.
47





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 47
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_3 + C2*n**2 + n**2, p = 2.8441386723998964e-08, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*n + an_1*n, p = 9.978300069954606e-09, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_31*n**2 + an_4*n, p = 5.877547199914108e-11, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_9 + an_1*n, p = 5.146432872883636e-06, parse trees = 1, valid = False
-> C0*an_1*an_19 + C1*an_1*n + C2*an_2 + n, p = 1.7885744143653609e-09, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n, p = 1.3257442622950836e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*an_12*an_3*n**2, p = 2.5403870194453366e-09, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_13, p = 0.00032792983749180325, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False

Total time consumed by now:0.23719548499866505


Equation discovery for all (chosen) OEIS sequences took 0.23720105400025204 secconds, i.e. 0.003953350900004201 minutes or 6.588918166673667e-05 hours.
48





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 48
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + C2*n + an_1, p = 2.3097916828598608e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_3 + C2*n**2 + an_1, p = 6.021251822839804e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + an_1*n, p = 1.3005903937333988e-07, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_1**2*an_3*an_43*n, p = 1.269406459311501e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_26 + C2*n + n, p = 7.244504165761739e-08, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3*n + C2*n + an_2, p = 5.3822833874807645e-09, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_3, p = 3.068852459016395e-05, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*an_3, p = 2.6733700033100223e-06, parse trees = 1, valid = False
-> an_24*n, p = 6.557377051340992e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_5*n + n, p = 2.3152227895726966e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**4*an_37, p = 8.765147551836137e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_22*n + C2*an_2 + C3*n + an_1**2*an_2*n, p = 1.7327903557706194e-14, parse trees = 1, valid = False
-> C0*n + an_22, p = 3.9344262439126184e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*an_7 + an_1*an_48, p = 1.1501896634520071e-08, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False

Total time consumed by now:0.2680793960007577


Equation discovery for all (chosen) OEIS sequences took 0.2680849139997008 secconds, i.e. 0.004468081899995013 minutes or 7.446803166658356e-05 hours.
49





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 49
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 38 models
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> C0*n + an_1*an_2**2*an_3*an_39, p = 8.882070572337603e-11, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + C2*n + an_1*an_2*n, p = 1.8183837413704256e-08, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_45*n**2, p = 9.870904627606235e-09, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*n**4 + an_1**2*an_2*n**2, p = 2.182060489644513e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_32, p = 1.2865922698375927e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4, p = 3.361222304950635e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 1.1783126644080364e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + an_2, p = 1.1375331732900894e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + an_2, p = 3.1598143702502487e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_2 + an_2*n**2, p = 7.369768242519539e-10, parse trees = 1, valid = False
-> an_6*n**5, p = 1.9415081967213145e-07, parse trees = 1, valid = False
-> an_2*an_43, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n**4 + n, p = 1.272327913567052e-09, parse trees = 1, valid = False
-> an_19*an_2, p = 1.2660875436507529e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_13*an_2*an_3*n**2 + C1*an_2 + C2*n + an_2, p = 3.8632804252993365e-13, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n**3 + n, p = 2.13869600264802e-08, parse trees = 1, valid = False
-> C0*an_4*an_5 + C1*n + an_1, p = 4.4069359109352775e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*n + n, p = 1.017128384842786e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3*an_42*n + C1*n**3 + n**2, p = 1.4623562411268506e-12, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False

Total time consumed by now:0.3065920270000788


Equation discovery for all (chosen) OEIS sequences took 0.30659757800094667 secconds, i.e. 0.005109959633349111 minutes or 8.516599388915185e-05 hours.
50





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 50
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 1.841311475409837e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165044e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*an_2 + C4*an_5*n + C5*n + an_2*n, p = 1.1299984984002968e-14, parse trees = 1, valid = False
-> C0*an_18*n**3 + an_1, p = 2.0123631777762424e-07, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 3.0513851545283554e-05, parse trees = 2, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1*an_4*n**3 + C1*an_1*n + an_1, p = 4.126038134339409e-09, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000007e-05, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.555173340499869e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2**2, p = 1.2916091526876182e-07, parse trees = 1, valid = False
-> C0*an_4 + an_1*an_3**2, p = 3.684804861056993e-08, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1**2*an_4*n**2 + C1*n + an_2*n, p = 1.246040006381702e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_29 + C1*n + n**3, p = 2.2662295081985387e-08, parse trees = 1, valid = False
-> C0*an_2 + an_5, p = 2.9132670429096125e-05, parse trees = 1, valid = False
-> C0*n + an_30, p = 3.934426229509143e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False

Total time consumed by now:0.25892311700044957


Equation discovery for all (chosen) OEIS sequences took 0.25892887100053485 secconds, i.e. 0.004315481183342248 minutes or 7.192468638903746e-05 hours.
51





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 51
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n**3, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1*n**2 + an_1*n**2, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1**4*an_2*n**2, p = 1.0332873221500954e-09, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*an_5*n, p = 3.215587207739856e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2*an_37*n**2, p = 5.06434948789155e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_16, p = 0.0003278704990549016, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n + C2*an_1 + C3*n + n, p = 2.771750019431832e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.708927707605491e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_15*n**2, p = 1.3114973644478696e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_2*an_3**2*n**2, p = 1.9487137146030782e-07, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165045e-05, parse trees = 1, valid = False
-> C0*an_32*n**2 + an_2*n**2, p = 1.2154438770939989e-08, parse trees = 1, valid = False

Total time consumed by now:0.24005972399936581


Equation discovery for all (chosen) OEIS sequences took 0.24006505699981062 secconds, i.e. 0.004001084283330177 minutes or 6.668473805550294e-05 hours.
52





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 52
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 25 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1 + an_17, p = 2.5154566251292126e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.00012714104810534812, parse trees = 1, valid = False
-> C0*an_2 + C1*an_5*n**2 + n**2, p = 2.796736361193231e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_44*n, p = 6.432961349187823e-07, parse trees = 1, valid = False
-> C0*n + an_2**2, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*an_1**2 + C2*an_1*n**3 + C3*an_16*an_4*n + C4*an_16*n + n**3, p = 2.3897346652047186e-23, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_45*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_4*an_5*n**3 + C1*n + an_1, p = 2.225972391585049e-13, parse trees = 1, valid = False

Total time consumed by now:0.22366271899954882


Equation discovery for all (chosen) OEIS sequences took 0.22366809399863996 secconds, i.e. 0.0037278015666439993 minutes or 6.213002611073332e-05 hours.
53





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 53
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**3*an_2*n**2, p = 2.906433029239615e-06, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + n, p = 0.021911040000000007, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n**2 + n, p = 1.96385444068006e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1**2*an_18 + C1*an_1 + n, p = 4.935454544581023e-08, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.0028043475624832054, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_2 + an_1*an_2, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> an_3**2*an_9, p = 4.701563683934822e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_38*n, p = 6.3109062373220204e-09, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_2*n, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2*n, p = 9.819272203400299e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + an_1, p = 1.8063755468519428e-06, parse trees = 1, valid = False

Total time consumed by now:0.23924835999969218


Equation discovery for all (chosen) OEIS sequences took 0.23925409100047546 secconds, i.e. 0.0039875681833412575 minutes or 6.64594697223543e-05 hours.
54





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 54
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> an_15*n, p = 6.557486822239345e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_46*n**2 + an_1, p = 1.006181134103736e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_6*n + an_1**3*an_40*n**3, p = 5.672535272453873e-14, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2**2*an_4, p = 5.109089187374743e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_37*n**2 + n**2, p = 3.7053857371321887e-10, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782576, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_4, p = 9.73573412165189e-07, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000005e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1**3*n, p = 5.346740006620047e-07, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 3.97723278688525e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_21*n**2 + an_2, p = 3.0386097298173496e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_9*n**2 + C2*n**2 + an_1, p = 1.895237181253411e-09, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 5.1970312864346815e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*n**3 + an_1*n**2, p = 2.2095737704918068e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + an_1*n, p = 6.502951968666991e-07, parse trees = 1, valid = False

Total time consumed by now:0.30249937100052193


Equation discovery for all (chosen) OEIS sequences took 0.30250973800139036 secconds, i.e. 0.005041828966689839 minutes or 8.403048277816398e-05 hours.
55





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 55
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_34, p = 0.000327868852459017, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**3 + C1*n + an_1*an_2, p = 5.946276099165643e-11, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n**3 + C4*n + an_2*n, p = 8.035706039241699e-13, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1*an_4*n, p = 1.0315095335848518e-07, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 2.5428209621069635e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1*an_2, p = 1.2555790686315142e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + an_1*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> C0*an_39*n + an_1*n, p = 1.0061811341037363e-06, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_32, p = 3.934426229508283e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*an_49*n**3, p = 3.3539371136791226e-07, parse trees = 1, valid = False
-> C0*n**4 + C1*n + an_2*an_3*n**2, p = 1.8960924482665994e-09, parse trees = 1, valid = False
-> C0*an_29 + n, p = 3.934426229511348e-05, parse trees = 1, valid = False

Total time consumed by now:0.25492549800037523


Equation discovery for all (chosen) OEIS sequences took 0.2549308160014334 secconds, i.e. 0.004248846933357224 minutes or 7.081411555595373e-05 hours.
56





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 56
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 6.818939030139095e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_39 + an_1, p = 4.112876928169263e-07, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.003513222295081969, parse trees = 3, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1 + C1*an_45 + n, p = 3.018543402311208e-06, parse trees = 1, valid = False
-> C0*an_2 + an_2, p = 1.8656731424901463e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n**5 + n, p = 3.4560000000000055e-05, parse trees = 1, valid = False
-> C0*an_2*an_26*n + n, p = 3.03860969282504e-07, parse trees = 1, valid = False
-> C0*an_2 + an_2*n**2, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + C1*an_29 + an_1**2*an_37*n**2, p = 3.595957969986938e-12, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2 + an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_27 + an_1, p = 3.4305439033953084e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + n, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**3 + C2*n + n, p = 1.5908931147541013e-06, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_34*n, p = 6.55737704918034e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n, p = 4.7726793442622995e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1, p = 7.679174415479718e-06, parse trees = 1, valid = False

Total time consumed by now:0.25449658499928773


Equation discovery for all (chosen) OEIS sequences took 0.2545035969997116 secconds, i.e. 0.00424172661666186 minutes or 7.069544361103099e-05 hours.
57





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 57
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*n**2 + an_1**2, p = 0.0003531695780704115, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_6, p = 6.702977479172269e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1*an_2**2, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + n, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1**3*an_2*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> C0*an_2**2*n + an_1*n, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_2, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_4, p = 5.257296425692019e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + C1*an_31 + n, p = 3.0185434023114253e-06, parse trees = 1, valid = False
-> C0*an_1*an_4*n + an_3, p = 6.224485749908586e-07, parse trees = 1, valid = False
-> an_8*n, p = 7.059311475409836e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_2*an_4*n**2, p = 6.767133225541645e-07, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_3*n + an_1*an_3, p = 3.516880190551536e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_24*n, p = 8.384842786960616e-06, parse trees = 1, valid = False

Total time consumed by now:0.24362746399856405


Equation discovery for all (chosen) OEIS sequences took 0.2436330740001722 secconds, i.e. 0.004060551233336204 minutes or 6.767585388893672e-05 hours.
58





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 58
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_15 + n**2, p = 7.868984186687217e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n**2 + n**2, p = 6.780855898951909e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + n**2, p = 3.336393442622954e-05, parse trees = 1, valid = False
-> C0*an_15 + an_3**2*n, p = 5.515319821227117e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**3 + an_3*an_36*n**2, p = 7.45319358595361e-10, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.70892770760549e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_3, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3*n + an_1, p = 3.7882994611883842e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + n, p = 6.277895343157568e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n + n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> C0*an_18*n + C1*n + n, p = 9.442627218796213e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n**3, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_5*n**2 + an_1*n, p = 3.5761546913618382e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n + C2*n + n, p = 3.071669766191889e-07, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False

Total time consumed by now:0.2610986409999896


Equation discovery for all (chosen) OEIS sequences took 0.26110407300075167 secconds, i.e. 0.004351734550012528 minutes or 7.252890916687546e-05 hours.
59





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 59
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*an_8 + C1*an_1*n + C2*an_1 + n**2, p = 1.2751767626791627e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_1*n, p = 3.55843710618951e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*an_42*n + n, p = 3.8854353448086e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3 + C3*an_45 + C4*n + n, p = 3.6350819926974846e-13, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_3**2, p = 0.000126160828928902, parse trees = 1, valid = False
-> C0*n + n, p = 0.0003110400000000003, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_4*n + C2*n + an_1, p = 1.4853737283621872e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_1*an_3, p = 4.84405504873269e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_11 + C2*n + n, p = 5.569565570123857e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1*n, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1*n, p = 5.419126640555825e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748776, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False

Total time consumed by now:0.24211233599999105


Equation discovery for all (chosen) OEIS sequences took 0.2421178710010281 secconds, i.e. 0.004035297850017135 minutes or 6.725496416695225e-05 hours.
60





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 60
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*an_1 + C1*an_2*n + C2*an_6 + an_1*an_2*an_41*n**3, p = 1.8624181845654677e-15, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + an_1, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2*an_29*an_44 + an_1**2*n, p = 9.049656809558771e-12, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n**3 + C2*n + an_1, p = 2.6011807874667976e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_4, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_49*n + an_2*n, p = 3.03860969273493e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2*n + an_2*an_3*n, p = 2.4863906806395754e-14, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_7 + n, p = 4.938295081967214e-05, parse trees = 1, valid = False
-> an_1**2*an_3*n**2, p = 6.969041461620142e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0035316957807041147, parse trees = 2, valid = False
-> C0*an_42*n + C1*n + an_1, p = 6.037086804622417e-07, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*an_1 + n**2, p = 3.390427949475954e-07, parse trees = 1, valid = False
-> C0*an_38 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n + an_2**3*n**2, p = 2.487564189986863e-07, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_2 + C1*an_4 + C2*n + an_1, p = 7.308503883584974e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1**3*an_2*n, p = 3.0998619664502855e-09, parse trees = 1, valid = False
-> C0*an_48 + C1*n**3 + C2*n**2 + C3*n + an_1, p = 8.345668798710039e-12, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False

Total time consumed by now:0.2863636390011379


Equation discovery for all (chosen) OEIS sequences took 0.286369787001604 secconds, i.e. 0.004772829783360066 minutes or 7.95471630560011e-05 hours.
61





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 61
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 35 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.001856041967213116, parse trees = 2, valid = False
-> C0*an_1**2*an_3*n + an_1*an_2, p = 1.0323396005495902e-07, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + C1*an_1*an_2*n + C2*n**2 + an_1*n, p = 1.642341962602342e-11, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*an_17, p = 4.192427708548688e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*an_32 + n, p = 1.9427176724043418e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + C1*n + an_1*n, p = 1.5398611219065743e-09, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_30*an_31, p = 1.1944220490313982e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + n, p = 1.96385444068006e-07, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**3 + n**3, p = 2.7901757080700335e-09, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0011364898383565154, parse trees = 2, valid = False
-> C0*an_32 + an_1**2, p = 3.2164806745939793e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_3*n, p = 1.9750963002777045e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_3, p = 3.0106259114199025e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + n**3, p = 6.363572459016406e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n**2, p = 1.4826821275789621e-06, parse trees = 1, valid = False
-> an_1*an_2*an_9, p = 1.656107724728796e-06, parse trees = 1, valid = False
-> C0*n**3 + an_1**2, p = 7.063391561408233e-05, parse trees = 1, valid = False

Total time consumed by now:0.26526744999864604


Equation discovery for all (chosen) OEIS sequences took 0.26527325099959853 secconds, i.e. 0.004421220849993309 minutes or 7.368701416655515e-05 hours.
62





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 62
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*an_49*n + an_1*an_2, p = 1.4904784765331353e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_47 + an_2*n**2, p = 4.317150383120667e-10, parse trees = 1, valid = False
-> C0*an_2*an_45*n + an_1**2, p = 2.4841307942218922e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
-> C0*an_27*n + an_2, p = 1.519304846380981e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_21 + n, p = 1.8231658378904094e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 0.00013547816601389552, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**3 + an_1**2, p = 2.1676506562223312e-07, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False

Total time consumed by now:0.2421334629998455


Equation discovery for all (chosen) OEIS sequences took 0.2421387459999096 secconds, i.e. 0.00403564576666516 minutes or 6.726076277775267e-05 hours.
63





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 63
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**2*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.0006773908300694775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + an_2*n**2, p = 1.2843956374197794e-10, parse trees = 1, valid = False
-> C0*an_1**2*an_23*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + an_1*n, p = 3.7999555726982656e-14, parse trees = 1, valid = False
-> an_20*n**2, p = 1.3114754631857728e-05, parse trees = 1, valid = False
-> an_20*n, p = 6.557377315928862e-05, parse trees = 1, valid = False
-> C0*an_49*n + an_1**2, p = 6.432961349187821e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_8*n + an_1, p = 1.6620893701587377e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_34*n, p = 6.55737704918034e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_1, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False

Total time consumed by now:0.22831512700031453


Equation discovery for all (chosen) OEIS sequences took 0.22832087700044212 secconds, i.e. 0.003805347950007369 minutes or 6.342246583345615e-05 hours.
64





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 64
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*an_2*n + C3*n + n**2, p = 9.426501315264295e-10, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1*an_15*n, p = 1.006197977969841e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + C2*an_2*n + an_1, p = 4.848502050088909e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1*n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_45, p = 1.2865922698375647e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + C2*n + n, p = 2.354463853802744e-06, parse trees = 1, valid = False
-> C0*an_7*n + C1*n + an_1, p = 7.577449502821825e-07, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*an_22*n, p = 8.38484281489575e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False

Total time consumed by now:0.25652311600060784


Equation discovery for all (chosen) OEIS sequences took 0.25652927700139116 secconds, i.e. 0.004275487950023186 minutes or 7.125813250038644e-05 hours.
65





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 65
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1*n**2 + C1*an_1 + C2*n + n, p = 5.618550500928283e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_1, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_45, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_2, p = 0.00016104631371495132, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*an_2, p = 6.319628740500498e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0007063391561408232, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + an_1**2, p = 1.7323437621448946e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_18*n + C1*n + an_1*n**3, p = 4.829671626662985e-09, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_37*n**4, p = 5.245901639344268e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130316e-05, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> an_20*n, p = 6.557377315928862e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_5 + an_1**2*an_3*n, p = 2.920904262875764e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**3 + an_16, p = 1.5737783954635288e-06, parse trees = 1, valid = False
-> C0*an_4 + C1*n + n**2, p = 1.1841049180327874e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_2, p = 2.7828803009943604e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 0.00031996560064498814, parse trees = 1, valid = False

Total time consumed by now:0.24939689900020312


Equation discovery for all (chosen) OEIS sequences took 0.24940208999942115 secconds, i.e. 0.0041567014999903526 minutes or 6.927835833317254e-05 hours.
66





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 66
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1 + C1*n**2 + an_1**2, p = 2.078812514573874e-06, parse trees = 1, valid = False
-> C0*an_3*n + an_3*n**6, p = 9.689151661739691e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1**2, p = 2.0788125145738735e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2*n**2, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> C0*an_1**3 + C1*n + an_3, p = 1.604022001986013e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_2*an_40, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> C0*an_1**4*n + C1*n + n, p = 6.929375048579581e-07, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> an_35*n, p = 6.557377049180334e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_22*an_3 + C1*n**2 + an_1*an_4, p = 2.7210866765889396e-11, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_2 + an_1**2*n**3, p = 5.351648489249079e-09, parse trees = 1, valid = False
-> an_38*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False

Total time consumed by now:0.24061238600006618


Equation discovery for all (chosen) OEIS sequences took 0.2406183390012302 secconds, i.e. 0.004010305650020503 minutes or 6.683842750034173e-05 hours.
67





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 67
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_4*n**3 + C1*an_1*an_4 + C2*n + an_1*n, p = 1.8849004810424845e-12, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1*n**2 + an_46, p = 7.896723702084995e-11, parse trees = 1, valid = False
-> an_1*an_11*n**3, p = 3.360868745821019e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_14 + C1*an_3**2*an_47 + n, p = 1.2055814756396067e-12, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1*an_37 + C2*an_1*an_41 + C3*an_1 + an_1, p = 1.2530190093531141e-15, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_12, p = 3.0204149429895193e-06, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_43*n, p = 1.0061811341037363e-06, parse trees = 1, valid = False
-> an_1**2*an_4*n**2, p = 2.240814869967092e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8 + C2*n + an_2, p = 9.034947345478262e-09, parse trees = 1, valid = False
-> C0*an_1**5*an_6 + C1*an_1*n + C2*an_1 + C3*n + an_1, p = 2.2478761754314614e-13, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n**2, p = 1.3092362937867085e-08, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_13 + C1*an_2*an_3 + C2*an_2*n + an_2, p = 9.65820106324834e-12, parse trees = 1, valid = False

Total time consumed by now:0.3331301939997502


Equation discovery for all (chosen) OEIS sequences took 0.3331361789987568 secconds, i.e. 0.00555226964997928 minutes or 9.253782749965467e-05 hours.
68





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 68
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> C0*an_1 + C1*an_2*an_3 + n, p = 3.788299461188384e-06, parse trees = 1, valid = False
-> an_1**2*an_34*n**2, p = 2.1443204497292788e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**3*an_40*n**2, p = 2.7419179521128448e-08, parse trees = 1, valid = False
-> C0*an_46 + an_1*an_2, p = 9.713588362021496e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2, p = 1.5066948823578173e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1*an_2, p = 1.1783126644080364e-07, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*an_2**2*n**2, p = 4.213085827000333e-09, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3 + n**2, p = 2.3230138205400464e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n, p = 8.3152500582955e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> an_2**2*an_32*n, p = 9.778161124162406e-08, parse trees = 1, valid = False
-> C0*an_34 + C1*n + an_1**3, p = 4.935452313803125e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*n**2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + n, p = 1.017128384842786e-06, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_28*n + an_1, p = 5.030905670532107e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + n, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
C0*an_1 + C1*an_2*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_34*n**2 <class 'ProGED.model.Model'>
an_1**2*an_34*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**3*an_40*n**2 <class 'ProGED.model.Model'>
an_1**3*an_40*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_40, an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_46 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_46 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_46, an_1*an_2)
<class 'tuple'> (C0*an_46, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_2, C2*n, an_1*n**2)
<class 'tuple'> (C0*an_1**2, C1*an_2, C2*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1**2*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1**2*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1**2*an_2**2*n**2)
<class 'tuple'> (C0*n**3, an_1**2*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C0*an_1*an_3)
<class 'tuple'> (n**2, C1*an_3, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, an_1*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (C2*an_1, an_1*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*an_32*n <class 'ProGED.model.Model'>
an_2**2*an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_34 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_34 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_34, C1*n)
<class 'tuple'> (an_1**3, C0*an_34, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n**3)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_28*n + an_1 <class 'ProGED.model.Model'>
C0*an_28*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_28*n)
<class 'tuple'> (an_1, C0*an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n**3)
<class 'tuple'> (n, C1*an_1, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.3429268569998385


Equation discovery for all (chosen) OEIS sequences took 0.3429374219995225 secconds, i.e. 0.005715623699992041 minutes or 9.526039499986736e-05 hours.
69





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 69
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_1**3 + an_1, p = 0.00014436198017874117, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_36 + n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2, p = 1.0002577937144514e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1, p = 3.76673720589454e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n + an_1, p = 1.6365453672333828e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_2 + an_2**2*n, p = 6.218910474967155e-06, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_3*n + an_1*an_2*n, p = 1.2627664870627953e-06, parse trees = 1, valid = False
-> an_1**2*an_2*an_4*n**2, p = 8.653055599872928e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> an_1*an_7*n**2, p = 2.104847084117174e-06, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
C0*an_1**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3)
<class 'tuple'> (an_1, C0*an_1**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_36 + n <class 'ProGED.model.Model'>
C0*an_1*an_36 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_36)
<class 'tuple'> (n, C0*an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n, C1*an_26*n, C2*an_3*n)
<class 'tuple'> (an_2, C0*an_2*n, C1*an_26*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C2*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_2**2*n <class 'ProGED.model.Model'>
C0*an_2 + an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2**2*n)
<class 'tuple'> (C0*an_2, an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3*n, an_1*an_2*n)
<class 'tuple'> (C0*an_3*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*an_4*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_7*n**2 <class 'ProGED.model.Model'>
an_1*an_7*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_7, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.266716356998586


Equation discovery for all (chosen) OEIS sequences took 0.26673988299990015 secconds, i.e. 0.004445664716665003 minutes or 7.40944119444167e-05 hours.
70





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 70
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_3*n**2 + C1*n**2 + n, p = 1.2275409836065588e-06, parse trees = 1, valid = False
-> C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41, p = 5.4833804296425185e-15, parse trees = 1, valid = False
-> C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1, p = 1.4424013004980718e-11, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2, p = 1.3458079971324725e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1**2 + an_1**2*n**2, p = 5.7744792071496496e-06, parse trees = 1, valid = False
-> C0*n + an_5*n, p = 3.017704918032788e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**3*an_26*an_31*n**2 + an_1**2*n, p = 1.959850245456722e-14, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + an_1, p = 1.0838253281111655e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_2*n**3, p = 3.336393442622954e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34, p = 1.3886030946084935e-13, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*n, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_36, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n, p = 3.444291073833651e-11, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**4*an_2*n, p = 1.8582112809892628e-06, parse trees = 1, valid = False
-> C0*an_1 + an_12*n, p = 5.034024904982534e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_31*n + C1*n + an_1, p = 6.037086804622851e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 8.128689960833731e-05, parse trees = 1, valid = False
-> an_1*an_6*n, p = 1.551615157215803e-05, parse trees = 1, valid = False
-> C0*an_1 + an_42*n**2, p = 1.006181134103736e-06, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_3*n**2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_3*n**2)
<class 'tuple'> (n, C1*n**2, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41 <class 'ProGED.model.Model'>
C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, C0*an_2**2*n**4, an_1*an_4*an_41)
<class 'tuple'> (C1*n**2, C0*an_2**2*n**4, an_1*an_4*an_41)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C0*an_1*an_12, C1*an_1*an_4*n)
<class 'tuple'> (an_1, C2*an_1, C0*an_1*an_12, C1*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*an_5, C3*n, an_1**3*n**2)
<class 'tuple'> (C0*an_1, C1*an_2, C2*an_5, C3*n, an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1**2*n**2)
<class 'tuple'> (C0*an_1**2, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_5*n <class 'ProGED.model.Model'>
C0*n + an_5*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_5*n)
<class 'tuple'> (C0*n, an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**3*an_26*an_31*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**3*an_26*an_31*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1**3*an_26*an_31*n**2)
<class 'tuple'> (an_1**2*n, C0*an_1**3*an_26*an_31*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**3, C1*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n**3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**3)
<class 'tuple'> (C0*n, an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_21, an_1**2*an_34, C0*an_1*an_2*n**2)
<class 'tuple'> (C1*an_21, an_1**2*an_34, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1**2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_36 <class 'ProGED.model.Model'>
C0*n + an_1*an_36 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_36)
<class 'tuple'> (C0*n, an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_3, C3*n**2, an_1*n, C0*an_1*an_2**2)
<class 'tuple'> (C1*an_1, C2*an_3, C3*n**2, an_1*n, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4*an_2*n <class 'ProGED.model.Model'>
an_1**4*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_12*n <class 'ProGED.model.Model'>
C0*an_1 + an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_12*n)
<class 'tuple'> (C0*an_1, an_12*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_31*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_31*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_31*n)
<class 'tuple'> (an_1, C1*n, C0*an_31*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_6*n <class 'ProGED.model.Model'>
an_1*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_6, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_42*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_42*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_42*n**2)
<class 'tuple'> (C0*an_1, an_42*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.348558077999769


Equation discovery for all (chosen) OEIS sequences took 0.3485636549994524 secconds, i.e. 0.005809394249990873 minutes or 9.682323749984789e-05 hours.
71





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 71
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*an_1*n + C1*an_2 + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_18 + C1*n + an_23*n, p = 1.7199685299029869e-09, parse trees = 1, valid = False
-> C0*an_1*an_30 + C1*n + n, p = 6.037086804623869e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_41, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_47*n**3, p = 3.3539371136791215e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_16*n, p = 6.31093793143436e-09, parse trees = 1, valid = False
-> C0*an_1*an_6 + n, p = 9.309690943294816e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_4 + C1*n**2 + C2*n + n, p = 1.1841049180327879e-06, parse trees = 1, valid = False
-> an_2*an_6, p = 2.3428946818358274e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1**2 + an_1**2, p = 1.1329835473141143e-08, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*an_2**2*n, p = 4.38863106979201e-06, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_2*n**2 + an_1, p = 1.7107728777107703e-08, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
C0*an_1*n + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_18 + C1*n + an_23*n <class 'ProGED.model.Model'>
C0*an_18 + C1*n + an_23*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18, C1*n, an_23*n)
<class 'tuple'> (C0*an_18, C1*n, an_23*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_30 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_30 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_30)
<class 'tuple'> (n, C1*n, C0*an_1*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_41 <class 'ProGED.model.Model'>
an_1**2*an_41 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_41, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_47*n**3 <class 'ProGED.model.Model'>
an_1*an_47*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_47, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*an_16*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*an_16*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*an_16*n)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*an_16*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6 + n <class 'ProGED.model.Model'>
C0*an_1*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_6)
<class 'tuple'> (n, C0*an_1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_4 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_4, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_6 <class 'ProGED.model.Model'>
an_2*an_6 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_6)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1**2, C0*an_1**2*n**3)
<class 'tuple'> (an_1**2, C1*an_1**2, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_2**2*n <class 'ProGED.model.Model'>
an_1**2*an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C1*an_1*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1**3, C1*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.27236491899930115


Equation discovery for all (chosen) OEIS sequences took 0.27237123399936536 secconds, i.e. 0.004539520566656089 minutes or 7.565867611093482e-05 hours.
72





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 72
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 38 models
-> C0*an_4*n + an_1**2, p = 6.722444609901273e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_1*an_2 + n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1*an_2, p = 9.8192722034003e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1**2*an_2**2, p = 3.719834359740343e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1*an_3, p = 1.604022001986013e-06, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_36*n + an_2*n, p = 3.038609692734931e-07, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3, p = 1.788559333950637e-13, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_33, p = 0.0003278688524590185, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_13, p = 5.361798256651793e-06, parse trees = 1, valid = False
-> C0*an_1*an_14 + C1*an_1*an_2*n + an_2, p = 5.755902899846387e-10, parse trees = 1, valid = False
-> C0*an_4 + an_1*n, p = 5.2572964256920205e-05, parse trees = 1, valid = False
-> C0*an_4*n**2 + an_2, p = 3.1753471289080013e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2 + an_3, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n**2, p = 7.848212846009146e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + n, p = 8.362849753944173e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**4 + an_1*n, p = 1.7838828297496937e-09, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**3*an_2*n**5, p = 2.325146423391694e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> an_1*an_2*an_3*n, p = 1.0523054058856625e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
C0*an_4*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_4*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_4*n)
<class 'tuple'> (an_1**2, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_2)
<class 'tuple'> (n**3, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1**2*an_2**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1**2*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1**2*an_2**2)
<class 'tuple'> (C0*an_1**2, C1*n, an_1**2*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1*an_3)
<class 'tuple'> (C0*an_1**2, C1*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_36*n + an_2*n <class 'ProGED.model.Model'>
C0*an_36*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_36*n)
<class 'tuple'> (an_2*n, C0*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3 <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*an_1, C3*n**3, C1*an_1*n, C0*an_1**3*an_3*n)
<class 'tuple'> (an_3, C2*an_1, C3*n**3, C1*an_1*n, C0*an_1**3*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_33 <class 'ProGED.model.Model'>
an_33 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_13 <class 'ProGED.model.Model'>
an_1**2*an_13 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_13, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_14 + C1*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_14 + C1*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_14, C1*an_1*an_2*n)
<class 'tuple'> (an_2, C0*an_1*an_14, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1*n <class 'ProGED.model.Model'>
C0*an_4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*n)
<class 'tuple'> (C0*an_4, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_4*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_4*n**2)
<class 'tuple'> (an_2, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2)
<class 'tuple'> (an_3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n**2)
<class 'tuple'> (C0*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_3*n**2)
<class 'tuple'> (n, C0*an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**3*an_2*n**4)
<class 'tuple'> (an_1*n, C0*an_1**3*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2*n**5 <class 'ProGED.model.Model'>
an_1**3*an_2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n <class 'ProGED.model.Model'>
an_1*an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.29867149100027746


Equation discovery for all (chosen) OEIS sequences took 0.29867887799991877 secconds, i.e. 0.004977981299998646 minutes or 8.296635499997743e-05 hours.
73





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 73
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*an_2*an_4*n + n**2, p = 1.0383666719847512e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1**2*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_31 + an_28, p = 7.166532294205794e-08, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 7.954465573770502e-06, parse trees = 1, valid = False
-> an_1*an_36*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1*n**2, p = 1.8063755468519428e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2, p = 6.882264003663931e-10, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n**2, p = 2.6514885245901683e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_2*an_4*n**2 + an_3*n**2, p = 1.9229012444162062e-10, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_4*n, p = 1.1204074349835457e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_8, p = 1.9627200429991953e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_40*n**2, p = 2.8978016662187625e-09, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3, p = 3.878801640071129e-11, parse trees = 1, valid = False
-> C0*an_1*n**3 + n**2, p = 2.2095737704918065e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*an_2*an_4*n)
<class 'tuple'> (n**2, C0*an_1**2*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**2)
<class 'tuple'> (C0*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_31 + an_28 <class 'ProGED.model.Model'>
C0*an_31 + an_28 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_28, C0*an_31)
<class 'tuple'> (an_28, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n**2 <class 'ProGED.model.Model'>
C0*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**3)
<class 'tuple'> (n**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_36*n <class 'ProGED.model.Model'>
an_1*an_36*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_36, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3**2, C1*an_1, C0*an_1*n, C2*an_2*n)
<class 'tuple'> (an_3**2, C1*an_1, C0*an_1*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n**3)
<class 'tuple'> (n**2, C1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_4*n**2 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_4*n**2 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n**2, C0*an_1*an_2*an_4*n**2)
<class 'tuple'> (an_3*n**2, C0*an_1*an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4*n <class 'ProGED.model.Model'>
an_1**2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_8 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_8, C1*n, C0*an_2*n)
<class 'tuple'> (an_8, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_40*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_40*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_40*n**2, C0*an_1*n)
<class 'tuple'> (C1*n, an_40*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, C0*an_1*n**2, an_1*an_2**2*n**3)
<class 'tuple'> (C1*an_1, C2*n, C0*an_1*n**2, an_1*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**3)
<class 'tuple'> (n**2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3)
<class 'tuple'> (an_1, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2954375919998711


Equation discovery for all (chosen) OEIS sequences took 0.2954473319987301 secconds, i.e. 0.004924122199978834 minutes or 8.206870333298058e-05 hours.
74





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 74
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 30 models
-> C0*n + an_1**3, p = 0.00022579694335649256, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1, p = 8.3152500582955e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_4 + C1*n + an_26, p = 8.986831497175939e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1*n**2, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_26*an_34, p = 1.1944220490664481e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2**2 + C1*n + an_1*n, p = 2.4711368792982704e-06, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + n, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> an_1**3*an_3*n, p = 4.4556166721833704e-06, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 9.215009298575664e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_37, p = 7.244504165546904e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3 + C2*n + n, p = 4.5459593534260617e-07, parse trees = 1, valid = False
-> an_42*n**2, p = 1.3114754098360662e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
C0*n + an_1**3 <class 'ProGED.model.Model'>
C0*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*n)
<class 'tuple'> (an_1**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**3, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*n**3, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + C1*n + an_26 <class 'ProGED.model.Model'>
C0*an_4 + C1*n + an_26 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_26, C0*an_4, C1*n)
<class 'tuple'> (an_26, C0*an_4, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_26*an_34 <class 'ProGED.model.Model'>
an_26*an_34 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_26, an_34)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2**2, C1*n, an_1*n)
<class 'tuple'> (C0*an_2**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2**2)
<class 'tuple'> (n, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_3*n <class 'ProGED.model.Model'>
an_1**3*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_37 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_37, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_37, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*an_3)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42*n**2 <class 'ProGED.model.Model'>
an_42*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_42, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*n)
<class 'tuple'> (n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2515711430005467


Equation discovery for all (chosen) OEIS sequences took 0.251577320999786 secconds, i.e. 0.004192955349996434 minutes or 6.988258916660723e-05 hours.
75





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 75
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4, p = 2.0209153236073647e-17, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_6 + an_1, p = 4.654845471647407e-05, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n, p = 1.205355905886255e-10, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*n + an_1**2, p = 3.208044003972027e-07, parse trees = 1, valid = False
-> an_15*n, p = 6.557486822239345e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18, p = 1.537608742897261e-16, parse trees = 1, valid = False
-> an_30, p = 0.00032786885245909516, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_49, p = 3.2164806745939103e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_3*n + an_1*n, p = 4.102089054259314e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n, p = 1.148097024611217e-11, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + an_1, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + n**2, p = 1.0171283848427857e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*n, an_1**2*an_28*an_4, C1*an_1*an_4*n)
<class 'tuple'> (C0*an_1**2, C2*n, an_1**2*an_28*an_4, C1*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_6 + an_1 <class 'ProGED.model.Model'>
C0*an_6 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_6)
<class 'tuple'> (an_1, C0*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**3, C3*n, an_1**2*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (C2*n**3, C3*n, an_1**2*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*an_3*n)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15*n <class 'ProGED.model.Model'>
an_15*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18 <class 'ProGED.model.Model'>
C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_18, C1*an_1, C2*an_3, C3*n**2, C4*n, C0*an_1**2*an_4*n**3)
<class 'tuple'> (an_18, C1*an_1, C2*an_3, C3*n**2, C4*n, C0*an_1**2*an_4*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30 <class 'ProGED.model.Model'>
an_30 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_49 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_49)
<class 'tuple'> (C0*an_1, an_1*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n, C1*an_1*an_3*n)
<class 'tuple'> (C0*an_1**2, an_1*n, C1*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*n, an_1*an_2*n, C2*an_2*an_3*n**2)
<class 'tuple'> (C1*an_1, C0*an_1*n, an_1*an_2*n, C2*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n**3)
<class 'tuple'> (an_1, C0*an_2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n**2, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2894994250000309


Equation discovery for all (chosen) OEIS sequences took 0.28950532599992584 secconds, i.e. 0.004825088766665431 minutes or 8.041814611109051e-05 hours.
76





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 76
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 28 models
-> C0*n + an_2**2*n, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*an_1 + an_36*n, p = 5.0309056705186815e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n, p = 4.955230082638033e-10, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3, p = 7.61041521468189e-14, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_28*n**3, p = 2.6229508196791334e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2, p = 2.4058331635056544e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_2**2, p = 7.899535925625614e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_5*n, p = 8.94038672840459e-08, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 2.38633967213115e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1, p = 1.5358348830959436e-06, parse trees = 1, valid = False
C0*n + an_2**2*n <class 'ProGED.model.Model'>
C0*n + an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**2*n)
<class 'tuple'> (C0*n, an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_36*n <class 'ProGED.model.Model'>
C0*an_1 + an_36*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_36*n)
<class 'tuple'> (C0*an_1, an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, C0*an_1*n, an_1**2*an_2*an_3*n)
<class 'tuple'> (C1*n**2, C0*an_1*n, an_1**2*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, C3*n, an_2*n**3, C0*an_1**2*n**3, C2*an_1*an_2)
<class 'tuple'> (C1*an_1**2, C3*n, an_2*n**3, C0*an_1**2*n**3, C2*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28*n**3 <class 'ProGED.model.Model'>
an_28*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_28, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C1*an_2*an_4, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n**2, C1*an_2*an_4, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1)
<class 'tuple'> (an_2**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_5*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_5*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_5*n, C0*an_1*n)
<class 'tuple'> (C1*an_2, an_5*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2539219669997692


Equation discovery for all (chosen) OEIS sequences took 0.25392748899867 secconds, i.e. 0.004232124816644501 minutes or 7.053541361074167e-05 hours.
77





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 77
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*n + an_1*an_24*n, p = 1.006181134435274e-06, parse trees = 1, valid = False
-> C0*n + an_3*an_4, p = 4.867867060825944e-06, parse trees = 1, valid = False
-> an_1*an_48*n**2, p = 1.6769685568395603e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + an_4*n, p = 8.222950819672135e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499343, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n**3 + n**2, p = 9.417855415210976e-08, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1**2*n**2, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_27 + an_1*an_2**2*n**2, p = 1.1511163461851946e-10, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_36*n + n, p = 7.8688524590164e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565158, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2, p = 4.924862792045725e-22, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_13 + C2*an_2 + n, p = 1.7889068544160228e-09, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*n + an_1, p = 1.0838253281111651e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_24*n <class 'ProGED.model.Model'>
C0*n + an_1*an_24*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_24*n)
<class 'tuple'> (C0*n, an_1*an_24*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*an_4 <class 'ProGED.model.Model'>
C0*n + an_3*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*an_4)
<class 'tuple'> (C0*n, an_3*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_48*n**2 <class 'ProGED.model.Model'>
an_1*an_48*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_48, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_3, C2*n**3)
<class 'tuple'> (n**2, C0*an_1, C1*an_3, C2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*n**2, C0*an_2*n)
<class 'tuple'> (C1*n, an_1**2*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_27 + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_27 + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_27, an_1*an_2**2*n**2)
<class 'tuple'> (C0*an_1, C1*an_27, an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_36*n + n <class 'ProGED.model.Model'>
C0*an_36*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_36*n)
<class 'tuple'> (n, C0*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C4*n, an_4*n**2, C0*an_1*n**3, C1*an_1*n, C3*an_2*an_38*n**5)
<class 'tuple'> (C2*an_1, C4*n, an_4*n**2, C0*an_1*n**3, C1*an_1*n, C3*an_2*an_38*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_13 + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_13 + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_13, C2*an_2, C0*an_1**2*n)
<class 'tuple'> (n, C1*an_13, C2*an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n**3)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2902371039999707


Equation discovery for all (chosen) OEIS sequences took 0.2902429240002675 secconds, i.e. 0.0048373820666711255 minutes or 8.062303444451876e-05 hours.
78





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 78
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*n + an_11, p = 3.9425575672131156e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n + an_1**3, p = 2.051044527129656e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_14, p = 2.5155932008102126e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**3, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_34 + C1*n + an_20*an_40, p = 3.1329104199845314e-12, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2, p = 9.300585693566775e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n**2 + an_1*n, p = 5.119449610319815e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_2*an_3*n, p = 6.313832435313972e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_17 + C1*an_2 + C2*an_5 + n, p = 7.641367690860036e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*an_27*n + C1*n + n, p = 5.595026896574163e-10, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n, p = 5.756185686502205e-16, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011047868852459028, parse trees = 1, valid = False
C0*n + an_11 <class 'ProGED.model.Model'>
C0*n + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*n)
<class 'tuple'> (an_11, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*n)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C1*n, C0*an_1*an_3)
<class 'tuple'> (an_1**3, C1*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_14 <class 'ProGED.model.Model'>
C0*an_1 + an_14 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_14, C0*an_1)
<class 'tuple'> (an_14, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*n)
<class 'tuple'> (n**3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_34 + C1*n + an_20*an_40 <class 'ProGED.model.Model'>
C0*an_34 + C1*n + an_20*an_40 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_34, C1*n, an_20*an_40)
<class 'tuple'> (C0*an_34, C1*n, an_20*an_40)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*n**2, C0*an_1*n**3, C2*an_3*n)
<class 'tuple'> (C1*an_2, an_1*n**2, C0*an_1*n**3, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*an_3*n)
<class 'tuple'> (C0*an_1, an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_17 + C1*an_2 + C2*an_5 + n <class 'ProGED.model.Model'>
C0*an_17 + C1*an_2 + C2*an_5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_17, C1*an_2, C2*an_5)
<class 'tuple'> (n, C0*an_17, C1*an_2, C2*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_27*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_27*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*an_27*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C4*n, an_1*n, C1*an_1*n**2, C3*an_2*n**2, C0*an_1**3*an_4*n)
<class 'tuple'> (C2*an_1, C4*n, an_1*n, C1*an_1*n**2, C3*an_2*n**2, C0*an_1**3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
<class 'tuple'> (n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2925883089992567


Equation discovery for all (chosen) OEIS sequences took 0.2926032049999776 secconds, i.e. 0.0048767200833329605 minutes or 8.127866805554933e-05 hours.
79





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 79
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 27 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_9*n + C1*n + n, p = 4.769590247218937e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n, p = 6.382051567341324e-19, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*an_2, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_1*an_2*an_4*n**4, p = 2.7068532902166595e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4, p = 3.621531830301716e-14, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1**2*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> C0*an_2 + an_2, p = 0.0008052315685747563, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2, p = 5.4383210271077564e-11, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_1*an_26*an_3, p = 4.963704744890886e-07, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_9*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_9*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*an_9*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n)
<class 'tuple'> (C0*an_1, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2*an_23, an_1**2*an_2*an_3*an_35**2*n)
<class 'tuple'> (C0*an_1**2*an_23, an_1**2*an_2*an_3*an_35**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*an_2)
<class 'tuple'> (C0*n**2, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_4*n**4 <class 'ProGED.model.Model'>
an_1*an_2*an_4*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_4, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, C1*an_1, C2*an_2, C3*an_4, an_1*an_2*n**4)
<class 'tuple'> (C0*an_1**3, C1*an_1, C2*an_2, C3*an_4, an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**3)
<class 'tuple'> (C0*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2)
<class 'tuple'> (an_2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n, C1*an_1*n**4, C2*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1**2*n, C1*an_1*n**4, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_26*an_3 <class 'ProGED.model.Model'>
an_1*an_26*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_26, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.25562290200105053


Equation discovery for all (chosen) OEIS sequences took 0.25562826600071276 secconds, i.e. 0.004260471100011879 minutes or 7.100785166686466e-05 hours.
80





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 80
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n, p = 2.693612250049392e-10, parse trees = 1, valid = False
-> C0*an_1*n + an_21*n, p = 1.0061811463829146e-06, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n**5 + C1*n + an_1*an_2*n**2, p = 5.8188279723853736e-12, parse trees = 1, valid = False
-> C0*an_23 + n, p = 3.934426233829523e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n**2 + n**2, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_2*an_37*n, p = 2.5321747439457746e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + n, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> C0*n + an_42, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1 + n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_4 + an_19, p = 7.489027262915301e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**3, p = 4.545959353426065e-06, parse trees = 1, valid = False
-> C0*n**3 + an_4, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n, p = 8.470478783043669e-13, parse trees = 1, valid = False
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n, C3*an_3*n)
<class 'tuple'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n, C3*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_21*n <class 'ProGED.model.Model'>
C0*an_1*n + an_21*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_21*n, C0*an_1*n)
<class 'tuple'> (an_21*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1*n)
<class 'tuple'> (n, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**5 + C1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_3*n**5 + C1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_3*n**5, an_1*an_2*n**2)
<class 'tuple'> (C1*n, C0*an_3*n**5, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_23 + n <class 'ProGED.model.Model'>
C0*an_23 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_23)
<class 'tuple'> (n, C0*an_23)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**2)
<class 'tuple'> (n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2)
<class 'tuple'> (n, C0*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_37*n <class 'ProGED.model.Model'>
an_2*an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_42 <class 'ProGED.model.Model'>
C0*n + an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_42, C0*n)
<class 'tuple'> (an_42, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
<class 'tuple'> (C0*n**2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_19 <class 'ProGED.model.Model'>
C0*an_4 + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C0*an_4)
<class 'tuple'> (an_19, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_4 <class 'ProGED.model.Model'>
C0*n**3 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n**3)
<class 'tuple'> (an_4, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1**2*n, C0*an_2*n**2, C1*an_23*an_3)
<class 'tuple'> (C2*n, an_1**2*n, C0*an_2*n**2, C1*an_23*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2684512529995118


Equation discovery for all (chosen) OEIS sequences took 0.2684568490003585 secconds, i.e. 0.004474280816672642 minutes or 7.457134694454402e-05 hours.
81





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 81
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 45 models
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_2 + an_4, p = 7.938367822269999e-05, parse trees = 1, valid = False
-> an_37, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> an_27*an_46*n**2, p = 4.777688196166607e-09, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_1*an_4*n, p = 8.762160709486699e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1, p = 3.42154575542154e-10, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1, p = 3.507250604414163e-12, parse trees = 1, valid = False
-> C0*an_1*an_3*an_45*n + C1*n + n, p = 1.4295469664861833e-09, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + n, p = 3.8651115291588325e-06, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.00019886163934426245, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n + n, p = 1.3005903937333975e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_3 + n**2, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*an_3*n, p = 8.07342508122115e-07, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + an_2, p = 3.865111529158833e-06, parse trees = 1, valid = False
-> C0*an_1**3 + an_1*n, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_19*n**3, p = 5.795604118304944e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**4, p = 6.929375048579581e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + an_1**2*n, p = 1.3858750097159172e-07, parse trees = 1, valid = False
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_4 <class 'ProGED.model.Model'>
C0*an_2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_2)
<class 'tuple'> (an_4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37 <class 'ProGED.model.Model'>
an_37 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_27*an_46*n**2 <class 'ProGED.model.Model'>
an_27*an_46*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_27, an_46, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n)
<class 'tuple'> (C0*n**2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4*n <class 'ProGED.model.Model'>
an_1*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_2, C3*an_3, C4*n, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_2, C3*an_3, C4*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*an_8, C1*an_2*an_31)
<class 'tuple'> (an_1, C2*n, C0*an_1*an_8, C1*an_2*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*an_45*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*an_45*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_3*an_45*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_3*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**2)
<class 'tuple'> (n, C1*an_2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3, C2*n)
<class 'tuple'> (n, C0*an_1, C1*an_3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_3)
<class 'tuple'> (n**2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*an_2 + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1**2*an_3*n)
<class 'tuple'> (C0*an_2, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_2*n)
<class 'tuple'> (n**3, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C0*an_2*n)
<class 'tuple'> (an_2, C1*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1*n)
<class 'tuple'> (C0*an_1**3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_19*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_19*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_19*n**3, C0*an_1*n)
<class 'tuple'> (C1*n, an_19*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**4 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**4, C0*n**2, C1*n)
<class 'tuple'> (an_1**4, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.3269744389999687


Equation discovery for all (chosen) OEIS sequences took 0.3269804560004559 secconds, i.e. 0.005449674266674265 minutes or 9.082790444457108e-05 hours.
82





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 82
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_37, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3, p = 2.439497886837189e-14, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**3 + an_1*an_4*n, p = 6.45354682550523e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_32*n, p = 6.557377049180471e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2, p = 4.489353750082322e-10, parse trees = 1, valid = False
-> C0*an_8*n + n, p = 8.471173770491805e-06, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_3 + an_3, p = 2.323013820540047e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_3, p = 9.67922425225019e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n, p = 3.674631684778041e-12, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n + C2*n + n, p = 4.708927707605488e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 1.950885590600097e-06, parse trees = 1, valid = False
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_37 <class 'ProGED.model.Model'>
C0*an_1 + an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_37, C0*an_1)
<class 'tuple'> (an_37, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1*n**2, an_1*an_2*n**3, C0*an_1*an_37*n**3)
<class 'tuple'> (C1*an_1*n**2, an_1*an_2*n**3, C0*an_1*an_37*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**3 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**3 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**3, C0*an_1*n, an_1*an_4*n)
<class 'tuple'> (C1*n**3, C0*an_1*n, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_32*n <class 'ProGED.model.Model'>
an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_3 <class 'ProGED.model.Model'>
C0*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2)
<class 'tuple'> (an_3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_2*an_3)
<class 'tuple'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_8*n + n <class 'ProGED.model.Model'>
C0*an_8*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_8*n)
<class 'tuple'> (n, C0*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_3 + an_3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_3, C0*an_1*n**2)
<class 'tuple'> (an_3, C1*an_3, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*an_3)
<class 'tuple'> (an_3, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n**3, C3*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n**3, C3*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*n)
<class 'tuple'> (n**2, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*n, C1*an_3*n)
<class 'tuple'> (n, C2*n, C0*an_1*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.29175292600120883


Equation discovery for all (chosen) OEIS sequences took 0.2917591790010192 secconds, i.e. 0.004862652983350321 minutes or 8.104421638917201e-05 hours.
83





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 83
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 29 models
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n, p = 8.687670537427102e-15, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_5, p = 2.960448812896237e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**4*an_43*n + an_1, p = 1.3449472309046935e-09, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*n, p = 1.1783126644080361e-07, parse trees = 1, valid = False
-> C0*an_1*an_4 + an_1*an_22*n, p = 2.4489780089300456e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1**2*an_4*an_48, p = 2.0408149999700284e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**6, p = 5.65071324912659e-07, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_15*an_2*n + C1*n**2 + an_1, p = 4.662600466220905e-09, parse trees = 1, valid = False
-> C0*an_2*an_3**2*n + an_1, p = 7.475393593723285e-08, parse trees = 1, valid = False
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**2, C1*an_26*an_46*n**2)
<class 'tuple'> (an_2*n, C0*an_1**2*n**2, C1*an_26*an_46*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_5 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C1*n, C0*an_1**2*n)
<class 'tuple'> (an_5, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**4*an_43*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**4*an_43*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**4*an_43*n)
<class 'tuple'> (an_1, C0*an_1**4*an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4 + an_1*an_22*n <class 'ProGED.model.Model'>
C0*an_1*an_4 + an_1*an_22*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_4, an_1*an_22*n)
<class 'tuple'> (C0*an_1*an_4, an_1*an_22*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_4*an_48 <class 'ProGED.model.Model'>
an_1**2*an_4*an_48 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_48, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**6 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**6)
<class 'tuple'> (C0*an_1, an_1*n**6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_15*an_2*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_15*an_2*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_15*an_2*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_15*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3**2*n)
<class 'tuple'> (an_1, C0*an_2*an_3**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2565532790013094


Equation discovery for all (chosen) OEIS sequences took 0.25655901500067557 secconds, i.e. 0.004275983583344593 minutes or 7.126639305574322e-05 hours.
84





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 84
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> C0*an_1 + C1*an_3 + C2*n + an_13*n**3, p = 1.715775442128575e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n, p = 4.648137630006623e-13, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n + n, p = 2.3566253288160726e-08, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_16 + an_1, p = 2.515465468158918e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_10, p = 0.00033012755737704913, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1**2*n, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_35*n + an_1*n, p = 1.006181134103737e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + an_1*n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_42*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_12 + an_1, p = 2.5170124524912657e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
C0*an_1 + C1*an_3 + C2*n + an_13*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + an_13*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, C2*n, an_13*n**3)
<class 'tuple'> (C0*an_1, C1*an_3, C2*n, an_13*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3, C2*an_1, C1*an_1*n**3, C3*an_44*n)
<class 'tuple'> (n, C0*an_1**3, C2*an_1, C1*an_1*n**3, C3*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_16 + an_1 <class 'ProGED.model.Model'>
C0*an_16 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_16)
<class 'tuple'> (an_1, C0*an_16)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_10 <class 'ProGED.model.Model'>
an_10 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_2*n**2)
<class 'tuple'> (an_1**2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_35*n + an_1*n <class 'ProGED.model.Model'>
C0*an_35*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_35*n)
<class 'tuple'> (an_1*n, C0*an_35*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_2*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_42*n <class 'ProGED.model.Model'>
an_42*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_42, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_12 + an_1 <class 'ProGED.model.Model'>
C0*an_12 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_12)
<class 'tuple'> (an_1, C0*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1)
<class 'tuple'> (n, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2768725709993305


Equation discovery for all (chosen) OEIS sequences took 0.2768805710002198 secconds, i.e. 0.0046146761833369965 minutes or 7.691126972228327e-05 hours.
85





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 85
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*an_38*n**3 + C1*n + an_1, p = 9.325044827540643e-10, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2*an_20*n + C1*an_7 + an_1*n**2, p = 2.131936337233124e-12, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*n + an_1, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_4*n**2, p = 1.644590163934427e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**2*an_2*n, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*n + an_1, p = 1.3290768535800176e-06, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00011772319269013723, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.0006773908300694775, parse trees = 1, valid = False
-> C0*n + an_2**2*an_25*an_3, p = 8.335481614863871e-11, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_3*an_4, p = 3.112242874954291e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_25*an_46*n, p = 2.343519617422121e-10, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n + an_1*an_3*n**2, p = 5.940822229577827e-09, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_2 + n, p = 6.277895343157568e-07, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n + n**2, p = 1.261751142166085e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.5876735644540003e-05, parse trees = 1, valid = False
-> C0*an_2*an_49 + an_1, p = 9.713588362021496e-07, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_38*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_38*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*an_38*n**3)
<class 'tuple'> (an_1, C1*n, C0*an_2*an_38*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_20*n + C1*an_7 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2*an_20*n + C1*an_7 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_7, an_1*n**2, C0*an_2*an_20*n)
<class 'tuple'> (C1*an_7, an_1*n**2, C0*an_2*an_20*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**4 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**4)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n**2)
<class 'tuple'> (C0*n, an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**5 <class 'ProGED.model.Model'>
an_1*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1**2*an_2*n)
<class 'tuple'> (C0*n**2, C1*n, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C1*an_1, C2*n)
<class 'tuple'> (an_1, C0*an_1**3, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2**2*an_25*an_3 <class 'ProGED.model.Model'>
C0*n + an_2**2*an_25*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**2*an_25*an_3)
<class 'tuple'> (C0*n, an_2**2*an_25*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_3*an_4 <class 'ProGED.model.Model'>
C0*an_1 + an_3*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_3*an_4)
<class 'tuple'> (C0*an_1, an_3*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_25*an_46*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_25*an_46*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_25*an_46*n)
<class 'tuple'> (C0*an_1, an_1*an_25*an_46*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_3, an_1*an_3*n**2)
<class 'tuple'> (C1*n, C0*an_1*an_3, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*an_2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C2*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_4*n)
<class 'tuple'> (n**2, C0*an_1, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4)
<class 'tuple'> (C0*n, an_2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_49 + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_49 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_49)
<class 'tuple'> (an_1, C0*an_2*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.29901090800012753


Equation discovery for all (chosen) OEIS sequences took 0.29901701800008595 secconds, i.e. 0.0049836169666680995 minutes or 8.306028277780166e-05 hours.
86





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 86
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 37 models
-> C0*an_1 + C1*n + an_1, p = 0.0001271410481053481, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_38*n, p = 7.868852459016397e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_6 + an_1**3, p = 5.8391659960821975e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_5*n + an_2, p = 9.345888868975501e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_3 + C1*n**3 + n, p = 6.137704918032792e-06, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_18*n, p = 7.719557108190832e-08, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> an_1*an_10*n**2, p = 1.688521277076056e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + an_1**2, p = 5.495747515001257e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**3, p = 8.524590163934432e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*an_4*n**3, p = 3.504864283794682e-06, parse trees = 1, valid = False
-> an_4*an_5*n, p = 9.573471886291022e-07, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*an_2**2*n**2, p = 1.9084918703505777e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.00019886163934426245, parse trees = 1, valid = False
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_38*n <class 'ProGED.model.Model'>
C0*n + an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_38*n)
<class 'tuple'> (C0*n, an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_6 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_6 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*an_6)
<class 'tuple'> (an_1**3, C0*an_1, C1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*an_5*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_5*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3, C1*an_1*an_5*n)
<class 'tuple'> (an_2, C0*an_1**3, C1*an_1*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n**3)
<class 'tuple'> (n, C0*an_3, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_18*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_18*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_18*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_10*n**2 <class 'ProGED.model.Model'>
an_1*an_10*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_4 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*an_4)
<class 'tuple'> (an_1**2, C0*an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_4*n**3 <class 'ProGED.model.Model'>
an_1*an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*an_5*n <class 'ProGED.model.Model'>
an_4*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_2**2*n**2)
<class 'tuple'> (C0*an_2, C1*n, an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
<class 'tuple'> (C0*an_2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2875955300005444


Equation discovery for all (chosen) OEIS sequences took 0.2876041380004608 secconds, i.e. 0.00479340230000768 minutes or 7.989003833346133e-05 hours.
87





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 87
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n, p = 9.984212093901781e-11, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1, p = 2.3566253288160733e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_35*n + an_1*n, p = 7.719553619025392e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*an_10, p = 4.221303192690137e-05, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_2*n**2, p = 8.532416017199693e-07, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2, p = 1.1450951222103466e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + an_2, p = 3.071669766191889e-07, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.5053129557099515e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2 + an_4, p = 7.938367822269999e-05, parse trees = 1, valid = False
-> C0*an_4*an_6 + an_1*n**2, p = 7.088252849357441e-09, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_18, p = 4.192423287033835e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n, p = 5.316307414320072e-08, parse trees = 1, valid = False
-> an_2*n**3, p = 0.0002780327868852462, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**3*an_3, C1*an_1*an_4)
<class 'tuple'> (an_1*n, C0*an_1**3*an_3, C1*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n**2, C3*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (an_1, C2*n**2, C3*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_35*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_35*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n, C1*an_35*n)
<class 'tuple'> (C0*an_1, an_1*n, C1*an_35*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_10 <class 'ProGED.model.Model'>
an_1*an_10 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_2*n**2)
<class 'tuple'> (C0*n**3, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**3 <class 'ProGED.model.Model'>
an_1**3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_4 <class 'ProGED.model.Model'>
C0*an_2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_2)
<class 'tuple'> (an_4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*an_6 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_4*an_6 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_4*an_6)
<class 'tuple'> (an_1*n**2, C0*an_4*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_18 <class 'ProGED.model.Model'>
an_1*an_18 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1**2, C2*an_1, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1**2, C2*an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.28512254300039785


Equation discovery for all (chosen) OEIS sequences took 0.2851286559998698 secconds, i.e. 0.004752144266664497 minutes or 7.920240444440828e-05 hours.
88





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 88
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_2*n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*n + an_13*n, p = 7.870316099803282e-06, parse trees = 1, valid = False
-> an_26*n, p = 6.557377049374788e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1*an_23 + an_1*an_46*n, p = 2.343519619764438e-10, parse trees = 1, valid = False
-> an_1*an_3*an_4, p = 5.1870714582571536e-06, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2, p = 3.496548077900259e-21, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_16*n**4 + an_4, p = 1.9591922392153473e-11, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_2, p = 9.662778822897076e-05, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> an_1*an_2**2*an_5*n**2, p = 9.589971596952913e-09, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2, p = 2.384765563238802e-11, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*an_1*n + an_1, p = 5.157547667924257e-07, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**2)
<class 'tuple'> (C0*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_13*n <class 'ProGED.model.Model'>
C0*n + an_13*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_13*n)
<class 'tuple'> (C0*n, an_13*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_26*n <class 'ProGED.model.Model'>
an_26*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_26, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_23 + an_1*an_46*n <class 'ProGED.model.Model'>
C0*an_1*an_23 + an_1*an_46*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_23, an_1*an_46*n)
<class 'tuple'> (C0*an_1*an_23, an_1*an_46*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*an_4 <class 'ProGED.model.Model'>
an_1*an_3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C3*n**2, C4*n, C2*an_1*an_46, C0*an_1*an_2*an_27, C1*an_1*an_25*n**2)
<class 'tuple'> (n**2, C3*n**2, C4*n, C2*an_1*an_46, C0*an_1*an_2*an_27, C1*an_1*an_25*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_16*n**4 + an_4 <class 'ProGED.model.Model'>
C0*an_1**2*an_16*n**4 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1**2*an_16*n**4)
<class 'tuple'> (an_4, C0*an_1**2*an_16*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*n)
<class 'tuple'> (an_2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2**2*an_5*n**2 <class 'ProGED.model.Model'>
an_1*an_2**2*an_5*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_35 <class 'ProGED.model.Model'>
an_35 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_2*n**2, an_1**2*an_24*n**2)
<class 'tuple'> (C1*n, C0*an_2*n**2, an_1**2*an_24*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4 + C1*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_4, C1*an_1*n)
<class 'tuple'> (an_1, C0*an_1*an_4, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.26594752699929813


Equation discovery for all (chosen) OEIS sequences took 0.265953038000589 secconds, i.e. 0.00443255063334315 minutes or 7.38758438890525e-05 hours.
89





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 89
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 37 models
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_26 + n, p = 3.934426229624873e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n, p = 8.344702428480093e-14, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n**2 + an_2*n, p = 0.0001668196721311477, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_20 + an_1*an_2*n, p = 1.9427177514324056e-07, parse trees = 1, valid = False
-> an_24, p = 0.0003278688525670495, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1, p = 4.150127035478745e-11, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n, p = 1.2639257481001002e-08, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_2*an_6*n**3, p = 3.0645893564717427e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1, p = 4.238034936844939e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0028709481762790733, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*n + n**2, p = 1.2042503645679616e-08, parse trees = 1, valid = False
-> an_2*an_23*n**2, p = 5.064349493453913e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_3, p = 1.5053129557099507e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1**2, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_2 + an_48, p = 7.596524231837322e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3, p = 3.291149761494129e-18, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1*n, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_26 + n <class 'ProGED.model.Model'>
C0*an_26 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_26)
<class 'tuple'> (n, C0*an_26)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1**2, C3*an_1, C4*an_3, C5*n, C0*an_1**2*n**2, C2*an_1*n)
<class 'tuple'> (n, C1*an_1**2, C3*an_1, C4*an_3, C5*n, C0*an_1**2*n**2, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_2*n)
<class 'tuple'> (C0*n**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_20 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_20 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_20, an_1*an_2*n)
<class 'tuple'> (C0*an_20, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_24 <class 'ProGED.model.Model'>
an_24 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_4, C2*n**2, C3*n, C0*an_4*n)
<class 'tuple'> (an_1, C1*an_4, C2*n**2, C3*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C1*an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (an_2*n, C1*an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_2*an_6*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_6*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_6, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*an_3*n)
<class 'tuple'> (n**2, C1*n, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_23*n**2 <class 'ProGED.model.Model'>
an_2*an_23*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_23, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_2)
<class 'tuple'> (an_1**2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20 <class 'ProGED.model.Model'>
an_20 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_48 <class 'ProGED.model.Model'>
C0*an_2 + an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48, C0*an_2)
<class 'tuple'> (an_48, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n**3, C0*an_1*an_45, C1*an_1*n**2, C2*an_2**2*an_47)
<class 'tuple'> (an_1**2*n**3, C0*an_1*an_45, C1*an_1*n**2, C2*an_2**2*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
<class 'tuple'> (an_2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2936445250015822


Equation discovery for all (chosen) OEIS sequences took 0.29365073300141376 secconds, i.e. 0.004894178883356896 minutes or 8.156964805594826e-05 hours.
90





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 90
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*an_1**2*an_2 + C1*n + an_1**3*n, p = 1.7107728777107713e-08, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_39 + C1*n + n**3, p = 1.8885245901639363e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + n, p = 4.882216247245375e-09, parse trees = 1, valid = False
-> an_2*an_46*n**2, p = 5.06434948789155e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + an_1*n**3, p = 4.3353013124446635e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3, p = 1.7359360076803268e-17, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_16 + an_1, p = 2.961286260134584e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3, p = 2.3847666403445645e-12, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n**2 + n, p = 5.017709852366504e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_2, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
C0*an_1**2*an_2 + C1*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**3*n, C0*an_1**2*an_2)
<class 'tuple'> (C1*n, an_1**3*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_39 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_39 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_39, C1*n)
<class 'tuple'> (n**3, C0*an_39, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_46*n**2 <class 'ProGED.model.Model'>
an_2*an_46*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_46, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n**3, C0*an_1*n**3)
<class 'tuple'> (C1*an_1, an_1*n**3, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3 <class 'ProGED.model.Model'>
C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*an_1**3, C2*an_1, C3*an_21, C4*n, C0*an_1**3*an_4*n)
<class 'tuple'> (n**3, C1*an_1**3, C2*an_1, C3*an_21, C4*n, C0*an_1**3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_16 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_16 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_16, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_16, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*an_2, C3*n, C0*an_1*n, C1*an_18*n)
<class 'tuple'> (an_3, C2*an_2, C3*n, C0*an_1*n, C1*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3, C1*an_1*n**2)
<class 'tuple'> (n, C0*an_1*an_3, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_2)
<class 'tuple'> (an_2, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.28409396700044454


Equation discovery for all (chosen) OEIS sequences took 0.2840998400006356 secconds, i.e. 0.004734997333343927 minutes or 7.891662222239878e-05 hours.
91





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 91
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> C0*an_1 + C1*an_3*n + C2*n + an_4, p = 6.453546825505225e-10, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n, p = 5.065937715369294e-16, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> an_1*an_3*n**2, p = 5.450147809728571e-05, parse trees = 1, valid = False
-> C0*an_1*an_38 + C1*an_1 + n, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1**2, p = 2.8872396035748247e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3*n + an_1**4*n, p = 6.836815090432194e-08, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_18*n, p = 6.557380013052922e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n, p = 4.9864187580166795e-15, parse trees = 1, valid = False
-> C0*an_1**3*an_5*n + C1*an_2*n + an_4, p = 5.56493097896262e-12, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n, p = 7.154296687359052e-11, parse trees = 1, valid = False
-> C0*an_2*n + an_1**3*n, p = 1.7438598175437693e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_2**2, p = 0.00010296403663742787, parse trees = 1, valid = False
-> an_2*an_25, p = 1.2660873720980403e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n, p = 6.546181468933532e-09, parse trees = 1, valid = False
C0*an_1 + C1*an_3*n + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C2*n, C1*an_3*n)
<class 'tuple'> (an_4, C0*an_1, C2*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n <class 'ProGED.model.Model'>
C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_2**2*an_43*n, C0*an_1*an_14*an_2*n)
<class 'tuple'> (C1*n**2, an_2**2*an_43*n, C0*an_1*an_14*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_38 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_38 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_38)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n)
<class 'tuple'> (an_1**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + an_1**4*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1**4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**4*n, C0*an_3*n)
<class 'tuple'> (an_1**4*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_18*n <class 'ProGED.model.Model'>
an_18*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_18, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_25, C3*n, C0*an_1**2*an_7, C1*an_1**2*n)
<class 'tuple'> (n, C2*an_25, C3*n, C0*an_1**2*an_7, C1*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_5*n + C1*an_2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1**3*an_5*n + C1*an_2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C1*an_2*n, C0*an_1**3*an_5*n)
<class 'tuple'> (an_4, C1*an_2*n, C0*an_1**3*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_47, C2*n, C0*an_1*n**2, an_1*an_2*n)
<class 'tuple'> (C1*an_47, C2*n, C0*an_1*n**2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_2*n)
<class 'tuple'> (an_1**3*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1)
<class 'tuple'> (an_2**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_25 <class 'ProGED.model.Model'>
an_2*an_25 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_25)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*an_3, C3*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*an_3, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2814102960001037


Equation discovery for all (chosen) OEIS sequences took 0.2814160489997448 secconds, i.e. 0.0046902674833290805 minutes or 7.817112472215134e-05 hours.
92





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 92
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 31 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2, p = 3.0133897647156353e-09, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*n + an_46, p = 1.3800726634566062e-09, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3, p = 7.920244804216528e-09, parse trees = 1, valid = False
-> an_30*n, p = 6.557377049181905e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_11, p = 9.73366358079311e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n**2, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_3*n + an_1**2, p = 2.090712438486042e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_17, p = 2.7949518056991243e-07, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_4*n**2 + C1*n + an_1*n, p = 2.523502284332172e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n + an_1*an_12*n, p = 7.413113893751159e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*an_2, C2*n**4, C3*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*an_2, C2*n**4, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
<class 'tuple'> (n, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3 + C1*n + an_46 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3 + C1*n + an_46 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_46, C1*n, C0*an_1*an_2*an_3)
<class 'tuple'> (an_46, C1*n, C0*an_1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_3, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (an_1**2*an_3, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30*n <class 'ProGED.model.Model'>
an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + an_11 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*an_1*an_2)
<class 'tuple'> (an_11, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_3*n)
<class 'tuple'> (an_1**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_17 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*an_3, C1*n)
<class 'tuple'> (an_17, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_4*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_4*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**3*n + an_1*an_12*n <class 'ProGED.model.Model'>
C0*an_1*an_2**3*n + an_1*an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_12*n, C0*an_1*an_2**3*n)
<class 'tuple'> (an_1*an_12*n, C0*an_1*an_2**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2739928629998758


Equation discovery for all (chosen) OEIS sequences took 0.27399909800078603 secconds, i.e. 0.004566651633346434 minutes or 7.61108605557739e-05 hours.
93





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 93
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_2*an_4*n**2 + an_1*n, p = 8.120559870649976e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130323e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_43*n + an_1**2, p = 9.870904627606237e-09, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**2*n**2, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n, p = 4.848502050088908e-09, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + n, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_5 + C2*n**3 + n, p = 3.3560836334318777e-09, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n**2, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_25 + C1*n + an_1*n, p = 6.037086805219186e-07, parse trees = 1, valid = False
-> an_11*an_2, p = 1.2687040137358539e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_2*an_3*n + n, p = 9.87548150138852e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 1.1772319269013713e-05, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_4*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*an_4*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*an_4*n**2)
<class 'tuple'> (an_1*n, C0*an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_43*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_43*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n, C1*an_43*n)
<class 'tuple'> (an_1**2, C0*an_1*n, C1*an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1**2*n**2)
<class 'tuple'> (C0*n**2, C1*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*n**2, an_2*n, C1*an_1*an_2)
<class 'tuple'> (C0*an_1**2, C2*n**2, an_2*n, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n**2)
<class 'tuple'> (n, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_5 + C2*n**3 + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_5 + C2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_5, C2*n**3, C0*an_2*n)
<class 'tuple'> (n, C1*an_5, C2*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n)
<class 'tuple'> (C0*an_1, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_2*n)
<class 'tuple'> (n**2, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_25 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_25 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_25, C1*n, an_1*n)
<class 'tuple'> (C0*an_25, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_11*an_2 <class 'ProGED.model.Model'>
an_11*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n + n <class 'ProGED.model.Model'>
C0*an_2*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*an_3*n)
<class 'tuple'> (n, C0*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*n)
<class 'tuple'> (an_3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2814749560002383


Equation discovery for all (chosen) OEIS sequences took 0.2814815969995834 secconds, i.e. 0.004691359949993057 minutes or 7.818933249988428e-05 hours.
94





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 94
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 28 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_22*n, p = 6.557377073187698e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_2*an_3*n**2, p = 6.88226400366393e-10, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n**4 + an_1, p = 2.167650656222332e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_3, p = 1.1149267685935563e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n**2, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2, p = 1.549930983225142e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*n + an_4*n, p = 9.86754098360656e-06, parse trees = 1, valid = False
-> an_2*an_28*n**3, p = 1.0128698975810136e-07, parse trees = 1, valid = False
-> C0*an_2*n + an_2, p = 0.00016104631371495132, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_22*n <class 'ProGED.model.Model'>
an_22*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_22, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, an_2*an_3*n**2)
<class 'tuple'> (C0*an_1, C1*an_3, an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**4, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*n**4, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
<class 'tuple'> (C0*an_1, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*an_2)
<class 'tuple'> (an_3, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C0*an_1*an_2, C2*an_2*n)
<class 'tuple'> (an_1**2, C1*an_1, C0*an_1*an_2, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_28*n**3 <class 'ProGED.model.Model'>
an_2*an_28*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_28, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
<class 'tuple'> (an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2600736969998252


Equation discovery for all (chosen) OEIS sequences took 0.2600800310010527 secconds, i.e. 0.004334667183350878 minutes or 7.224445305584797e-05 hours.
95





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 95
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 36 models
-> C0*an_1 + C1*an_5 + an_2, p = 2.235096682101146e-06, parse trees = 1, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_1*an_2, p = 1.4826821275789623e-06, parse trees = 1, valid = False
-> C0*n + an_16, p = 3.93444598865882e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2**2*an_3 + n, p = 1.462877023264003e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> C0*an_13 + n, p = 3.93515804990164e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_23, p = 0.0003278688528191269, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_27 + n, p = 5.030905670563438e-06, parse trees = 1, valid = False
-> C0*an_3*n + C1*n**2 + an_1, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1*n**5, p = 4.419147540983615e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n, p = 3.0825495298074717e-12, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*an_3*n**2 + an_1, p = 1.2627664870627949e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
C0*an_1 + C1*an_5 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_5 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_5)
<class 'tuple'> (an_2, C0*an_1, C1*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37*n <class 'ProGED.model.Model'>
an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_2)
<class 'tuple'> (C0*an_2, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_16 <class 'ProGED.model.Model'>
C0*n + an_16 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_16, C0*n)
<class 'tuple'> (an_16, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2**2*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2**2*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_2**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_13 + n <class 'ProGED.model.Model'>
C0*an_13 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_13)
<class 'tuple'> (n, C0*an_13)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_23 <class 'ProGED.model.Model'>
an_23 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_27 + n <class 'ProGED.model.Model'>
C0*an_1*an_27 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_27)
<class 'tuple'> (n, C0*an_1*an_27)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_3*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**5 <class 'ProGED.model.Model'>
C0*n + an_1*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**5)
<class 'tuple'> (C0*n, an_1*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n, an_1*n, C1*an_1*n**3, C0*an_1*an_2*n**3)
<class 'tuple'> (C2*an_1, C3*n, an_1*n, C1*an_1*n**3, C0*an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n**2)
<class 'tuple'> (an_1, C0*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.28969253699870023


Equation discovery for all (chosen) OEIS sequences took 0.2896996969993779 secconds, i.e. 0.004828328283322966 minutes or 8.047213805538276e-05 hours.
96





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 96
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_3*n + an_1**3*an_12*an_2, p = 3.763131752534991e-11, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_12, p = 5.034024904982533e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_39*n**3, p = 3.3539371136791215e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_1**3*an_2*an_27*n, p = 2.453198770558612e-11, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_30 + n**2, p = 4.829669443699099e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_3 + n**3, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_6*n + an_1*an_2*n, p = 9.193768069415225e-09, parse trees = 1, valid = False
-> C0*an_1*an_14*n + C1*an_1 + an_1*an_2, p = 1.9059640734396995e-09, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_1*an_30*n**2 + C1*an_1 + n, p = 1.543910723805449e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_2, p = 1.235568439649135e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2*n, p = 8.719299087718846e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_2*n**2, p = 6.546181468933537e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_37 + an_3*n**3, p = 8.634300766241339e-11, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + n, p = 3.068852459016395e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_9*n**2, p = 2.6322738628519602e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> C0*an_2**2*n + an_1**2, p = 2.633178641875206e-06, parse trees = 1, valid = False
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1**3*an_12*an_2 <class 'ProGED.model.Model'>
C0*an_3*n + an_1**3*an_12*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3*n, an_1**3*an_12*an_2)
<class 'tuple'> (C0*an_3*n, an_1**3*an_12*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_12 <class 'ProGED.model.Model'>
C0*n + an_1*an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_12)
<class 'tuple'> (C0*n, an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_39*n**3 <class 'ProGED.model.Model'>
an_1*an_39*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_39, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**3*an_2*an_27*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1**3*an_2*an_27*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n, an_1**3*an_2*an_27*n)
<class 'tuple'> (C0*an_2*n, an_1**3*an_2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_30 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_30 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_30, C0*an_1*n**3)
<class 'tuple'> (n**2, C1*an_30, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3 + n**3 <class 'ProGED.model.Model'>
C0*an_3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_3)
<class 'tuple'> (n**3, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_6*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2*n, C0*an_1*an_6*n)
<class 'tuple'> (an_1*an_2*n, C0*an_1*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_14*n + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_14*n + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_2, C0*an_1*an_14*n)
<class 'tuple'> (C1*an_1, an_1*an_2, C0*an_1*an_14*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_30*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_30*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_30*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_30*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_2, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_2*n)
<class 'tuple'> (C0*an_1, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n**2, C0*an_1**2*n**2)
<class 'tuple'> (C1*n, an_2*n**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_37 + an_3*n**3 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_37 + an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_37, an_3*n**3, C0*an_2*n)
<class 'tuple'> (C1*an_37, an_3*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_3*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_3*n)
<class 'tuple'> (n, C1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_9*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_9*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1*an_9*n**2)
<class 'tuple'> (C0*an_1*n, an_1*an_9*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
<class 'tuple'> (C0*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2**2*n)
<class 'tuple'> (an_1**2, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.3053938909997669


Equation discovery for all (chosen) OEIS sequences took 0.3053999530002329 secconds, i.e. 0.005089999216670549 minutes or 8.483332027784247e-05 hours.
97





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 97
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 30 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2, p = 3.119357953660667e-16, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4, p = 6.464669400118551e-11, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n, p = 1.9638544406800602e-07, parse trees = 1, valid = False
-> an_1**3*n**2, p = 7.526564778549756e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3*n + C1*an_1 + n, p = 9.68811009746538e-08, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + C2*n + an_1**3, p = 9.978300069954601e-09, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_4, p = 3.154377855415211e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1, p = 2.4612534325555883e-08, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2, p = 2.2380117701695156e-11, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2, p = 1.1040581307661698e-11, parse trees = 1, valid = False
-> C0*an_45 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C3*n, an_1**2*n**2, C1*an_2*n, C2*an_3*an_45*n**2)
<class 'tuple'> (C0*an_1, C3*n, an_1**2*n**2, C1*an_2*n, C2*an_3*an_45*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**4, C1*an_1*n, C0*an_1*an_2**2*n)
<class 'tuple'> (an_1*n**4, C1*an_1*n, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, C2*n, an_2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**2 <class 'ProGED.model.Model'>
an_1**3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_2*an_3*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + C2*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + C2*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C1*n**2, C2*n, C0*an_1*n)
<class 'tuple'> (an_1**3, C1*n**2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_37*n <class 'ProGED.model.Model'>
an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n**2)
<class 'tuple'> (an_1**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C1*n)
<class 'tuple'> (an_4, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1*n, C2*an_3*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n**4, an_18*n**2)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n**4, an_18*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_29, C1*n**2, an_1*an_2*an_3*n**2)
<class 'tuple'> (C0*an_29, C1*n**2, an_1*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_45 + an_1*n <class 'ProGED.model.Model'>
C0*an_45 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_45, an_1*n)
<class 'tuple'> (C0*an_45, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.2981847069986543


Equation discovery for all (chosen) OEIS sequences took 0.2981922189992474 secconds, i.e. 0.004969870316654123 minutes or 8.283117194423539e-05 hours.
98





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 98
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 34 models
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n, p = 6.586644294460405e-13, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2, p = 2.7219493961318855e-14, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n + C2*n**2 + n, p = 2.260285299650636e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*n + an_1*an_2, p = 1.0044632549052121e-09, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_44 + C1*n + n, p = 4.721311475409837e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15, p = 1.933044745512378e-13, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_1**2*an_25, p = 5.360801124853101e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_7, p = 1.2629082504703043e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2*n, p = 2.402203278688528e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1*n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> an_1*an_10, p = 4.221303192690137e-05, parse trees = 1, valid = False
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n**2, C4*n, an_38*n, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (C2*an_1, C3*n**2, C4*n, an_38*n, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n**2, C1*an_1*n**9, C2*an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n**2, C1*an_1*n**9, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n**2, C0*an_1*n, C1*an_3*n)
<class 'tuple'> (n, C2*n**2, C0*an_1*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1**2*n**4)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1*n)
<class 'tuple'> (an_1**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_44 + C1*n + n <class 'ProGED.model.Model'>
C0*an_44 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_44, C1*n)
<class 'tuple'> (n, C0*an_44, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*n)
<class 'tuple'> (an_1**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*an_1, C2*n, C1*an_3**2*an_4*n)
<class 'tuple'> (an_15, C0*an_1, C2*n, C1*an_3**2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_25 <class 'ProGED.model.Model'>
an_1**2*an_25 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_25, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n**3)
<class 'tuple'> (C0*an_2, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_7 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_7 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_7, C0*an_1*n**2)
<class 'tuple'> (an_7, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_2*n)
<class 'tuple'> (C0*n**2, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_10 <class 'ProGED.model.Model'>
an_1*an_10 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.307323926999743


Equation discovery for all (chosen) OEIS sequences took 0.30732994800018787 secconds, i.e. 0.005122165800003131 minutes or 8.536943000005218e-05 hours.
99





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 99
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 32 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> an_2*an_5*n**3, p = 3.88435605721282e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1**5*n, p = 6.153133581388975e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1 + an_2, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_9 + n, p = 4.024774426229509e-05, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1, p = 1.162573211695846e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + n, p = 2.962644450416556e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_24*an_38*n, p = 2.1993030260880306e-10, parse trees = 1, valid = False
-> C0*n + an_2*an_4*n**2, p = 6.350694257816005e-07, parse trees = 1, valid = False
-> an_49, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_2, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.00012714104810534812, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*n + an_1**3, p = 0.00022579694335649256, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_24 <class 'ProGED.model.Model'>
an_1*an_24 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_5*n**3 <class 'ProGED.model.Model'>
an_2*an_5*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_5, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**5*n <class 'ProGED.model.Model'>
an_1**5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_1)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_9 + n <class 'ProGED.model.Model'>
C0*an_9 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_9)
<class 'tuple'> (n, C0*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_3, C0*an_1*n, C1*an_2*n**2)
<class 'tuple'> (an_1, C2*an_3, C0*an_1*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*an_3)
<class 'tuple'> (n, C0*an_2, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_24*an_38*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_24*an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_24*an_38*n)
<class 'tuple'> (C0*an_1, C1*n, an_24*an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_4*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4*n**2)
<class 'tuple'> (C0*n, an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_49 <class 'ProGED.model.Model'>
an_49 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n**2)
<class 'tuple'> (an_2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3 <class 'ProGED.model.Model'>
C0*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*n)
<class 'tuple'> (an_1**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.25227408099999593


Equation discovery for all (chosen) OEIS sequences took 0.25227967300088494 secconds, i.e. 0.004204661216681416 minutes or 7.007768694469026e-05 hours.
100





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 100
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 33 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_3 + an_2*n, p = 9.688110097465382e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1, p = 1.059781868872741e-12, parse trees = 1, valid = False
-> C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1, p = 8.055637792002801e-16, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_24 + an_1*n, p = 8.942870862145495e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_42, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n, p = 3.927708881360121e-08, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*an_7 + an_1, p = 9.221504209964569e-09, parse trees = 1, valid = False
-> an_4*n**2, p = 0.0001370491803278689, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n, p = 1.6161673500296354e-10, parse trees = 1, valid = False
-> an_1*an_41*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1**2, p = 1.7438598175437693e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130323e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_17*an_3, p = 3.881877507915451e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**3*an_3*n**2, p = 6.836815090432192e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2, p = 6.37956889718409e-09, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_45*n + an_1**2, p = 4.9354523138031163e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n, p = 3.3704686616002673e-12, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n, p = 4.927025887807025e-11, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2, p = 2.6055771886060754e-13, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_2*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_3, an_2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*an_2, C0*an_1*n**2, C2*an_2*an_29*n)
<class 'tuple'> (an_1, C1*an_1, C3*an_2, C0*an_1*n**2, C2*an_2*an_29*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_4, C2*an_41, C0*an_1**3*an_5*n**3)
<class 'tuple'> (an_1, C1*an_4, C2*an_41, C0*an_1**3*an_5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*an_24 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*an_24 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*an_24, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*an_24, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_42 <class 'ProGED.model.Model'>
C0*an_1 + an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_42, C0*an_1)
<class 'tuple'> (an_42, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (n, C2*n, C1*an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*an_7 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*an_7 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_4*an_7)
<class 'tuple'> (an_1, C0*an_1, C1*an_4*an_7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n**2 <class 'ProGED.model.Model'>
an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C3*an_2, C4*an_3, C0*an_1*n, C2*an_2*n)
<class 'tuple'> (n, C1*an_1, C3*an_2, C4*an_3, C0*an_1*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_41*n <class 'ProGED.model.Model'>
an_1*an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1**2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17*an_3 <class 'ProGED.model.Model'>
an_17*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_17, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**3*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**3*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**3*an_3*n**2)
<class 'tuple'> (C0*an_1, an_1**3*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1**2*n**2, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n, an_1**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_45*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_45*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*an_45*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C3*n**3, C2*an_2*n**2, C1*an_2*an_3*n)
<class 'tuple'> (n, C0*an_1, C3*n**3, C2*an_2*n**2, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n, C0*an_1**3*an_2*n)
<class 'tuple'> (n, C2*n, C1*an_1*n, C0*an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_2*n, C1*an_49*an_5*n**2)
<class 'tuple'> (n**2, C0*an_1*an_2*n, C1*an_49*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.32074039099825313


Equation discovery for all (chosen) OEIS sequences took 0.3207461889996921 secconds, i.e. 0.005345769816661535 minutes or 8.909616361102558e-05 hours.
