"""
estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824]]) Matrix([[610], [987], [1597]])
x [Matrix([
[1],
[0],
[0]])]
-- ***** ----- ***** ----- ***** ----- ***** ---
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
x [Matrix([
[1],
[0],
[0]])]
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end

X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181], [6765], [10946]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095]]) Matrix([[610], [987], [1597], [2584], [4181]])
x [Matrix([
[1],
[0],
[0]])]
Uuhuu! Eqation found even after double checkingwith 5 equations :)
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
chosen final nof_eqs: 49
X an Y shapes: (33, 25) (33, 1)
--<< inside model2data end

X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], """

"""
[39, 39088169, 2
4157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229,
317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 
        514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095], [6765, 22, 26489320], [10946, 23, 74952952], [17711, 24, 214583616], [28657, 25, 608580000], [46368, 26, 1724374600], [75025, 27, 4867252335], [121393, 28, 13705262368], [196418, 29, 38488183344], [317811, 30, 107833821300], [514229, 31, 301445595880], [832040, 32, 840933468160], [1346269, 33, 2341340180487], [2178309, 34, 6506836232296], [3524578, 35, 18051918509800], [5702887, 36, 49999720389840], [9227465, 37, 138274245022320], [14930352, 38, 381839035289608], [24157817, 39, 1052973943522839], [39088169, 40, 2899904353283200], [63245986, 41, 7976395596486240], [102334155, 42, 21913554738518100], [165580141, 43, 60134879328372472], [267914296, 44, 164842869592425376], [433494437, 45, 451403706958012575], [701408733, 46, 1234897858587747880], [1134903170, 47, 3375097867300613080], [1836311903, 48, 9216126132739515648], [2971215073, 49, 25143942550232165184]]) Matrix([[610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073]])
x [Matrix([
[1],
[0],
[0]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [1, 0, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1*an_17*n**2 + an_1                                                ; p: 4.310243790083787e-10  ; error: 0
Estimating model an_9
"""

from sympy import Matrix
import sympy as sp

print(2)
A, b = Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095], [6765, 22, 26489320], [10946, 23, 74952952], [17711, 24, 214583616], [28657, 25, 608580000], [46368, 26, 1724374600], [75025, 27, 4867252335], [121393, 28, 13705262368], [196418, 29, 38488183344], [317811, 30, 107833821300], [514229, 31, 301445595880], [832040, 32, 840933468160], [1346269, 33, 2341340180487], [2178309, 34, 6506836232296], [3524578, 35, 18051918509800], [5702887, 36, 49999720389840], [9227465, 37, 138274245022320], [14930352, 38, 381839035289608], [24157817, 39, 1052973943522839], [39088169, 40, 2899904353283200], [63245986, 41, 7976395596486240], [102334155, 42, 21913554738518100], [165580141, 43, 60134879328372472], [267914296, 44, 164842869592425376], [433494437, 45, 451403706958012575], [701408733, 46, 1234897858587747880], [1134903170, 47, 3375097867300613080], [1836311903, 48, 9216126132739515648], [2971215073, 49, 25143942550232165184]]), Matrix([[610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073]])
x = Matrix([
[1],
[0],
[0]])

print(A*x == b)

print(3)

def an(seq):
   return seq[0] + seq[1] 











def test_by_hand(seq, eq: func):





