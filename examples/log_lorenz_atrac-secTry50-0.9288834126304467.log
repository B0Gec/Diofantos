["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
50 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
ModelBox: 28 models
-> C0*z**3 + C1, p = 0.0002173353984000001, parse trees = 1, valid = True, error = 14.340019334256773
-> C0*x, p = 0.04752, parse trees = 1, valid = True, error = 20.29842225408522
-> C0*z, p = 0.048960000000000004, parse trees = 1, valid = True, error = 36.16448835662133
-> C0*x*y**2*z, p = 0.00011260643328000003, parse trees = 1, valid = False
-> C0*y*z + C1, p = 8.934064128e-05, parse trees = 1, valid = True, error = 6.338939094906707
-> C0*y + C1, p = 0.02371088941056, parse trees = 5, valid = True, error = 0.0790436852541618
-> C0*x + C1, p = 0.025548931491220686, parse trees = 4, valid = True, error = 7.153700074732472
-> C0*x*y, p = 0.006272640000000001, parse trees = 1, valid = True, error = 18.605973444506255
-> C0*z + C1, p = 0.011750400000000001, parse trees = 1, valid = True, error = 17.46640054472541
-> C0*y, p = 0.04752, parse trees = 1, valid = True, error = 4.245064493792276
-> C0*x + C1*z + C2, p = 8.934064128000002e-05, parse trees = 1, valid = True, error = 1.5205971607204074
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.015314432643179662
-> C0*y + C1*z, p = 0.0031021056, parse trees = 2, valid = True, error = 0.060188275135421306
-> C0*y*z**2, p = 0.0008789299200000002, parse trees = 1, valid = True, error = 42.78940922513272
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 1.0022924432802545
-> C0*x*y + C1*y*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 0.36764723326645654
-> C0*y*z + C1*y + C2, p = 1.1792964648960004e-05, parse trees = 1, valid = True, error = 0.06415260868383305
-> C0*x*y*z, p = 0.0017061580800000003, parse trees = 2, valid = True, error = 38.754215683298355
-> C0*x + C1*y, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 0.04154030483511086
-> C0*y**2 + C1*z, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*y + C2, p = 1.5823106262171657e-07, parse trees = 1, valid = True, error = 0.033733015825372345
-> C0*x*y**2 + C1, p = 0.0001987172352000001, parse trees = 1, valid = False
-> C0*x*z + C1, p = 0.0031021056000000006, parse trees = 2, valid = True, error = 4.755148102282279
-> C0*y**2, p = 0.006272640000000001, parse trees = 1, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 10.400315900469298
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 7.083023289037286
-> C0*x*z + C1*z**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 3.818679093430924
-> C0*x*y + C1, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 2.8130510380696276

Final score:
model: 1.73280057786365*z**3 + 10.0                                          ; error: 14.340019334256773
model: 10.0*x                                                                ; error: 20.29842225408522
model: 10.0*z                                                                ; error: 36.16448835662133
model: -3.38690482115004*x*y**2*z                                            ; error: 100000000
model: 4.18605611279277*y*z + 10.0                                           ; error: 6.338939094906707
model: 10.0*y + 1.43906342645119                                             ; error: 0.0790436852541618
model: 10.0*x + 10.0                                                         ; error: 7.153700074732472
model: 4.65979037456926*x*y                                                  ; error: 18.605973444506255
model: 10.0*z + 10.0                                                         ; error: 17.46640054472541
model: 10.0*y                                                                ; error: 4.245064493792276
model: 10.0*x + 10.0*z + 10.0                                                ; error: 1.5205971607204074
model: -0.360653370071766*x**2*z + 1.41683757287828*y*z + 10.0*y + 0.367677554884378; error: 0.015314432643179662
model: 10.0*y + 2.70413363432848*z                                           ; error: 0.060188275135421306
model: 1.78718085684405*y*z**2                                               ; error: 42.78940922513272
model: 0.157245188136928*x**3 + 10.0*y                                       ; error: 1.0022924432802545
model: 5.89618966090453*x*y - 6.70966397491694*y*z + 10.0                    ; error: 0.36764723326645654
model: 0.111100569663053*y*z + 10.0*y + 1.2434881342623                      ; error: 0.06415260868383305
model: 1.27706294777846*x*y*z                                                ; error: 38.754215683298355
model: 2.11962015935893*x + 10.0*y                                           ; error: 0.04154030483511086
model: -0.712042775017622*y**2 - 4.3192592602528*z                           ; error: 100000000
model: 1.50261267138744*x + 10.0*y + 0.425370621826721                       ; error: 0.033733015825372345
model: -2.62258173984361*x*y**2 + 0.0238945748926145                         ; error: 100000000
model: 7.1844291901872*x*z + 10.0                                            ; error: 4.755148102282279
model: 3.8630466608656*y**2                                                  ; error: 100000000
model: 10.0*x + 1.20729041242794*z**3                                        ; error: 10.400315900469298
model: 5.42549061738763*x**2                                                 ; error: 7.083023289037286
model: 10.0*x*z - 4.93522231603602*z**2 + 10.0                               ; error: 3.818679093430924
model: 2.34440855803764*x*y + 10.0                                           ; error: 2.8130510380696276
[2] [1, 3]
