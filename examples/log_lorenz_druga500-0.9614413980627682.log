["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
500 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: operands could not be broadcast together with shapes (1000,1) (879,1) !! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
ModelBox: 122 models
-> C0*z**3 + C1, p = 0.0002173353984000001, parse trees = 1, valid = True, error = 0.00013976784947620878
-> C0*x, p = 0.04752, parse trees = 1, valid = True, error = 0.025164430092113322
-> C0*z, p = 0.0505580544, parse trees = 2, valid = True, error = 0.0005854048796515771
-> C0*x*y**2*z, p = 0.00022521286656000008, parse trees = 2, valid = True, error = 0.15351061967395868
-> C0*y*z + C1, p = 0.0052934329958400006, parse trees = 7, valid = True, error = 0.00011760513456376868
-> C0*y + C1, p = 0.03359748243456, parse trees = 11, valid = True, error = 5.913855030904494e-05
-> C0*x + C1, p = 0.03214898012466708, parse trees = 10, valid = True, error = 0.0003140993251310258
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 0.10226340810217253
-> C0*z + C1, p = 0.03382370500608001, parse trees = 11, valid = True, error = 7.442889195479053e-05
-> C0*y, p = 0.04752, parse trees = 1, valid = True, error = 0.0140414500441273
-> C0*x + C1*z + C2, p = 0.0015783513292800002, parse trees = 5, valid = True, error = 1.1046431942473428e-05
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 6.988672961352998e-07
-> C0*y + C1*z, p = 0.003152731963392, parse trees = 3, valid = True, error = 9.671424118058083e-05
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.10093180808412433
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.013863217396700218
-> C0*x*y + C1*y*z + C2, p = 1.9458391670784007e-05, parse trees = 3, valid = True, error = 7.757814008748921e-05
-> C0*y*z + C1*y + C2, p = 6.093031735296002e-05, parse trees = 2, valid = True, error = 6.992454448877408e-07
-> C0*x*y*z, p = 0.00255923712, parse trees = 3, valid = True, error = 0.13934505353550872
-> C0*x + C1*y, p = 0.0030108672000000005, parse trees = 2, valid = True, error = 0.0028402210926832872
-> C0*y**2 + C1*z, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*y + C2, p = 0.0003664569624433578, parse trees = 3, valid = True, error = 6.893980175912716e-06
-> C0*x*y**2 + C1, p = 0.0003974344704000002, parse trees = 2, valid = True, error = 0.0004422018627730018
-> C0*x*z + C1, p = 0.005769916416000001, parse trees = 6, valid = True, error = 0.00020366879018174388
-> C0*y**2, p = 0.006272640000000001, parse trees = 1, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 0.004110592357660955
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.141199920662858
-> C0*x*z + C1*z**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 6.909600773543586e-05
-> C0*x*y + C1, p = 0.006744342528000003, parse trees = 6, valid = True, error = 0.0001067192046841156
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = True, error = 7.241553096788452e-05
-> C0*x*z + C1*y, p = 0.0004094779392000001, parse trees = 2, valid = True, error = 0.011296097913426735
-> C0*x*y + C1*z + C2, p = 4.913735270400001e-05, parse trees = 1, valid = True, error = 6.680961710888909e-05
-> C0*x**2 + C1*y**2, p = 2.6230675046400012e-05, parse trees = 1, valid = False
-> C0*y*z, p = 0.012925440000000002, parse trees = 2, valid = True, error = 0.04674171489237819
-> C0*x*z + C1*z + C2, p = 1.5066405745459206e-05, parse trees = 2, valid = True, error = 5.373636422370473e-05
-> C0*x*z, p = 0.012953284499865603, parse trees = 3, valid = True, error = 0.10418595422359905
-> C0*x**2*z**2 + C1, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 0.0005146541262107054
-> C0*x*y*z + C1*x + C2, p = 3.736011200790529e-07, parse trees = 1, valid = True, error = 0.0001503749898633337
-> C0*z**2 + C1, p = 0.003985266416025601, parse trees = 5, valid = True, error = 0.00010754794428136053
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 0.024745360175943403
-> C0*x + C1*z**3 + C2, p = 1.6524445011148806e-06, parse trees = 1, valid = True, error = 3.5168667417851847e-05
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.14087791486474538
-> C0*x*y**2*z + C1*x*z, p = 4.851625656582146e-07, parse trees = 1, valid = True, error = 0.09800562202086588
-> C0*x**2*z + C1, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.0004895255801963265
-> C0*y + C1*z + C2, p = 0.0012060986572800002, parse trees = 4, valid = True, error = 2.1970058720255605e-05
-> C0*y**2 + C1*z + C2, p = 6.25341605452186e-05, parse trees = 3, valid = False
-> C0*y**2*z + C1*z + C2, p = 9.121366738416457e-10, parse trees = 1, valid = False
-> C0*y*z + C1*z, p = 0.0004218863616000001, parse trees = 2, valid = True, error = 2.8141092665656192e-05
-> C0*x*y*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.022562076811422898
-> C0*x**2*z, p = 0.0008530790400000002, parse trees = 1, valid = True, error = 0.15590741628648946
-> C0*x + C1*z**2, p = 0.00021094318080000006, parse trees = 1, valid = True, error = 0.0002117150424445243
-> C0*x*y**2*z**2, p = 3.062894985216001e-05, parse trees = 2, valid = True, error = 0.15982390160295049
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 0.16081685420404615
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 2.1524334502925365e-05
-> C0*y**2*z, p = 0.0008530790400000001, parse trees = 1, valid = True, error = 0.10268901935885946
-> C0*y**2 + C1, p = 0.0030316783140864004, parse trees = 3, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 0.00031036166775381247
-> C0*x*y**2*z**2 + C1, p = 1.7642275114844168e-06, parse trees = 2, valid = True, error = 0.0005163007318511068
-> C0*y*z**2 + C1, p = 0.00042258622044753113, parse trees = 3, valid = True, error = 0.0001645041964382536
-> C0*x + C1*y**2, p = 0.00019871723520000005, parse trees = 1, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.0027822709740269094
-> C0*z**2 + C1*z, p = 7.0938274037760035e-06, parse trees = 1, valid = True, error = 2.2801969233821644e-05
-> C0*x*y*z + C1*x, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.01894378098990219
-> C0*y**3 + C1, p = 4.7692136448000024e-05, parse trees = 1, valid = False
-> C0*x + C1*z, p = 0.003151242952704, parse trees = 3, valid = True, error = 1.1046222407959293e-05
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 0.11418444242012032
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.06928466061923667
-> C0*x**2*y**2*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.16309295157940543
-> C0*y + C1*z**2 + C2, p = 5.062636339200002e-05, parse trees = 1, valid = True, error = 5.164407888082904e-06
-> C0*x*y*z + C1*z + C2, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 6.501279001322108e-05
-> C0*x**2 + C1*z, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.00047272228326334493
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = True, error = 6.492854191452938e-05
-> C0*x*y*z**2, p = 0.00011601874944000005, parse trees = 1, valid = True, error = 0.15440578016475393
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = True, error = 0.000541682633457782
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.12022269792825135
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z + C1, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.00033546265814838916
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 4.789927820975261e-05
-> C0*x + C1*y**3 + C2, p = 3.6261285184143386e-07, parse trees = 1, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005849304376231588
-> C0*x**2*z**3, p = 1.577854992384001e-05, parse trees = 1, valid = True, error = 0.16248988229629668
-> C0*x*y + C1*y**2 + C2, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y**2, p = 0.0016559769600000007, parse trees = 2, valid = True, error = 0.13642434974667567
-> C0*x**2 + C1, p = 0.0030108672000000005, parse trees = 2, valid = True, error = 0.0004861633280976858
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 0.09585690918109353
-> C0*x**3*y*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.1633959344456539
-> C0*x**2 + C1*y, p = 0.00019871723520000005, parse trees = 1, valid = True, error = 0.012557236707924788
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = True, error = 0.0003132105167142436
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 2.3543617294254247e-06
-> C0*x**2*z + C1*z + C2, p = 1.3365359935488004e-05, parse trees = 2, valid = True, error = 6.961450369791943e-05
-> C0*y*z + C1*z + C2, p = 5.0626363392000017e-05, parse trees = 1, valid = True, error = 9.077712162691747e-06
-> C0*x**2 + C1*y + C2, p = 5.043920350740482e-05, parse trees = 2, valid = True, error = 4.373553946151303e-05
-> C0*y**2 + C1*y, p = 0.00019871723520000005, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2, p = 9.538427289600002e-05, parse trees = 2, valid = True, error = 0.00027772282158535313
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0005349476975391867
-> C0*x*z**3 + C1*z, p = 3.901605072076802e-06, parse trees = 1, valid = True, error = 0.0005123355531107803
-> C0*x**3*y*z + C1*x, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.025148489336732485
-> C0*x**2*y + C1, p = 2.7470670594048012e-06, parse trees = 1, valid = True, error = 0.00047084808150840777
-> C0*x*z**3, p = 0.00011953446912000005, parse trees = 1, valid = True, error = 0.15477931892478025
-> C0*x*y + C1*z, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.00020907509748767201
-> C0*y*z**3, p = 0.00011953446912000005, parse trees = 1, valid = True, error = 0.13565169281943196
-> C0*x*z**2 + C1*x + C2, p = 9.238136787409312e-08, parse trees = 1, valid = True, error = 0.00015132860249869346
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = True, error = 0.0005411302959992331
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.0005411583540273989
-> C0*x*y**2 + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 5.5057729867603324e-05
-> C0*x*y**2*z + C1, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.00048683955216825527
-> C0*x*z + C1*z, p = 0.00021094318080000006, parse trees = 1, valid = True, error = 0.0005847978817115498
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = True, error = 6.838922898144445e-06
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = True, error = 0.013893172598415824
-> C0*y**2*z + C1*y*z + C2, p = 8.821137557422082e-07, parse trees = 1, valid = True, error = 5.4451114266017036e-05
-> C0*y + C1*z**2, p = 0.00021094318080000008, parse trees = 1, valid = True, error = 0.008149138287549736
-> C0*x**3*y**2, p = 1.4426871275520007e-05, parse trees = 1, valid = True, error = 0.1630868759399481
-> C0*x*y + C1*x + C2, p = 4.769213644800001e-05, parse trees = 1, valid = True, error = 1.274152173787032e-05
-> C0*y*z + C1*y, p = 0.0004094779392000001, parse trees = 2, valid = True, error = 0.013816312795975475
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.0001995170710221986
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.04407841172527722
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = True, error = 0.00042255359519223766

Final score:
model: 1.12302947653482*x**2*z + 9.99882735848344*y*z - 5.18698009182148*y - 1.81835639853047; error: 6.988672961352998e-07
model: 9.99934179545694*y*z - 5.17762818740013*y - 1.81460767357383          ; error: 6.992454448877408e-07
model: -9.99881932513167*x - 1.23279154926423*y - 0.586156021835039          ; error: 6.893980175912716e-06
model: -4.94582822167473*y + 9.99943497011761*z**2 - 2.44428498414913        ; error: 5.164407888082904e-06
model: -9.99891490391562*x**2 - 9.99977636898923*x - 1.16246826288266*y - 0.460384006140183; error: 2.3543617294254247e-06
model: 9.99875390517196*y*z - 9.56022039326395*z + 0.688378322139915         ; error: 9.077712162691747e-06
model: 9.94450729238161*x**3*y**2 - 9.99525748753838*x - 1.22774272295107*y - 0.587590737697505;
                                                                               error: 6.838922898144445e-06
[2] [1, 3]


z*(x2-y) -y 1.
y-z2
x(x-1) -y
x(x2y2-1) -y
x-y
y*(z-1)
z(y-1)

Really:  dy/dt = x*(\rho-z) - y
    tj. x(z-1) - y = x-x*z-y