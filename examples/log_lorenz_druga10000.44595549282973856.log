["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
1000 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: operands could not be broadcast together with shapes (1000,1) (622,1) !! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
Estimating model C0*x**2 + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1
Estimating model C0*x*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1
Estimating model C0*x + C1*y**3*z**2 + C2
Estimating model C0*x**2*z + C1*x**2 + C2*x*z + C3
Estimating model C0*x*y**2 + C1*x*y*z + C2
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x + C1*y + C2*z**2 + C3
Estimating model C0*x**2*y**3*z
Estimating model C0*x*y + C1*x*z**2 + C2*x
Estimating model C0*y*z**2 + C1*y*z
Estimating model C0*x*y**2 + C1*z
Estimating model C0*x**3*y*z**3 + C1*z + C2
Estimating model C0*x*y**2*z + C1*x + C2
Estimating model C0*x + C1*y*z
Estimating model C0*x*y**3*z**2 + C1
Estimating model C0*x*y*z + C1*x*y + C2
Estimating model C0*y**3 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*z**2 + C2
Estimating model C0*x*z + C1*y*z
Estimating model C0*x**2*y
Estimating model C0*x*z + C1*y + C2*z + C3
Estimating model C0*x**2*y*z
Estimating model C0*x**2*y*z + C1*y + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x**2*y*z + C1*y
Estimating model C0*y**4 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4 + C1*y + C2
Estimating model C0*x*y*z**2 + C1
Estimating model C0*x**2 + C1*x*y*z
Estimating model C0*x*y**2 + C1*x + C2*z + C3
Estimating model C0*x**3*z
Estimating model C0*x*y**2*z**2 + C1*y + C2
Estimating model C0*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3
Estimating model C0*x + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2
Estimating model C0*x*y*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2*y + C3
Estimating model C0*x*y + C1*x + C2*y + C3
Estimating model C0*x*y**2*z + C1*x + C2*y + C3
Estimating model C0*x**2*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2 + C2
Estimating model C0*x**3*y*z**3
Estimating model C0*y**2*z**2
Estimating model C0*x*y**4*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1*x + C2
Estimating model C0*y**3*z
Estimating model C0*x*z + C1*x
Estimating model C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5
Estimating model C0*x**2*y**3 + C1
Estimating model C0*x*y*z + C1*x + C2*y
Estimating model C0*x**2 + C1*x + C2*z + C3
Estimating model C0*x*y + C1*x + C2*y**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*x + C2*y**2 + C3
Estimating model C0*x*z + C1*y**2*z + C2
Estimating model C0*x*y**2 + C1*y*z + C2
Estimating model C0*x*y + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y
Estimating model C0*x*y + C1*x
Estimating model C0*x**3 + C1*z + C2
Estimating model C0*y**2*z**2 + C1*y + C2
Estimating model C0*x**2*y*z**2
Estimating model C0*x**2*z**2 + C1*x
Estimating model C0*x*z + C1*y + C2
Estimating model C0*x*z**3 + C1
Estimating model C0*x + C1*y*z**2 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6
Estimating model C0*x*y**3*z
Estimating model C0*x**3 + C1*x*y + C2
Estimating model C0*x*y + C1*y + C2
Estimating model C0*x**2*z**2
Estimating model C0*x**3*y**2*z**2 + C1
ModelBox: 188 models
-> C0*z**3 + C1, p = 0.0002173353984000001, parse trees = 1, valid = True, error = 0.0001398085692382732
-> C0*x, p = 0.04752, parse trees = 1, valid = True, error = 0.025164430092113322
-> C0*z, p = 0.0505580544, parse trees = 2, valid = True, error = 0.0005854031656523041
-> C0*x*y**2*z, p = 0.0003378192998400001, parse trees = 3, valid = True, error = 0.15351061967395868
-> C0*y*z + C1, p = 0.0075889911398400005, parse trees = 10, valid = True, error = 0.00011759857033693749
-> C0*y + C1, p = 0.03375514238976, parse trees = 12, valid = True, error = 5.913944825192856e-05
-> C0*x + C1, p = 0.03354952606002708, parse trees = 13, valid = True, error = 0.0003139859304245479
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 0.10226340810217253
-> C0*z + C1, p = 0.035051800592646155, parse trees = 15, valid = True, error = 7.443540794767078e-05
-> C0*y, p = 0.0490254336, parse trees = 2, valid = True, error = 0.0140414500441273
-> C0*x + C1*z + C2, p = 0.0015783513292800002, parse trees = 5, valid = True, error = 1.103140580532248e-05
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 6.983005198103428e-07
-> C0*y + C1*z, p = 0.003152731963392, parse trees = 3, valid = True, error = 9.673283434615108e-05
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.10093180808412433
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.013863217396700218
-> C0*x*y + C1*y*z + C2, p = 1.9458391670784007e-05, parse trees = 3, valid = True, error = 7.757997510242076e-05
-> C0*y*z + C1*y + C2, p = 0.00011006767005696003, parse trees = 3, valid = True, error = 6.989828748530816e-07
-> C0*x*y*z, p = 0.005118474240000001, parse trees = 6, valid = True, error = 0.13934505353550872
-> C0*x + C1*y, p = 0.0030108672000000005, parse trees = 2, valid = True, error = 0.00284022093802017
-> C0*y**2 + C1*z, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*y + C2, p = 0.001461815267190878, parse trees = 7, valid = True, error = 6.897124835946193e-06
-> C0*x*y**2 + C1, p = 0.0006438438420480004, parse trees = 4, valid = True, error = 0.00044172121215035887
-> C0*x*z + C1, p = 0.008244155842560002, parse trees = 11, valid = True, error = 0.00020366873906381644
-> C0*y**2, p = 0.006272640000000001, parse trees = 1, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 0.004110592357660955
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.141199920662858
-> C0*x*z + C1*z**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 6.8910594195207e-05
-> C0*x*y + C1, p = 0.007126457706086403, parse trees = 8, valid = True, error = 0.00010671916105360084
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = True, error = 7.25017735596662e-05
-> C0*x*z + C1*y, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.011296120953954979
-> C0*x*y + C1*z + C2, p = 6.160959211674012e-05, parse trees = 3, valid = True, error = 6.681276586981587e-05
-> C0*x**2 + C1*y**2, p = 2.6230675046400012e-05, parse trees = 1, valid = False
-> C0*y*z, p = 0.012925440000000002, parse trees = 2, valid = True, error = 0.04674171489237819
-> C0*x*z + C1*z + C2, p = 1.5066405745459206e-05, parse trees = 2, valid = True, error = 5.36597742509015e-05
-> C0*x*z, p = 0.012953284499865603, parse trees = 3, valid = True, error = 0.10418595422359905
-> C0*x**2*z**2 + C1, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 0.0005141355911935479
-> C0*x*y*z + C1*x + C2, p = 3.736011200790529e-07, parse trees = 1, valid = True, error = 0.00015011686513733154
-> C0*z**2 + C1, p = 0.003985266416025601, parse trees = 5, valid = True, error = 0.00010758146181315078
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 0.024745360175943403
-> C0*x + C1*z**3 + C2, p = 1.6524445011148806e-06, parse trees = 1, valid = True, error = 3.519139046016949e-05
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.14087791486474538
-> C0*x*y**2*z + C1*x*z, p = 4.851625656582146e-07, parse trees = 1, valid = True, error = 0.09800562202086588
-> C0*x**2*z + C1, p = 0.0006142169088000002, parse trees = 3, valid = True, error = 0.0004896932963556232
-> C0*y + C1*z + C2, p = 0.0016916352624230405, parse trees = 8, valid = True, error = 2.1989640452145025e-05
-> C0*y**2 + C1*z + C2, p = 6.25341605452186e-05, parse trees = 3, valid = False
-> C0*y**2*z + C1*z + C2, p = 9.121366738416457e-10, parse trees = 1, valid = False
-> C0*y*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 2.8144027633536044e-05
-> C0*x*y*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.022562076811422898
-> C0*x**2*z, p = 0.0017061580800000003, parse trees = 2, valid = True, error = 0.15590741628648946
-> C0*x + C1*z**2, p = 0.00021094318080000006, parse trees = 1, valid = True, error = 0.0002116835117374339
-> C0*x*y**2*z**2, p = 3.062894985216001e-05, parse trees = 2, valid = True, error = 0.15982390160295049
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 0.16081685420404615
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 2.150347818730813e-05
-> C0*y**2*z, p = 0.0008530790400000001, parse trees = 1, valid = True, error = 0.10268901935885946
-> C0*y**2 + C1, p = 0.0030316783140864004, parse trees = 3, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 0.00031022156371489254
-> C0*x*y**2*z**2 + C1, p = 1.7642275114844168e-06, parse trees = 2, valid = True, error = 0.0005158057194952752
-> C0*y*z**2 + C1, p = 0.0006841557646395311, parse trees = 5, valid = True, error = 0.00016449048041240082
-> C0*x + C1*y**2, p = 0.00019871723520000005, parse trees = 1, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.0027832705793732733
-> C0*z**2 + C1*z, p = 7.0938274037760035e-06, parse trees = 1, valid = True, error = 2.276722290846146e-05
-> C0*x*y*z + C1*x, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.01894378098990219
-> C0*y**3 + C1, p = 0.00024640937164800014, parse trees = 2, valid = False
-> C0*x + C1*z, p = 0.003151242952704, parse trees = 3, valid = True, error = 1.1031882423172552e-05
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 0.11418444242012032
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.06928466061923667
-> C0*x**2*y**2*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.1631058960201138
-> C0*y + C1*z**2 + C2, p = 6.277669060608002e-05, parse trees = 2, valid = True, error = 5.184025383626536e-06
-> C0*x*y*z + C1*z + C2, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 6.495098564213466e-05
-> C0*x**2 + C1*z, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.0004719305409410341
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y*z**2, p = 0.0003480562483200001, parse trees = 3, valid = True, error = 0.15440578016475393
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = True, error = 0.0005416829857014192
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.12022269792825135
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z + C1, p = 0.0012893641349529601, parse trees = 8, valid = True, error = 0.0003357620519742529
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 4.782259681065929e-05
-> C0*x + C1*y**3 + C2, p = 3.6261285184143386e-07, parse trees = 1, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005845301866567717
-> C0*x**2*z**3, p = 1.577854992384001e-05, parse trees = 1, valid = True, error = 0.16248988229629668
-> C0*x*y + C1*y**2 + C2, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y**2, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.13642434974667567
-> C0*x**2 + C1, p = 0.0030108672000000005, parse trees = 2, valid = True, error = 0.00048728774194835495
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 0.09585690918109353
-> C0*x**3*y*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.1633857528146189
-> C0*x**2 + C1*y, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 0.012557236707924788
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = True, error = 0.0003135925470718627
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 2.355783614551467e-06
-> C0*x**2*z + C1*z + C2, p = 1.3365359935488004e-05, parse trees = 2, valid = True, error = 6.972439218691954e-05
-> C0*y*z + C1*z + C2, p = 5.0626363392000017e-05, parse trees = 1, valid = True, error = 9.077954488860677e-06
-> C0*x**2 + C1*y + C2, p = 9.813133995540484e-05, parse trees = 3, valid = True, error = 4.3677096653322893e-05
-> C0*y**2 + C1*y, p = 0.00019871723520000005, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2, p = 9.538427289600002e-05, parse trees = 2, valid = True, error = 0.00027758245768817145
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0005348817185915316
-> C0*x*z**3 + C1*z, p = 3.901605072076802e-06, parse trees = 1, valid = True, error = 0.0005124800476222061
-> C0*x**3*y*z + C1*x, p = 9.417861568659461e-07, parse trees = 2, valid = True, error = 0.025073735524865644
-> C0*x**2*y + C1, p = 0.0002014643022594049, parse trees = 2, valid = True, error = 0.0004705778664621335
-> C0*x*z**3, p = 0.0002390689382400001, parse trees = 2, valid = True, error = 0.15477931892478025
-> C0*x*y + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = True, error = 0.00020909879750618388
-> C0*y*z**3, p = 0.00011953446912000005, parse trees = 1, valid = True, error = 0.13565169281943196
-> C0*x*z**2 + C1*x + C2, p = 1.6962245601326541e-06, parse trees = 2, valid = True, error = 0.00015211820651554595
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = True, error = 0.0005411864214249185
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.0005410245354776904
-> C0*x*y**2 + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 5.5028070134369906e-05
-> C0*x*y**2*z + C1, p = 2.8582215320862724e-05, parse trees = 2, valid = True, error = 0.00048678924367265275
-> C0*x*z + C1*z, p = 0.00021094318080000006, parse trees = 1, valid = True, error = 0.000584378997589292
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = True, error = 6.839110918062261e-06
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = True, error = 0.013892668000338181
-> C0*y**2*z + C1*y*z + C2, p = 8.821137557422082e-07, parse trees = 1, valid = False
-> C0*y + C1*z**2, p = 0.00021094318080000008, parse trees = 1, valid = True, error = 0.008149109879952179
-> C0*x**3*y**2, p = 2.8853742551040014e-05, parse trees = 2, valid = True, error = 0.16308943143616692
-> C0*x*y + C1*x + C2, p = 0.00010683038564352003, parse trees = 3, valid = True, error = 1.274520373932418e-05
-> C0*y*z + C1*y, p = 0.0004094779392000001, parse trees = 2, valid = True, error = 0.013817083613598638
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.00019960296705798543
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.04407841172527722
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = True, error = 0.0004215460953982026
-> C0*x**2 + C1*z + C2, p = 5.196766421975043e-05, parse trees = 2, valid = True, error = 5.607935035965063e-05
-> C0*x*z**2 + C1, p = 0.0004218863616000001, parse trees = 2, valid = True, error = 0.00033274824331183347
-> C0*y**2*z + C1, p = 0.0006142169088000002, parse trees = 3, valid = False
-> C0*x*y**3 + C1, p = 2.6230675046400012e-05, parse trees = 1, valid = False
-> C0*x + C1*y**3*z**2 + C2, p = 2.7945363781913173e-08, parse trees = 1, valid = True, error = 0.0002444029756145241
-> C0*x**2*z + C1*x**2 + C2*x*z + C3, p = 3.6887880192125384e-09, parse trees = 1, valid = True, error = 0.00013994249075176192
-> C0*x*y**2 + C1*x*y*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.0002750326599000532
-> C0*x*y + C1*x*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 4.868998107802232e-05
-> C0*x + C1*y + C2*z**2 + C3, p = 9.23813678740931e-08, parse trees = 1, valid = True, error = 2.2565528539985312e-07
-> C0*x**2*y**3*z, p = 1.962054493470721e-06, parse trees = 1, valid = True, error = 0.16302031239417478
-> C0*x*y + C1*x*z**2 + C2*x, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.0071201244552476185
-> C0*y*z**2 + C1*y*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.03292386701373731
-> C0*x*y**2 + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0004932422952630438
-> C0*x**3*y*z**3 + C1*z + C2, p = 7.029533299739621e-11, parse trees = 1, valid = True, error = 7.438306151168376e-05
-> C0*x*y**2*z + C1*x + C2, p = 8.561692335144962e-07, parse trees = 1, valid = True, error = 0.0002663464147364134
-> C0*x + C1*y*z, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.0025313799722576887
-> C0*x*y**3*z**2 + C1, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.0005326091262319022
-> C0*x*y*z + C1*x*y + C2, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 7.745060126913065e-05
-> C0*y**3 + C1*z**2 + C2, p = 8.821137557422085e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z, p = 2.7844499865600006e-05, parse trees = 1, valid = True, error = 0.026677283600953713
-> C0*x**2*y, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.1545521704989816
-> C0*x*z + C1*y + C2*z + C3, p = 2.2171528289782346e-08, parse trees = 1, valid = True, error = 1.5538343937547326e-05
-> C0*x**2*y*z, p = 0.00022521286656000008, parse trees = 2, valid = True, error = 0.16046531144906584
-> C0*x**2*y*z + C1*y + C2, p = 2.0548061604347912e-07, parse trees = 1, valid = True, error = 5.803463708614023e-05
-> C0*x*z + C1*x + C2, p = 1.1792964648960004e-05, parse trees = 1, valid = True, error = 6.8798374327706e-05
-> C0*x**2*y*z + C1*y, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.014032451990857986
-> C0*y**4 + C1*y + C2, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1, p = 6.237167969894402e-05, parse trees = 3, valid = True, error = 0.0004533037879629084
-> C0*x**2 + C1*x*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.11963461246762919
-> C0*x*y**2 + C1*x + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = True, error = 4.375767528775593e-06
-> C0*x**3*z, p = 0.00011260643328000003, parse trees = 1, valid = True, error = 0.16261011272135453
-> C0*x*y**2*z**2 + C1*y + C2, p = 1.1643901575797151e-07, parse trees = 1, valid = True, error = 5.54720679103223e-05
-> C0*y**3, p = 0.0008279884800000003, parse trees = 1, valid = False
-> C0*x + C1*y**2 + C2, p = 2.7470670594048012e-06, parse trees = 1, valid = False
-> C0*x*y*z + C1*y**2 + C2*y + C3, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 6.313689900358318e-06
-> C0*x*y**2*z + C1*x + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 4.290395918577748e-06
-> C0*x**2*y*z + C1*y**2 + C2, p = 6.50962591625742e-09, parse trees = 1, valid = False
-> C0*x**3*y*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = True, error = 0.16346844904324595
-> C0*y**2*z**2, p = 0.00011601874944000005, parse trees = 1, valid = True, error = 0.13575332860079597
-> C0*x*y**4*z + C1*x + C2, p = 1.1342372196486931e-10, parse trees = 1, valid = False
-> C0*y**3*z, p = 0.00022521286656000008, parse trees = 2, valid = True, error = 0.13455354388785448
-> C0*x*z + C1*x, p = 0.00020473896960000005, parse trees = 1, valid = True, error = 0.00590716823029697
-> C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.0005366505099158495
-> C0*x*y*z + C1*x + C2*y, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.0027701840636616053
-> C0*x**2 + C1*x + C2*z + C3, p = 3.73601120079053e-07, parse trees = 1, valid = True, error = 4.757718500427821e-06
-> C0*x*y + C1*x + C2*y**2 + C3, p = 1.994370685127886e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y**2*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.00012586938007814503
-> C0*x*y**2 + C1*y*z + C2, p = 4.9315347850435005e-08, parse trees = 1, valid = True, error = 9.98911849695781e-05
-> C0*x*y + C1*x + C2*z + C3, p = 8.966426881897271e-08, parse trees = 1, valid = True, error = 8.385895751390915e-06
-> C0*x + C1*y**2 + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 0.011732012321748716
-> C0*x**3 + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 7.132344148383748e-05
-> C0*y**2*z**2 + C1*y + C2, p = 5.0809752330751215e-08, parse trees = 1, valid = True, error = 2.8390249495450695e-05
-> C0*x**2*y*z**2, p = 1.531447492608001e-05, parse trees = 1, valid = True, error = 0.16242260299234734
-> C0*x**2*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.024098971564546157
-> C0*x*z + C1*y + C2, p = 6.093031735296002e-05, parse trees = 2, valid = True, error = 4.6394789640612524e-05
-> C0*x*z**3 + C1, p = 2.8688272588800013e-05, parse trees = 1, valid = True, error = 0.0004354391112937945
-> C0*x + C1*y*z**2 + C2, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 4.566208946372706e-05
-> C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6, p = 1.208381853002241e-13, parse trees = 1, valid = False
-> C0*x*y**3*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 0.1594103446687821
-> C0*x**3 + C1*x*y + C2, p = 8.309877854699526e-07, parse trees = 1, valid = True, error = 0.00010227086437881517
-> C0*x*y + C1*y + C2, p = 4.769213644800001e-05, parse trees = 1, valid = True, error = 5.6531853908260945e-05
-> C0*x**2*z**2, p = 0.00011601874944000005, parse trees = 1, valid = True, error = 0.16079196317267827
-> C0*x**3*y**2*z**2 + C1, p = 6.404145866688434e-08, parse trees = 1, valid = True, error = 0.0005416366020720511

Final score:
model: 1.62314098316107*x**2*z + 9.9998474297858*y*z - 5.19069590947189*y - 1.82035847202671; error: 6.983005198103428e-07
model: 9.99909296932257*y*z - 5.17782825360795*y - 1.81471698858679          ; error: 6.989828748530816e-07
model: -9.99845357264696*x - 1.22777497457133*y - 0.586713015108031          ; error: 6.897124835946193e-06
model: -4.94839166351734*y + 9.99359953423365*z**2 - 2.44373697443873        ; error: 5.184025383626536e-06
model: -9.99835858568743*x**2 - 9.99952912707874*x - 1.16211204169756*y - 0.460744896354539; error: 2.355783614551467e-06
model: 9.99984457017807*y*z - 9.55317034800623*z + 0.685891102325515         ; error: 9.077954488860677e-06
model: 8.86359846558621*x**3*y**2 - 9.99579008112683*x - 1.23596044305064*y - 0.586431088504784; error: 6.839110918062261e-06
model: -9.99834683302044*x - 2.71930403651449*y + 4.39340220996639*z**2 - 0.913359144492382; error: 2.2565528539985312e-07
model: 9.99675741915112*x*y**2 - 9.99979520186843*x - 2.64090834060189*z + 0.0806966308381374; error: 4.375767528775593e-06
model: 9.89068887541883*x*y - 9.99902612298054*x - 2.28776558740913*y - 0.601617284929023; error: 6.313689900358318e-06
model: 9.94949890858266*x*y**2*z - 9.99435830235452*x - 1.32985177105574*y - 0.594682162538882; error: 4.290395918577748e-06
model: -9.99908600535477*x**2 - 9.99973115404366*x - 2.14449409512091*z + 0.100385542056008; error: 4.757718500427821e-06
model: -9.99901830682479*x*y - 9.99951474840914*x - 0.291287221068172*z - 0.495470633777226; error: 8.385895751390915e-06
[2] [1, 3]
