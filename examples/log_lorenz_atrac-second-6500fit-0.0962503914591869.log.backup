["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
6500 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x*y**2 + C2
Estimating model C0*x**2 + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1
Estimating model C0*x*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1
Estimating model C0*x + C1*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3*z**2 + C2
Estimating model C0*x**2*z + C1*x**2 + C2*x*z + C3
Estimating model C0*x*y**2 + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x + C1*y + C2*z**2 + C3
Estimating model C0*x**2*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z
Estimating model C0*x*y + C1*x*z**2 + C2*x
Estimating model C0*y*z**2 + C1*y*z
Estimating model C0*x*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z
Estimating model C0*x**3*y*z**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**3 + C1*z + C2
Estimating model C0*x*y**2*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x + C2
Estimating model C0*x + C1*y*z
Estimating model C0*x*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1
Estimating model C0*x*y*z + C1*x*y + C2
Estimating model C0*y**3 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*z**2 + C2
Estimating model C0*x*z + C1*y*z
Estimating model C0*x**2*y
Estimating model C0*x*z + C1*y + C2*z + C3
Estimating model C0*x**2*y*z
Estimating model C0*x**2*y*z + C1*y + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x**2*y*z + C1*y
Estimating model C0*y**4 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4 + C1*y + C2
Estimating model C0*x*y*z**2 + C1
Estimating model C0*x**2 + C1*x*y*z
Estimating model C0*x*y**2 + C1*x + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2*z + C3
Estimating model C0*x**3*z
Estimating model C0*x*y**2*z**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*y + C2
Estimating model C0*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3
Estimating model C0*x + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2
Estimating model C0*x*y*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2*y + C3
Estimating model C0*x*y + C1*x + C2*y + C3
Estimating model C0*x*y**2*z + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x + C2*y + C3
Estimating model C0*x**2*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2 + C2
Estimating model C0*x**3*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**3
Estimating model C0*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2
Estimating model C0*x*y**4*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1*x + C2
Estimating model C0*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z
Estimating model C0*x*z + C1*x
Estimating model C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5
Estimating model C0*x**2*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1
Estimating model C0*x*y*z + C1*x + C2*y
Estimating model C0*x**2 + C1*x + C2*z + C3
Estimating model C0*x*y + C1*x + C2*y**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*x + C2*y**2 + C3
Estimating model C0*x*z + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2*z + C2
Estimating model C0*x*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2
Estimating model C0*x*y + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y
Estimating model C0*x*y + C1*x
Estimating model C0*x**3 + C1*z + C2
Estimating model C0*y**2*z**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*y + C2
Estimating model C0*x**2*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2
Estimating model C0*x**2*z**2 + C1*x
Estimating model C0*x*z + C1*y + C2
Estimating model C0*x*z**3 + C1
Estimating model C0*x + C1*y*z**2 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6
Estimating model C0*x*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z
Estimating model C0*x**3 + C1*x*y + C2
Estimating model C0*x*y + C1*y + C2
Estimating model C0*x**2*z**2
Estimating model C0*x**3*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**4 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**4 + C1
Estimating model C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2
Estimating model C0*x**4*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**2*z + C1
Estimating model C0*x*y + C1*x + C2*y + C3*z
Estimating model C0*x**2*y*z + C1
Estimating model C0*x**2*z + C1*y**3 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**3 + C2*z + C3
Estimating model C0*x*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2
Estimating model C0*x**2*z**2 + C1*z
Estimating model C0*x*z**2 + C1*x + C2*z
Estimating model C0*x**2*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**3 + C2
Estimating model C0*x*y*z + C1*z**2
Estimating model C0*x*y*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1
Estimating model C0*x**3*y + C1
Estimating model C0*x*y + C1*x*z
Estimating model C0*x**4*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**3
Estimating model C0*x*y*z + C1*y + C2*z + C3
Estimating model C0*x*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y + C2
Estimating model C0*x*y*z**2 + C1*y + C2
Estimating model C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2
Estimating model C0*x**2*y + C1*z**2 + C2
Estimating model C0*x**3*y
Estimating model C0*x**3 + C1*y*z + C2
Estimating model C0*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y + C2
Estimating model C0*x**2*y**2*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*z
Estimating model C0*x**2*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*y
Estimating model C0*x**2*y*z + C1*x**2*z + C2*z
Estimating model C0*x**2 + C1*z**2 + C2
Estimating model C0*x*y**2 + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z
Estimating model C0*x*y*z**2 + C1*x + C2
Estimating model C0*x*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y
Estimating model C0*x + C1*y*z + C2*z
Estimating model C0*x**2 + C1*x*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y*z**4
Estimating model C0*x**2*z + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1
Estimating model C0*x*y*z + C1*y*z + C2*z + C3
Estimating model C0*x**3*z + C1*z**2 + C2
Estimating model C0*x**2*z + C1*y
Estimating model C0*x + C1*y*z**2 + C2*z
Estimating model C0*x + C1*y**4 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Estimating model C0*x*y**2 + C1*y*z + C2*z**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2*z**2 + C3
Estimating model C0*x*y + C1*y
Estimating model C0*x**2 + C1*z**2
Estimating model C0*x**2*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z
Estimating model C0*x**2*y*z**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x + C2
Estimating model C0*x**2 + C1*y + C2*z + C3
Estimating model C0*x**3*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1*z
Estimating model C0*x + C1*y*z**3
Estimating model C0*x**2*y**2*z + C1*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*y**3*z
Estimating model C0*x + C1*y*z + C2
Estimating model C0*x*y**2 + C1*x*y*z + C2*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2*x
Estimating model C0*x**3*y**4 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**4 + C1
Estimating model C0*x**3*z + C1
Estimating model C0*x*z**2 + C1*z
Estimating model C0*x*y*z + C1*y*z**3
Estimating model C0*x**2*y + C1*y + C2
Estimating model C0*x*y*z + C1*y*z + C2
Estimating model C0*x**2 + C1*x*z + C2*z + C3
Estimating model C0*x*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y + C2
Estimating model C0*x**2 + C1*y*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*x**2*y**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x + C2
Estimating model C0*x**2*y**2*z + C1*x*y*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x*y*z**2 + C2
Estimating model C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4
Estimating model C0*y*z**2 + C1*y
Estimating model C0*x**2*y**3*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**4
Estimating model C0*x*z**3 + C1*y + C2
Estimating model C0*x**3 + C1
Estimating model C0*x**2*y**3 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*y*z
Estimating model C0*x*y + C1*y*z**2 + C2*z + C3
Estimating model C0*x*y + C1*z**2 + C2*z + C3
Estimating model C0*x**2*z**3 + C1
Estimating model C0*x + C1*y + C2*z
Estimating model C0*x**2 + C1*x*z
Estimating model C0*x**2*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*z**3 + C2
Estimating model C0*x + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y + C3
Estimating model C0*x*y**2*z**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x + C2
Estimating model C0*y*z**2 + C1*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*z**2
Estimating model C0*x**2*y + C1*x
Estimating model C0*x**2*y**2 + C1*x*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x*z + C2*y + C3
Estimating model C0*x*y*z**3 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*z
Estimating model C0*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1
Estimating model C0*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1
Estimating model C0*x**2*z + C1*x + C2
Estimating model C0*x*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2*y + C3
Estimating model C0*x*z + C1*x + C2*z + C3
Estimating model C0*x*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1
Estimating model C0*x**4*y*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**2 + C1*y
Estimating model C0*x*z**4 + C1*z**2 + C2
Estimating model C0*y*z + C1*z**3 + C2
Estimating model C0*x**4*z
Estimating model C0*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**3
Estimating model C0*y*z + C1*y + C2*z + C3
Estimating model C0*z**4
Estimating model C0*x*y**4*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z**2
Estimating model C0*x*y + C1*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2*z**3 + C2
Estimating model C0*x*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y
Estimating model C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Estimating model C0*x*y**2 + C1*x*y*z + C2*x*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2*x*y
Estimating model C0*x + C1*z**2 + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*z + C2
Estimating model C0*x*y*z + C1*y
Estimating model C0*x*z**2 + C1*x*z
Estimating model C0*x**2 + C1*x*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**2*z**3 + C2
Estimating model C0*x**2*y*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*z
Estimating model C0*x + C1*y*z + C2*y + C3
Estimating model C0*x**2*z**2 + C1*x*z + C2*y + C3
Estimating model C0*y*z**3 + C1
Estimating model C0*x**2*y + C1*x*z + C2
Estimating model C0*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z + C1
Estimating model C0*y*z**2 + C1*z + C2
Estimating model C0*x**2*y**3*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x + C2
Estimating model C0*y**3*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y**2*z + C1*x**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x**2 + C2
Estimating model C0*x*y*z + C1*y + C2
Estimating model C0*x**3*y**2*z**2 + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z**2 + C1*x*y + C2
Estimating model C0*x*z**2 + C1*x
Estimating model C0*x**2 + C1*x
Estimating model C0*y**2*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y
Estimating model C0*x + C1*z**2 + C2*z + C3
Estimating model C0*x**2*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2
Estimating model C0*y*z**2 + C1*z
Estimating model C0*x*y*z + C1*z**2 + C2
Estimating model C0*x*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3
Estimating model C0*x**6*z + C1
Estimating model C0*x**2*z + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**2*z
Estimating model C0*x + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2
Estimating model C0*x*y*z**2 + C1*z + C2
Estimating model C0*x**3*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**2 + C1
Estimating model C0*x**2*z**2 + C1*y + C2
Estimating model C0*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z
Estimating model C0*x**3*y + C1*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y + C1*x*y**2*z
Estimating model C0*x**2*y + C1*x**2*z**2 + C2
Estimating model C0*x**2*z**2 + C1*x*y
Estimating model C0*x**2*y + C1*y
Estimating model C0*x*y*z**2 + C1*z
Estimating model C0*x + C1*y*z**2 + C2*y
Estimating model C0*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y
Estimating model C0*x**2*z**2 + C1*x**2 + C2*y*z + C3
Estimating model C0*x**2 + C1*x + C2*y
Estimating model C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Estimating model C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x*z
Estimating model C0*x*y**3*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**4 + C1*z
Estimating model C0*x*y + C1*z**2
Estimating model C0*z**2 + C1*z + C2
Estimating model C0*x*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**4
Estimating model C0*x*z + C1*x + C2*y + C3*z
Estimating model C0*x**2*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1
Estimating model C0*x + C1*y*z + C2*z + C3
Estimating model C0*x*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3
Estimating model C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Estimating model C0*x*z**2 + C1*z + C2
Estimating model C0*x*y**2*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3 + C1
Estimating model C0*x**2 + C1*x*z + C2
Estimating model C0*x**2*y*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1
Estimating model C0*x**2 + C1*z**2 + C2*z
Estimating model C0*x**2 + C1*x*y*z + C2
Estimating model C0*x**2*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**3
Estimating model C0*x + C1*y + C2*z + C3
Estimating model C0*x**2*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3
Estimating model C0*x*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1
Estimating model C0*x**2*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3
Estimating model C0*x**2*y + C1*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*x*y**2*z
Estimating model C0*x*y**3*z**2 + C1*x*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1*x*y*z
Estimating model C0*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2
Estimating model C0*x + C1*y*z**2
Estimating model C0*x*y + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2
Estimating model C0*x*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z**3 + C2
Estimating model C0*x**2*z**2 + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z**2 + C1*y**2 + C2*z
Estimating model C0*x**2*y + C1*x + C2
Estimating model C0*x**2*z + C1*x*y**4*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x*y**4*z**2
Estimating model C0*x*z + C1*y*z + C2
Estimating model C0*x*y + C1*x*z**2
Estimating model C0*x*y + C1*y + C2*z + C3
Estimating model C0*x + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3
Estimating model C0*x**2*z + C1*z**2 + C2
Estimating model C0*x**4*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z
Estimating model C0*x**2*y*z + C1*x
Estimating model C0*x*z + C1*x + C2*y + C3
Estimating model C0*x*y*z + C1*x*y + C2*z + C3
Estimating model C0*y**3 + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y + C2*z + C3
Estimating model C0*x**2*y**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**4
Estimating model C0*x*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x**2*z + C1*x*z
Estimating model C0*x*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*z + C2
Estimating model C0*x*y + C1*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**3*z**2
Estimating model C0*x*y + C1*y*z
Estimating model C0*x**3*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z
Estimating model C0*x**2*y + C1*x*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*x*y**2*z + C2
Estimating model C0*x**2 + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*y
Estimating model C0*x**4*z**2
Estimating model C0*x*y**2*z**3 + C1*x + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3 + C1*x + C2*z
Estimating model C0*x*y**2 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z**2 + C2
Estimating model C0*x**4*z**3 + C1
Estimating model C0*x**4 + C1*x + C2
Estimating model C0*x + C1*y**2*z + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2*y
Estimating model C0*y**2*z + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y*z + C2
Estimating model C0*y**2*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*x*y
Estimating model C0*x**2*z**4 + C1
Estimating model C0*x**2*z**2 + C1*x**2 + C2
Estimating model C0*x*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y + C3
Estimating model C0*x**2 + C1*x*y**5*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**5*z + C2
Estimating model C0*x**2*y*z**2 + C1*x*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x*y
Estimating model C0*x*y**2 + C1*x*z + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*z + C3
Estimating model C0*x**2 + C1*x*y + C2*y
Estimating model C0*x**2*y*z + C1*x + C2
Estimating model C0*x*z**2 + C1*y + C2
Estimating model C0*x + C1*y + C2*z**2
Estimating model C0*x*y*z + C1*x*z**2
Estimating model C0*x + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x + C2*y*z
Estimating model C0*x**4 + C1*x
Estimating model C0*x**2*z + C1*y + C2
Estimating model C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Estimating model C0*x**2*y**2*z**4 + C1*x*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**4 + C1*x*z + C2
Estimating model C0*x + C1*y**4*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4*z
Estimating model C0*x*y*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z**2
Estimating model C0*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x*y**3 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*x + C2
Estimating model C0*x**2*y*z**3 + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3 + C1*x*z
Estimating model C0*x*y + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z
Estimating model C0*x**2*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*z + C2
Estimating model C0*x**2*y*z + C1*x**2*z + C2*y + C3*z
Estimating model C0*x**4*y*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**3 + C1
Estimating model C0*x**4*y + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*x*z + C2
Estimating model C0*x**2*y + C1*z + C2
Estimating model C0*x**2*y + C1*x + C2*y
Estimating model C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z**2 + C1
Estimating model C0*x*y**2 + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y + C2
Estimating model C0*x*y + C1*z**3
Estimating model C0*x**2*y**3 + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*x
Estimating model C0*x + C1*y*z**2 + C2*y + C3
Estimating model C0*x*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4
Estimating model C0*x**3*y*z**2 + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*x + C2*y + C3
Estimating model C0*x**3*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**3*z + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**3*z + C2*z + C3
Estimating model C0*x**3*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1
Estimating model C0*x**2 + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*y
Estimating model C0*x*y*z**2 + C1*x*y + C2
Estimating model C0*x*y**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2
Estimating model C0*x**2*z + C1*y + C2*z + C3
Estimating model C0*x*y**3 + C1*x + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*x + C2*z
Estimating model C0*x*y**2*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*x + C1*y*z**2 + C2*z + C3
Estimating model C0*x**3*y**3 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3 + C1*x*y + C2*x + C3
Estimating model C0*x**3*z + C1*x + C2*z + C3
Estimating model C0*y**3*z + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z
Estimating model C0*x*z**3 + C1*z + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z
Estimating model C0*x**2*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x*z**4 + C1*x
Estimating model C0*x**3*y*z + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x*y*z + C2
Estimating model C0*y**4*z**3 + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**3 + C1*y + C2*z
Estimating model C0*y**4*z**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**2 + C1*z + C2
Estimating model C0*x**2*y**5*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**5*z**2 + C1
Estimating model C0*x*y + C1*x + C2*y
Estimating model C0*x**2*y*z + C1*x**2 + C2
Estimating model C0*x**2*y*z + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z**2
Estimating model C0*y**2 + C1*z**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2*z + C3
Estimating model C0*x**2 + C1*x*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**3*z**2 + C2
Estimating model C0*x**2*z**2 + C1*z + C2
Estimating model C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Estimating model C0*y**3*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y
Estimating model C0*x*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x**3*y*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1
Estimating model C0*x*y**2*z + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x*y + C2
Estimating model C0*y**2*z + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z
Estimating model C0*x*z**3 + C1*x + C2*y*z
Estimating model C0*x*y*z + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y*z**3 + C1*x + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*x + C2*z + C3
Estimating model C0*x*y**3*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1*y
Estimating model C0*x**3*z**2 + C1
Estimating model C0*x*z**3 + C1*z**2 + C2
Estimating model C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z
Estimating model C0*x**2 + C1*x*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**2
Estimating model C0*x**2*y + C1*x*y + C2*z
Estimating model C0*x**2*y*z + C1*x*y + C2*z**2 + C3
Estimating model C0*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y*z**4
Estimating model C0*x**3*y*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x + C2
Estimating model C0*x**2*y + C1*x + C2*y + C3*z**2 + C4
Estimating model C0*x*y*z + C1*x + C2*y + C3
Estimating model C0*y**2 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2
Estimating model C0*x*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*y
Estimating model C0*x**3*y**2*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*y**2*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*y
Estimating model C0*x*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x**2*y*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*y
Estimating model C0*x**2 + C1*x + C2*z**2
Estimating model C0*y**2*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**3 + C1*y**2
Estimating model C0*x**2*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**2
Estimating model C0*x**3*z + C1*x*y + C2*y*z + C3
Estimating model C0*x*y**2*z**2 + C1*y*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*y*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*x*y*z + C2
Estimating model C0*x*y*z + C1*x*y + C2*y
Estimating model C0*x**2*z + C1*x*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x*y**3*z**2
Estimating model C0*x*y**2*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y**2 + C2*y + C3
Estimating model C0*x**2*y**3 + C1*y**2*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*y**2*z**2 + C2
Estimating model C0*x + C1*y*z + C2*z**2 + C3*z + C4
Estimating model C0*y*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y + C2
Estimating model C0*y*z + C1*z**2 + C2
Estimating model C0*x**2*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2
Estimating model C0*x**2 + C1*x*y + C2*x + C3
Estimating model C0*y**2*z + C1*z**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z**2 + C2*z
Estimating model C0*x*z**3 + C1*y*z + C2
Estimating model C0*y**3 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y*z
Estimating model C0*x**2*z + C1*z
Estimating model C0*x*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3
Estimating model C0*x**2 + C1*y + C2*z**2
Estimating model C0*x*y + C1*x + C2*y*z + C3
Estimating model C0*x*z**2 + C1*y + C2*z + C3
Estimating model C0*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y + C2
Estimating model C0*y**4*z
Excepted an error: operands could not be broadcast together with shapes (1000,1) (993,1) !! 
Model: C0*y**4*z
Estimating model C0*x*z**3 + C1*x + C2*z + C3
Estimating model C0*x*z + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2*z
Estimating model C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x
Estimating model C0*x**3*y + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4
Estimating model C0*x*y + C1*y*z**2 + C2
Estimating model C0*x*y**2*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x*z + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**3
Estimating model C0*x**4*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**2*z**2
Estimating model C0*x**2*y + C1*y*z**3 + C2
Estimating model C0*y**3*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z + C2
Estimating model C0*x + C1*y*z**2 + C2*y*z + C3*z + C4
Estimating model C0*x**2 + C1*y*z
Estimating model C0*x*y + C1*x*z + C2*y
Estimating model C0*x**2*y + C1*x + C2*z + C3
Estimating model C0*x**2*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y**2 + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x
Estimating model C0*x**3*y**3*z**4 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**4 + C1*z + C2
Estimating model C0*y*z + C1*z**2
Estimating model C0*x**2*y**3*z + C1*x + C2*y + C3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x + C2*y + C3*z
Estimating model C0*x**3*y + C1*x + C2
Estimating model C0*x*y*z**3 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*y**2*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3
Estimating model C0*x**2*z + C1*x*z**2 + C2
Estimating model C0*x**2 + C1*x*y*z + C2*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y*z + C2*y**2
Estimating model C0*x*y**2*z**4 + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**4 + C1*y + C2*z
Estimating model C0*x**3*y + C1*x*y + C2*z
Estimating model C0*x*y + C1*y + C2*z
Estimating model C0*z**3 + C1*z + C2
Estimating model C0*x*y**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*z + C2
Estimating model C0*x*y**2*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**4 + C1*z
Estimating model C0*x**3*y**3*z**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**3 + C1*z + C2
Estimating model C0*x*y*z**5
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**5
Estimating model C0*x*y**4*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z**3 + C1*y**2
Estimating model C0*y**4
Estimating model C0*x**3 + C1*y*z
Estimating model C0*x**2 + C1*x*y
Estimating model C0*y**2*z**4 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**4 + C1*y
Estimating model C0*x**2*y**3*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**3
Estimating model C0*x**3*y*z + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*y + C2*z
Estimating model C0*x**3*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z
Estimating model C0*x*y*z**7 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**7 + C1
Estimating model C0*y + C1*z**4
Estimating model C0*x*z + C1*y**3*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**3*z + C2
Estimating model C0*x*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2
Estimating model C0*x**4*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**2
Estimating model C0*x*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z
Estimating model C0*x**4*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y
Estimating model C0*y**5*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**5*z + C1
Estimating model C0*z**5 + C1
Estimating model C0*x**2*y**2*z + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x
Estimating model C0*x*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y + C1*z**3 + C2
Estimating model C0*x*z**3 + C1*x + C2
Estimating model C0*x**3*z**2 + C1*x*z
Estimating model C0*x*y*z + C1*y*z
Estimating model C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x**2
Estimating model C0*x*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2
Estimating model C0*x*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**3 + C2
Estimating model C0*x*z + C1*x + C2*y
Estimating model C0*x**2*y*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**4 + C1*z
ModelBox: 582 models
-> C0*z**3 + C1, p = 0.0005941567281954819, parse trees = 6, valid = True, error = 14.340019334254288
-> C0*x, p = 0.049073125736448, parse trees = 3, valid = True, error = 20.29842225408522
-> C0*z, p = 0.050610214895616006, parse trees = 3, valid = True, error = 36.16448835662133
-> C0*x*y**2*z, p = 0.0012386707660800003, parse trees = 11, valid = False
-> C0*y*z + C1, p = 0.008844354370897185, parse trees = 18, valid = True, error = 6.3389390764692894
-> C0*y + C1, p = 0.03571110332596223, parse trees = 26, valid = True, error = 0.07904368526156173
-> C0*x + C1, p = 0.035453365119552056, parse trees = 25, valid = True, error = 7.153700074732472
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 18.605973444506223
-> C0*z + C1, p = 0.03736403312954575, parse trees = 34, valid = True, error = 17.46640054472541
-> C0*y, p = 0.0490254336, parse trees = 2, valid = True, error = 4.245064493792276
-> C0*x + C1*z + C2, p = 0.003170149020676915, parse trees = 24, valid = True, error = 1.5205971607204074
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.015314432620635131
-> C0*y + C1*z, p = 0.003255751967181373, parse trees = 7, valid = True, error = 0.06018827513575914
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 42.78940922513268
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 1.0022924432920572
-> C0*x*y + C1*y*z + C2, p = 2.415635103555408e-05, parse trees = 7, valid = True, error = 0.36764723332339566
-> C0*y*z + C1*y + C2, p = 0.0003735110458301765, parse trees = 19, valid = True, error = 0.06415260868352057
-> C0*x*y*z, p = 0.005118474240000001, parse trees = 6, valid = True, error = 38.7542156832984
-> C0*x + C1*y, p = 0.0030585593364480003, parse trees = 3, valid = True, error = 0.04154030490166526
-> C0*y**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = False
-> C0*x + C1*y + C2, p = 0.003095864070790441, parse trees = 32, valid = True, error = 0.03373301583090899
-> C0*x*y**2 + C1, p = 0.0013468259332915205, parse trees = 10, valid = False
-> C0*x*z + C1, p = 0.009017039509860544, parse trees = 19, valid = True, error = 4.755148102798686
-> C0*y**2, p = 0.006298870675046401, parse trees = 2, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 10.40031590038804
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 7.083023289037299
-> C0*x*z + C1*z**2 + C2, p = 1.4166957522891577e-05, parse trees = 3, valid = True, error = 3.8316474222425265
-> C0*x*y + C1, p = 0.008711362784526343, parse trees = 20, valid = True, error = 2.813051038074814
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y, p = 0.0008254420089569282, parse trees = 5, valid = True, error = 0.6446521490610685
-> C0*x*y + C1*z + C2, p = 0.00035924679305129897, parse trees = 19, valid = True, error = 1.4430990724717707
-> C0*x**2 + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*y*z, p = 0.012953284499865601, parse trees = 3, valid = True, error = 25.608869619131067
-> C0*x*z + C1*z + C2, p = 0.00012450359294086355, parse trees = 8, valid = True, error = 2.806794793630018
-> C0*x*z, p = 0.013008973499596801, parse trees = 5, valid = True, error = 12.308274870423942
-> C0*x**2*z**2 + C1, p = 2.9448343057858572e-05, parse trees = 2, valid = True, error = 14.689578524700048
-> C0*x*y*z + C1*x + C2, p = 3.967582126521022e-05, parse trees = 9, valid = True, error = 1.9847644779605615
-> C0*z**2 + C1, p = 0.0043908909760512005, parse trees = 7, valid = True, error = 7.81841942216366
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 20.38080842203956
-> C0*x + C1*z**3 + C2, p = 3.304889002229762e-06, parse trees = 2, valid = True, error = 2.8530015109893756
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 25.404743100085337
-> C0*x*y**2*z + C1*x*z, p = 9.703251313164293e-07, parse trees = 2, valid = False
-> C0*x**2*z + C1, p = 0.0014119040444226603, parse trees = 13, valid = True, error = 9.2459892152245
-> C0*y + C1*z + C2, p = 0.003069950275218309, parse trees = 30, valid = True, error = 0.05873514815675326
-> C0*y**2 + C1*z + C2, p = 0.00018439479525113865, parse trees = 7, valid = False
-> C0*y**2*z + C1*z + C2, p = 1.7343803188963076e-05, parse trees = 7, valid = False
-> C0*y*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 12.633429315135688
-> C0*x*y*z**2 + C1*x, p = 7.350947964518404e-06, parse trees = 2, valid = True, error = 12.24973295948191
-> C0*x**2*z, p = 0.00255923712, parse trees = 3, valid = True, error = 20.711980967110115
-> C0*x + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 6.345576657439307
-> C0*x*y**2*z**2, p = 7.657237463040004e-05, parse trees = 5, valid = False
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 15.404257203714367
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 0.2434966658387232
-> C0*y**2*z, p = 0.0025592371200000006, parse trees = 3, valid = False
-> C0*y**2 + C1, p = 0.003953518174273536, parse trees = 9, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = False
-> C0*x*y**2*z**2 + C1, p = 1.8230350952005636e-05, parse trees = 8, valid = False
-> C0*y*z**2 + C1, p = 0.0015973338569590712, parse trees = 16, valid = True, error = 16.342591141414815
-> C0*x + C1*y**2, p = 0.0003974344704000001, parse trees = 2, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*z**2 + C1*z, p = 0.0004488584516075522, parse trees = 4, valid = True, error = 11.495591467465164
-> C0*x*y*z + C1*x, p = 5.576342644142901e-05, parse trees = 4, valid = True, error = 9.381577578533184
-> C0*y**3 + C1, p = 0.00024640937164800014, parse trees = 2, valid = False
-> C0*x + C1*z, p = 0.0032526105119922584, parse trees = 6, valid = True, error = 7.721789608887937
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 28.966928980027546
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**2*y**2*z**2, p = 8.086042760970244e-06, parse trees = 4, valid = False
-> C0*y + C1*z**2 + C2, p = 0.0002268061079961601, parse trees = 6, valid = True, error = 0.07192000028177813
-> C0*x*y*z + C1*z + C2, p = 2.043296226937406e-05, parse trees = 4, valid = True, error = 6.348805700544319
-> C0*x**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = True, error = 4.774890435187606
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y*z**2, p = 0.0013922249932800006, parse trees = 12, valid = True, error = 46.24176546593244
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = False
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 2.6475319052475235
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 1.2972261113856007e-05, parse trees = 2, valid = False
-> C0*x*y*z + C1, p = 0.0026835531317103887, parse trees = 24, valid = True, error = 13.119847694366182
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 0.19283042161079364
-> C0*x + C1*y**3 + C2, p = 6.657974862977438e-06, parse trees = 2, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 21.13909536490224
-> C0*x**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = True, error = 35.69215726084812
-> C0*x*y + C1*y**2 + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x*y**2, p = 0.002483965440000001, parse trees = 3, valid = False
-> C0*x**2 + C1, p = 0.004401535213633537, parse trees = 11, valid = True, error = 2.057235397948557
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 29.333260110367036
-> C0*x**3*y*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y, p = 0.0004037298324111361, parse trees = 3, valid = True, error = 0.4267614759046657
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 0.0005611603898739102
-> C0*x**2*z + C1*z + C2, p = 2.1651883095490566e-05, parse trees = 4, valid = True, error = 5.094362219097881
-> C0*y*z + C1*z + C2, p = 0.000287563866095826, parse trees = 13, valid = True, error = 3.1698815064312416
-> C0*x**2 + C1*y + C2, p = 0.0002050487526833668, parse trees = 7, valid = True, error = 0.05427689119556682
-> C0*y**2 + C1*y, p = 0.00040372983241113614, parse trees = 3, valid = False
-> C0*x**2 + C1*x + C2, p = 0.00021366077128704005, parse trees = 6, valid = True, error = 0.4271908298405613
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 15.713659334721576
-> C0*x*z**3 + C1*z, p = 7.803210144153604e-06, parse trees = 2, valid = True, error = 20.98027961796095
-> C0*x**3*y*z + C1*x, p = 9.417861568659461e-07, parse trees = 2, valid = False
-> C0*x**2*y + C1, p = 0.001049519513626215, parse trees = 9, valid = True, error = 9.194511528421213
-> C0*x*z**3, p = 0.00035860340736000015, parse trees = 3, valid = True, error = 32.98026093868964
-> C0*x*y + C1*z, p = 0.0008198120476335148, parse trees = 5, valid = True, error = 8.279283168150675
-> C0*y*z**3, p = 0.0002390689382400001, parse trees = 2, valid = True, error = 48.17917931643902
-> C0*x*z**2 + C1*x + C2, p = 8.378904527876657e-06, parse trees = 3, valid = True, error = 2.3568107657080035
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 14.922725177587362
-> C0*x*y**2 + C1*z + C2, p = 1.297226111385601e-05, parse trees = 2, valid = False
-> C0*x*y**2*z + C1, p = 0.0002447865672184628, parse trees = 10, valid = False
-> C0*x*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 8.21409837062021
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = False
-> C0*y**2*z + C1*y*z + C2, p = 1.3084550002327196e-06, parse trees = 4, valid = False
-> C0*y + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 0.6954949092419475
-> C0*x**3*y**2, p = 5.770748510208003e-05, parse trees = 4, valid = False
-> C0*x*y + C1*x + C2, p = 0.0003112030179730392, parse trees = 14, valid = True, error = 0.4312916799192052
-> C0*y*z + C1*y, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.6379760754076431
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 2.7608273282818843
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 15.195231418013282
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*z + C2, p = 0.00017548449155972435, parse trees = 8, valid = True, error = 1.3456421870118167
-> C0*x*z**2 + C1, p = 0.0014505870649982983, parse trees = 14, valid = True, error = 12.017430717459828
-> C0*y**2*z + C1, p = 0.0014367761930649604, parse trees = 11, valid = False
-> C0*x*y**3 + C1, p = 5.875671210393603e-05, parse trees = 3, valid = False
-> C0*x + C1*y**3*z**2 + C2, p = 2.7945363781913173e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2 + C2*x*z + C3, p = 3.6887880192125384e-09, parse trees = 1, valid = True, error = 0.2686331850863745
-> C0*x*y**2 + C1*x*y*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x*z + C2, p = 2.594452222771201e-05, parse trees = 4, valid = True, error = 0.5657891504804146
-> C0*x + C1*y + C2*z**2 + C3, p = 9.23813678740931e-08, parse trees = 1, valid = True, error = 0.0007864498959397288
-> C0*x**2*y**3*z, p = 1.962054493470721e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x*z**2 + C2*x, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 1.596768913546479
-> C0*y*z**2 + C1*y*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 19.32090465818885
-> C0*x*y**2 + C1*z, p = 5.405108797440003e-05, parse trees = 2, valid = False
-> C0*x**3*y*z**3 + C1*z + C2, p = 7.029533299739621e-11, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*x + C2, p = 1.7123384670289927e-06, parse trees = 2, valid = False
-> C0*x + C1*y*z, p = 0.0006150990225557423, parse trees = 4, valid = True, error = 6.278984094644405
-> C0*x*y**3*z**2 + C1, p = 2.3287803151594308e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 0.28631542237126334
-> C0*y**3 + C1*z**2 + C2, p = 8.821137557422085e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z, p = 0.00016706699919360004, parse trees = 6, valid = True, error = 11.296090846918585
-> C0*x**2*y, p = 0.002483965440000001, parse trees = 3, valid = True, error = 32.83103302923452
-> C0*x*z + C1*y + C2*z + C3, p = 2.2171528289782346e-08, parse trees = 1, valid = True, error = 0.04061838856083894
-> C0*x**2*y*z, p = 0.0010134578995200003, parse trees = 9, valid = True, error = 43.57976157131031
-> C0*x**2*y*z + C1*y + C2, p = 1.2671304656014544e-06, parse trees = 3, valid = True, error = 0.07601144646415012
-> C0*x*z + C1*x + C2, p = 0.00026299404547967245, parse trees = 14, valid = True, error = 0.9528054335265113
-> C0*x**2*y*z + C1*y, p = 7.134743612620803e-06, parse trees = 2, valid = True, error = 1.9261032419009008
-> C0*y**4 + C1*y + C2, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1, p = 0.00014479139930112004, parse trees = 9, valid = True, error = 19.275741888403658
-> C0*x**2 + C1*x*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 1.9233766981477993
-> C0*x*y**2 + C1*x + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x**3*z, p = 0.0003378192998400001, parse trees = 3, valid = True, error = 26.24866314120247
-> C0*x*y**2*z**2 + C1*y + C2, p = 1.443843795398847e-07, parse trees = 2, valid = False
-> C0*y**3, p = 0.0008279884800000003, parse trees = 1, valid = False
-> C0*x + C1*y**2 + C2, p = 5.210983781261849e-05, parse trees = 5, valid = False
-> C0*x*y*z + C1*y**2 + C2*y + C3, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3, p = 1.9605268189560183e-06, parse trees = 3, valid = True, error = 0.0008019774008962151
-> C0*x*y**2*z + C1*x + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*y**2 + C2, p = 6.50962591625742e-09, parse trees = 1, valid = False
-> C0*x**3*y*z**3, p = 5.498509077459768e-07, parse trees = 2, valid = False
-> C0*y**2*z**2, p = 0.0006961124966400003, parse trees = 6, valid = False
-> C0*x*y**4*z + C1*x + C2, p = 1.1342372196486931e-10, parse trees = 1, valid = False
-> C0*y**3*z, p = 0.00045042573312000016, parse trees = 4, valid = False
-> C0*x*z + C1*x, p = 0.0006142169088000002, parse trees = 3, valid = True, error = 4.62257585998116
-> C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1, p = 7.955323066232345e-06, parse trees = 4, valid = False
-> C0*x*y*z + C1*x + C2*y, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.0019526294068767447
-> C0*x**2 + C1*x + C2*z + C3, p = 4.632653888980257e-07, parse trees = 2, valid = True, error = 0.4255741320048685
-> C0*x*y + C1*x + C2*y**2 + C3, p = 1.994370685127886e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y**2*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2, p = 4.9315347850435005e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*z + C3, p = 1.7932853763794545e-07, parse trees = 2, valid = True, error = 0.4290696305205604
-> C0*x + C1*y**2 + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x, p = 0.0008011643028111362, parse trees = 5, valid = True, error = 4.066126569666968
-> C0*x**3 + C1*z + C2, p = 8.042801890590725e-06, parse trees = 2, valid = True, error = 3.464312924872204
-> C0*y**2*z**2 + C1*y + C2, p = 1.8658470161459193e-06, parse trees = 4, valid = False
-> C0*x**2*y*z**2, p = 6.125789970432002e-05, parse trees = 4, valid = False
-> C0*x**2*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 10.609737189137729
-> C0*x*z + C1*y + C2, p = 0.00027772840571075306, parse trees = 15, valid = True, error = 0.06462534132471555
-> C0*x*z**3 + C1, p = 0.00010672037403033604, parse trees = 6, valid = True, error = 16.60807109549586
-> C0*x + C1*y*z**2 + C2, p = 8.286523160002564e-06, parse trees = 2, valid = True, error = 2.5973096836327425
-> C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6, p = 1.208381853002241e-13, parse trees = 1, valid = False
-> C0*x*y**3*z, p = 2.9728098385920014e-05, parse trees = 2, valid = False
-> C0*x**3 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = True, error = 0.14430588028788596
-> C0*x*y + C1*y + C2, p = 0.00019443892282459111, parse trees = 12, valid = True, error = 0.05334593778911096
-> C0*x**2*z**2, p = 0.0005800937472000002, parse trees = 5, valid = True, error = 29.937447650051098
-> C0*x**3*y**2*z**2 + C1, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x**2*y**2*z**4 + C1, p = 2.153656035459442e-09, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5, p = 1.5481503975522824e-14, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2, p = 2.1519424516553446e-08, parse trees = 1, valid = False
-> C0*x**4*y**2*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3*z, p = 2.0548061604347923e-07, parse trees = 1, valid = True, error = 0.0008008266963662371
-> C0*x**2*y*z + C1, p = 0.00011614497783939075, parse trees = 6, valid = True, error = 16.927328813465923
-> C0*x**2*z + C1*y**3 + C2*z + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x*y**3*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = False
-> C0*x**2*z**2 + C1*z, p = 7.573703963443205e-06, parse trees = 2, valid = True, error = 19.127770566733304
-> C0*x*z**2 + C1*x + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 4.113390561313915
-> C0*x**2*y + C1*y**3 + C2, p = 2.632569304368811e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z**2, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 19.842657683503816
-> C0*x*y*z**3 + C1, p = 2.2721111890329614e-05, parse trees = 6, valid = False
-> C0*x**3*y + C1, p = 0.00011272894907940869, parse trees = 6, valid = True, error = 13.956308582741816
-> C0*x*y + C1*x*z, p = 5.4051087974400024e-05, parse trees = 2, valid = True, error = 11.911236915840078
-> C0*x**4*y**3, p = 2.5137380510466065e-07, parse trees = 1, valid = False
-> C0*x*y*z + C1*y + C2*z + C3, p = 3.9802327585817264e-10, parse trees = 1, valid = True, error = 0.02360477675427576
-> C0*x*y**2*z + C1*y + C2, p = 1.917819083072472e-06, parse trees = 3, valid = False
-> C0*x*y*z**2 + C1*y + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.07817175222581775
-> C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2, p = 7.02953329973962e-11, parse trees = 1, valid = True, error = 1.5480726273733691
-> C0*x**2*y + C1*z**2 + C2, p = 2.117073013781301e-07, parse trees = 1, valid = True, error = 7.6436142616417895
-> C0*x**3*y, p = 0.0002185889587200001, parse trees = 2, valid = True, error = 39.84927292014376
-> C0*x**3 + C1*y*z + C2, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 4.328165448618291
-> C0*y**2 + C1*y + C2, p = 0.0002557635419581711, parse trees = 9, valid = False
-> C0*x**2*y**2*z**2 + C1*z, p = 6.59821089295172e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z, p = 8.353349959680003e-05, parse trees = 3, valid = True, error = 19.270512448057982
-> C0*x**2*y + C1*y**2 + C2*y, p = 1.0969038768203376e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*z, p = 2.090313210887105e-09, parse trees = 1, valid = True, error = 2.2236954354392293
-> C0*x**2 + C1*z**2 + C2, p = 7.067602333886058e-06, parse trees = 2, valid = True, error = 0.4234920017556721
-> C0*x*y**2 + C1*x*z, p = 3.5673718063104024e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*x + C2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 3.201015285557268
-> C0*x*y + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 2.6116215025407716
-> C0*x**2 + C1*x*y*z**4, p = 8.973566814414343e-09, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 0.32519656120089213
-> C0*x**2*y**2*z + C1, p = 1.4269487225241606e-05, parse trees = 4, valid = False
-> C0*x*y*z + C1*y*z + C2*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 0.43945250274793735
-> C0*x**3*z + C1*z**2 + C2, p = 3.9802327585817284e-10, parse trees = 1, valid = True, error = 7.816831039934071
-> C0*x**2*z + C1*y, p = 8.107663196160003e-05, parse trees = 3, valid = True, error = 1.3653155082327089
-> C0*x + C1*y*z**2 + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 4.56429996390554
-> C0*x + C1*y**4 + C2, p = 8.788526819130217e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z**2 + C3, p = 6.935157558552801e-12, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2*z**2 + C3, p = 9.121366738416457e-10, parse trees = 1, valid = False
-> C0*x*y + C1*y, p = 0.0007948689408000002, parse trees = 4, valid = True, error = 0.43800363117689806
-> C0*x**2 + C1*z**2, p = 2.7844499865600016e-05, parse trees = 1, valid = True, error = 3.693686096303068
-> C0*x**2*y**2*z, p = 0.00011891239354368005, parse trees = 8, valid = False
-> C0*x**2*y*z**2 + C1*x + C2, p = 3.6887880192125393e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 0.03682045801547395
-> C0*x**3*y**2 + C1*z, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 13.144854328919408
-> C0*x**2*y**2*z + C1*y**3*z, p = 1.1158583758117932e-09, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2, p = 0.000291113263347794, parse trees = 12, valid = True, error = 0.9893223811273171
-> C0*x*y**2 + C1*x*y*z + C2*x, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x**3*y**4 + C1, p = 6.032971322511856e-08, parse trees = 1, valid = False
-> C0*x**3*z + C1, p = 0.00014161385049292805, parse trees = 6, valid = True, error = 12.47127242751637
-> C0*x*z**2 + C1*z, p = 5.7376545177600026e-05, parse trees = 2, valid = True, error = 16.39685865042672
-> C0*x*y*z + C1*y*z**3, p = 6.79815667758662e-08, parse trees = 1, valid = True, error = 21.04762499020399
-> C0*x**2*y + C1*y + C2, p = 2.5181448044544013e-05, parse trees = 4, valid = True, error = 0.06573335173573548
-> C0*x*y*z + C1*y*z + C2, p = 8.821137557422084e-07, parse trees = 1, valid = True, error = 0.46521162141675226
-> C0*x**2 + C1*x*z + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.1907268041355145
-> C0*x*y**2 + C1*y + C2, p = 3.021773765345281e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y*z + C2, p = 2.1388664124525782e-05, parse trees = 5, valid = True, error = 0.2718495484437778
-> C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5, p = 2.910621829023736e-17, parse trees = 1, valid = False
-> C0*x**2*y**2 + C1*x + C2, p = 1.9943706851278858e-07, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x*y*z**2 + C2, p = 2.7592134383709796e-10, parse trees = 1, valid = False
-> C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4, p = 4.74310783563812e-13, parse trees = 1, valid = True, error = 0.00040010854733692013
-> C0*y*z**2 + C1*y, p = 2.872661362134222e-05, parse trees = 2, valid = True, error = 1.803356158108882
-> C0*x**2*y**3*z**4, p = 4.935461747927887e-09, parse trees = 1, valid = False
-> C0*x*z**3 + C1*y + C2, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 0.07901492531096557
-> C0*x**3 + C1, p = 0.00044787367390740503, parse trees = 4, valid = True, error = 6.163964859140628
-> C0*x**2*y**3 + C1*y*z, p = 6.215788635315246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*y*z**2 + C2*z + C3, p = 3.9802327585817274e-10, parse trees = 1, valid = True, error = 0.32471473852754057
-> C0*x*y + C1*z**2 + C2*z + C3, p = 2.3238126610709484e-10, parse trees = 1, valid = True, error = 0.237061052101223
-> C0*x**2*z**3 + C1, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 18.33436222459761
-> C0*x + C1*y + C2*z, p = 0.00014741205811200005, parse trees = 3, valid = True, error = 0.041506221210426575
-> C0*x**2 + C1*x*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 4.01263314911595
-> C0*x**2*y + C1*y**2 + C2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**3 + C2, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 0.6768410498184824
-> C0*x + C1*y**2 + C2*y + C3, p = 1.3489198088501337e-07, parse trees = 2, valid = False
-> C0*x*y**2*z**2 + C1*x + C2, p = 1.4438437953988472e-07, parse trees = 2, valid = False
-> C0*y*z**2 + C1*z**2 + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 7.757373679607582
-> C0*x**2*y**2*z**2 + C1*z**2, p = 8.973566814414341e-09, parse trees = 1, valid = False
-> C0*x**2*y + C1*x, p = 2.7061662831869965e-05, parse trees = 2, valid = True, error = 7.47395468908904
-> C0*x**2*y**2 + C1*x*z + C2*y + C3, p = 3.5802942539415818e-09, parse trees = 1, valid = False
-> C0*x*y*z**3 + C1*z, p = 5.150118695141379e-07, parse trees = 1, valid = False
-> C0*y**2*z**2 + C1, p = 3.4527179833344013e-05, parse trees = 2, valid = False
-> C0*y**3*z + C1, p = 2.8582215320862724e-05, parse trees = 2, valid = False
-> C0*x**2*z + C1*x + C2, p = 1.2975101677892194e-05, parse trees = 3, valid = True, error = 1.7636253104902655
-> C0*x*z + C1*y**2 + C2*y + C3, p = 2.0548061604347912e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*z + C3, p = 4.903910944649774e-06, parse trees = 4, valid = True, error = 0.6877444703033461
-> C0*x*y**4*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x**4*y*z**2 + C1*y, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*x*z**4 + C1*z**2 + C2, p = 1.731938097915181e-08, parse trees = 1, valid = True, error = 7.410502588870596
-> C0*y*z + C1*z**3 + C2, p = 9.363852172984324e-07, parse trees = 1, valid = True, error = 1.2177901060769392
-> C0*x**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 30.3359084511395
-> C0*y**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = False
-> C0*y*z + C1*y + C2*z + C3, p = 1.788605928006747e-06, parse trees = 3, valid = True, error = 0.04181792298732386
-> C0*z**4, p = 0.00012315672576000003, parse trees = 1, valid = True, error = 35.52682418298498
-> C0*x*y**4*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x*y + C1*y**2*z**3 + C2, p = 1.583570614308413e-08, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y, p = 7.869202513920005e-05, parse trees = 3, valid = False
-> C0*x**2*y*z**2 + C1*y**2*z + C2*y*z, p = 3.752530276184532e-11, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*y*z + C2*x*y, p = 1.96916183966787e-09, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2, p = 0.0002146557807820801, parse trees = 5, valid = True, error = 1.5348961775425867
-> C0*x*y*z**2 + C1*y + C2*z + C3, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 0.024210049469252284
-> C0*x**2*y*z + C1*z + C2, p = 1.7671541532186681e-06, parse trees = 3, valid = True, error = 8.167656546634275
-> C0*x*y*z + C1*y, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 1.4716772799869593
-> C0*x*z**2 + C1*x*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 10.696242614414645
-> C0*x**2 + C1*x*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*y + C3, p = 3.4987794708885983e-06, parse trees = 4, valid = True, error = 0.000179210242387171
-> C0*x**2*z**2 + C1*x*z + C2*y + C3, p = 2.18912801721995e-10, parse trees = 1, valid = True, error = 0.0358400468242255
-> C0*y*z**3 + C1, p = 9.295000318771204e-05, parse trees = 4, valid = True, error = 21.121624441748228
-> C0*x**2*y + C1*x*z + C2, p = 8.853091246110093e-10, parse trees = 1, valid = True, error = 3.6495230926173328
-> C0*y**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*y*z**2 + C1*z + C2, p = 9.917751569758034e-06, parse trees = 7, valid = True, error = 7.870002732723297
-> C0*x**2*y**3*z + C1*x + C2, p = 3.5802942539415818e-09, parse trees = 1, valid = False
-> C0*y**3*z + C1*y*z + C2*y + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x**2 + C2, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*y + C2, p = 1.9458391670784007e-05, parse trees = 3, valid = True, error = 0.07175747535068303
-> C0*x**3*y**2*z**2 + C1*x*y + C2, p = 1.119900461192334e-12, parse trees = 1, valid = False
-> C0*x*z**2 + C1*x, p = 5.5688999731200025e-05, parse trees = 2, valid = True, error = 9.115523024173433
-> C0*x**2 + C1*x, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 2.7061448274597795
-> C0*y**2*z + C1*y, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2*z + C3, p = 5.234944179531945e-08, parse trees = 1, valid = True, error = 0.8446510909071719
-> C0*x**2*y**2, p = 0.0005464723968000002, parse trees = 5, valid = False
-> C0*y*z**2 + C1*z, p = 5.737654517760002e-05, parse trees = 2, valid = True, error = 21.91537757156991
-> C0*x*y*z + C1*z**2 + C2, p = 5.234944179531943e-08, parse trees = 1, valid = True, error = 7.792873236672186
-> C0*x*y*z**3, p = 4.733564977152003e-05, parse trees = 3, valid = False
-> C0*x**6*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 18.532232608425325
-> C0*x**2*z + C1*y**2*z, p = 4.851625656582147e-07, parse trees = 1, valid = False
-> C0*x + C1*y**2*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*z + C2, p = 1.126967149760349e-06, parse trees = 2, valid = True, error = 9.370864723211241
-> C0*x**3*y**3*z**2 + C1, p = 1.690694508805747e-08, parse trees = 2, valid = False
-> C0*x**2*z**2 + C1*y + C2, p = 2.6251705370888124e-07, parse trees = 2, valid = True, error = 0.07818890458496808
-> C0*y**2 + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = False
-> C0*x**3*y + C1*x*y**2*z, p = 8.204840998616124e-09, parse trees = 1, valid = False
-> C0*x**2*y + C1*x**2*z**2 + C2, p = 1.536995008005225e-08, parse trees = 1, valid = True, error = 3.1561301434281988
-> C0*x**2*z**2 + C1*x*y, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 8.041827022513797
-> C0*x**2*y + C1*y, p = 2.7061662831869968e-05, parse trees = 2, valid = True, error = 1.0833891215920683
-> C0*x*y*z**2 + C1*z, p = 7.573703963443204e-06, parse trees = 2, valid = True, error = 24.19335498341854
-> C0*x + C1*y*z**2 + C2*y, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.0022231289901707223
-> C0*y**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*x**2 + C2*y*z + C3, p = 5.016751706129053e-10, parse trees = 1, valid = True, error = 0.25868842697091526
-> C0*x**2 + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.010387681768218946
-> C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y, p = 6.427344244675929e-11, parse trees = 1, valid = False
-> C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4, p = 6.847497167012697e-14, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 10.467837504294591
-> C0*x*y**3*z**4 + C1*z, p = 1.2204050867603506e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**2, p = 5.568899973120003e-05, parse trees = 2, valid = True, error = 17.59602508354045
-> C0*z**2 + C1*z + C2, p = 5.2160495616000025e-05, parse trees = 1, valid = True, error = 4.359055439355882
-> C0*x*y*z**4, p = 2.1458827896422413e-06, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y + C3*z, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 8.850671037604271e-05
-> C0*x**2*y**2 + C1, p = 7.869202513920003e-05, parse trees = 3, valid = False
-> C0*x + C1*y*z + C2*z + C3, p = 1.6067698339928121e-06, parse trees = 2, valid = True, error = 0.7052884329769217
-> C0*x*y**3, p = 0.00010929447936000005, parse trees = 1, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4, p = 2.8896489827303353e-11, parse trees = 1, valid = False
-> C0*x*z**2 + C1*z + C2, p = 6.885185421312004e-06, parse trees = 1, valid = True, error = 6.557259928561396
-> C0*x*y**2*z**3 + C1, p = 1.1996747078094036e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*z + C2, p = 6.4861305569280024e-06, parse trees = 1, valid = True, error = 0.3480357327190646
-> C0*x**2*y*z**2 + C1, p = 4.55758773800141e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*z**2 + C2*z, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 1.9911468169699829
-> C0*x**2 + C1*x*y*z + C2, p = 1.1109651974084108e-06, parse trees = 3, valid = True, error = 0.24756703212197198
-> C0*x**2*y**2*z**2 + C1, p = 5.131079294401279e-07, parse trees = 2, valid = False
-> C0*x**2*y**2*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = False
-> C0*x + C1*y + C2*z + C3, p = 5.323957552177265e-05, parse trees = 8, valid = True, error = 0.0008226341040322094
-> C0*x**2*y*z**3, p = 2.0827685899468813e-06, parse trees = 1, valid = False
-> C0*x*y**3*z + C1, p = 1.0907596034974684e-05, parse trees = 4, valid = False
-> C0*x**2*y**3, p = 2.8853742551040014e-05, parse trees = 2, valid = False
-> C0*x**2*y + C1*x*y**2*z, p = 6.215788635315246e-08, parse trees = 1, valid = False
-> C0*x*y**3*z**2 + C1*x*y*z, p = 1.1496722659879079e-09, parse trees = 1, valid = False
-> C0*y**2 + C1*y*z + C2, p = 6.859731677007056e-06, parse trees = 2, valid = False
-> C0*x + C1*y*z**2, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 10.888747501556036
-> C0*x*y + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*x*z**2 + C1*y, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 1.7178942705615108
-> C0*x*y**2 + C1*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*y**2 + C2*z, p = 1.5835706143084127e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2, p = 8.168861745650079e-06, parse trees = 3, valid = True, error = 1.2779997029889543
-> C0*x**2*z + C1*x*y**4*z**2, p = 1.5175673911040386e-10, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2, p = 1.8176889512263685e-05, parse trees = 5, valid = True, error = 4.186008456252465
-> C0*x*y + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 7.160946821529637
-> C0*x*y + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 0.03288686534873455
-> C0*x + C1*y**3, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z + C1*z**2 + C2, p = 2.1812267414716428e-07, parse trees = 1, valid = True, error = 7.760750635787311
-> C0*x**4*y*z, p = 1.962054493470721e-06, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 11.130267903350004
-> C0*x*z + C1*x + C2*y + C3, p = 1.1835683484104399e-08, parse trees = 1, valid = True, error = 0.00018803715641311185
-> C0*x*y*z + C1*x*y + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.23654516936787467
-> C0*y**3 + C1*y + C2*z + C3, p = 1.5623102199017813e-09, parse trees = 1, valid = False
-> C0*x**2*y**4, p = 1.904347008368641e-06, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*z, p = 7.350947964518402e-06, parse trees = 2, valid = True, error = 11.294140990584985
-> C0*x*y**2*z + C1*z + C2, p = 8.850403974764597e-07, parse trees = 2, valid = False
-> C0*x*y + C1*y**3*z**2, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x*y + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = True, error = 11.371404743739015
-> C0*x**3*y*z, p = 2.9728098385920014e-05, parse trees = 2, valid = False
-> C0*x**2*y + C1*x*y**2*z + C2, p = 3.580294253941581e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2, p = 1.5108868826726408e-06, parse trees = 1, valid = True, error = 1.2780540226713237
-> C0*x**2*y**2*z + C1*y, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x**4*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 35.87355058963859
-> C0*x*y**2*z**3 + C1*x + C2*z, p = 2.1536560354594418e-09, parse trees = 1, valid = False
-> C0*x*y**2 + C1*z**2 + C2, p = 8.821137557422087e-07, parse trees = 1, valid = False
-> C0*x**4*z**3 + C1, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 20.85810921409195
-> C0*x**4 + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 1.8818268898279398
-> C0*x + C1*y**2*z + C2*y, p = 8.561692335144962e-07, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2*z, p = 8.821137557422084e-07, parse trees = 1, valid = False
-> C0*y*z**2 + C1*y*z + C2, p = 9.088444756131843e-07, parse trees = 1, valid = True, error = 0.7583121144539785
-> C0*y**2*z**2 + C1*z, p = 3.7868519817216017e-06, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*y, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 5.355426349545783
-> C0*x**2*z**4 + C1, p = 5.15011869514138e-07, parse trees = 1, valid = True, error = 20.806271786231825
-> C0*x**2*z**2 + C1*x**2 + C2, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.5658801105664606
-> C0*x*y + C1*x + C2*y + C3*z + C4, p = 4.931534785043499e-08, parse trees = 1, valid = True, error = 0.0008441946201632752
-> C0*x*y + C1*y**2 + C2*y + C3, p = 1.9943706851278858e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**5*z + C2, p = 1.497193129936275e-11, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x*y, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*z + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.2444540281444165
-> C0*x**2*y*z + C1*x + C2, p = 8.561692335144962e-07, parse trees = 1, valid = True, error = 2.712179024742013
-> C0*x*z**2 + C1*y + C2, p = 1.3365359935488005e-05, parse trees = 2, valid = True, error = 0.07583373418130805
-> C0*x + C1*y + C2*z**2, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 0.0010278981379745835
-> C0*x*y*z + C1*x*z**2, p = 4.998644615872514e-07, parse trees = 1, valid = True, error = 12.971963273666915
-> C0*x + C1*y*z**2 + C2*y + C3*z + C4, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 2.5363512057682844e-05
-> C0*x*y*z + C1*x + C2*y*z, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 1.011187280423733
-> C0*x**4 + C1*x, p = 3.4624491061248015e-06, parse trees = 1, valid = True, error = 7.907290221815908
-> C0*x**2*z + C1*y + C2, p = 8.042801890590723e-06, parse trees = 2, valid = True, error = 0.07199343528377387
-> C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4, p = 6.646100191512326e-14, parse trees = 1, valid = False
-> C0*x**2*y**2*z**4 + C1*x*z + C2, p = 3.8662433148567914e-11, parse trees = 1, valid = False
-> C0*x + C1*y**4*z, p = 9.417861568659461e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*y*z + C2*z**2 + C3, p = 5.41311655167115e-11, parse trees = 1, valid = True, error = 0.4438723839200527
-> C0*y**3*z**2, p = 1.5314474926080006e-05, parse trees = 1, valid = False
-> C0*y**2 + C1*y*z + C2*y + C3, p = 2.083211800796642e-07, parse trees = 2, valid = False
-> C0*x*y**3 + C1*x + C2, p = 4.786489644306927e-08, parse trees = 1, valid = False
-> C0*x**2*y*z**3 + C1*x*z, p = 8.973566814414343e-09, parse trees = 1, valid = False
-> C0*x*y + C1*y**2 + C2*z, p = 8.561692335144968e-07, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*z + C2, p = 1.1643901575797151e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*y + C3*z, p = 6.622112252090349e-11, parse trees = 1, valid = True, error = 0.025979689688771436
-> C0*x**4*y*z**3 + C1, p = 8.709638378696271e-09, parse trees = 1, valid = False
-> C0*x**4*y + C1*y + C2*z + C3, p = 2.732030113327557e-14, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x*z + C2, p = 6.706887307659161e-09, parse trees = 1, valid = True, error = 2.338228422511055
-> C0*x**2*y + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 4.35201332261595
-> C0*x**2*y + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.003924442083000808
-> C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3, p = 1.5425626187222228e-11, parse trees = 1, valid = False
-> C0*y**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = False
-> C0*x*y + C1*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 8.434528926693075
-> C0*x**2*y**3 + C1*x, p = 4.5704328200847384e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*y + C3, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 0.002400701474276424
-> C0*x*y + C1*y**2 + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4, p = 5.2729389949188664e-14, parse trees = 1, valid = True, error = 0.04960969210976694
-> C0*x**3*y*z**2 + C1*x + C2*y + C3, p = 4.869200185360551e-10, parse trees = 1, valid = False
-> C0*x**3*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = True, error = 2.4363530784190925
-> C0*x*y**2 + C1*y**3*z + C2*z + C3, p = 2.8046593067676784e-11, parse trees = 1, valid = False
-> C0*x**3*y**2 + C1, p = 3.4624491061248015e-06, parse trees = 1, valid = False
-> C0*x**2 + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*x*y + C2, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.638952109650706
-> C0*x*y**2 + C1*x + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x**2*z + C1*y + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.02456606529815328
-> C0*x*y**3 + C1*x + C2*z, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*y*z + C2*y + C3, p = 8.85309124611009e-10, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*z + C3, p = 1.6584303160757197e-09, parse trees = 1, valid = True, error = 0.958254532798076
-> C0*x**3*y**3 + C1*x*y + C2*x + C3, p = 1.4531580378793259e-11, parse trees = 1, valid = False
-> C0*x**3*z + C1*x + C2*z + C3, p = 3.8631670892116767e-10, parse trees = 1, valid = True, error = 0.9600645304682295
-> C0*y**3*z + C1*z, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*x*z**3 + C1*z + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 8.908856626560718
-> C0*x*y*z**2 + C1*y + C2*z, p = 1.1996747078094033e-07, parse trees = 1, valid = True, error = 0.0443312692955253
-> C0*x**2*z + C1*x + C2*y + C3*z + C4, p = 6.706887307659159e-09, parse trees = 1, valid = True, error = 1.9434922394130745e-05
-> C0*x*z**4 + C1*x, p = 5.150118695141379e-07, parse trees = 1, valid = True, error = 13.190299180252858
-> C0*x**3*y*z + C1*x*y*z + C2, p = 1.168608044486532e-10, parse trees = 1, valid = False
-> C0*y**4*z**3 + C1*y + C2*z, p = 2.842825966806464e-10, parse trees = 1, valid = False
-> C0*y**4*z**2 + C1*z + C2, p = 3.800569474340191e-09, parse trees = 1, valid = False
-> C0*x**2*y**5*z**2 + C1, p = 2.678060101948303e-10, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.010971353075529397
-> C0*x**2*y*z + C1*x**2 + C2, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.3861140166879305
-> C0*x**2*y*z + C1*x + C2*z + C3, p = 6.706887307659157e-09, parse trees = 1, valid = True, error = 0.9689174214331723
-> C0*x + C1*y**2*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*y**2 + C1*z**2 + C2*z + C3, p = 2.181226741471643e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**3*z**2 + C2, p = 4.869200185360552e-10, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*z + C2, p = 9.68255275446228e-10, parse trees = 1, valid = True, error = 7.940524621704409
-> C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z, p = 2.0104453079324783e-14, parse trees = 1, valid = False
-> C0*y**3*z + C1*y, p = 3.567371806310401e-06, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2*y + C3, p = 2.92664173425127e-09, parse trees = 1, valid = True, error = 0.04277020000940109
-> C0*x**2*y*z**2 + C1*x*y + C2*x + C3, p = 4.869200185360553e-10, parse trees = 1, valid = False
-> C0*x**3*y*z**2 + C1, p = 4.851625656582147e-07, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*x*y + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*y**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = False
-> C0*x*z**3 + C1*x + C2*y*z, p = 1.631557602620789e-08, parse trees = 1, valid = True, error = 2.6944409002612315
-> C0*x*y*z + C1*x*z + C2*y + C3*z + C4, p = 9.71762683356005e-13, parse trees = 1, valid = True, error = 0.0096224372737431
-> C0*x*y*z**3 + C1*x + C2*z + C3, p = 7.361838510272763e-12, parse trees = 1, valid = False
-> C0*x*y**3*z**2 + C1*y, p = 1.280829173337687e-07, parse trees = 2, valid = False
-> C0*x**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 16.76658983082739
-> C0*x*z**3 + C1*z**2 + C2, p = 3.0563613492620843e-08, parse trees = 1, valid = True, error = 7.610767797379387
-> C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z, p = 1.3676662771262981e-17, parse trees = 1, valid = True, error = 5.655501869394933
-> C0*x**2 + C1*x*y**2, p = 3.462449106124803e-06, parse trees = 1, valid = False
-> C0*x**2*y + C1*x*y + C2*z, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.9795425564195288
-> C0*x**2*y*z + C1*x*y + C2*z**2 + C3, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 0.454862397503037
-> C0*y*z**4, p = 1.6256687800320006e-05, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*x + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2*y + C3*z**2 + C4, p = 8.853091246110095e-10, parse trees = 1, valid = True, error = 0.00018665304001345943
-> C0*x*y*z + C1*x + C2*y + C3, p = 4.1096123208695825e-07, parse trees = 2, valid = True, error = 0.0007924239628762388
-> C0*y**2 + C1*z**2 + C2, p = 3.8492236614205467e-07, parse trees = 1, valid = False
-> C0*x*y**3 + C1*y, p = 3.4624491061248015e-06, parse trees = 1, valid = False
-> C0*x**3*y**2*z + C1*y*z + C2*y + C3, p = 1.542562618722223e-11, parse trees = 1, valid = False
-> C0*y**2*z**2 + C1*y, p = 3.675473982259201e-06, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y + C3*z + C4, p = 2.9266417342512697e-09, parse trees = 1, valid = True, error = 7.644366109038636e-05
-> C0*x**2*y*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*z**2, p = 8.821137557422087e-07, parse trees = 1, valid = True, error = 1.1636428895616666
-> C0*y**2*z**3 + C1*y**2, p = 6.59821089295172e-08, parse trees = 1, valid = False
-> C0*x**2*y**3*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x**3*z + C1*x*y + C2*y*z + C3, p = 4.869200185360551e-10, parse trees = 1, valid = True, error = 0.34009149425084956
-> C0*x*y**2*z**2 + C1*y*z**2 + C2, p = 5.168774485102659e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z**2 + C1*x*y*z + C2, p = 2.75921343837098e-10, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*y + C2*y, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.05109182559993588
-> C0*x**2*z + C1*x*y**3*z**2, p = 1.1496722659879079e-09, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*y**2 + C2*y + C3, p = 3.580294253941582e-09, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1*y**2*z**2 + C2, p = 2.678060101948304e-10, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z**2 + C3*z + C4, p = 7.1195240841634434e-09, parse trees = 1, valid = True, error = 0.21017968601548273
-> C0*y*z + C1*y + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 0.0563504243799898
-> C0*y*z**2 + C1*y + C2, p = 3.2076863845171216e-06, parse trees = 2, valid = True, error = 0.07575332463176238
-> C0*y*z + C1*z**2 + C2, p = 2.2843392783412118e-08, parse trees = 1, valid = True, error = 4.324922261567052
-> C0*x**2*y*z + C1*y**2, p = 4.708930784329731e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2*x + C3, p = 2.75701803512079e-09, parse trees = 1, valid = True, error = 0.350758537551189
-> C0*y**2*z + C1*z**2 + C2*z, p = 1.236028486833931e-07, parse trees = 1, valid = False
-> C0*x*z**3 + C1*y*z + C2, p = 1.236028486833931e-07, parse trees = 1, valid = True, error = 1.5820912649536554
-> C0*y**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 13.497386087508865
-> C0*x*y**2*z**3, p = 4.1655371798937625e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y + C2*z**2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 0.28595278631544596
-> C0*x*y + C1*x + C2*y*z + C3, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.06069458932501464
-> C0*x*z**2 + C1*y + C2*z + C3, p = 4.362453482943286e-07, parse trees = 2, valid = True, error = 0.027552655058381212
-> C0*y**3*z + C1*y + C2, p = 1.7123384670289929e-06, parse trees = 2, valid = False
-> C0*y**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = False
-> C0*x*z**3 + C1*x + C2*z + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 1.0888414535327609
-> C0*x*z + C1*y**2*z, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4, p = 9.121366738416462e-10, parse trees = 1, valid = False
-> C0*x**2*z + C1*x, p = 5.405108797440001e-05, parse trees = 2, valid = True, error = 7.518987968625645
-> C0*x**3*y + C1*x + C2*y + C3, p = 1.5163599193164343e-09, parse trees = 1, valid = True, error = 0.0008353065976606284
-> C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 0.12481417987550374
-> C0*x*y + C1*y*z**2 + C2, p = 1.764227511484417e-06, parse trees = 2, valid = True, error = 0.4415349174796078
-> C0*x*y**2*z**2 + C1*x*y + C2*x + C3, p = 6.731182336242426e-12, parse trees = 1, valid = False
-> C0*x*z + C1*y**3, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y**2*z**2, p = 3.5222802266786394e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*y*z**3 + C2, p = 3.800569474340192e-09, parse trees = 1, valid = True, error = 3.519763134493226
-> C0*y**3*z + C1*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*y*z + C3*z + C4, p = 2.2554652298629788e-10, parse trees = 1, valid = True, error = 0.2282991302555109
-> C0*x**2 + C1*y*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 2.5962320375531007
-> C0*x*y + C1*x*z + C2*y, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 0.16075659796714917
-> C0*x**2*y + C1*x + C2*z + C3, p = 1.1835683484104402e-08, parse trees = 1, valid = True, error = 0.7152675795676134
-> C0*x**2*y + C1*x + C2*y + C3*z + C4, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.00012011558782723944
-> C0*x*y**2 + C1*x, p = 5.246135009280003e-05, parse trees = 2, valid = False
-> C0*x**3*y**3*z**4 + C1*z + C2, p = 5.103441175610964e-12, parse trees = 1, valid = False
-> C0*y*z + C1*z**2, p = 2.8688272588800013e-05, parse trees = 1, valid = True, error = 18.84261509849104
-> C0*x**2*y**3*z + C1*x + C2*y + C3*z, p = 6.427344244675929e-11, parse trees = 1, valid = False
-> C0*x**3*y + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 2.1287907423793544
-> C0*x*y*z**3 + C1*y**2*z + C2, p = 2.1536560354594418e-09, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3, p = 6.62211225209035e-11, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*z**2 + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 2.6549022422084336
-> C0*x**2 + C1*x*y*z + C2*y**2, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*y + C2*z, p = 2.9289722082248415e-10, parse trees = 1, valid = False
-> C0*x**3*y + C1*x*y + C2*z, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 1.7874224137721635
-> C0*x*y + C1*y + C2*z, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 0.05998773881215206
-> C0*z**3 + C1*z + C2, p = 1.4187654807552007e-05, parse trees = 2, valid = True, error = 7.771643817885402
-> C0*x*y**3 + C1*z + C2, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = False
-> C0*x**3*y**3*z**3 + C1*z + C2, p = 2.302751047292124e-15, parse trees = 1, valid = False
-> C0*x*y*z**5, p = 2.918400593913448e-07, parse trees = 1, valid = False
-> C0*x*y**4*z**3 + C1*y**2, p = 1.5175673911040386e-10, parse trees = 1, valid = False
-> C0*y**4, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 58.212901951166245
-> C0*x**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 8.104848699360122
-> C0*x**2 + C1*x*y, p = 2.6230675046400012e-05, parse trees = 1, valid = True, error = 3.8975783620464806
-> C0*y**2*z**4 + C1*y, p = 6.798156677586621e-08, parse trees = 1, valid = False
-> C0*x**2*y**3*z**3, p = 3.629015991123446e-08, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*y + C2*z, p = 1.5369950080052242e-08, parse trees = 1, valid = False
-> C0*x**3*y**3*z, p = 2.589911931381352e-07, parse trees = 1, valid = False
-> C0*x*y*z**7 + C1, p = 3.109175273377334e-10, parse trees = 1, valid = False
-> C0*y + C1*z**4, p = 3.901605072076801e-06, parse trees = 1, valid = True, error = 2.5217325145806364
-> C0*x*z + C1*y**3*z + C2, p = 2.794536378191317e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*y**2, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = False
-> C0*x**4*y, p = 1.4426871275520007e-05, parse trees = 1, valid = False
-> C0*y**5*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*z**5 + C1, p = 4.019835528806403e-06, parse trees = 1, valid = True, error = 20.75322839804768
-> C0*x**2*y**2*z + C1*x, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2*z**2 + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 3.4031681887125766
-> C0*y + C1*z**3 + C2, p = 6.885185421312002e-06, parse trees = 1, valid = True, error = 0.07812450509188332
-> C0*x*z**3 + C1*x + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 3.3212797274245407
-> C0*x**3*z**2 + C1*x*z, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 9.79351546667896
-> C0*x*y*z + C1*y*z, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 21.096163172346017
-> C0*x**2*z + C1*x + C2*y**2 + C3*z + C4, p = 2.889648982730334e-11, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 2.1726623394280677
-> C0*x*y*z + C1*y**2 + C2, p = 8.561692335144965e-07, parse trees = 1, valid = False
-> C0*x*y + C1*y**3 + C2, p = 8.309877854699526e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.0033668325250160443
-> C0*x**2*y*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = False

Final score:
model: 1.73280087325359*z**3 + 10.0                                          ; error: 14.340019334254288
model: 10.0*x                                                                ; error: 20.29842225408522
model: 10.0*z                                                                ; error: 36.16448835662133
model: -3.38690482115004*x*y**2*z                                            ; error: 100000000
model: 4.18601917831016*y*z + 10.0                                           ; error: 6.3389390764692894
model: 10.0*y + 1.43906533197146                                             ; error: 0.07904368526156173
model: 10.0*x + 10.0                                                         ; error: 7.153700074732472
model: 4.65979038005438*x*y                                                  ; error: 18.605973444506223
model: 10.0*z + 10.0                                                         ; error: 17.46640054472541
model: 10.0*y                                                                ; error: 4.245064493792276
model: 10.0*x + 10.0*z + 10.0                                                ; error: 1.5205971607204074
model: -0.360641983347147*x**2*z + 1.41679332367342*y*z + 10.0*y + 0.367710020188103; error: 0.015314432620635131
model: 10.0*y + 2.70413449668408*z                                           ; error: 0.06018827513575914
model: 1.78718082432781*y*z**2                                               ; error: 42.78940922513268
model: 0.157245698669136*x**3 + 10.0*y                                       ; error: 1.0022924432920572
model: 5.89620893234923*x*y - 6.70970299808945*y*z + 10.0                    ; error: 0.36764723332339566
model: 0.111100387571301*y*z + 10.0*y + 1.24348837033388                     ; error: 0.06415260868352057
model: 1.27706293323511*x*y*z                                                ; error: 38.7542156832984
model: 2.11962863521815*x + 10.0*y                                           ; error: 0.04154030490166526
model: -0.712042775017622*y**2 - 4.3192592602528*z                           ; error: 100000000
model: 1.50259028557192*x + 10.0*y + 0.425386643249807                       ; error: 0.03373301583090899
model: -2.62258173984361*x*y**2 + 0.0238945748926145                         ; error: 100000000
model: 7.18448019075396*x*z + 10.0                                           ; error: 4.755148102798686
model: 3.8630466608656*y**2                                                  ; error: 100000000
model: 10.0*x + 1.20728703248841*z**3                                        ; error: 10.40031590038804
model: 5.42549038717825*x**2                                                 ; error: 7.083023289037299
model: 9.98436466026348*x*z - 4.96828676520213*z**2 + 9.98583309539247       ; error: 3.8316474222425265
model: 2.34440807515349*x*y + 10.0                                           ; error: 2.813051038074814
model: -3.82474357096362*x**2*y**2 + 4.75883868418533*z + 4.3256120385734    ; error: 100000000
model: 1.52974202552394*x*z + 10.0*y                                         ; error: 0.6446521490610685
model: 1.53692783284454*x*y + 10.0*z + 10.0                                  ; error: 1.4430990724717707
model: -1.02081385165062*x**2 + 2.74500954884202*y**2                        ; error: 100000000
model: 7.9379509315805*y*z                                                   ; error: 25.608869619131067
model: 5.07137877260389*x*z + 10.0*z + 10.0                                  ; error: 2.806794793630018
model: 9.10925364588747*x*z                                                  ; error: 12.308274870423942
model: 0.150639735176303*x**2*z**2 + 10.0                                    ; error: 14.689578524700048
model: 0.230680794521212*x*y*z + 10.0*x + 10.0                               ; error: 1.9847644779605615
model: 10.0*z**2 + 10.0                                                      ; error: 7.81841942216366
model: 10.0*z**2                                                             ; error: 20.38080842203956
model: 10.0*x + 0.795354650297921*z**3 + 10.0                                ; error: 2.8530015109893756
model: 4.98022787758101*x + 0.339779236287958*y**5 + 4.44202717913942        ; error: 100000000
model: 1.64309406078436*x*z**2                                               ; error: 25.404743100085337
model: 2.68919436214822*x*y**2*z + 3.56567467669301*x*z                      ; error: 100000000
model: 0.961771195899131*x**2*z + 10.0                                       ; error: 9.2459892152245
model: 10.0*y + 2.13578206096592*z + 0.304345221813836                       ; error: 0.05873514815675326
model: 1.07180640130192*y**2 + 4.57488543447849*z + 2.08882899260841         ; error: 100000000
model: 4.44404121469556*y**2*z - 3.39740079863405*z + 2.29611383035353       ; error: 100000000
model: 4.56515978730156*y*z + 10.0*z                                         ; error: 12.633429315135688
model: 0.0603400314736498*x*y*z**2 + 10.0*x                                  ; error: 12.24973295948191
model: 1.20061422649961*x**2*z                                               ; error: 20.711980967110115
model: 10.0*x + 7.77104456442739*z**2                                        ; error: 6.345576657439307
model: 2.08360267036597*x*y**2*z**2                                          ; error: 100000000
model: 0.819532094384863*x**3                                                ; error: 15.404257203714367
model: -1.01631909133799*x*z**2 + 10.0*x + 3.93083572431694*y*z + 8.09176698623065; error: 0.2434966658387232
model: 0.816798431478618*y**2*z                                              ; error: 100000000
model: -2.73508722058978*y**2 - 0.188980359841883                            ; error: 100000000
model: -3.81763871264134*x**2*y*z**3 - 2.6638185498042*x - 3.58132740259741  ; error: 100000000
model: -0.372387705306587*x*y**2*z**2 - 4.94489559764474                     ; error: 100000000
model: 0.873457489114521*y*z**2 + 10.0                                       ; error: 16.342591141414815
model: 4.76273396739118*x + 4.44259820102837*y**2                            ; error: 100000000
model: -3.65795052523695*x*z - 4.08863593870693*y**2                         ; error: 100000000
model: 1.3250897428825*x*y**2 + 0.146255360086313*x - 3.62275154222024*y     ; error: 100000000
model: 10.0*z**2 + 10.0*z                                                    ; error: 11.495591467465164
model: 0.394730358514508*x*y*z + 10.0*x                                      ; error: 9.381577578533184
model: 3.33478875843376 - 1.69275034505364*y**3                              ; error: 100000000
model: 10.0*x + 10.0*z                                                       ; error: 7.721789608887937
model: -10.0*x*y*z + 3.89057922308163*z**4                                   ; error: 28.966928980027546
model: 4.58601289146908*x*y + 0.927912915489684*y**2*z                       ; error: 100000000
model: 3.14158700037487*x**2*y**2*z**2                                       ; error: 100000000
model: 10.0*y + 0.243241153737535*z**2 + 1.31199995400647                    ; error: 0.07192000028177813
model: 0.397947619358652*x*y*z + 9.93394286294897*z + 9.97206097958996       ; error: 6.348805700544319
model: 4.19631195184137*x**2 + 10.0*z                                        ; error: 4.774890435187606
model: 4.13150573313712*x**2 + 1.12835970228432*x - 3.94881770537193*y**2*z + 0.415846607086229; error: 100000000
model: 0.209841983998626*x*y*z**2                                            ; error: 46.24176546593244
model: -4.67326828293067*x**4*y**5*z**2 - 1.06211756627689                   ; error: 100000000
model: 9.10809941121001*x**2 - 1.50554269453661*x*z**2                       ; error: 2.6475319052475235
model: 1.0293211047753*x*y**2 - 3.80484381632945*y**2*z - 0.605265068651625  ; error: 100000000
model: 4.85154683118408*x*z + 3.57354257121043*y**2 - 2.63544286841061       ; error: 100000000
model: 0.622980679405518*x*y*z + 10.0                                        ; error: 13.119847694366182
model: 4.35754643120753*x*y - 9.99185916284321*x*z + 5.62756436383355*z + 10.0; error: 0.19283042161079364
model: -4.4877159601776*x + 3.90605176578505*y**3 + 3.4156154535666          ; error: 100000000
model: 0.0153028407631882*x**3*z**2 + 10.0*z                                 ; error: 21.13909536490224
model: 0.0249805447694026*x**2*z**3                                          ; error: 35.69215726084812
model: 1.36018496217929*x*y - 4.67647073947061*y**2 - 3.89720051507111       ; error: 100000000
model: -3.80072416950404*x*y**2                                              ; error: 100000000
model: 4.24805593183986*x**2 + 10.0                                          ; error: 2.057235397948557
model: -0.0660148958753271*x**3*y*z**2 + 2.77469826940076*y**2               ; error: 100000000
model: 2.14036657447666*z**3                                                 ; error: 29.333260110367036
model: 3.56984556966899*x**3*y*z**2                                          ; error: 100000000
model: 0.839031035387996*x**2 + 10.0*y                                       ; error: 0.4267614759046657
model: -4.08386149181247*x*y**3*z**5 - 2.28218008516731*x - 1.53605564317316 ; error: 100000000
model: 2.18859178508808*x*y**2 + 1.93249354302059*x*z + 2.92670351950389*y + 1.9624825626931*z + 1.13285578601462; error: 100000000
model: 4.27150437647323*x*y**3*z - 4.01044348742082*y - 0.191704956214439    ; error: 100000000
model: -0.801302679237565*x**2 + 6.20585027903014*x + 9.9999646378683*y - 1.52585782872715; error: 0.0005611603898739102
model: 0.677322734359024*x**2*z + 10.0*z + 10.0                              ; error: 5.094362219097881
model: 2.69193117542859*y*z + 10.0*z + 10.0                                  ; error: 3.1698815064312416
model: 0.182431280809466*x**2 + 10.0*y + 1.16089007239931                    ; error: 0.05427689119556682
model: 0.974995756611501*y**2 + 1.54296633697889*y                           ; error: 100000000
model: 1.92423531941477*x**2 + 10.0*x + 10.0                                 ; error: 0.4271908298405613
model: 0.431323147198709*x**2*y + 10.0*z                                     ; error: 15.713659334721576
model: 0.176326110494513*x*z**3 + 10.0*z                                     ; error: 20.98027961796095
model: 3.02404044713751*x**3*y*z - 4.0444471936639*x                         ; error: 100000000
model: 0.4089765538645*x**2*y + 10.0                                         ; error: 9.194511528421213
model: 0.232751145430021*x*z**3                                              ; error: 32.98026093868964
model: 2.71964510424823*x*y + 10.0*z                                         ; error: 8.279283168150675
model: 0.266510924682945*y*z**3                                              ; error: 48.17917931643902
model: 0.608446156844143*x*z**2 + 10.0*x + 10.0                              ; error: 2.3568107657080035
model: -0.911319671305536*x**3*y**2*z + 1.65502793788052                     ; error: 100000000
model: 0.013104511597524*x**4*z + 10.0                                       ; error: 14.922725177587362
model: -2.78591903463967*x*y**2 - 2.72326048005751*z + 1.2788282738777       ; error: 100000000
model: -1.98811863714712*x*y**2*z + 4.92594932447977                         ; error: 100000000
model: 7.00324700670207*x*z + 10.0*z                                         ; error: 8.21409837062021
model: -4.59743312392466*x**3*y**2 - 1.90537141611947*x - 0.10857048825448*y + 1.92974018162314; error: 100000000
model: -0.41088993228528*x**3*y*z - 0.310904441463807*x*y*z + 3.23721557604212*y; error: 100000000
model: 0.590398575042429*y**2*z - 4.7231013351893*y*z + 2.66088252501202     ; error: 100000000
model: 10.0*y + 2.29568217411341*z**2                                        ; error: 0.6954949092419475
model: 4.12985975781743*x**3*y**2                                            ; error: 100000000
model: 0.93407670978105*x*y + 10.0*x + 10.0                                  ; error: 0.4312916799192052
model: 0.751407601438355*y*z + 10.0*y                                        ; error: 0.6379760754076431
model: -0.0242433914859057*x**3*y + 9.99802550787812*x*z + 9.9917563176445   ; error: 2.7608273282818843
model: 3.36366070824842*x**2*z - 10.0*y*z                                    ; error: 15.195231418013282
model: -1.43379712289814*x*y**2*z**2 - 2.54109840430027*x*y**2 + 0.28971831559372; error: 100000000
model: 3.02077732569363*x**2 + 10.0*z + 10.0                                 ; error: 1.3456421870118167
model: 1.32131196862676*x*z**2 + 10.0                                        ; error: 12.017430717459828
model: -4.21026589752621*y**2*z + 3.94397341183052                           ; error: 100000000
model: -2.99073483093961*x*y**3 + 2.10062806674739                           ; error: 100000000
model: 1.78635442534158*x + 4.53959510179494*y**3*z**2 - 3.48976692607263    ; error: 100000000
model: -0.28541445304173*x**2*z + 10.0*x**2 - 8.41329818239313*x*z + 10.0    ; error: 0.2686331850863745
model: -3.69434650099401*x*y**2 - 0.538723845703202*x*y*z - 1.33965682085853 ; error: 100000000
model: 4.99353811157104*x*y - 9.99411767424759*x*z + 9.99877642048413        ; error: 0.5657891504804146
model: 10.0*x + 6.98497574445671*y - 1.02640349075074*z**2 - 0.142145258768674; error: 0.0007864498959397288
model: 4.24860155475908*x**2*y**3*z                                          ; error: 100000000
model: 3.08992077831237*x*y - 1.15184609109155*x*z**2 + 10.0*x               ; error: 1.596768913546479
model: -0.55072004100912*y*z**2 + 10.0*y*z                                   ; error: 19.32090465818885
model: -3.66260587256591*x*y**2 + 3.02084282688745*z                         ; error: 100000000
model: 1.23459418296351*x**3*y*z**3 - 3.96081874479111*z - 0.917952294953843 ; error: 100000000
model: -1.3579302872426*x*y**2*z + 2.59776958731249*x - 4.38227837900532     ; error: 100000000
model: 10.0*x + 2.98025654129976*y*z                                         ; error: 6.278984094644405
model: 3.88268961424679*x*y**3*z**2 + 4.66297093092983                       ; error: 100000000
model: -0.420629837996149*x*y*z + 3.62062541607282*x*y + 10.0                ; error: 0.28631542237126334
model: 3.39410933287972*y**3 - 4.7744925330675*z**2 - 0.0474264946001945     ; error: 100000000
model: 10.0*x*z - 1.09308661942997*y*z                                       ; error: 11.296090846918585
model: 0.840151156448756*x**2*y                                              ; error: 32.83103302923452
model: -1.02419049247463*x*z + 10.0*y + 10.0*z - 3.06389653239328            ; error: 0.04061838856083894
model: 0.159328450750476*x**2*y*z                                            ; error: 43.57976157131031
model: 0.00082477484143788*x**2*y*z + 10.0*y + 1.39642426642087              ; error: 0.07601144646415012
model: 3.2711124490355*x*z + 10.0*x + 10.0                                   ; error: 0.9528054335265113
model: 0.0164531380715572*x**2*y*z + 10.0*y                                  ; error: 1.9261032419009008
model: -1.05808099537576*y**4 - 3.03185766263964*y - 2.64977640512502        ; error: 100000000
model: 0.101420123931298*x*y*z**2 + 10.0                                     ; error: 19.275741888403658
model: 10.0*x**2 - 0.605300068376521*x*y*z                                   ; error: 1.9233766981477993
model: -4.52381832818578*x*y**2 - 3.05535886098645*x - 2.70939494456225*z - 1.12517085851378; error: 100000000
model: 0.143658194013651*x**3*z                                              ; error: 26.24866314120247
model: 2.98043220979996*x*y**2*z**2 + 2.78954587158394*y + 4.39395752813166  ; error: 100000000
model: -2.21380941093567*y**3                                                ; error: 100000000
model: -4.03560917634277*x + 2.28952819465333*y**2 - 4.7633183228812         ; error: 100000000
model: 2.31035611283811*x*y*z - 2.30835768716705*y**2 + 3.70460738941305*y - 2.06122463999911; error: 100000000
model: -0.394230576356942*x*y + 6.37865870933345*x + 10.0*y - 1.57649346369041; error: 0.0008019774008962151
model: -3.27698009328429*x*y**2*z + 4.47973525358547*x - 0.114408343929314*y + 0.62958496165657; error: 100000000
model: 4.78686488401711*x**2*y*z + 0.883091408515186*y**2 - 4.11502050813532 ; error: 100000000
model: 4.98683684778947*x**3*y*z**3                                          ; error: 100000000
model: 2.22946466374271*y**2*z**2                                            ; error: 100000000
model: -1.80024536301501*x*y**4*z + 2.65552175493765*x - 0.573432243710611   ; error: 100000000
model: -2.16988097311086*y**3*z                                              ; error: 100000000
model: 5.19869787438385*x*z + 10.0*x                                         ; error: 4.62257585998116
model: 1.30535714104278*x**2*y*z - 2.22905653079074*x - 3.22107840617078*y**2 + 1.0509111945616*y*z - 0.436279448608136*y - 3.42929703165819; error: 100000000
model: -0.00123249388159219*x**2*y**3 - 2.42860213288494                     ; error: 100000000
model: -0.0374982431796545*x*y*z + 10.0*x + 6.78431575860261*y               ; error: 0.0019526294068767447
model: 1.83332623079976*x**2 + 10.0*x + 0.736602183552756*z + 10.0           ; error: 0.4255741320048685
model: 2.90425610514723*x*y - 0.26160822274925*x - 4.34695672412097*y**2 + 1.12307191562572; error: 100000000
model: -0.0932434859759368*x*z - 2.43301231876736*y**2*z - 0.225689355920232 ; error: 100000000
model: -4.76944086750442*x*y**2 + 4.7588137527395*y*z + 0.00490218278156318  ; error: 100000000
model: 0.884807783699496*x*y + 10.0*x + 0.765517638767824*z + 10.0           ; error: 0.4290696305205604
model: -3.81948254368254*x + 4.77575647382225*y**2 - 2.11907675010162*y      ; error: 100000000
model: 1.79763808165304*x*y + 10.0*x                                         ; error: 4.066126569666968
model: 0.461725185809249*x**3 + 10.0*z + 10.0                                ; error: 3.464312924872204
model: -2.65764596708028*y**2*z**2 + 0.114888344165399*y + 4.40798726432117  ; error: 100000000
model: -3.67114030624116*x**2*y*z**2                                         ; error: 100000000
model: 0.104751642297088*x**2*z**2 + 10.0*x                                  ; error: 10.609737189137729
model: 0.227465253648515*x*z + 10.0*y + 1.25925247981758                     ; error: 0.06462534132471555
model: 0.1897765884437*x*z**3 + 10.0                                         ; error: 16.60807109549586
model: 10.0*x + 0.321277842221921*y*z**2 + 10.0                              ; error: 2.5973096836327425
model: 0.912930840501044*x*y*z - 3.734944509375*x - 4.46592086924913*y**2 - 3.05970805425658*y*z - 2.083833342874*y - 0.98613501432575*z + 1.94494074873985; error: 100000000
model: 3.86522235778032*x*y**3*z                                             ; error: 100000000
model: -0.842264974972808*x**3 + 4.40972746571237*x*y + 10.0                 ; error: 0.14430588028788596
model: 0.0884195116505289*x*y + 10.0*y + 1.14425147931086                    ; error: 0.05334593778911096
model: 0.182202280718489*x**2*z**2                                           ; error: 29.937447650051098
model: -4.32587706371154*x**3*y**2*z**2 - 1.8527329021538                    ; error: 100000000
model: -1.51538072923879*x**2*y**2*z**4 - 2.3886792819408                    ; error: 100000000
model: -1.76983135746215*x**2*y*z - 2.58484723750096*x*y - 3.94163408834454*x - 1.2812454348256*y**2*z + 1.77726809794907*y - 3.84402053400682; error: 100000000
model: -4.82915809660063*y**2*z + 1.61852929065554*y + 0.932698055219782     ; error: 100000000
model: -2.37078695089502*x**4*y**2*z - 0.206869697384421                     ; error: 100000000
model: -0.236117219121037*x*y + 5.91274893877196*x + 9.99909302722605*y - 3.34577976991185*z; error: 0.0008008266963662371
model: 0.0770251563516741*x**2*y*z + 10.0                                    ; error: 16.927328813465923
model: 3.0168511236723*x**2*z + 1.45919013498597*y**3 - 2.32923642014362*z - 1.09695826689193; error: 100000000
model: 4.10017355906255*x*y**3*z**2                                          ; error: 100000000
model: 0.14085267571086*x**2*z**2 + 10.0*z                                   ; error: 19.127770566733304
model: 0.534106281180133*x*z**2 + 10.0*x + 10.0*z                            ; error: 4.113390561313915
model: -4.32777973389288*x**2*y - 2.65772868196501*y**3 - 0.780667575894396  ; error: 100000000
model: 0.110115147487936*x*y*z + 10.0*z**2                                   ; error: 19.842657683503816
model: 2.64432019276624*x*y*z**3 - 4.85213288377381                          ; error: 100000000
model: 0.0555712965511807*x**3*y + 10.0                                      ; error: 13.956308582741816
model: -0.555645328479636*x*y + 10.0*x*z                                     ; error: 11.911236915840078
model: -0.972542199824519*x**4*y**3                                          ; error: 100000000
model: -0.066339916916445*x*y*z + 10.0*y + 10.0*z - 3.33397288944815         ; error: 0.02360477675427576
model: 2.24506938454232*x*y**2*z - 0.494765116569128*y + 1.96890910021637    ; error: 100000000
model: 0.00058180360286683*x*y*z**2 + 10.0*y + 1.42003192517996              ; error: 0.07817175222581775
model: -0.222674282539802*x**2*z**2 + 8.19853788757467*x*z + 9.99165689760051*x + 8.32727356832915*z**2; error: 1.5480726273733691
model: 0.0315668709251269*x**2*y + 10.0*z**2 + 10.0                          ; error: 7.6436142616417895
model: 0.114954419105949*x**3*y                                              ; error: 39.84927292014376
model: 2.39386074369686*x**3 - 10.0*y*z + 10.0                               ; error: 4.328165448618291
model: -3.10376569755127*y**2 + 1.96330400799648*y + 3.90970509885379        ; error: 100000000
model: -1.39183339838956*x**2*y**2*z**2 + 3.96719760748889*z                 ; error: 100000000
model: 0.624032254276998*x*y*z + 10.0*z                                      ; error: 19.270512448057982
model: -0.805866168892504*x**2*y + 1.06693761605352*y**2 + 0.889130806247272*y; error: 100000000
model: -0.571809088930601*x**2*y*z + 10.0*x**2*z + 10.0*z                    ; error: 2.2236954354392293
model: 7.67548394275995*x**2 - 10.0*z**2 + 10.0                              ; error: 0.4234920017556721
model: 1.30608515933668*x*y**2 + 4.18961151043025*x*z                        ; error: 100000000
model: 0.0370227533026195*x*y*z**2 + 10.0*x + 10.0                           ; error: 3.201015285557268
model: 1.15405858674094*x*y + 2.55177267720067*y**2 - 0.038059393852603*y    ; error: 100000000
model: 10.0*x + 1.6277728579958*y*z + 10.0*z                                 ; error: 2.6116215025407716
model: -0.854767225748202*x**2 - 1.19897620805881*x*y*z**4                   ; error: 100000000
model: -0.879970644909238*x**2*z + 3.63275832236062*x*y + 10.0               ; error: 0.32519656120089213
model: -4.89337808501973*x**2*y**2*z + 0.747503133670767                     ; error: 100000000
model: -1.03661051356415*x*y*z + 10.0*y*z + 5.62075918816844*z + 7.55146440351004; error: 0.43945250274793735
model: -0.000987930722714661*x**3*z + 10.0*z**2 + 10.0                       ; error: 7.816831039934071
model: 0.250200507980081*x**2*z + 10.0*y                                     ; error: 1.3653155082327089
model: 9.96971307807178*x + 0.270125386258553*y*z**2 + 9.99799905167499*z    ; error: 4.56429996390554
model: 2.81842755657994*x + 3.91729717634664*y**4 - 4.85260531808389         ; error: 100000000
model: 4.42920019537175*x*y*z - 3.63043101136663*x + 2.67401144356575*y**2*z**2 - 2.22323761147091; error: 100000000
model: 4.83742173696006*x*y**2 + 2.25870469412567*y*z - 4.32083683763642*z**2 - 1.33696452684821; error: 100000000
model: 0.421405669298358*x*y + 10.0*y                                        ; error: 0.43800363117689806
model: 8.85737009881464*x**2 - 10.0*z**2                                     ; error: 3.693686096303068
model: -4.85401330077124*x**2*y**2*z                                         ; error: 100000000
model: -2.21619417137186*x**2*y*z**2 - 4.77553393911073*x + 2.0259758808926  ; error: 100000000
model: 0.953966228487864*x**2 + 10.0*y - 10.0*z + 5.29703554899213           ; error: 0.03682045801547395
model: -0.78888870431657*x**3*y**2 - 0.617619013274536*z                     ; error: 100000000
model: 10.0*x + 0.0751637806254727*y*z**3                                    ; error: 13.144854328919408
model: 0.967187739200662*x**2*y**2*z + 1.71995992214742*y**3*z               ; error: 100000000
model: 10.0*x + 1.63717816535551*y*z + 10.0                                  ; error: 0.9893223811273171
model: -0.415747820862935*x*y**2 + 3.07092409177822*x*y*z - 0.73751390798223*x; error: 100000000
model: -4.58496977808222*x**3*y**4 + 3.19200108440497                        ; error: 100000000
model: 0.115350017303978*x**3*z + 10.0                                       ; error: 12.47127242751637
model: 1.2500082670606*x*z**2 + 10.0*z                                       ; error: 16.39685865042672
model: 3.52376605263985*x*y*z - 0.559805349170908*y*z**3                     ; error: 21.04762499020399
model: 0.00927737909132184*x**2*y + 10.0*y + 1.30463602326557                ; error: 0.06573335173573548
model: -0.97864462139385*x*y*z + 10.0*y*z + 10.0                             ; error: 0.46521162141675226
model: 8.94079818115413*x**2 - 10.0*x*z + 7.24274785718132*z + 10.0          ; error: 0.1907268041355145
model: 4.92571977448201*x*y**2 - 2.77355246111329*y - 3.61002803282551       ; error: 100000000
model: 10.0*x**2 - 4.98601754262345*y*z + 10.0                               ; error: 0.2718495484437778
model: 4.97073603831029*x**2*y*z**2 + 3.98378582306689*x**2 - 3.52798083729525*x - 2.9077260577539*y**2*z - 1.50080050983608*y - 3.45437145160763; error: 100000000
model: -2.44846147290585*x**2*y**2 + 2.71241548997063*x + 4.92192333520867   ; error: 100000000
model: 3.8856563949308*x**2*y**2*z - 4.77155957192406*x*y*z**2 - 1.57721733099873; error: 100000000
model: -0.00766731140031616*x**3*y + 0.00492847668878268*x**2*y*z + 8.38385878996979*x + 7.90731591070038*y - 0.614611194980886; error: 0.00040010854733692013
model: 0.18551853359552*y*z**2 + 10.0*y                                      ; error: 1.803356158108882
model: 2.78609565592088*x**2*y**3*z**4                                       ; error: 100000000
model: 0.000272215537846507*x*z**3 + 10.0*y + 1.43621714448918               ; error: 0.07901492531096557
model: 0.65293585853235*x**3 + 10.0                                          ; error: 6.163964859140628
model: -3.08885001681044*x**2*y**3 - 3.16629504535344*y*z                    ; error: 100000000
model: 2.50494904440317*x*y - 0.36805126124858*y*z**2 + 6.98316166109613*z + 10.0; error: 0.32471473852754057
model: 2.96798286626581*x*y - 8.56180375496666*z**2 + 7.82737080857015*z + 10.0; error: 0.237061052101223
model: 0.0202532815320511*x**2*z**3 + 10.0                                   ; error: 18.33436222459761
model: 2.04333017237077*x + 10.0*y + 0.0978308637483067*z                    ; error: 0.041506221210426575
model: 10.0*x**2 - 8.41106778743325*x*z                                      ; error: 4.01263314911595
model: -2.46908452561893*x**2*y + 1.03149049358796*y**2 + 3.16883336757064*z - 3.30051889739491; error: 100000000
model: 3.06692399348877*x*y - 1.13616565219003*z**3 + 10.0                   ; error: 0.6768410498184824
model: 3.96646929860622*x - 2.73197269416448*y**2 + 3.81866840916437*y + 2.80690090274762; error: 100000000
model: 3.15873790212933*x*y**2*z**2 + 2.81099044678601*x + 4.12559008731602  ; error: 100000000
model: -0.0356600632457752*y*z**2 + 10.0*z**2 + 10.0                         ; error: 7.757373679607582
model: 1.40121377723481*x**2*y**2*z**2 + 4.99258658681188*z**2               ; error: 100000000
model: 0.273024149501137*x**2*y + 10.0*x                                     ; error: 7.47395468908904
model: -2.2926483604375*x**2*y**2 - 1.8433783555783*x*z + 0.0938112703957938*y + 0.376263843938499; error: 100000000
model: -4.97515383660533*x*y*z**3 - 1.67082453677612*z                       ; error: 100000000
model: 0.0667310289704026*y**2*z**2 + 4.38489445546642                       ; error: 100000000
model: -1.75813718231937*y**3*z + 3.50724426758132                           ; error: 100000000
model: 0.44427547879663*x**2*z + 10.0*x + 10.0                               ; error: 1.7636253104902655
model: -2.90795017955519*x*z - 1.23365857060448*y**2 - 3.5987402743576*y - 1.87545658181255; error: 100000000
model: 1.53742491027824*x*z + 10.0*x + 10.0*z + 8.09297376319532             ; error: 0.6877444703033461
model: 2.64050943084142*x*y**4*z + 4.15850389545603                          ; error: 100000000
model: -2.36853658947333*x**4*y*z**2 + 2.98022527814798*y                    ; error: 100000000
model: -0.00175796237703807*x*z**4 + 9.99733373158882*z**2 + 9.99293858069927; error: 7.410502588870596
model: 7.24914421645878*y*z - 2.35587172730644*z**3 + 10.0                   ; error: 1.2177901060769392
model: 0.0162264221964614*x**4*z                                             ; error: 30.3359084511395
model: -1.16318025738872*y**2*z**3                                           ; error: 100000000
model: -0.490403853023141*y*z + 10.0*y + 10.0*z - 3.0091848915209            ; error: 0.04181792298732386
model: 0.285825311027574*z**4                                                ; error: 35.52682418298498
model: -0.202324895204782*x*y**4*z**2                                        ; error: 100000000
model: -1.47292943997925*x*y - 2.75428683943912*y**2*z**3 + 0.478241564653885; error: 100000000
model: -2.78496577574001*x*y**2 + 3.04250905261475*y                         ; error: 100000000
model: 2.89841269614991*x**2*y*z**2 - 0.411082679371861*y**2*z + 1.00897823740863*y*z; error: 100000000
model: 4.67842127975539*x*y**2 - 0.226982504082435*x*y*z + 2.89005396682067*x*y; error: 100000000
model: 10.0*x + 4.9477356116202*z**2 + 10.0                                  ; error: 1.5348961775425867
model: -0.00839041839693625*x*y*z**2 + 10.0*y + 7.91606219626017*z - 2.46641454101278; error: 0.024210049469252284
model: 0.0463588785474975*x**2*y*z + 10.0*z + 10.0                           ; error: 8.167656546634275
model: 0.12853868441865*x*y*z + 10.0*y                                       ; error: 1.4716772799869593
model: -0.402513848549222*x*z**2 + 10.0*x*z                                  ; error: 10.696242614414645
model: 2.18270026763304*x**2 + 3.47496601556828*x*y**2*z**3 - 1.41853678926677; error: 100000000
model: 4.7680092808264*x**2*y*z**2 - 2.96650539605*z                         ; error: 100000000
model: 9.97238703031483*x - 0.428036906369901*y*z + 7.42650542799168*y - 0.628351300949291; error: 0.000179210242387171
model: -0.0152562853810373*x**2*z**2 + 0.85994529691601*x*z + 10.0*y + 1.00270342097697; error: 0.0358400468242255
model: 0.128887303889719*y*z**3 + 10.0                                       ; error: 21.121624441748228
model: -0.163486011942288*x**2*y + 10.0*x*z + 10.0                           ; error: 3.6495230926173328
model: 0.251949738144036*y**4*z + 2.94246238266192                           ; error: 100000000
model: 0.530208225722826*y*z**2 + 10.0*z + 10.0                              ; error: 7.870002732723297
model: -3.6466714024554*x**2*y**3*z + 3.35293712347684*x - 0.046044080292279 ; error: 100000000
model: -1.60259641594293*y**3*z + 4.10193339377695*y*z - 4.36922080665355*y + 1.10161069789657; error: 100000000
model: 4.4803339495135*x**2*y**2*z + 2.38543441315174*x**2 - 1.70725077021976; error: 100000000
model: 0.0103486257297998*x*y*z + 10.0*y + 1.35598041408529                  ; error: 0.07175747535068303
model: -2.34276409343824*x**3*y**2*z**2 - 3.23684594559791*x*y + 0.323149636111125; error: 100000000
model: 0.927994904534983*x*z**2 + 10.0*x                                     ; error: 9.115523024173433
model: 3.12370643522245*x**2 + 10.0*x                                        ; error: 2.7061448274597795
model: 3.77738555792831*y**2*z + 0.446782557681376*y                         ; error: 100000000
model: 10.0*x + 2.02025083215191*z**2 + 10.0*z + 8.92443193897799            ; error: 0.8446510909071719
model: 3.49065102576301*x**2*y**2                                            ; error: 100000000
model: 0.841106807363965*y*z**2 + 10.0*z                                     ; error: 21.91537757156991
model: 0.0284931178368994*x*y*z + 10.0*z**2 + 10.0                           ; error: 7.792873236672186
model: 3.6195021935518*x*y*z**3                                              ; error: 100000000
model: 0.000152547598717206*x**6*z + 9.99979465441535                        ; error: 18.532232608425325
model: 0.720843377756729*x**2*z + 3.46910269155126*y**2*z                    ; error: 100000000
model: -1.13228359803494*x + 1.5243364314127*y**2*z + 4.70990794673817       ; error: 100000000
model: 0.0603380402761313*x*y*z**2 + 10.0*z + 10.0                           ; error: 9.370864723211241
model: 4.31452795134088*x**3*y**3*z**2 - 4.00396288846196                    ; error: 100000000
model: 0.00119354147029139*x**2*z**2 + 10.0*y + 1.4199838933225              ; error: 0.07818890458496808
model: -2.02884759815099*y**2 + 0.259411694514995*y*z                        ; error: 100000000
model: -3.58662494248421*x**3*y + 4.55368953836595*x*y**2*z                  ; error: 100000000
model: 0.868618915669934*x**2*y - 0.28879635529491*x**2*z**2 + 10.0          ; error: 3.1561301434281988
model: -0.262440328448471*x**2*z**2 + 6.73814144175062*x*y                   ; error: 8.041827022513797
model: 0.0814354989172751*x**2*y + 10.0*y                                    ; error: 1.0833891215920683
model: 0.0944998647147404*x*y*z**2 + 10.0*z                                  ; error: 24.19335498341854
model: 10.0*x - 0.0503969590974072*y*z**2 + 6.73747482731225*y               ; error: 0.0022231289901707223
model: -3.45233500560326*y**3 - 2.20910637184747*y                           ; error: 100000000
model: -0.0143895799383453*x**2*z**2 + 9.99722377301038*x**2 - 4.71106027953013*y*z + 9.99592811668985; error: 0.25868842697091526
model: -0.442926457954823*x**2 + 10.0*x + 7.05791678848553*y                 ; error: 0.010387681768218946
model: 1.49097395240687*x**2*y**2 + 4.50017703131413*x + 4.17731907151595*y*z**2 - 4.02375500718634*y; error: 100000000
model: -1.22570134234227*x**2*y**3*z - 2.37006515042241*y*z**2 + 1.89279595479809*y - 2.20005873784549*z - 2.50883443054884; error: 100000000
model: -0.176383019666562*x*y*z + 10.0*x*z                                   ; error: 10.467837504294591
model: -3.16475025756926*x*y**3*z**4 - 4.72534889771333*z                    ; error: 100000000
model: 1.13886468407425*x*y + 10.0*z**2                                      ; error: 17.59602508354045
model: 7.6277946892063*z**2 + 10.0*z + 10.0                                  ; error: 4.359055439355882
model: 2.45897482886079*x*y*z**4                                             ; error: 100000000
model: -0.675811792417062*x*z + 7.54505430264039*x + 8.63668323251803*y - 1.95849263052411*z; error: 8.850671037604271e-05
model: 1.63682704890453*x**2*y**2 + 1.39093206918152                         ; error: 100000000
model: 10.0*x + 0.668112407153137*y*z + 10.0*z + 8.80623516890208            ; error: 0.7052884329769217
model: 1.73595079402034*x*y**3                                               ; error: 100000000
model: -1.14326412522897*x*y*z - 3.91389889261973*x + 1.74534266160548*y**2*z - 3.2831233240057*z + 2.09872174427536; error: 100000000
model: 0.928045497127931*x*z**2 + 10.0*z + 10.0                              ; error: 6.557259928561396
model: 1.58879651617234*x*y**2*z**3 - 1.05542175698943                       ; error: 100000000
model: 9.83510416295369*x**2 - 10.0*x*z + 10.0                               ; error: 0.3480357327190646
model: -4.06072463009845*x**2*y*z**2 - 1.32297248791635                      ; error: 100000000
model: 7.62896469125563*x**2 - 10.0*z**2 + 10.0*z                            ; error: 1.9911468169699829
model: 7.56614526850275*x**2 - 0.427666447101627*x*y*z + 10.0                ; error: 0.24756703212197198
model: -0.437064944823802*x**2*y**2*z**2 - 1.58389162916625                  ; error: 100000000
model: 1.92639412649181*x**2*y**2*z**3                                       ; error: 100000000
model: 5.22716663129031*x + 9.99938533140536*y - 8.37415615793685*z + 2.36173532518252; error: 0.0008226341040322094
model: -0.649637929434189*x**2*y*z**3                                        ; error: 100000000
model: 1.38557816758427*x*y**3*z + 1.75438648093836                          ; error: 100000000
model: 1.36492073686874*x**2*y**3                                            ; error: 100000000
model: -0.318716544077176*x**2*y - 1.06130397060717*x*y**2*z                 ; error: 100000000
model: 0.702272876109138*x*y**3*z**2 + 3.84840890841733*x*y*z                ; error: 100000000
model: -4.27105724488248*y**2 - 4.89584734022391*y*z - 2.79995605877845      ; error: 100000000
model: 10.0*x + 0.535896770305132*y*z**2                                     ; error: 10.888747501556036
model: 1.82699483196004*x*y + 3.24209066575588*y**2                          ; error: 100000000
model: 0.363863596329962*x*z**2 + 10.0*y                                     ; error: 1.7178942705615108
model: 2.96307753572571*x*y**2 - 3.62952608565515*y**2*z**3 - 4.68143736086572; error: 100000000
model: 1.78839289838443*x**2*z**2 + 0.790898722582102*y**2 - 2.65975772890632*z; error: 100000000
model: 0.155041413707626*x**2*y + 10.0*x + 10.0                              ; error: 1.2779997029889543
model: -1.67214042695464*x**2*z + 0.00326600393161014*x*y**4*z**2            ; error: 100000000
model: 10.0*x*z - 1.6884957307021*y*z + 10.0                                 ; error: 4.186008456252465
model: 7.87877635700292*x*y - 2.88498858499235*x*z**2                        ; error: 7.160946821529637
model: 0.455076637910078*x*y + 10.0*y - 10.0*z + 5.24065024436493            ; error: 0.03288686534873455
model: -1.2088078349086*x - 4.59556155627431*y**3                            ; error: 100000000
model: 0.0462718315639438*x**2*z + 10.0*z**2 + 10.0                          ; error: 7.760750635787311
model: -3.32693489225771*x**4*y*z                                            ; error: 100000000
model: 0.0466557648549992*x**2*y*z + 10.0*x                                  ; error: 11.130267903350004
model: -0.877950876789105*x*z + 9.99535400929563*x + 7.38550161602604*y - 0.617064542958862; error: 0.00018803715641311185
model: -0.365747093119227*x*y*z + 3.14350695458583*x*y + 3.84961796157097*z + 10.0; error: 0.23654516936787467
model: 0.659244444535643*y**3 + 1.81746317090349*y + 1.70738712567688*z - 0.331116420586216; error: 100000000
model: 2.39375559449116*x**2*y**4                                            ; error: 100000000
model: -4.691442529224*x*y**2 + 1.989025306606*y*z + 4.57032293921562*y - 1.52621655190518; error: 100000000
model: -0.229795696806216*x**2*z + 10.0*x*z                                  ; error: 11.294140990584985
model: 2.74515333657791*x*y**2*z - 2.37496748639479*z - 1.52282374316455     ; error: 100000000
model: 3.90675980534753*x*y - 0.29044005111769*y**3*z**2                     ; error: 100000000
model: 10.0*x*y - 9.38410448093816*y*z                                       ; error: 11.371404743739015
model: -0.780446677970519*x**3*y*z                                           ; error: 100000000
model: 2.46022672315477*x**2*y - 4.69610301847634*x*y**2*z + 1.81131070799254; error: 100000000
model: 10.0*x**2 - 3.03439223357615*x*y + 10.0                               ; error: 1.2780540226713237
model: 4.85600691929687*x**2*y**2*z - 2.68392920073475*y                     ; error: 100000000
model: 0.002161193067682*x**4*z**2                                           ; error: 35.87355058963859
model: -1.51252222456268*x*y**2*z**3 - 4.58976231071439*x - 0.353842048171118*z; error: 100000000
model: 1.18534799972816*x*y**2 - 0.46989823320002*z**2 + 1.69355271750489    ; error: 100000000
model: 0.000219757038277055*x**4*z**3 + 9.99932880596237                     ; error: 20.85810921409195
model: 0.0391263125896541*x**4 + 10.0*x + 10.0                               ; error: 1.8818268898279398
model: 4.09216662818677*x - 0.370794891302323*y**2*z - 1.11121677274783*y    ; error: 100000000
model: 4.98256317226924*y**2*z + 2.69080996573668*y + 4.45841950500418*z     ; error: 100000000
model: -1.06313741282726*y*z**2 + 8.3026257025429*y*z + 10.0                 ; error: 0.7583121144539785
model: 1.08484988717803*y**2*z**2 + 2.63048922840758*z                       ; error: 100000000
model: -1.20849455666699*x*y*z + 8.26671035880792*x*y                        ; error: 5.355426349545783
model: 0.00253413648666156*x**2*z**4 + 10.0                                  ; error: 20.806271786231825
model: -0.0895257205530302*x**2*z**2 + 5.95532925112828*x**2 + 10.0          ; error: 0.5658801105664606
model: -0.690511726565638*x*y + 7.32150360894514*x + 9.96083657663779*y + 6.30285916545396*z - 4.53338271665795; error: 0.0008441946201632752
model: 1.35619032363636*x*y + 4.60777639678106*y**2 + 3.60841253560575*y - 4.71502385357085; error: 100000000
model: 0.857135859087349*x**2 + 2.310663977923*x*y**5*z + 2.66705829629224   ; error: 100000000
model: -1.3734242725675*x**2*y*z**2 - 3.49669266295453*x*y                   ; error: 100000000
model: -3.25156037627106*x*y**2 - 4.45613791844128*x*z - 2.3097933974484*z - 3.00783686479478; error: 100000000
model: 10.0*x**2 - 4.53201094526621*x*y + 10.0*y                             ; error: 0.2444540281444165
model: 0.0280932495919912*x**2*y*z + 10.0*x + 10.0                           ; error: 2.712179024742013
model: 0.0199940893579801*x*z**2 + 10.0*y + 1.39283250865931                 ; error: 0.07583373418130805
model: 10.0*x + 6.89115963549279*y - 0.967377868270472*z**2                  ; error: 0.0010278981379745835
model: -3.35305155560786*x*y*z + 10.0*x*z**2                                 ; error: 12.971963273666915
model: 9.27506721125998*x - 0.0210197623922166*y*z**2 + 7.79502798689463*y - 5.47178317830793*z + 1.5363497766863; error: 2.5363512057682844e-05
model: -1.07009204199404*x*y*z + 10.0*x + 10.0*y*z                           ; error: 1.011187280423733
model: 0.0597709304215886*x**4 + 10.0*x                                      ; error: 7.907290221815908
model: 0.0210633597589881*x**2*z + 10.0*y + 1.35819199625557                 ; error: 0.07199343528377387
model: -0.920393588858635*x**2*y**3*z - 2.8985159284327*x**2*z - 0.571261483544809*y + 0.309958717404832*z - 2.86734549428718; error: 100000000
model: 4.18711486545592*x**2*y**2*z**4 - 2.89568910236108*x*z - 4.02532571240261; error: 100000000
model: 1.77585502858735*x + 0.329807889088157*y**4*z                         ; error: 100000000
model: -1.41215235115898*x*y*z + 10.0*y*z + 10.0*z**2 + 8.56871890204874     ; error: 0.4438723839200527
model: -2.34765129597649*y**3*z**2                                           ; error: 100000000
model: 4.97549561997979*y**2 + 4.11833204242547*y*z + 2.67155636360352*y + 3.3084492516083; error: 100000000
model: -3.33091188046019*x*y**3 - 2.88411570065417*x - 0.799385316589657     ; error: 100000000
model: -2.57250100700444*x**2*y*z**3 + 1.9316623741634*x*z                   ; error: 100000000
model: -4.5377512088793*x*y + 1.36648859967076*y**2 - 2.42700615328452*z     ; error: 100000000
model: 2.49046256181311*x**2*y**2*z - 2.1845380917544*z + 0.864596429292063  ; error: 100000000
model: -0.0237700488313327*x**2*y*z + 0.383218539716116*x**2*z + 10.0*y + 2.33358617549863*z; error: 0.025979689688771436
model: 0.531285819152932*x**4*y*z**3 + 2.08502052748144                      ; error: 100000000
model: 1.19554063860313*x**4*y - 0.191518675824762*y + 0.160717866724992*z + 0.840598758274806; error: 100000000
model: -0.0334105738531242*x**2*y*z + 10.0*x*z + 10.0                        ; error: 2.338228422511055
model: 0.257757747045003*x**2*y + 10.0*z + 10.0                              ; error: 4.35201332261595
model: -0.0266182033363397*x**2*y + 9.99797204761338*x + 6.85261551162205*y  ; error: 0.003924442083000808
model: -4.15164933467832*x**2*y**2*z**2 - 1.27424938633251*x*y - 1.25856037323148*x - 1.59015503751097; error: 100000000
model: 0.201525138005707*y**3*z**2 + 1.31306578985239                        ; error: 100000000
model: -0.233980358379564*x*y**2 + 3.83340915772313*x*y - 2.44595217020612   ; error: 100000000
model: 6.99738540088263*x*y - 3.08926808442098*z**3                          ; error: 8.434528926693075
model: 1.95164189316556*x**2*y**3 + 2.38489140530727*x                       ; error: 100000000
model: 3.21655688566587*x - 0.0500590840870556*y*z**2 + 10.0*y - 0.480925250177315; error: 0.002400701474276424
model: -1.75181458480103*x*y - 0.998174718348687*y**2 - 4.35863970431431*z - 3.7259830227113; error: 100000000
model: 3.31779411501793*x*y - 10.0*x*z + 9.99698627296826*x + 0.155503881476886*y*z**2 + 7.73381421663461; error: 0.04960969210976694
model: -4.89675481653174*x**3*y*z**2 + 3.70789026287023*x + 3.0116199530748*y - 0.878470882585022; error: 100000000
model: 0.00477521823645436*x**3*z**2 + 10.0*y                                ; error: 2.4363530784190925
model: -0.376209215551508*x*y**2 + 3.91247958297692*y**3*z - 3.04020867597288*z - 4.06081394344542; error: 100000000
model: 4.16522448313622*x**3*y**2 + 4.14219958122874                         ; error: 100000000
model: 2.14417065348033*x**2 + 0.353464169394535*y**2 + 4.68044111934346*y   ; error: 100000000
model: -0.0481318858660058*x*y*z**2 + 3.05881486428489*x*y + 10.0            ; error: 0.638952109650706
model: 3.04881327910494*x*y**2 + 3.32900101053703*x - 0.300251113255889      ; error: 100000000
model: -0.138856944771014*x**2*z + 10.0*y + 10.0*z - 3.33903840470244        ; error: 0.02456606529815328
model: 2.27369876262723*x*y**3 + 1.71114889113189*x - 0.335528486142492*z    ; error: 100000000
model: -2.9508744556805*x*y**2*z - 0.87087236090805*y*z - 4.58114941518854*y + 0.16139313938164; error: 100000000
model: 10.0*x + 0.108726283009328*y*z**2 + 10.0*z + 9.91383292311253         ; error: 0.958254532798076
model: -4.57314653099253*x**3*y**3 - 1.96469050344424*x*y + 0.0997886853214269*x - 0.167124323948464; error: 100000000
model: 0.0190829838494438*x**3*z + 10.0*x + 10.0*z + 9.8940479272583         ; error: 0.9600645304682295
model: -2.13291316503562*y**3*z + 0.895801136495554*z                        ; error: 100000000
model: 0.133195958400802*x*z**3 + 10.0*z + 10.0                              ; error: 8.908856626560718
model: -0.00266502087030322*x*y*z**2 + 10.0*y + 2.88334466161026*z           ; error: 0.0443312692955253
model: -0.0408426932463937*x**2*z + 7.19051930409847*x + 8.76129781330126*y - 4.73927932292811*z + 1.1445323362156; error: 1.9434922394130745e-05
model: 0.0168045404123501*x*z**4 + 10.0*x                                    ; error: 13.190299180252858
model: -1.96667889680651*x**3*y*z + 1.79682122269955*x*y*z + 4.54618957116507; error: 100000000
model: 1.02165835060091*y**4*z**3 - 2.56797027093533*y + 0.984307132514164*z ; error: 100000000
model: -3.57111871328659*y**4*z**2 + 0.238856872653244*z + 1.11482389539636  ; error: 100000000
model: -1.6116704639512*x**2*y**5*z**2 - 3.08843442221643                    ; error: 100000000
model: -0.213601733840546*x*y + 10.0*x + 7.07710907535735*y                  ; error: 0.010971353075529397
model: -0.039514216848017*x**2*y*z + 6.5381952219905*x**2 + 10.0             ; error: 0.3861140166879305
model: 0.00941009006882767*x**2*y*z + 10.0*x + 10.0*z + 9.99836154751923     ; error: 0.9689174214331723
model: -3.40424249576064*x - 0.937004714597163*y**2*z**2                     ; error: 100000000
model: -4.57252355340238*y**2 - 4.32622972521787*z**2 - 1.810096958832*z - 1.18010194835629; error: 100000000
model: -1.18391066379261*x**2 - 2.09918714433469*x*y**3*z**2 - 0.252483500774178; error: 100000000
model: 0.105570149387921*x**2*z**2 + 10.0*z + 10.0                           ; error: 7.940524621704409
model: -4.53075622724503*x*y**5 - 0.364074185598755*x*y*z**2 - 2.14274418578343*x + 0.320427004549214*y*z; error: 100000000
model: -3.6245790069459*y**3*z + 0.297613103547483*y                         ; error: 100000000
model: -9.99928818360805*x*z + 4.90647053902739*y*z + 9.99210936586406*y + 0.708471143859292; error: 0.04277020000940109
model: 3.02794995501551*x**2*y*z**2 - 3.85654825269601*x*y + 2.77521507253349*x - 2.55779036723833; error: 100000000
model: -4.71372944037587*x**3*y*z**2 + 2.18907499570456                      ; error: 100000000
model: -4.6896438171264*x*y**2*z - 2.64337489045942*x*y + 3.6522945173921    ; error: 100000000
model: 3.01988060978468*y**2*z - 3.51911213334519*z                          ; error: 100000000
model: -0.213900694318523*x*z**3 + 10.0*x + 5.64063418281197*y*z             ; error: 2.6944409002612315
model: -0.269156035441674*x*y*z + 5.68861207667616*x*z + 10.0*y - 9.87181934716501*z + 4.37643101635856; error: 0.0096224372737431
model: -2.27097299764465*x*y*z**3 - 4.35255036585673*x + 1.16397394059527*z - 0.321328476241464; error: 100000000
model: 2.7754497490536*x*y**3*z**2 + 4.31029358341237*y                      ; error: 100000000
model: 0.0164848885934423*x**3*z**2 + 10.0                                   ; error: 16.76658983082739
model: -0.0219259791209158*x*z**3 + 10.0*z**2 + 10.0                         ; error: 7.610767797379387
model: -0.0551743165781479*x**3*z**3 - 1.94381077744739*x*y*z**2 + 10.0*x*z**3 + 10.0*z; error: 5.655501869394933
model: 0.662450306564177*x**2 - 1.20517012249465*x*y**2                      ; error: 100000000
model: -0.768256325915833*x**2*y + 6.81718056313551*x*y + 10.0*z             ; error: 0.9795425564195288
model: -0.0675074844176091*x**2*y*z + 2.68958823656233*x*y + 7.49501127856456*z**2 + 10.0; error: 0.454862397503037
model: 4.08185289861395*y*z**4                                               ; error: 100000000
model: -0.785297474103298*x**3*y*z - 3.72514209617456*x + 2.87743160194188   ; error: 100000000
model: -0.0390358624202915*x**2*y + 9.37914502408191*x + 7.63632382977442*y + 0.0956514293101994*z**2 - 0.76627380273228; error: 0.00018665304001345943
model: -0.0431890116822257*x*y*z + 9.98548246279993*x + 6.99847043774328*y - 0.336852765794953; error: 0.0007924239628762388
model: -3.01664258882615*y**2 + 1.00468677960745*z**2 - 1.95813707830305     ; error: 100000000
model: 1.39614890332482*x*y**3 + 1.21075694921889*y                          ; error: 100000000
model: -0.77819914839748*x**3*y**2*z - 3.59663482602843*y*z + 2.26347653280613*y + 0.156198282052484; error: 100000000
model: 2.52180699266318*y**2*z**2 + 4.73332137949995*y                       ; error: 100000000
model: -0.544339346673222*x*z + 5.68163846500563*x + 9.56132633857798*y - 3.16239072377797*z + 0.383451881229683; error: 7.644366109038636e-05
model: -1.59939869597419*x**2*y*z**2 + 3.46464489872068*y                    ; error: 100000000
model: 6.54927465757178*x**2 + 10.0*x - 10.0*z**2                            ; error: 1.1636428895616666
model: 2.20135945173153*y**2*z**3 + 1.94805817760893*y**2                    ; error: 100000000
model: -3.07551093230856*x**2*y**3*z**2                                      ; error: 100000000
model: 0.0419310616340819*x**3*z + 7.19711986948244*x*y - 10.0*y*z + 10.0    ; error: 0.34009149425084956
model: 1.53425528558225*x*y**2*z**2 - 2.13203075003748*y*z**2 + 1.39077981103044; error: 100000000
model: -4.23920129082992*x**2*y**2*z**2 - 3.93280029319237*x*y*z - 1.23866880390068; error: 100000000
model: -0.149525705681263*x*y*z + 0.820371774474981*x*y + 10.0*y             ; error: 0.05109182559993588
model: 1.02939667358917*x**2*z - 1.86079631796195*x*y**3*z**2                ; error: 100000000
model: 2.71732387656935*x*y**2*z + 4.89318813592423*y**2 - 2.55737374692798*y - 1.62811772234256; error: 100000000
model: -4.13961131376194*x**2*y**3 - 0.66585266079337*y**2*z**2 - 0.793516286034142; error: 100000000
model: 10.0*x + 3.92760698752297*y*z - 10.0*z**2 + 10.0*z + 5.82667165756845 ; error: 0.21017968601548273
model: -0.0706377736377183*y*z + 10.0*y + 2.94567705736448*z                 ; error: 0.0563504243799898
model: 0.00980217794413629*y*z**2 + 10.0*y + 1.39190553936136                ; error: 0.07575332463176238
model: 7.76253211936807*y*z - 10.0*z**2 + 10.0                               ; error: 4.324922261567052
model: 0.401125785702281*x**2*y*z + 1.03997385587399*y**2                    ; error: 100000000
model: 10.0*x**2 - 3.94000675522841*x*y + 10.0*x + 10.0                      ; error: 0.350758537551189
model: -1.36197117458986*y**2*z + 4.34430991237509*z**2 - 2.76778805105794*z ; error: 100000000
model: -0.220975018771632*x*z**3 + 6.52743381481042*y*z + 9.99960524513713   ; error: 1.5820912649536554
model: 4.84686307040163*y**3 + 0.617847283803975*y*z                         ; error: 100000000
model: 0.916814040118213*x**2*z + 10.0*z                                     ; error: 13.497386087508865
model: -4.68786892301636*x*y**2*z**3                                         ; error: 100000000
model: 1.99814054111627*x**2 + 10.0*y - 3.32260656748884*z**2                ; error: 0.28595278631544596
model: 2.8416929497007*x*y + 10.0*x - 3.23317298181017*y*z + 7.87313236693479; error: 0.06069458932501464
model: -0.160673409405527*x*z**2 + 10.0*y + 8.44887504027573*z - 2.67526982623811; error: 0.027552655058381212
model: 0.705336987337772*y**3*z + 0.260529997797362*y - 3.51933414579058     ; error: 100000000
model: 3.20195525312044*y**4*z                                               ; error: 100000000
model: 0.0301751733779214*x*z**3 + 10.0*x + 10.0*z + 10.0                    ; error: 1.0888414535327609
model: -3.77388679225664*x*z - 3.09810729147575*y**2*z                       ; error: 100000000
model: -0.894347587591087*x**2 + 4.86122953978994*y**2 - 3.5568780841939*z**2 - 3.92894374495354*z + 3.38936771268861; error: 100000000
model: 0.681503527528529*x**2*z + 10.0*x                                     ; error: 7.518987968625645
model: -0.00372847838092404*x**3*y + 9.98621462215951*x + 6.96977343005835*y - 0.320580365105526; error: 0.0008353065976606284
model: 0.689876683357676*x**2*z + 5.84965525193068*x*y - 10.0*y*z + 9.78669617638382*z + 10.0; error: 0.12481417987550374
model: 3.26525074666232*x*y - 0.473913406577879*y*z**2 + 10.0                ; error: 0.4415349174796078
model: -1.32141031271403*x*y**2*z**2 - 0.166145376786004*x*y - 0.514372015583903*x - 4.75088519476906; error: 100000000
model: 1.23848723456867*x*z + 0.629778731192649*y**3                         ; error: 100000000
model: -1.87807930604141*x**4*y**2*z**2                                      ; error: 100000000
model: 0.749627132823745*x**2*y - 0.147854987068444*y*z**3 + 10.0            ; error: 3.519763134493226
model: -1.61112426993466*y**3*z - 1.92884926479354*z - 2.46784074566888      ; error: 100000000
model: 10.0*x - 0.478153521548648*y*z**2 + 3.41464506119606*y*z + 7.40265695119886*z + 5.0704798365277; error: 0.2282991302555109
model: 10.0*x**2 - 4.46345973663752*y*z                                      ; error: 2.5962320375531007
model: 1.6287367336136*x*y - 4.65645334362888*x*z + 10.0*y                   ; error: 0.16075659796714917
model: 0.0704988815172625*x**2*y + 10.0*x + 10.0*z + 8.18278218862014        ; error: 0.7152675795676134
model: -0.0272200817531278*x**2*y + 7.81213148102818*x + 8.46063857340686*y - 2.03624577676065*z - 0.0116021121509501; error: 0.00012011558782723944
model: 3.55982269708883*x*y**2 - 0.435130332182359*x                         ; error: 100000000
model: -0.0598416552521264*x**3*y**3*z**4 - 4.29770011664066*z - 2.71249102405183; error: 100000000
model: 1.18402949046205*y*z + 9.97827148455864*z**2                          ; error: 18.84261509849104
model: 2.11149910729595*x**2*y**3*z + 4.18531613107169*x + 0.37859034309958*y - 1.92742860780789*z; error: 100000000
model: 0.0204093677259662*x**3*y + 10.0*x + 10.0                             ; error: 2.1287907423793544
model: 1.56093298990529*x*y*z**3 + 0.754314257249188*y**2*z + 4.82721311847485; error: 100000000
model: -4.88863964437104*x**2*y*z**2 - 0.847399031806421*x**2*z - 2.03276439701087*x - 4.50196370666328; error: 100000000
model: 5.79811080859557*x**2*z - 7.08965799306862*x*z**2 + 10.0              ; error: 2.6549022422084336
model: 2.68965218466644*x**2 - 2.03852038539505*x*y*z + 4.83869227242368*y**2; error: 100000000
model: 4.3635403677499*x*y**2*z**4 + 4.11923835034528*y + 1.78016468611062*z ; error: 100000000
model: -0.0645771837301487*x**3*y + 5.02900774562457*x*y + 10.0*z            ; error: 1.7874224137721635
model: -0.0101814595174688*x*y + 10.0*y + 2.7696932911226*z                  ; error: 0.05998773881215206
model: 1.2136680034641*z**3 + 10.0*z + 10.0                                  ; error: 7.771643817885402
model: -0.528190753473429*x*y**3 - 4.6632734087912*z - 1.16526111355649      ; error: 100000000
model: -1.93479642700802*x*y**2*z**4 + 4.97540987183063*z                    ; error: 100000000
model: -3.20377509727463*x**3*y**3*z**3 + 1.73092475029374*z + 3.36715826696863; error: 100000000
model: -0.946223281619542*x*y*z**5                                           ; error: 100000000
model: -3.63588640414692*x*y**4*z**3 - 1.13390695454816*y**2                 ; error: 100000000
model: 10.0*y**4                                                             ; error: 58.212901951166245
model: 2.47789433437728*x**3 - 10.0*y*z                                      ; error: 8.104848699360122
model: 10.0*x**2 - 2.79658721061764*x*y                                      ; error: 3.8975783620464806
model: -1.72755871045514*y**2*z**4 - 0.772872954968538*y                     ; error: 100000000
model: 1.77480137161107*x**2*y**3*z**3                                       ; error: 100000000
model: 0.899367468922222*x**3*y*z - 4.06832929344517*y - 3.80036475186644*z  ; error: 100000000
model: 2.17250316019912*x**3*y**3*z                                          ; error: 100000000
model: -4.35322001886962*x*y*z**7 + 0.272036292891003                        ; error: 100000000
model: 10.0*y + 0.0677724228736721*z**4                                      ; error: 2.5217325145806364
model: -0.707952393864221*x*z - 3.92220971896706*y**3*z + 2.22172720450872   ; error: 100000000
model: 1.90185908207537*x*y*z + 1.00019015892098*y**2                        ; error: 100000000
model: 2.48336169531163*x**4*y*z**2                                          ; error: 100000000
model: -2.50776626131114*x*y**2 - 1.93303960701023*y*z                       ; error: 100000000
model: 0.88368835250094*x**4*y                                               ; error: 100000000
model: 0.921386528192805*y**5*z + 4.37516479783581                           ; error: 100000000
model: 0.0292224567872685*z**5 + 10.0                                        ; error: 20.75322839804768
model: 3.283125111489*x**2*y**2*z + 4.61465315134211*x                       ; error: 100000000
model: 10.0*x*z + 1.56908069735798*y*z - 9.38522207076825*z**2 + 10.0        ; error: 3.4031681887125766
model: 10.0*y + 0.0141805661276293*z**3 + 1.41787509402351                   ; error: 0.07812450509188332
model: 0.0873267870242867*x*z**3 + 10.0*x + 10.0                             ; error: 3.3212797274245407
model: -0.00686916797985451*x**3*z**2 + 10.0*x*z                             ; error: 9.79351546667896
model: -0.368739294866023*x*y*z + 10.0*y*z                                   ; error: 21.096163172346017
model: -1.65265427493073*x**2*z - 4.53810704691459*x - 3.17663307704678*y**2 + 4.76725139436061*z + 2.14534465690137; error: 100000000
model: -1.25456988335316*x**2*z + 10.0*x**2                                  ; error: 2.1726623394280677
model: -1.15292057361072*x*y*z + 4.56669859061971*y**2 - 0.128091044821429   ; error: 100000000
model: -4.32193083402744*x*y + 4.65153029891027*y**3 + 2.01518368890174      ; error: 100000000
model: -0.670382396435091*x*z + 10.0*x + 6.94013313376156*y                  ; error: 0.0033668325250160443
model: -3.26812701736991*x**2*y*z**4 - 3.28332047445695*z                    ; error: 100000000
[2] [1, 3]
