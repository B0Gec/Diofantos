["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
6500 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Excepted an error: operands could not be broadcast together with shapes (1000,1) (977,1) !! 
Model: C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
Estimating model C0*x**2 + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*y**2*z + C1
Estimating model C0*x*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1
Estimating model C0*x + C1*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3*z**2 + C2
Estimating model C0*x**2*z + C1*x**2 + C2*x*z + C3
Estimating model C0*x*y**2 + C1*x*y*z + C2
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x + C1*y + C2*z**2 + C3
Estimating model C0*x**2*y**3*z
Estimating model C0*x*y + C1*x*z**2 + C2*x
Estimating model C0*y*z**2 + C1*y*z
Estimating model C0*x*y**2 + C1*z
Estimating model C0*x**3*y*z**3 + C1*z + C2
Estimating model C0*x*y**2*z + C1*x + C2
Estimating model C0*x + C1*y*z
Estimating model C0*x*y**3*z**2 + C1
Estimating model C0*x*y*z + C1*x*y + C2
Estimating model C0*y**3 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*z**2 + C2
Estimating model C0*x*z + C1*y*z
Estimating model C0*x**2*y
Estimating model C0*x*z + C1*y + C2*z + C3
Estimating model C0*x**2*y*z
Estimating model C0*x**2*y*z + C1*y + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x**2*y*z + C1*y
Estimating model C0*y**4 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4 + C1*y + C2
Estimating model C0*x*y*z**2 + C1
Estimating model C0*x**2 + C1*x*y*z
Estimating model C0*x*y**2 + C1*x + C2*z + C3
Estimating model C0*x**3*z
Estimating model C0*x*y**2*z**2 + C1*y + C2
Estimating model C0*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3
Estimating model C0*x + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2
Estimating model C0*x*y*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2*y + C3
Estimating model C0*x*y + C1*x + C2*y + C3
Estimating model C0*x*y**2*z + C1*x + C2*y + C3
Estimating model C0*x**2*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2 + C2
Estimating model C0*x**3*y*z**3
Estimating model C0*y**2*z**2
Estimating model C0*x*y**4*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1*x + C2
Estimating model C0*y**3*z
Estimating model C0*x*z + C1*x
Estimating model C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5
Estimating model C0*x**2*y**3 + C1
Estimating model C0*x*y*z + C1*x + C2*y
Estimating model C0*x**2 + C1*x + C2*z + C3
Estimating model C0*x*y + C1*x + C2*y**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*x + C2*y**2 + C3
Estimating model C0*x*z + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2*z + C2
Estimating model C0*x*y**2 + C1*y*z + C2
Estimating model C0*x*y + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y
Estimating model C0*x*y + C1*x
Estimating model C0*x**3 + C1*z + C2
Estimating model C0*y**2*z**2 + C1*y + C2
Estimating model C0*x**2*y*z**2
Estimating model C0*x**2*z**2 + C1*x
Estimating model C0*x*z + C1*y + C2
Estimating model C0*x*z**3 + C1
Estimating model C0*x + C1*y*z**2 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6
Estimating model C0*x*y**3*z
Estimating model C0*x**3 + C1*x*y + C2
Estimating model C0*x*y + C1*y + C2
Estimating model C0*x**2*z**2
Estimating model C0*x**3*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**4 + C1
Estimating model C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2
Estimating model C0*x**4*y**2*z + C1
Estimating model C0*x*y + C1*x + C2*y + C3*z
Estimating model C0*x**2*y*z + C1
Estimating model C0*x**2*z + C1*y**3 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**3 + C2*z + C3
Estimating model C0*x*y**3*z**2
Estimating model C0*x**2*z**2 + C1*z
Estimating model C0*x*z**2 + C1*x + C2*z
Estimating model C0*x**2*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**3 + C2
Estimating model C0*x*y*z + C1*z**2
Estimating model C0*x*y*z**3 + C1
Estimating model C0*x**3*y + C1
Estimating model C0*x*y + C1*x*z
Estimating model C0*x**4*y**3
Estimating model C0*x*y*z + C1*y + C2*z + C3
Estimating model C0*x*y**2*z + C1*y + C2
Estimating model C0*x*y*z**2 + C1*y + C2
Estimating model C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2
Estimating model C0*x**2*y + C1*z**2 + C2
Estimating model C0*x**3*y
Estimating model C0*x**3 + C1*y*z + C2
Estimating model C0*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y + C2
Estimating model C0*x**2*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*z
Estimating model C0*x**2*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*y
Estimating model C0*x**2*y*z + C1*x**2*z + C2*z
Estimating model C0*x**2 + C1*z**2 + C2
Estimating model C0*x*y**2 + C1*x*z
Estimating model C0*x*y*z**2 + C1*x + C2
Estimating model C0*x*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y
Estimating model C0*x + C1*y*z + C2*z
Estimating model C0*x**2 + C1*x*y*z**4
Estimating model C0*x**2*z + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1
Estimating model C0*x*y*z + C1*y*z + C2*z + C3
Estimating model C0*x**3*z + C1*z**2 + C2
Estimating model C0*x**2*z + C1*y
Estimating model C0*x + C1*y*z**2 + C2*z
Estimating model C0*x + C1*y**4 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Estimating model C0*x*y**2 + C1*y*z + C2*z**2 + C3
Estimating model C0*x*y + C1*y
Estimating model C0*x**2 + C1*z**2
Estimating model C0*x**2*y**2*z
Estimating model C0*x**2*y*z**2 + C1*x + C2
Estimating model C0*x**2 + C1*y + C2*z + C3
Estimating model C0*x**3*y**2 + C1*z
Estimating model C0*x + C1*y*z**3
Estimating model C0*x**2*y**2*z + C1*y**3*z
Estimating model C0*x + C1*y*z + C2
Estimating model C0*x*y**2 + C1*x*y*z + C2*x
Estimating model C0*x**3*y**4 + C1
Estimating model C0*x**3*z + C1
Estimating model C0*x*z**2 + C1*z
Estimating model C0*x*y*z + C1*y*z**3
Estimating model C0*x**2*y + C1*y + C2
Estimating model C0*x*y*z + C1*y*z + C2
Estimating model C0*x**2 + C1*x*z + C2*z + C3
Estimating model C0*x*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y + C2
Estimating model C0*x**2 + C1*y*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*x**2*y**2 + C1*x + C2
Estimating model C0*x**2*y**2*z + C1*x*y*z**2 + C2
Estimating model C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4
Estimating model C0*y*z**2 + C1*y
Estimating model C0*x**2*y**3*z**4
Estimating model C0*x*z**3 + C1*y + C2
Estimating model C0*x**3 + C1
Estimating model C0*x**2*y**3 + C1*y*z
Estimating model C0*x*y + C1*y*z**2 + C2*z + C3
Estimating model C0*x*y + C1*z**2 + C2*z + C3
Estimating model C0*x**2*z**3 + C1
Estimating model C0*x + C1*y + C2*z
Estimating model C0*x**2 + C1*x*z
Estimating model C0*x**2*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*z**3 + C2
Estimating model C0*x + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y + C3
Estimating model C0*x*y**2*z**2 + C1*x + C2
Estimating model C0*y*z**2 + C1*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*z**2
Estimating model C0*x**2*y + C1*x
Estimating model C0*x**2*y**2 + C1*x*z + C2*y + C3
Estimating model C0*x*y*z**3 + C1*z
Estimating model C0*y**2*z**2 + C1
Estimating model C0*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1
Estimating model C0*x**2*z + C1*x + C2
Estimating model C0*x*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2*y + C3
Estimating model C0*x*z + C1*x + C2*z + C3
Estimating model C0*x*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1
Estimating model C0*x**4*y*z**2 + C1*y
Estimating model C0*x*z**4 + C1*z**2 + C2
Estimating model C0*y*z + C1*z**3 + C2
Estimating model C0*x**4*z
Estimating model C0*y**2*z**3
Estimating model C0*y*z + C1*y + C2*z + C3
Estimating model C0*z**4
Estimating model C0*x*y**4*z**2
Estimating model C0*x*y + C1*y**2*z**3 + C2
Estimating model C0*x*y**2 + C1*y
Excepted an error: operands could not be broadcast together with shapes (1000,1) (922,1) !! 
Model: C0*x*y**2 + C1*y
Estimating model C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Estimating model C0*x*y**2 + C1*x*y*z + C2*x*y
Estimating model C0*x + C1*z**2 + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*z + C2
Estimating model C0*x*y*z + C1*y
Estimating model C0*x*z**2 + C1*x*z
Estimating model C0*x**2 + C1*x*y**2*z**3 + C2
Estimating model C0*x**2*y*z**2 + C1*z
Estimating model C0*x + C1*y*z + C2*y + C3
Estimating model C0*x**2*z**2 + C1*x*z + C2*y + C3
Estimating model C0*y*z**3 + C1
Estimating model C0*x**2*y + C1*x*z + C2
Estimating model C0*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z + C1
Estimating model C0*y*z**2 + C1*z + C2
Estimating model C0*x**2*y**3*z + C1*x + C2
Estimating model C0*y**3*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y**2*z + C1*x**2 + C2
Estimating model C0*x*y*z + C1*y + C2
Estimating model C0*x**3*y**2*z**2 + C1*x*y + C2
Estimating model C0*x*z**2 + C1*x
Estimating model C0*x**2 + C1*x
Estimating model C0*y**2*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y
Estimating model C0*x + C1*z**2 + C2*z + C3
Estimating model C0*x**2*y**2
Estimating model C0*y*z**2 + C1*z
Estimating model C0*x*y*z + C1*z**2 + C2
Estimating model C0*x*y*z**3
Estimating model C0*x**6*z + C1
Estimating model C0*x**2*z + C1*y**2*z
Estimating model C0*x + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2
Estimating model C0*x*y*z**2 + C1*z + C2
Estimating model C0*x**3*y**3*z**2 + C1
Estimating model C0*x**2*z**2 + C1*y + C2
Estimating model C0*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z
Estimating model C0*x**3*y + C1*x*y**2*z
Estimating model C0*x**2*y + C1*x**2*z**2 + C2
Estimating model C0*x**2*z**2 + C1*x*y
Estimating model C0*x**2*y + C1*y
Estimating model C0*x*y*z**2 + C1*z
Estimating model C0*x + C1*y*z**2 + C2*y
Estimating model C0*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y
Estimating model C0*x**2*z**2 + C1*x**2 + C2*y*z + C3
Estimating model C0*x**2 + C1*x + C2*y
Estimating model C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Estimating model C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x*z
Estimating model C0*x*y**3*z**4 + C1*z
Estimating model C0*x*y + C1*z**2
Estimating model C0*z**2 + C1*z + C2
Estimating model C0*x*y*z**4
Estimating model C0*x*z + C1*x + C2*y + C3*z
Estimating model C0*x**2*y**2 + C1
Estimating model C0*x + C1*y*z + C2*z + C3
Estimating model C0*x*y**3
Estimating model C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Estimating model C0*x*z**2 + C1*z + C2
Estimating model C0*x*y**2*z**3 + C1
Estimating model C0*x**2 + C1*x*z + C2
Estimating model C0*x**2*y*z**2 + C1
Estimating model C0*x**2 + C1*z**2 + C2*z
Estimating model C0*x**2 + C1*x*y*z + C2
Estimating model C0*x**2*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**3
Estimating model C0*x + C1*y + C2*z + C3
Estimating model C0*x**2*y*z**3
Estimating model C0*x*y**3*z + C1
Estimating model C0*x**2*y**3
Estimating model C0*x**2*y + C1*x*y**2*z
Estimating model C0*x*y**3*z**2 + C1*x*y*z
Estimating model C0*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2
Estimating model C0*x + C1*y*z**2
Estimating model C0*x*y + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2
Estimating model C0*x*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**2*z**3 + C2
Estimating model C0*x**2*z**2 + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z**2 + C1*y**2 + C2*z
Estimating model C0*x**2*y + C1*x + C2
Estimating model C0*x**2*z + C1*x*y**4*z**2
Estimating model C0*x*z + C1*y*z + C2
Estimating model C0*x*y + C1*x*z**2
Estimating model C0*x*y + C1*y + C2*z + C3
Estimating model C0*x + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3
Estimating model C0*x**2*z + C1*z**2 + C2
Estimating model C0*x**4*y*z
Estimating model C0*x**2*y*z + C1*x
Estimating model C0*x*z + C1*x + C2*y + C3
Estimating model C0*x*y*z + C1*x*y + C2*z + C3
Estimating model C0*y**3 + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y + C2*z + C3
Estimating model C0*x**2*y**4
Estimating model C0*x*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x**2*z + C1*x*z
Estimating model C0*x*y**2*z + C1*z + C2
Estimating model C0*x*y + C1*y**3*z**2
Estimating model C0*x*y + C1*y*z
Estimating model C0*x**3*y*z
Estimating model C0*x**2*y + C1*x*y**2*z + C2
Estimating model C0*x**2 + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1*y
Estimating model C0*x**4*z**2
Estimating model C0*x*y**2*z**3 + C1*x + C2*z
Estimating model C0*x*y**2 + C1*z**2 + C2
Estimating model C0*x**4*z**3 + C1
Estimating model C0*x**4 + C1*x + C2
Estimating model C0*x + C1*y**2*z + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2*y
Estimating model C0*y**2*z + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y*z + C2
Estimating model C0*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*x*y
Estimating model C0*x**2*z**4 + C1
Estimating model C0*x**2*z**2 + C1*x**2 + C2
Estimating model C0*x*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y + C3
Estimating model C0*x**2 + C1*x*y**5*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**5*z + C2
Estimating model C0*x**2*y*z**2 + C1*x*y
Estimating model C0*x*y**2 + C1*x*z + C2*z + C3
Estimating model C0*x**2 + C1*x*y + C2*y
Estimating model C0*x**2*y*z + C1*x + C2
Estimating model C0*x*z**2 + C1*y + C2
Estimating model C0*x + C1*y + C2*z**2
Estimating model C0*x*y*z + C1*x*z**2
Estimating model C0*x + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x + C2*y*z
Estimating model C0*x**4 + C1*x
Estimating model C0*x**2*z + C1*y + C2
Estimating model C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Estimating model C0*x**2*y**2*z**4 + C1*x*z + C2
Estimating model C0*x + C1*y**4*z
Estimating model C0*x*y*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y**3*z**2
Estimating model C0*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x*y**3 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*x + C2
Estimating model C0*x**2*y*z**3 + C1*x*z
Estimating model C0*x*y + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z
Estimating model C0*x**2*y**2*z + C1*z + C2
Estimating model C0*x**2*y*z + C1*x**2*z + C2*y + C3*z
Estimating model C0*x**4*y*z**3 + C1
Estimating model C0*x**4*y + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*x*z + C2
Estimating model C0*x**2*y + C1*z + C2
Estimating model C0*x**2*y + C1*x + C2*y
Estimating model C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z**2 + C1
Estimating model C0*x*y**2 + C1*x*y + C2
Estimating model C0*x*y + C1*z**3
Estimating model C0*x**2*y**3 + C1*x
Estimating model C0*x + C1*y*z**2 + C2*y + C3
Estimating model C0*x*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4
Estimating model C0*x**3*y*z**2 + C1*x + C2*y + C3
Estimating model C0*x**3*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**3*z + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**3*z + C2*z + C3
Estimating model C0*x**3*y**2 + C1
Estimating model C0*x**2 + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*y
Estimating model C0*x*y*z**2 + C1*x*y + C2
Estimating model C0*x*y**2 + C1*x + C2
Estimating model C0*x**2*z + C1*y + C2*z + C3
Estimating model C0*x*y**3 + C1*x + C2*z
Estimating model C0*x*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*x + C1*y*z**2 + C2*z + C3
Estimating model C0*x**3*y**3 + C1*x*y + C2*x + C3
Estimating model C0*x**3*z + C1*x + C2*z + C3
Estimating model C0*y**3*z + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z
Estimating model C0*x*z**3 + C1*z + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z
Estimating model C0*x**2*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x*z**4 + C1*x
Estimating model C0*x**3*y*z + C1*x*y*z + C2
Estimating model C0*y**4*z**3 + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**3 + C1*y + C2*z
Estimating model C0*y**4*z**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**2 + C1*z + C2
Estimating model C0*x**2*y**5*z**2 + C1
Estimating model C0*x*y + C1*x + C2*y
Estimating model C0*x**2*y*z + C1*x**2 + C2
Estimating model C0*x**2*y*z + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2*z**2
Estimating model C0*y**2 + C1*z**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2*z + C3
Estimating model C0*x**2 + C1*x*y**3*z**2 + C2
Estimating model C0*x**2*z**2 + C1*z + C2
Estimating model C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Excepted an error: operands could not be broadcast together with shapes (1000,1) (923,1) !! 
Model: C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Estimating model C0*y**3*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y
Estimating model C0*x*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x**3*y*z**2 + C1
Estimating model C0*x*y**2*z + C1*x*y + C2
Estimating model C0*y**2*z + C1*z
Estimating model C0*x*z**3 + C1*x + C2*y*z
Estimating model C0*x*y*z + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y*z**3 + C1*x + C2*z + C3
Estimating model C0*x*y**3*z**2 + C1*y
Estimating model C0*x**3*z**2 + C1
Estimating model C0*x*z**3 + C1*z**2 + C2
Estimating model C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z
Estimating model C0*x**2 + C1*x*y**2
Estimating model C0*x**2*y + C1*x*y + C2*z
Estimating model C0*x**2*y*z + C1*x*y + C2*z**2 + C3
Estimating model C0*y*z**4
Estimating model C0*x**3*y*z + C1*x + C2
Estimating model C0*x**2*y + C1*x + C2*y + C3*z**2 + C4
Estimating model C0*x*y*z + C1*x + C2*y + C3
Estimating model C0*y**2 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2
Estimating model C0*x*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*y
Estimating model C0*x**3*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*y**2*z**2 + C1*y
Estimating model C0*x*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x**2*y*z**2 + C1*y
Estimating model C0*x**2 + C1*x + C2*z**2
Estimating model C0*y**2*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**3 + C1*y**2
Estimating model C0*x**2*y**3*z**2
Estimating model C0*x**3*z + C1*x*y + C2*y*z + C3
Estimating model C0*x*y**2*z**2 + C1*y*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*x*y*z + C2
Estimating model C0*x*y*z + C1*x*y + C2*y
Estimating model C0*x**2*z + C1*x*y**3*z**2
Estimating model C0*x*y**2*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y**2 + C2*y + C3
Estimating model C0*x**2*y**3 + C1*y**2*z**2 + C2
Estimating model C0*x + C1*y*z + C2*z**2 + C3*z + C4
Estimating model C0*y*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y + C2
Estimating model C0*y*z + C1*z**2 + C2
Estimating model C0*x**2*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2
Estimating model C0*x**2 + C1*x*y + C2*x + C3
Estimating model C0*y**2*z + C1*z**2 + C2*z
Estimating model C0*x*z**3 + C1*y*z + C2
Estimating model C0*y**3 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y*z
Estimating model C0*x**2*z + C1*z
Estimating model C0*x*y**2*z**3
Estimating model C0*x**2 + C1*y + C2*z**2
Estimating model C0*x*y + C1*x + C2*y*z + C3
Estimating model C0*x*z**2 + C1*y + C2*z + C3
Estimating model C0*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y + C2
Estimating model C0*y**4*z
Estimating model C0*x*z**3 + C1*x + C2*z + C3
Estimating model C0*x*z + C1*y**2*z
Estimating model C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x
Estimating model C0*x**3*y + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4
Estimating model C0*x*y + C1*y*z**2 + C2
Estimating model C0*x*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x*z + C1*y**3
Excepted an error: operands could not be broadcast together with shapes (1000,1) (920,1) !! 
Model: C0*x*z + C1*y**3
Estimating model C0*x**4*y**2*z**2
Estimating model C0*x**2*y + C1*y*z**3 + C2
Estimating model C0*y**3*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z + C2
Estimating model C0*x + C1*y*z**2 + C2*y*z + C3*z + C4
Estimating model C0*x**2 + C1*y*z
Estimating model C0*x*y + C1*x*z + C2*y
Estimating model C0*x**2*y + C1*x + C2*z + C3
Estimating model C0*x**2*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y**2 + C1*x
Estimating model C0*x**3*y**3*z**4 + C1*z + C2
Estimating model C0*y*z + C1*z**2
Estimating model C0*x**2*y**3*z + C1*x + C2*y + C3*z
Estimating model C0*x**3*y + C1*x + C2
Estimating model C0*x*y*z**3 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*y**2*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3
Estimating model C0*x**2*z + C1*x*z**2 + C2
Estimating model C0*x**2 + C1*x*y*z + C2*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y*z + C2*y**2
Estimating model C0*x*y**2*z**4 + C1*y + C2*z
Estimating model C0*x**3*y + C1*x*y + C2*z
Estimating model C0*x*y + C1*y + C2*z
Estimating model C0*z**3 + C1*z + C2
Estimating model C0*x*y**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*z + C2
Estimating model C0*x*y**2*z**4 + C1*z
Estimating model C0*x**3*y**3*z**3 + C1*z + C2
Estimating model C0*x*y*z**5
Estimating model C0*x*y**4*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z**3 + C1*y**2
Estimating model C0*y**4
Estimating model C0*x**3 + C1*y*z
Estimating model C0*x**2 + C1*x*y
Estimating model C0*y**2*z**4 + C1*y
Estimating model C0*x**2*y**3*z**3
Estimating model C0*x**3*y*z + C1*y + C2*z
Estimating model C0*x**3*y**3*z
Estimating model C0*x*y*z**7 + C1
Estimating model C0*y + C1*z**4
Estimating model C0*x*z + C1*y**3*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**3*z + C2
Estimating model C0*x*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2
Estimating model C0*x**4*y*z**2
Estimating model C0*x*y**2 + C1*y*z
Estimating model C0*x**4*y
Estimating model C0*y**5*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**5*z + C1
Estimating model C0*z**5 + C1
Estimating model C0*x**2*y**2*z + C1*x
Estimating model C0*x*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y + C1*z**3 + C2
Estimating model C0*x*z**3 + C1*x + C2
Estimating model C0*x**3*z**2 + C1*x*z
Estimating model C0*x*y*z + C1*y*z
Estimating model C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x**2
Estimating model C0*x*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2
Estimating model C0*x*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**3 + C2
Estimating model C0*x*z + C1*x + C2*y
Estimating model C0*x**2*y*z**4 + C1*z
ModelBox: 582 models
-> C0*z**3 + C1, p = 0.0005941567281954819, parse trees = 6, valid = True, error = 0.00013976520016444202
-> C0*x, p = 0.049073125736448, parse trees = 3, valid = True, error = 0.025164430092113322
-> C0*z, p = 0.050610214895616006, parse trees = 3, valid = True, error = 0.0005853735415784482
-> C0*x*y**2*z, p = 0.0012386707660800003, parse trees = 11, valid = True, error = 0.15351061967395868
-> C0*y*z + C1, p = 0.008844354370897185, parse trees = 18, valid = True, error = 0.00011759000522507594
-> C0*y + C1, p = 0.03571110332596223, parse trees = 26, valid = True, error = 5.913944229597741e-05
-> C0*x + C1, p = 0.035453365119552056, parse trees = 25, valid = True, error = 0.00031398593042453133
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 0.10226340810217253
-> C0*z + C1, p = 0.03736403312954575, parse trees = 34, valid = True, error = 7.442229484537349e-05
-> C0*y, p = 0.0490254336, parse trees = 2, valid = True, error = 0.0140414500441273
-> C0*x + C1*z + C2, p = 0.003170149020676915, parse trees = 24, valid = True, error = 1.1041651715421602e-05
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 6.982953404792038e-07
-> C0*y + C1*z, p = 0.003255751967181373, parse trees = 7, valid = True, error = 9.677388674985494e-05
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.10093180808412433
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.013863217396700218
-> C0*x*y + C1*y*z + C2, p = 2.415635103555408e-05, parse trees = 7, valid = True, error = 7.758628240308013e-05
-> C0*y*z + C1*y + C2, p = 0.0003735110458301765, parse trees = 19, valid = True, error = 6.991419709409455e-07
-> C0*x*y*z, p = 0.005118474240000001, parse trees = 6, valid = True, error = 0.13934505353550872
-> C0*x + C1*y, p = 0.0030585593364480003, parse trees = 3, valid = True, error = 0.0028402209228776494
-> C0*y**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = False
-> C0*x + C1*y + C2, p = 0.003095864070790441, parse trees = 32, valid = True, error = 6.893800273200247e-06
-> C0*x*y**2 + C1, p = 0.0013468259332915205, parse trees = 10, valid = True, error = 0.00044172852102036185
-> C0*x*z + C1, p = 0.009017039509860544, parse trees = 19, valid = True, error = 0.00020366975333752183
-> C0*y**2, p = 0.006298870675046401, parse trees = 2, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 0.004110592357660955
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.141199920662858
-> C0*x*z + C1*z**2 + C2, p = 1.4166957522891577e-05, parse trees = 3, valid = True, error = 6.885608133550411e-05
-> C0*x*y + C1, p = 0.008711362784526343, parse trees = 20, valid = True, error = 0.00010671937414982815
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = True, error = 7.238178923070044e-05
-> C0*x*z + C1*y, p = 0.0008254420089569282, parse trees = 5, valid = True, error = 0.011296097056177037
-> C0*x*y + C1*z + C2, p = 0.00035924679305129897, parse trees = 19, valid = True, error = 6.683415683534396e-05
-> C0*x**2 + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*y*z, p = 0.012953284499865601, parse trees = 3, valid = True, error = 0.04674171489237819
-> C0*x*z + C1*z + C2, p = 0.00012450359294086355, parse trees = 8, valid = True, error = 5.366831572875424e-05
-> C0*x*z, p = 0.013008973499596801, parse trees = 5, valid = True, error = 0.10418595422359905
-> C0*x**2*z**2 + C1, p = 2.9448343057858572e-05, parse trees = 2, valid = True, error = 0.000514052998501358
-> C0*x*y*z + C1*x + C2, p = 3.967582126521022e-05, parse trees = 9, valid = True, error = 0.00015011688503815737
-> C0*z**2 + C1, p = 0.0043908909760512005, parse trees = 7, valid = True, error = 0.0001075567167002612
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 0.024745360175943403
-> C0*x + C1*z**3 + C2, p = 3.304889002229762e-06, parse trees = 2, valid = True, error = 3.517054281188187e-05
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.14087791486474538
-> C0*x*y**2*z + C1*x*z, p = 9.703251313164293e-07, parse trees = 2, valid = True, error = 0.09800562202086588
-> C0*x**2*z + C1, p = 0.0014119040444226603, parse trees = 13, valid = True, error = 0.0004899242360407345
-> C0*y + C1*z + C2, p = 0.003069950275218309, parse trees = 30, valid = True, error = 2.2014943616916792e-05
-> C0*y**2 + C1*z + C2, p = 0.00018439479525113865, parse trees = 7, valid = False
-> C0*y**2*z + C1*z + C2, p = 1.7343803188963076e-05, parse trees = 7, valid = False
-> C0*y*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 2.814357832318448e-05
-> C0*x*y*z**2 + C1*x, p = 7.350947964518404e-06, parse trees = 2, valid = True, error = 0.022562076811422898
-> C0*x**2*z, p = 0.00255923712, parse trees = 3, valid = True, error = 0.15590741628648946
-> C0*x + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 0.00021168499315829
-> C0*x*y**2*z**2, p = 7.657237463040004e-05, parse trees = 5, valid = True, error = 0.15982390160295049
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 0.16081685420404615
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 2.1527484740007895e-05
-> C0*y**2*z, p = 0.0025592371200000006, parse trees = 3, valid = True, error = 0.10268901935885946
-> C0*y**2 + C1, p = 0.003953518174273536, parse trees = 9, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 0.000310261626086638
-> C0*x*y**2*z**2 + C1, p = 1.8230350952005636e-05, parse trees = 8, valid = True, error = 0.0005155622154349224
-> C0*y*z**2 + C1, p = 0.0015973338569590712, parse trees = 16, valid = True, error = 0.00016452904542052488
-> C0*x + C1*y**2, p = 0.0003974344704000001, parse trees = 2, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.002783086833782091
-> C0*z**2 + C1*z, p = 0.0004488584516075522, parse trees = 4, valid = True, error = 2.27641915083346e-05
-> C0*x*y*z + C1*x, p = 5.576342644142901e-05, parse trees = 4, valid = True, error = 0.01894378098990219
-> C0*y**3 + C1, p = 0.00024640937164800014, parse trees = 2, valid = False
-> C0*x + C1*z, p = 0.0032526105119922584, parse trees = 6, valid = True, error = 1.103304088254668e-05
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 0.11418444242012032
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.06928466061923667
-> C0*x**2*y**2*z**2, p = 8.086042760970244e-06, parse trees = 4, valid = True, error = 0.16309048772014714
-> C0*y + C1*z**2 + C2, p = 0.0002268061079961601, parse trees = 6, valid = True, error = 5.165978231114317e-06
-> C0*x*y*z + C1*z + C2, p = 2.043296226937406e-05, parse trees = 4, valid = True, error = 6.5049756504027e-05
-> C0*x**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = True, error = 0.0004710428788985152
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y*z**2, p = 0.0013922249932800006, parse trees = 12, valid = True, error = 0.15440578016475393
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = True, error = 0.0005416834726376367
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.12022269792825135
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 1.2972261113856007e-05, parse trees = 2, valid = False
-> C0*x*y*z + C1, p = 0.0026835531317103887, parse trees = 24, valid = True, error = 0.0003355350650966498
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 4.797141529731432e-05
-> C0*x + C1*y**3 + C2, p = 6.657974862977438e-06, parse trees = 2, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005843205882743939
-> C0*x**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = True, error = 0.16248988229629668
-> C0*x*y + C1*y**2 + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x*y**2, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.13642434974667567
-> C0*x**2 + C1, p = 0.004401535213633537, parse trees = 11, valid = True, error = 0.0004862879609386354
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 0.09585690918109353
-> C0*x**3*y*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = True, error = 0.16340792072540417
-> C0*x**2 + C1*y, p = 0.0004037298324111361, parse trees = 3, valid = True, error = 0.012557236707924788
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = True, error = 0.00031323274477990885
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = True, error = 7.895438249454528e-06
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 2.3597082323657923e-06
-> C0*x**2*z + C1*z + C2, p = 2.1651883095490566e-05, parse trees = 4, valid = True, error = 6.952640607837129e-05
-> C0*y*z + C1*z + C2, p = 0.000287563866095826, parse trees = 13, valid = True, error = 9.078950694646401e-06
-> C0*x**2 + C1*y + C2, p = 0.0002050487526833668, parse trees = 7, valid = True, error = 4.372466350222387e-05
-> C0*y**2 + C1*y, p = 0.00040372983241113614, parse trees = 3, valid = False
-> C0*x**2 + C1*x + C2, p = 0.00021366077128704005, parse trees = 6, valid = True, error = 0.0002776972623389836
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0005346547705305713
-> C0*x*z**3 + C1*z, p = 7.803210144153604e-06, parse trees = 2, valid = True, error = 0.0005152424963833256
-> C0*x**3*y*z + C1*x, p = 9.417861568659461e-07, parse trees = 2, valid = True, error = 0.025089559555686362
-> C0*x**2*y + C1, p = 0.001049519513626215, parse trees = 9, valid = True, error = 0.00047080616796660313
-> C0*x*z**3, p = 0.00035860340736000015, parse trees = 3, valid = True, error = 0.15477931892478025
-> C0*x*y + C1*z, p = 0.0008198120476335148, parse trees = 5, valid = True, error = 0.00020932196790764406
-> C0*y*z**3, p = 0.0002390689382400001, parse trees = 2, valid = True, error = 0.13565169281943196
-> C0*x*z**2 + C1*x + C2, p = 8.378904527876657e-06, parse trees = 3, valid = True, error = 0.00015148510035864149
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = True, error = 0.0005409683744235692
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.0005410216857576195
-> C0*x*y**2 + C1*z + C2, p = 1.297226111385601e-05, parse trees = 2, valid = True, error = 5.5056657480038725e-05
-> C0*x*y**2*z + C1, p = 0.0002447865672184628, parse trees = 10, valid = True, error = 0.000487260778411429
-> C0*x*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 0.0005838588253469985
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = True, error = 6.820890200348279e-06
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = True, error = 0.013892638824568223
-> C0*y**2*z + C1*y*z + C2, p = 1.3084550002327196e-06, parse trees = 4, valid = True, error = 5.4476261995352745e-05
-> C0*y + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 0.008149145820021691
-> C0*x**3*y**2, p = 5.770748510208003e-05, parse trees = 4, valid = True, error = 0.16308930104620936
-> C0*x*y + C1*x + C2, p = 0.0003112030179730392, parse trees = 14, valid = True, error = 1.2733007547843757e-05
-> C0*y*z + C1*y, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.013816179238463176
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.0001998477974018884
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.04407841172527722
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = True, error = 0.000421140765130268
-> C0*x**2 + C1*z + C2, p = 0.00017548449155972435, parse trees = 8, valid = True, error = 5.615490817284859e-05
-> C0*x*z**2 + C1, p = 0.0014505870649982983, parse trees = 14, valid = True, error = 0.0003329016176941725
-> C0*y**2*z + C1, p = 0.0014367761930649604, parse trees = 11, valid = True, error = 0.00026254819374314255
-> C0*x*y**3 + C1, p = 5.875671210393603e-05, parse trees = 3, valid = False
-> C0*x + C1*y**3*z**2 + C2, p = 2.7945363781913173e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2 + C2*x*z + C3, p = 3.6887880192125384e-09, parse trees = 1, valid = True, error = 0.0001404290933427149
-> C0*x*y**2 + C1*x*y*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.000274875194700351
-> C0*x*y + C1*x*z + C2, p = 2.594452222771201e-05, parse trees = 4, valid = True, error = 4.8832580930748306e-05
-> C0*x + C1*y + C2*z**2 + C3, p = 9.23813678740931e-08, parse trees = 1, valid = True, error = 2.2570250374710258e-07
-> C0*x**2*y**3*z, p = 1.962054493470721e-06, parse trees = 1, valid = True, error = 0.16302031239417478
-> C0*x*y + C1*x*z**2 + C2*x, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.0071201244552476185
-> C0*y*z**2 + C1*y*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.03292386701373731
-> C0*x*y**2 + C1*z, p = 5.405108797440003e-05, parse trees = 2, valid = True, error = 0.0004940622439651886
-> C0*x**3*y*z**3 + C1*z + C2, p = 7.029533299739621e-11, parse trees = 1, valid = True, error = 7.437547600958217e-05
-> C0*x*y**2*z + C1*x + C2, p = 1.7123384670289927e-06, parse trees = 2, valid = True, error = 0.0002664983049158617
-> C0*x + C1*y*z, p = 0.0006150990225557423, parse trees = 4, valid = True, error = 0.0025313799722576887
-> C0*x*y**3*z**2 + C1, p = 2.3287803151594308e-07, parse trees = 2, valid = True, error = 0.0005330645986572773
-> C0*x*y*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 7.746062201389972e-05
-> C0*y**3 + C1*z**2 + C2, p = 8.821137557422085e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z, p = 0.00016706699919360004, parse trees = 6, valid = True, error = 0.026677283600953713
-> C0*x**2*y, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.1545521704989816
-> C0*x*z + C1*y + C2*z + C3, p = 2.2171528289782346e-08, parse trees = 1, valid = True, error = 1.5535932473781773e-05
-> C0*x**2*y*z, p = 0.0010134578995200003, parse trees = 9, valid = True, error = 0.16046531144906584
-> C0*x**2*y*z + C1*y + C2, p = 1.2671304656014544e-06, parse trees = 3, valid = True, error = 5.795140628089061e-05
-> C0*x*z + C1*x + C2, p = 0.00026299404547967245, parse trees = 14, valid = True, error = 6.876499451659693e-05
-> C0*x**2*y*z + C1*y, p = 7.134743612620803e-06, parse trees = 2, valid = True, error = 0.01402698202601506
-> C0*y**4 + C1*y + C2, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1, p = 0.00014479139930112004, parse trees = 9, valid = True, error = 0.00045358205141069206
-> C0*x**2 + C1*x*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.11963461246762919
-> C0*x*y**2 + C1*x + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = True, error = 4.384385950806353e-06
-> C0*x**3*z, p = 0.0003378192998400001, parse trees = 3, valid = True, error = 0.16261011272135453
-> C0*x*y**2*z**2 + C1*y + C2, p = 1.443843795398847e-07, parse trees = 2, valid = True, error = 5.539257110407977e-05
-> C0*y**3, p = 0.0008279884800000003, parse trees = 1, valid = False
-> C0*x + C1*y**2 + C2, p = 5.210983781261849e-05, parse trees = 5, valid = False
-> C0*x*y*z + C1*y**2 + C2*y + C3, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3, p = 1.9605268189560183e-06, parse trees = 3, valid = True, error = 6.3148252805584195e-06
-> C0*x*y**2*z + C1*x + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 4.269482668568051e-06
-> C0*x**2*y*z + C1*y**2 + C2, p = 6.50962591625742e-09, parse trees = 1, valid = False
-> C0*x**3*y*z**3, p = 5.498509077459768e-07, parse trees = 2, valid = True, error = 0.1634652309927917
-> C0*y**2*z**2, p = 0.0006961124966400003, parse trees = 6, valid = True, error = 0.13575332860079597
-> C0*x*y**4*z + C1*x + C2, p = 1.1342372196486931e-10, parse trees = 1, valid = False
-> C0*y**3*z, p = 0.00045042573312000016, parse trees = 4, valid = True, error = 0.13455354388785448
-> C0*x*z + C1*x, p = 0.0006142169088000002, parse trees = 3, valid = True, error = 0.00590716823029697
-> C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1, p = 7.955323066232345e-06, parse trees = 4, valid = True, error = 0.0005363030685698883
-> C0*x*y*z + C1*x + C2*y, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.002770657210219702
-> C0*x**2 + C1*x + C2*z + C3, p = 4.632653888980257e-07, parse trees = 2, valid = True, error = 4.759600243593329e-06
-> C0*x*y + C1*x + C2*y**2 + C3, p = 1.994370685127886e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y**2*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2, p = 4.9315347850435005e-08, parse trees = 1, valid = True, error = 9.981621390453297e-05
-> C0*x*y + C1*x + C2*z + C3, p = 1.7932853763794545e-07, parse trees = 2, valid = True, error = 8.424032655865221e-06
-> C0*x + C1*y**2 + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x, p = 0.0008011643028111362, parse trees = 5, valid = True, error = 0.011732012321748716
-> C0*x**3 + C1*z + C2, p = 8.042801890590725e-06, parse trees = 2, valid = True, error = 7.1451619499001e-05
-> C0*y**2*z**2 + C1*y + C2, p = 1.8658470161459193e-06, parse trees = 4, valid = True, error = 2.8390204401884698e-05
-> C0*x**2*y*z**2, p = 6.125789970432002e-05, parse trees = 4, valid = True, error = 0.16242260299234734
-> C0*x**2*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.024098971564546157
-> C0*x*z + C1*y + C2, p = 0.00027772840571075306, parse trees = 15, valid = True, error = 4.647568491439363e-05
-> C0*x*z**3 + C1, p = 0.00010672037403033604, parse trees = 6, valid = True, error = 0.0004353246496961635
-> C0*x + C1*y*z**2 + C2, p = 8.286523160002564e-06, parse trees = 2, valid = True, error = 4.5663954441879e-05
-> C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6, p = 1.208381853002241e-13, parse trees = 1, valid = False
-> C0*x*y**3*z, p = 2.9728098385920014e-05, parse trees = 2, valid = True, error = 0.1594103446687821
-> C0*x**3 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = True, error = 0.0001022384076850822
-> C0*x*y + C1*y + C2, p = 0.00019443892282459111, parse trees = 12, valid = True, error = 5.6577188959218346e-05
-> C0*x**2*z**2, p = 0.0005800937472000002, parse trees = 5, valid = True, error = 0.16079196317267827
-> C0*x**3*y**2*z**2 + C1, p = 6.404145866688434e-08, parse trees = 1, valid = True, error = 0.0005413938549831867
-> C0*x**2*y**2*z**4 + C1, p = 2.153656035459442e-09, parse trees = 1, valid = True, error = 0.0005411614003330928
-> C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5, p = 1.5481503975522824e-14, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2, p = 2.1519424516553446e-08, parse trees = 1, valid = False
-> C0*x**4*y**2*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.0005416202788729494
-> C0*x*y + C1*x + C2*y + C3*z, p = 2.0548061604347923e-07, parse trees = 1, valid = True, error = 1.0524084046140505e-05
-> C0*x**2*y*z + C1, p = 0.00011614497783939075, parse trees = 6, valid = True, error = 0.0005155035550369149
-> C0*x**2*z + C1*y**3 + C2*z + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x*y**3*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = True, error = 0.16202286200274887
-> C0*x**2*z**2 + C1*z, p = 7.573703963443205e-06, parse trees = 2, valid = True, error = 0.0005747120317039778
-> C0*x*z**2 + C1*x + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 1.1038835545169264e-05
-> C0*x**2*y + C1*y**3 + C2, p = 2.632569304368811e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z**2, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.020018433148076283
-> C0*x*y*z**3 + C1, p = 2.2721111890329614e-05, parse trees = 6, valid = True, error = 0.000503831594135187
-> C0*x**3*y + C1, p = 0.00011272894907940869, parse trees = 6, valid = True, error = 0.0005339745954768649
-> C0*x*y + C1*x*z, p = 5.4051087974400024e-05, parse trees = 2, valid = True, error = 0.06303480644085852
-> C0*x**4*y**3, p = 2.5137380510466065e-07, parse trees = 1, valid = True, error = 0.16349313388150666
-> C0*x*y*z + C1*y + C2*z + C3, p = 3.9802327585817264e-10, parse trees = 1, valid = True, error = 1.5527459057958844e-05
-> C0*x*y**2*z + C1*y + C2, p = 1.917819083072472e-06, parse trees = 3, valid = True, error = 5.1030170955143085e-05
-> C0*x*y*z**2 + C1*y + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 5.140375164412972e-05
-> C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2, p = 7.02953329973962e-11, parse trees = 1, valid = True, error = 5.63028550618148e-05
-> C0*x**2*y + C1*z**2 + C2, p = 2.117073013781301e-07, parse trees = 1, valid = True, error = 0.00010377211100100877
-> C0*x**3*y, p = 0.0002185889587200001, parse trees = 2, valid = True, error = 0.16243321862453217
-> C0*x**3 + C1*y*z + C2, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.0001133737062452068
-> C0*y**2 + C1*y + C2, p = 0.0002557635419581711, parse trees = 9, valid = False
-> C0*x**2*y**2*z**2 + C1*z, p = 6.59821089295172e-08, parse trees = 1, valid = True, error = 0.0005829082552365748
-> C0*x*y*z + C1*z, p = 8.353349959680003e-05, parse trees = 3, valid = True, error = 0.0004117823583728783
-> C0*x**2*y + C1*y**2 + C2*y, p = 1.0969038768203376e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*z, p = 2.090313210887105e-09, parse trees = 1, valid = True, error = 0.0005654929093399095
-> C0*x**2 + C1*z**2 + C2, p = 7.067602333886058e-06, parse trees = 2, valid = True, error = 8.401799072791849e-05
-> C0*x*y**2 + C1*x*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.08802024459310001
-> C0*x*y*z**2 + C1*x + C2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 0.000240031533672056
-> C0*x*y + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 1.088779989943514e-05
-> C0*x**2 + C1*x*y*z**4, p = 8.973566814414343e-09, parse trees = 1, valid = True, error = 0.13993461778926528
-> C0*x**2*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 8.971645899280086e-05
-> C0*x**2*y**2*z + C1, p = 1.4269487225241606e-05, parse trees = 4, valid = True, error = 0.0005359148615481286
-> C0*x*y*z + C1*y*z + C2*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 7.129012023471878e-06
-> C0*x**3*z + C1*z**2 + C2, p = 3.9802327585817284e-10, parse trees = 1, valid = True, error = 0.00010634210804375213
-> C0*x**2*z + C1*y, p = 8.107663196160003e-05, parse trees = 3, valid = True, error = 0.013660484207982238
-> C0*x + C1*y*z**2 + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 6.3971950116598464e-06
-> C0*x + C1*y**4 + C2, p = 8.788526819130217e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z**2 + C3, p = 6.935157558552801e-12, parse trees = 1, valid = True, error = 6.811945643907407e-05
-> C0*x*y**2 + C1*y*z + C2*z**2 + C3, p = 9.121366738416457e-10, parse trees = 1, valid = True, error = 7.76639188127785e-05
-> C0*x*y + C1*y, p = 0.0007948689408000002, parse trees = 4, valid = True, error = 0.013596310494580993
-> C0*x**2 + C1*z**2, p = 2.7844499865600016e-05, parse trees = 1, valid = True, error = 0.016758505610683695
-> C0*x**2*y**2*z, p = 0.00011891239354368005, parse trees = 8, valid = True, error = 0.16228781917646873
-> C0*x**2*y*z**2 + C1*x + C2, p = 3.6887880192125393e-09, parse trees = 1, valid = True, error = 0.00030532514928902874
-> C0*x**2 + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 1.3879225187200154e-05
-> C0*x**3*y**2 + C1*z, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.0005843441866866863
-> C0*x + C1*y*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.016956037138602328
-> C0*x**2*y**2*z + C1*y**3*z, p = 1.1158583758117932e-09, parse trees = 1, valid = True, error = 0.1337281532137158
-> C0*x + C1*y*z + C2, p = 0.000291113263347794, parse trees = 12, valid = True, error = 2.644012029112678e-05
-> C0*x*y**2 + C1*x*y*z + C2*x, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.015386074482980391
-> C0*x**3*y**4 + C1, p = 6.032971322511856e-08, parse trees = 1, valid = True, error = 0.000541562525186978
-> C0*x**3*z + C1, p = 0.00014161385049292805, parse trees = 6, valid = True, error = 0.00053536928084327
-> C0*x*z**2 + C1*z, p = 5.7376545177600026e-05, parse trees = 2, valid = True, error = 0.00048154386729530217
-> C0*x*y*z + C1*y*z**3, p = 6.79815667758662e-08, parse trees = 1, valid = True, error = 0.1160133866397351
-> C0*x**2*y + C1*y + C2, p = 2.5181448044544013e-05, parse trees = 4, valid = True, error = 5.886648456919931e-05
-> C0*x*y*z + C1*y*z + C2, p = 8.821137557422084e-07, parse trees = 1, valid = True, error = 0.00011705459617232334
-> C0*x**2 + C1*x*z + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 3.8371072862309396e-05
-> C0*x*y**2 + C1*y + C2, p = 3.021773765345281e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y*z + C2, p = 2.1388664124525782e-05, parse trees = 5, valid = True, error = 9.274254393111724e-05
-> C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5, p = 2.910621829023736e-17, parse trees = 1, valid = False
-> C0*x**2*y**2 + C1*x + C2, p = 1.9943706851278858e-07, parse trees = 1, valid = True, error = 0.0003026754616409294
-> C0*x**2*y**2*z + C1*x*y*z**2 + C2, p = 2.7592134383709796e-10, parse trees = 1, valid = True, error = 0.0004472715005217448
-> C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4, p = 4.74310783563812e-13, parse trees = 1, valid = True, error = 6.4790976462570276e-06
-> C0*y*z**2 + C1*y, p = 2.872661362134222e-05, parse trees = 2, valid = True, error = 0.013954195793597683
-> C0*x**2*y**3*z**4, p = 4.935461747927887e-09, parse trees = 1, valid = True, error = 0.1634885896856707
-> C0*x*z**3 + C1*y + C2, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 5.293662897730586e-05
-> C0*x**3 + C1, p = 0.00044787367390740503, parse trees = 4, valid = True, error = 0.0005326315721960093
-> C0*x**2*y**3 + C1*y*z, p = 6.215788635315246e-08, parse trees = 1, valid = True, error = 0.046608925285649604
-> C0*x*y + C1*y*z**2 + C2*z + C3, p = 3.9802327585817274e-10, parse trees = 1, valid = True, error = 1.5467127764796968e-05
-> C0*x*y + C1*z**2 + C2*z + C3, p = 2.3238126610709484e-10, parse trees = 1, valid = True, error = 1.8013966231636028e-05
-> C0*x**2*z**3 + C1, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.0005289088224299467
-> C0*x + C1*y + C2*z, p = 0.00014741205811200005, parse trees = 3, valid = True, error = 1.0965068787716516e-05
-> C0*x**2 + C1*x*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.08653618372362555
-> C0*x**2*y + C1*y**2 + C2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**3 + C2, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 8.179506164224305e-05
-> C0*x + C1*y**2 + C2*y + C3, p = 1.3489198088501337e-07, parse trees = 2, valid = False
-> C0*x*y**2*z**2 + C1*x + C2, p = 1.4438437953988472e-07, parse trees = 2, valid = True, error = 0.00029094732810859233
-> C0*y*z**2 + C1*z**2 + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 6.074494847421306e-05
-> C0*x**2*y**2*z**2 + C1*z**2, p = 8.973566814414341e-09, parse trees = 1, valid = True, error = 0.024704217838670318
-> C0*x**2*y + C1*x, p = 2.7061662831869965e-05, parse trees = 2, valid = True, error = 0.02301520486705254
-> C0*x**2*y**2 + C1*x*z + C2*y + C3, p = 3.5802942539415818e-09, parse trees = 1, valid = True, error = 4.470866676443472e-05
-> C0*x*y*z**3 + C1*z, p = 5.150118695141379e-07, parse trees = 1, valid = True, error = 0.000550878454762423
-> C0*y**2*z**2 + C1, p = 3.4527179833344013e-05, parse trees = 2, valid = True, error = 0.000354389008850385
-> C0*y**3*z + C1, p = 2.8582215320862724e-05, parse trees = 2, valid = False
-> C0*x**2*z + C1*x + C2, p = 1.2975101677892194e-05, parse trees = 3, valid = True, error = 0.00027538053804183644
-> C0*x*z + C1*y**2 + C2*y + C3, p = 2.0548061604347912e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*z + C3, p = 4.903910944649774e-06, parse trees = 4, valid = True, error = 4.0727572027045524e-06
-> C0*x*y**4*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x**4*y*z**2 + C1*y, p = 8.453472544028734e-09, parse trees = 1, valid = True, error = 0.014041468942674077
-> C0*x*z**4 + C1*z**2 + C2, p = 1.731938097915181e-08, parse trees = 1, valid = True, error = 0.00010493514076407623
-> C0*y*z + C1*z**3 + C2, p = 9.363852172984324e-07, parse trees = 1, valid = True, error = 9.408802707924938e-05
-> C0*x**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 0.16341599923664923
-> C0*y**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = True, error = 0.15190956104901687
-> C0*y*z + C1*y + C2*z + C3, p = 1.788605928006747e-06, parse trees = 3, valid = True, error = 6.887271781881104e-07
-> C0*z**4, p = 0.00012315672576000003, parse trees = 1, valid = True, error = 0.13432800561705704
-> C0*x*y**4*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = True, error = 0.16291264662037433
-> C0*x*y + C1*y**2*z**3 + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 9.695302640473463e-05
-> C0*x*y**2 + C1*y, p = 7.869202513920005e-05, parse trees = 3, valid = False
-> C0*x**2*y*z**2 + C1*y**2*z + C2*y*z, p = 3.752530276184532e-11, parse trees = 1, valid = True, error = 0.03644965619244012
-> C0*x*y**2 + C1*x*y*z + C2*x*y, p = 1.96916183966787e-09, parse trees = 1, valid = True, error = 0.07693476835789827
-> C0*x + C1*z**2 + C2, p = 0.0002146557807820801, parse trees = 5, valid = True, error = 2.2435972882656006e-05
-> C0*x*y*z**2 + C1*y + C2*z + C3, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 1.7880820379966384e-05
-> C0*x**2*y*z + C1*z + C2, p = 1.7671541532186681e-06, parse trees = 3, valid = True, error = 7.350570161121762e-05
-> C0*x*y*z + C1*y, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.013893018510512875
-> C0*x*z**2 + C1*x*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.08633686054589108
-> C0*x**2 + C1*x*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = True, error = 0.00047506552383542967
-> C0*x**2*y*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005769960753843462
-> C0*x + C1*y*z + C2*y + C3, p = 3.4987794708885983e-06, parse trees = 4, valid = True, error = 4.862858286381675e-08
-> C0*x**2*z**2 + C1*x*z + C2*y + C3, p = 2.18912801721995e-10, parse trees = 1, valid = True, error = 4.641309008383798e-05
-> C0*y*z**3 + C1, p = 9.295000318771204e-05, parse trees = 4, valid = True, error = 0.00027983313379532676
-> C0*x**2*y + C1*x*z + C2, p = 8.853091246110093e-10, parse trees = 1, valid = True, error = 0.0001652748955656844
-> C0*y**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*y*z**2 + C1*z + C2, p = 9.917751569758034e-06, parse trees = 7, valid = True, error = 1.859127017292538e-05
-> C0*x**2*y**3*z + C1*x + C2, p = 3.5802942539415818e-09, parse trees = 1, valid = True, error = 0.00031193205934665444
-> C0*y**3*z + C1*y*z + C2*y + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x**2 + C2, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.00048109438484608095
-> C0*x*y*z + C1*y + C2, p = 1.9458391670784007e-05, parse trees = 3, valid = True, error = 4.755960830309498e-05
-> C0*x**3*y**2*z**2 + C1*x*y + C2, p = 1.119900461192334e-12, parse trees = 1, valid = True, error = 0.0001066997477552613
-> C0*x*z**2 + C1*x, p = 5.5688999731200025e-05, parse trees = 2, valid = True, error = 0.01675259238834427
-> C0*x**2 + C1*x, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 0.01693297534736009
-> C0*y**2*z + C1*y, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2*z + C3, p = 5.234944179531945e-08, parse trees = 1, valid = True, error = 4.7104771261458226e-08
-> C0*x**2*y**2, p = 0.0005464723968000002, parse trees = 5, valid = True, error = 0.1598848885974872
-> C0*y*z**2 + C1*z, p = 5.737654517760002e-05, parse trees = 2, valid = True, error = 7.490229445489541e-05
-> C0*x*y*z + C1*z**2 + C2, p = 5.234944179531943e-08, parse trees = 1, valid = True, error = 0.00010562619942563641
-> C0*x*y*z**3, p = 4.733564977152003e-05, parse trees = 3, valid = True, error = 0.16001001664035602
-> C0*x**6*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.0005416761183925135
-> C0*x**2*z + C1*y**2*z, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 0.09803419393986267
-> C0*x + C1*y**2*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*z + C2, p = 1.126967149760349e-06, parse trees = 2, valid = True, error = 6.697585869801179e-05
-> C0*x**3*y**3*z**2 + C1, p = 1.690694508805747e-08, parse trees = 2, valid = True, error = 0.0005416212244827164
-> C0*x**2*z**2 + C1*y + C2, p = 2.6251705370888124e-07, parse trees = 2, valid = True, error = 5.9121971805915727e-05
-> C0*y**2 + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = False
-> C0*x**3*y + C1*x*y**2*z, p = 8.204840998616124e-09, parse trees = 1, valid = True, error = 0.1525225960017961
-> C0*x**2*y + C1*x**2*z**2 + C2, p = 1.536995008005225e-08, parse trees = 1, valid = True, error = 0.0004458371003865235
-> C0*x**2*z**2 + C1*x*y, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 0.10047789724303166
-> C0*x**2*y + C1*y, p = 2.7061662831869968e-05, parse trees = 2, valid = True, error = 0.013970740446759578
-> C0*x*y*z**2 + C1*z, p = 7.573703963443204e-06, parse trees = 2, valid = True, error = 0.0005086347723674128
-> C0*x + C1*y*z**2 + C2*y, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.002583043738668237
-> C0*y**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*x**2 + C2*y*z + C3, p = 5.016751706129053e-10, parse trees = 1, valid = True, error = 9.089410907294191e-05
-> C0*x**2 + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.0018575382171245789
-> C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y, p = 6.427344244675929e-11, parse trees = 1, valid = True, error = 0.002585060078475566
-> C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4, p = 6.847497167012697e-14, parse trees = 1, valid = True, error = 3.250434926904614e-06
-> C0*x*y*z + C1*x*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.08742817243307968
-> C0*x*y**3*z**4 + C1*z, p = 1.2204050867603506e-09, parse trees = 1, valid = True, error = 0.0005837112401303204
-> C0*x*y + C1*z**2, p = 5.568899973120003e-05, parse trees = 2, valid = True, error = 0.01440549493302561
-> C0*z**2 + C1*z + C2, p = 5.2160495616000025e-05, parse trees = 1, valid = True, error = 2.1449772573505056e-05
-> C0*x*y*z**4, p = 2.1458827896422413e-06, parse trees = 1, valid = True, error = 0.16211936522709772
-> C0*x*z + C1*x + C2*y + C3*z, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 4.1263996055424595e-06
-> C0*x**2*y**2 + C1, p = 7.869202513920003e-05, parse trees = 3, valid = True, error = 0.0005385034420126417
-> C0*x + C1*y*z + C2*z + C3, p = 1.6067698339928121e-06, parse trees = 2, valid = True, error = 2.5547677911249107e-08
-> C0*x*y**3, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 0.15187299694699732
-> C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4, p = 2.8896489827303353e-11, parse trees = 1, valid = False
-> C0*x*z**2 + C1*z + C2, p = 6.885185421312004e-06, parse trees = 1, valid = True, error = 7.327241120245281e-05
-> C0*x*y**2*z**3 + C1, p = 1.1996747078094036e-07, parse trees = 1, valid = True, error = 0.0005296376020083352
-> C0*x**2 + C1*x*z + C2, p = 6.4861305569280024e-06, parse trees = 1, valid = True, error = 0.00016787013984936544
-> C0*x**2*y*z**2 + C1, p = 4.55758773800141e-06, parse trees = 2, valid = True, error = 0.0005312742932269588
-> C0*x**2 + C1*z**2 + C2*z, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 1.3249111596819557e-05
-> C0*x**2 + C1*x*y*z + C2, p = 1.1109651974084108e-06, parse trees = 3, valid = True, error = 0.00028894213980000473
-> C0*x**2*y**2*z**2 + C1, p = 5.131079294401279e-07, parse trees = 2, valid = True, error = 0.0005386397498264703
-> C0*x**2*y**2*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = True, error = 0.1633565320687398
-> C0*x + C1*y + C2*z + C3, p = 5.323957552177265e-05, parse trees = 8, valid = True, error = 6.920354126374712e-07
-> C0*x**2*y*z**3, p = 2.0827685899468813e-06, parse trees = 1, valid = True, error = 0.16312380696602116
-> C0*x*y**3*z + C1, p = 1.0907596034974684e-05, parse trees = 4, valid = True, error = 0.0005209375649485218
-> C0*x**2*y**3, p = 2.8853742551040014e-05, parse trees = 2, valid = True, error = 0.16204738258823512
-> C0*x**2*y + C1*x*y**2*z, p = 6.215788635315246e-08, parse trees = 1, valid = True, error = 0.14529746155621967
-> C0*x*y**3*z**2 + C1*x*y*z, p = 1.1496722659879079e-09, parse trees = 1, valid = True, error = 0.1381980439379111
-> C0*y**2 + C1*y*z + C2, p = 6.859731677007056e-06, parse trees = 2, valid = False
-> C0*x + C1*y*z**2, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.009237096379672054
-> C0*x*y + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*x*z**2 + C1*y, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.013281274867773942
-> C0*x*y**2 + C1*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = True, error = 0.00036501461480038024
-> C0*x**2*z**2 + C1*y**2 + C2*z, p = 1.5835706143084127e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2, p = 8.168861745650079e-06, parse trees = 3, valid = True, error = 0.0002581778123105778
-> C0*x**2*z + C1*x*y**4*z**2, p = 1.5175673911040386e-10, parse trees = 1, valid = True, error = 0.15535072790919943
-> C0*x*z + C1*y*z + C2, p = 1.8176889512263685e-05, parse trees = 5, valid = True, error = 7.34862235441783e-05
-> C0*x*y + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.08745872610986315
-> C0*x*y + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 1.9236511404228586e-05
-> C0*x + C1*y**3, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z + C1*z**2 + C2, p = 2.1812267414716428e-07, parse trees = 1, valid = True, error = 0.00010020316030397826
-> C0*x**4*y*z, p = 1.962054493470721e-06, parse trees = 1, valid = True, error = 0.16347215758802278
-> C0*x**2*y*z + C1*x, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.02435494008570948
-> C0*x*z + C1*x + C2*y + C3, p = 1.1835683484104399e-08, parse trees = 1, valid = True, error = 2.9129756294310236e-06
-> C0*x*y*z + C1*x*y + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 5.766285908951069e-05
-> C0*y**3 + C1*y + C2*z + C3, p = 1.5623102199017813e-09, parse trees = 1, valid = False
-> C0*x**2*y**4, p = 1.904347008368641e-06, parse trees = 1, valid = True, error = 0.16292218013809287
-> C0*x*y**2 + C1*y*z + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*z, p = 7.350947964518402e-06, parse trees = 2, valid = True, error = 0.09814074671708797
-> C0*x*y**2*z + C1*z + C2, p = 8.850403974764597e-07, parse trees = 2, valid = True, error = 6.602914653196317e-05
-> C0*x*y + C1*y**3*z**2, p = 6.404145866688434e-08, parse trees = 1, valid = True, error = 0.09637796940769401
-> C0*x*y + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = True, error = 0.033014413539149225
-> C0*x**3*y*z, p = 2.9728098385920014e-05, parse trees = 2, valid = True, error = 0.1631542315853586
-> C0*x**2*y + C1*x*y**2*z + C2, p = 3.580294253941581e-09, parse trees = 1, valid = True, error = 0.0004215798309583773
-> C0*x**2 + C1*x*y + C2, p = 1.5108868826726408e-06, parse trees = 1, valid = True, error = 7.914852639952051e-05
-> C0*x**2*y**2*z + C1*y, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.014041170876278595
-> C0*x**4*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.1634774212650341
-> C0*x*y**2*z**3 + C1*x + C2*z, p = 2.1536560354594418e-09, parse trees = 1, valid = True, error = 1.0430781567068238e-05
-> C0*x*y**2 + C1*z**2 + C2, p = 8.821137557422087e-07, parse trees = 1, valid = True, error = 8.878027485679133e-05
-> C0*x**4*z**3 + C1, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 0.0005416433399567163
-> C0*x**4 + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.0003131489145793438
-> C0*x + C1*y**2*z + C2*y, p = 8.561692335144962e-07, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2*z, p = 8.821137557422084e-07, parse trees = 1, valid = False
-> C0*y*z**2 + C1*y*z + C2, p = 9.088444756131843e-07, parse trees = 1, valid = True, error = 7.787121713398324e-05
-> C0*y**2*z**2 + C1*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.000382843451372988
-> C0*x*y*z + C1*x*y, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.08809509239913399
-> C0*x**2*z**4 + C1, p = 5.15011869514138e-07, parse trees = 1, valid = True, error = 0.0005360375192603055
-> C0*x**2*z**2 + C1*x**2 + C2, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.0004603128453672675
-> C0*x*y + C1*x + C2*y + C3*z + C4, p = 4.931534785043499e-08, parse trees = 1, valid = True, error = 9.142702694298717e-08
-> C0*x*y + C1*y**2 + C2*y + C3, p = 1.9943706851278858e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**5*z + C2, p = 1.497193129936275e-11, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x*y, p = 6.404145866688434e-08, parse trees = 1, valid = True, error = 0.10162351662392986
-> C0*x*y**2 + C1*x*z + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 3.735596239933169e-05
-> C0*x**2 + C1*x*y + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.012423140669396218
-> C0*x**2*y*z + C1*x + C2, p = 8.561692335144962e-07, parse trees = 1, valid = True, error = 0.00029326629070420635
-> C0*x*z**2 + C1*y + C2, p = 1.3365359935488005e-05, parse trees = 2, valid = True, error = 5.439458450174252e-05
-> C0*x + C1*y + C2*z**2, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 5.439215410624114e-05
-> C0*x*y*z + C1*x*z**2, p = 4.998644615872514e-07, parse trees = 1, valid = True, error = 0.11961649948573382
-> C0*x + C1*y*z**2 + C2*y + C3*z + C4, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 2.537818093515268e-07
-> C0*x*y*z + C1*x + C2*y*z, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.002303481393068555
-> C0*x**4 + C1*x, p = 3.4624491061248015e-06, parse trees = 1, valid = True, error = 0.02503917038713847
-> C0*x**2*z + C1*y + C2, p = 8.042801890590723e-06, parse trees = 2, valid = True, error = 5.5618571429829095e-05
-> C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4, p = 6.646100191512326e-14, parse trees = 1, valid = False
-> C0*x**2*y**2*z**4 + C1*x*z + C2, p = 3.8662433148567914e-11, parse trees = 1, valid = True, error = 0.00020337283120814575
-> C0*x + C1*y**4*z, p = 9.417861568659461e-07, parse trees = 2, valid = True, error = 0.023224827115718254
-> C0*x*y*z + C1*y*z + C2*z**2 + C3, p = 5.41311655167115e-11, parse trees = 1, valid = True, error = 9.314603122069731e-05
-> C0*y**3*z**2, p = 1.5314474926080006e-05, parse trees = 1, valid = True, error = 0.1515885389872954
-> C0*y**2 + C1*y*z + C2*y + C3, p = 2.083211800796642e-07, parse trees = 2, valid = False
-> C0*x*y**3 + C1*x + C2, p = 4.786489644306927e-08, parse trees = 1, valid = False
-> C0*x**2*y*z**3 + C1*x*z, p = 8.973566814414343e-09, parse trees = 1, valid = True, error = 0.10389139356936374
-> C0*x*y + C1*y**2 + C2*z, p = 8.561692335144968e-07, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*z + C2, p = 1.1643901575797151e-07, parse trees = 1, valid = True, error = 7.35473534650817e-05
-> C0*x**2*y*z + C1*x**2*z + C2*y + C3*z, p = 6.622112252090349e-11, parse trees = 1, valid = True, error = 8.993668068023386e-05
-> C0*x**4*y*z**3 + C1, p = 8.709638378696271e-09, parse trees = 1, valid = True, error = 0.0005416734204548374
-> C0*x**4*y + C1*y + C2*z + C3, p = 2.732030113327557e-14, parse trees = 1, valid = True, error = 2.196725681209919e-05
-> C0*x**2*y*z + C1*x*z + C2, p = 6.706887307659161e-09, parse trees = 1, valid = True, error = 0.000189623865054111
-> C0*x**2*y + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 7.350040813866479e-05
-> C0*x**2*y + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.002824363523735286
-> C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3, p = 1.5425626187222228e-11, parse trees = 1, valid = True, error = 1.264861267171848e-05
-> C0*y**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = True, error = 0.00010026674175531203
-> C0*x*y + C1*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.05906642930150607
-> C0*x**2*y**3 + C1*x, p = 4.5704328200847384e-07, parse trees = 1, valid = True, error = 0.024971267874789878
-> C0*x + C1*y*z**2 + C2*y + C3, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 1.6403047287101492e-07
-> C0*x*y + C1*y**2 + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4, p = 5.2729389949188664e-14, parse trees = 1, valid = True, error = 7.192828053501619e-07
-> C0*x**3*y*z**2 + C1*x + C2*y + C3, p = 4.869200185360551e-10, parse trees = 1, valid = True, error = 6.87021262413851e-06
-> C0*x**3*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = True, error = 0.014029682459128931
-> C0*x*y**2 + C1*y**3*z + C2*z + C3, p = 2.8046593067676784e-11, parse trees = 1, valid = False
-> C0*x**3*y**2 + C1, p = 3.4624491061248015e-06, parse trees = 1, valid = True, error = 0.0005419903396641452
-> C0*x**2 + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*x*y + C2, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 9.093956120233618e-05
-> C0*x*y**2 + C1*x + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = True, error = 0.00022653514456653017
-> C0*x**2*z + C1*y + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 2.02169918419683e-05
-> C0*x*y**3 + C1*x + C2*z, p = 1.1301433882391353e-07, parse trees = 1, valid = True, error = 9.972779971459275e-06
-> C0*x*y**2*z + C1*y*z + C2*y + C3, p = 8.85309124611009e-10, parse trees = 1, valid = True, error = 7.000564121888671e-07
-> C0*x + C1*y*z**2 + C2*z + C3, p = 1.6584303160757197e-09, parse trees = 1, valid = True, error = 5.747808975513019e-08
-> C0*x**3*y**3 + C1*x*y + C2*x + C3, p = 1.4531580378793259e-11, parse trees = 1, valid = True, error = 1.270620238483063e-05
-> C0*x**3*z + C1*x + C2*z + C3, p = 3.8631670892116767e-10, parse trees = 1, valid = True, error = 1.076409017596985e-05
-> C0*y**3*z + C1*z, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*x*z**3 + C1*z + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 6.9271093255535e-05
-> C0*x*y*z**2 + C1*y + C2*z, p = 1.1996747078094033e-07, parse trees = 1, valid = True, error = 8.64978265926723e-05
-> C0*x**2*z + C1*x + C2*y + C3*z + C4, p = 6.706887307659159e-09, parse trees = 1, valid = True, error = 7.085623429259175e-07
-> C0*x*z**4 + C1*x, p = 5.150118695141379e-07, parse trees = 1, valid = True, error = 0.023796520534051322
-> C0*x**3*y*z + C1*x*y*z + C2, p = 1.168608044486532e-10, parse trees = 1, valid = True, error = 0.0003335121946032598
-> C0*y**4*z**3 + C1*y + C2*z, p = 2.842825966806464e-10, parse trees = 1, valid = False
-> C0*y**4*z**2 + C1*z + C2, p = 3.800569474340191e-09, parse trees = 1, valid = False
-> C0*x**2*y**5*z**2 + C1, p = 2.678060101948303e-10, parse trees = 1, valid = True, error = 0.0005416051616782096
-> C0*x*y + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.002768724677715584
-> C0*x**2*y*z + C1*x**2 + C2, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.00046194939769725595
-> C0*x**2*y*z + C1*x + C2*z + C3, p = 6.706887307659157e-09, parse trees = 1, valid = True, error = 1.0669347445289887e-05
-> C0*x + C1*y**2*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.01867707186254317
-> C0*y**2 + C1*z**2 + C2*z + C3, p = 2.181226741471643e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**3*z**2 + C2, p = 4.869200185360552e-10, parse trees = 1, valid = True, error = 0.00047707599154139324
-> C0*x**2*z**2 + C1*z + C2, p = 9.68255275446228e-10, parse trees = 1, valid = True, error = 7.428062738539944e-05
-> C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z, p = 2.0104453079324783e-14, parse trees = 1, valid = False
-> C0*y**3*z + C1*y, p = 3.567371806310401e-06, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2*y + C3, p = 2.92664173425127e-09, parse trees = 1, valid = True, error = 6.987077997847548e-07
-> C0*x**2*y*z**2 + C1*x*y + C2*x + C3, p = 4.869200185360553e-10, parse trees = 1, valid = True, error = 1.2113808875684278e-05
-> C0*x**3*y*z**2 + C1, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 0.0005411367521238118
-> C0*x*y**2*z + C1*x*y + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 9.949250577159491e-05
-> C0*y**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.00020542133936530594
-> C0*x*z**3 + C1*x + C2*y*z, p = 1.631557602620789e-08, parse trees = 1, valid = True, error = 0.002205803169083584
-> C0*x*y*z + C1*x*z + C2*y + C3*z + C4, p = 9.71762683356005e-13, parse trees = 1, valid = True, error = 1.0296939751271535e-05
-> C0*x*y*z**3 + C1*x + C2*z + C3, p = 7.361838510272763e-12, parse trees = 1, valid = True, error = 9.409451845662119e-06
-> C0*x*y**3*z**2 + C1*y, p = 1.280829173337687e-07, parse trees = 2, valid = True, error = 0.01404085073249754
-> C0*x**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.0005384490304811174
-> C0*x*z**3 + C1*z**2 + C2, p = 3.0563613492620843e-08, parse trees = 1, valid = True, error = 0.00010754323519175051
-> C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z, p = 1.3676662771262981e-17, parse trees = 1, valid = True, error = 0.0004409089649543786
-> C0*x**2 + C1*x*y**2, p = 3.462449106124803e-06, parse trees = 1, valid = True, error = 0.11814248985895533
-> C0*x**2*y + C1*x*y + C2*z, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.0001847384262307129
-> C0*x**2*y*z + C1*x*y + C2*z**2 + C3, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 7.521905708743793e-05
-> C0*y*z**4, p = 1.6256687800320006e-05, parse trees = 1, valid = True, error = 0.15171228933459918
-> C0*x**3*y*z + C1*x + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = True, error = 0.0003121710190727328
-> C0*x**2*y + C1*x + C2*y + C3*z**2 + C4, p = 8.853091246110095e-10, parse trees = 1, valid = True, error = 1.5277758105277662e-07
-> C0*x*y*z + C1*x + C2*y + C3, p = 4.1096123208695825e-07, parse trees = 2, valid = True, error = 3.3373128996412557e-06
-> C0*y**2 + C1*z**2 + C2, p = 3.8492236614205467e-07, parse trees = 1, valid = False
-> C0*x*y**3 + C1*y, p = 3.4624491061248015e-06, parse trees = 1, valid = False
-> C0*x**3*y**2*z + C1*y*z + C2*y + C3, p = 1.542562618722223e-11, parse trees = 1, valid = True, error = 6.98750426726668e-07
-> C0*y**2*z**2 + C1*y, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.014043072410618003
-> C0*x*z + C1*x + C2*y + C3*z + C4, p = 2.9266417342512697e-09, parse trees = 1, valid = True, error = 7.637117790961531e-07
-> C0*x**2*y*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = True, error = 0.014038809034247077
-> C0*x**2 + C1*x + C2*z**2, p = 8.821137557422087e-07, parse trees = 1, valid = True, error = 9.321118578987348e-05
-> C0*y**2*z**3 + C1*y**2, p = 6.59821089295172e-08, parse trees = 1, valid = False
-> C0*x**2*y**3*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = True, error = 0.1633472345649079
-> C0*x**3*z + C1*x*y + C2*y*z + C3, p = 4.869200185360551e-10, parse trees = 1, valid = True, error = 7.67523723855893e-05
-> C0*x*y**2*z**2 + C1*y*z**2 + C2, p = 5.168774485102659e-10, parse trees = 1, valid = True, error = 0.00016220054314142792
-> C0*x**2*y**2*z**2 + C1*x*y*z + C2, p = 2.75921343837098e-10, parse trees = 1, valid = True, error = 0.00033396349955030347
-> C0*x*y*z + C1*x*y + C2*y, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.013596274931055632
-> C0*x**2*z + C1*x*y**3*z**2, p = 1.1496722659879079e-09, parse trees = 1, valid = True, error = 0.15450621738884232
-> C0*x*y**2*z + C1*y**2 + C2*y + C3, p = 3.580294253941582e-09, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1*y**2*z**2 + C2, p = 2.678060101948304e-10, parse trees = 1, valid = True, error = 0.0003509594032863208
-> C0*x + C1*y*z + C2*z**2 + C3*z + C4, p = 7.1195240841634434e-09, parse trees = 1, valid = True, error = 1.986833989716507e-09
-> C0*y*z + C1*y + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 4.8900665872361875e-06
-> C0*y*z**2 + C1*y + C2, p = 3.2076863845171216e-06, parse trees = 2, valid = True, error = 7.681929391667577e-06
-> C0*y*z + C1*z**2 + C2, p = 2.2843392783412118e-08, parse trees = 1, valid = True, error = 9.429455591745488e-05
-> C0*x**2*y*z + C1*y**2, p = 4.708930784329731e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2*x + C3, p = 2.75701803512079e-09, parse trees = 1, valid = True, error = 4.633071467636921e-06
-> C0*y**2*z + C1*z**2 + C2*z, p = 1.236028486833931e-07, parse trees = 1, valid = True, error = 2.358855822048414e-06
-> C0*x*z**3 + C1*y*z + C2, p = 1.236028486833931e-07, parse trees = 1, valid = True, error = 0.00011727191323580167
-> C0*y**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.0005841667122105407
-> C0*x*y**2*z**3, p = 4.1655371798937625e-06, parse trees = 2, valid = True, error = 0.16210395940767938
-> C0*x**2 + C1*y + C2*z**2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 0.006497138229768472
-> C0*x*y + C1*x + C2*y*z + C3, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 9.675241557906722e-06
-> C0*x*z**2 + C1*y + C2*z + C3, p = 4.362453482943286e-07, parse trees = 2, valid = True, error = 1.9307252507490316e-05
-> C0*y**3*z + C1*y + C2, p = 1.7123384670289929e-06, parse trees = 2, valid = False
-> C0*y**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 0.15060605283088846
-> C0*x*z**3 + C1*x + C2*z + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 9.1207135016108e-06
-> C0*x*z + C1*y**2*z, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.06583006731739774
-> C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4, p = 9.121366738416462e-10, parse trees = 1, valid = False
-> C0*x**2*z + C1*x, p = 5.405108797440001e-05, parse trees = 2, valid = True, error = 0.022228860371482716
-> C0*x**3*y + C1*x + C2*y + C3, p = 1.5163599193164343e-09, parse trees = 1, valid = True, error = 6.8892842244839936e-06
-> C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 5.68230898109508e-06
-> C0*x*y + C1*y*z**2 + C2, p = 1.764227511484417e-06, parse trees = 2, valid = True, error = 8.63439782527583e-05
-> C0*x*y**2*z**2 + C1*x*y + C2*x + C3, p = 6.731182336242426e-12, parse trees = 1, valid = True, error = 1.1769048482224602e-05
-> C0*x*z + C1*y**3, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y**2*z**2, p = 3.5222802266786394e-08, parse trees = 1, valid = True, error = 0.16350561668445304
-> C0*x**2*y + C1*y*z**3 + C2, p = 3.800569474340192e-09, parse trees = 1, valid = True, error = 0.0002399517828179314
-> C0*y**3*z + C1*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*y*z + C3*z + C4, p = 2.2554652298629788e-10, parse trees = 1, valid = True, error = 9.12033333315245e-09
-> C0*x**2 + C1*y*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.038486858280234654
-> C0*x*y + C1*x*z + C2*y, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 0.011274754716005567
-> C0*x**2*y + C1*x + C2*z + C3, p = 1.1835683484104402e-08, parse trees = 1, valid = True, error = 1.0712725273223415e-05
-> C0*x**2*y + C1*x + C2*y + C3*z + C4, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 5.152159701429238e-07
-> C0*x*y**2 + C1*x, p = 5.246135009280003e-05, parse trees = 2, valid = True, error = 0.020365204729592412
-> C0*x**3*y**3*z**4 + C1*z + C2, p = 5.103441175610964e-12, parse trees = 1, valid = True, error = 7.441263422874125e-05
-> C0*y*z + C1*z**2, p = 2.8688272588800013e-05, parse trees = 1, valid = True, error = 0.00794738014070593
-> C0*x**2*y**3*z + C1*x + C2*y + C3*z, p = 6.427344244675929e-11, parse trees = 1, valid = True, error = 1.085394964796959e-05
-> C0*x**3*y + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.00030775072766427825
-> C0*x*y*z**3 + C1*y**2*z + C2, p = 2.1536560354594418e-09, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3, p = 6.62211225209035e-11, parse trees = 1, valid = True, error = 0.00026638057781045555
-> C0*x**2*z + C1*x*z**2 + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 0.000293554629162309
-> C0*x**2 + C1*x*y*z + C2*y**2, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*y + C2*z, p = 2.9289722082248415e-10, parse trees = 1, valid = True, error = 9.561807993123882e-05
-> C0*x**3*y + C1*x*y + C2*z, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.00020727066386743359
-> C0*x*y + C1*y + C2*z, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 9.499664193047744e-05
-> C0*z**3 + C1*z + C2, p = 1.4187654807552007e-05, parse trees = 2, valid = True, error = 2.413415261707339e-05
-> C0*x*y**3 + C1*z + C2, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = True, error = 0.0005800963890292546
-> C0*x**3*y**3*z**3 + C1*z + C2, p = 2.302751047292124e-15, parse trees = 1, valid = True, error = 7.441603342105344e-05
-> C0*x*y*z**5, p = 2.918400593913448e-07, parse trees = 1, valid = True, error = 0.16294057063587644
-> C0*x*y**4*z**3 + C1*y**2, p = 1.5175673911040386e-10, parse trees = 1, valid = False
-> C0*y**4, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 0.13193116738062838
-> C0*x**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.045735759524279475
-> C0*x**2 + C1*x*y, p = 2.6230675046400012e-05, parse trees = 1, valid = True, error = 0.0871565073030073
-> C0*y**2*z**4 + C1*y, p = 6.798156677586621e-08, parse trees = 1, valid = True, error = 0.01403513625071167
-> C0*x**2*y**3*z**3, p = 3.629015991123446e-08, parse trees = 1, valid = True, error = 0.1634519420797684
-> C0*x**3*y*z + C1*y + C2*z, p = 1.5369950080052242e-08, parse trees = 1, valid = True, error = 9.658496746589662e-05
-> C0*x**3*y**3*z, p = 2.589911931381352e-07, parse trees = 1, valid = True, error = 0.16345481047297875
-> C0*x*y*z**7 + C1, p = 3.109175273377334e-10, parse trees = 1, valid = True, error = 0.0005401653097842059
-> C0*y + C1*z**4, p = 3.901605072076801e-06, parse trees = 1, valid = True, error = 0.013742687210371557
-> C0*x*z + C1*y**3*z + C2, p = 2.794536378191317e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*y**2, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = True, error = 0.1634974337632794
-> C0*x*y**2 + C1*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.04279958308364393
-> C0*x**4*y, p = 1.4426871275520007e-05, parse trees = 1, valid = True, error = 0.16338444818333617
-> C0*y**5*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*z**5 + C1, p = 4.019835528806403e-06, parse trees = 1, valid = True, error = 0.00036679487569016674
-> C0*x**2*y**2*z + C1*x, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.02491934442979081
-> C0*x*z + C1*y*z + C2*z**2 + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 5.426680172717091e-05
-> C0*y + C1*z**3 + C2, p = 6.885185421312002e-06, parse trees = 1, valid = True, error = 1.0671323696878131e-05
-> C0*x*z**3 + C1*x + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 0.00022773691033333451
-> C0*x**3*z**2 + C1*x*z, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 0.10393223411123617
-> C0*x*y*z + C1*y*z, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.04138799612875498
-> C0*x**2*z + C1*x + C2*y**2 + C3*z + C4, p = 2.889648982730334e-11, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.13413713587687892
-> C0*x*y*z + C1*y**2 + C2, p = 8.561692335144965e-07, parse trees = 1, valid = False
-> C0*x*y + C1*y**3 + C2, p = 8.309877854699526e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.0008004348586258407
-> C0*x**2*y*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = True, error = 0.0005837811644390146

Final score:
model: -8.04011920239416*z**3 - 1.53409482649593                             ; error: 0.00013976520016444202
model: -5.71779541460053*z                                                   ; error: 0.0005853735415784482
model: -3.98774979251844*y*z - 1.66807177714686                              ; error: 0.00011759000522507594
model: -1.55480896841245*y - 1.70011266367496                                ; error: 5.913944229597741e-05
model: -10.0*x - 0.737763713939312                                           ; error: 0.00031398593042453133
model: -2.81727514715779*z - 0.964492879512801                               ; error: 7.442229484537349e-05
model: -9.99829499106777*x - 2.24464440922621*z - 0.00095445629620739        ; error: 1.1041651715421602e-05
model: 1.0215254523383*x**2*z + 9.99994986074719*y*z - 5.18524286971001*y - 1.81836128271502; error: 6.982953404792038e-07
model: 2.00928142937713*y - 6.48988213111144*z                               ; error: 9.677388674985494e-05
model: -9.99242838448625*x*y - 1.06490238260926*y*z - 1.68472661644784       ; error: 7.758628240308013e-05
model: 9.9990208463701*y*z - 5.17845385240803*y - 1.81466398948303           ; error: 6.991419709409455e-07
model: -9.99891113429081*x - 1.23002432001853*y - 0.586358846185648          ; error: 6.893800273200247e-06
model: -9.98856814718674*x*y**2 - 1.8355027413586                            ; error: 0.00044172852102036185
model: -10.0*x*z - 1.50899573570869                                          ; error: 0.00020366975333752183
model: -9.99696942780501*x*z - 2.38742129551871*z**2 - 1.23070548227094      ; error: 6.885608133550411e-05
model: -10.0*x*y - 1.73916388608043                                          ; error: 0.00010671937414982815
model: 9.92592761691553*x**2*y**2 - 2.84800724395638*z - 0.959000663348614   ; error: 7.238178923070044e-05
model: -9.95478561246468*x*y - 0.844313108303641*z - 1.46692691885786        ; error: 6.683415683534396e-05
model: -9.99663513114771*x*z - 1.58326054533609*z - 0.988930285542175        ; error: 5.366831572875424e-05
model: -9.97359088788792*x**2*z**2 - 1.87369350103413                        ; error: 0.000514052998501358
model: -10.0*x*y*z - 10.0*x - 0.669443916805421                              ; error: 0.00015011688503815737
model: -4.2145029905377*z**2 - 1.39734755358625                              ; error: 0.0001075567167002612
model: -9.99918470687841*x - 6.70332709232925*z**3 - 0.44186576772028        ; error: 3.517054281188187e-05
model: -9.91741670665033*x**2*z - 1.84536737533326                           ; error: 0.0004899242360407345
model: -6.93971756322528*y + 9.99112709034544*z - 4.31481381649583           ; error: 2.2014943616916792e-05
model: 6.04485636867145*y*z - 6.78523068559061*z                             ; error: 2.814357832318448e-05
model: -10.0*x - 6.2180071530392*z**2                                        ; error: 0.00021168499315829
model: -9.9607158620081*x*z**2 - 9.99715382144566*x - 2.19190893912448*y*z - 0.480990845002795; error: 2.1527484740007895e-05
model: -9.89029802046795*x**2*y*z**3 - 10.0*x - 0.736329917977417            ; error: 0.000310261626086638
model: -9.82737252451739*x*y**2*z**2 - 1.87980635512291                      ; error: 0.0005155622154349224
model: -9.00593298738591*y*z**2 - 1.67028160898318                           ; error: 0.00016452904542052488
model: 9.9999652929001*z**2 - 9.3044925547124*z                              ; error: 2.27641915083346e-05
model: -9.99964428977115*x - 2.24648265834698*z                              ; error: 1.103304088254668e-05
model: -4.94055336321253*y + 9.99849204148303*z**2 - 2.44449583971495        ; error: 5.165978231114317e-06
model: 9.88012049239737*x*y*z - 3.51584523380206*z - 0.797973564999312       ; error: 6.5049756504027e-05
model: -10.0*x**2 - 5.31356441921171*z                                       ; error: 0.0004710428788985152
model: -0.87599995004599*x**4*y**5*z**2 - 1.88919534711596                   ; error: 0.0005416834726376367
model: -9.99482532545405*x*y*z - 1.8208344172413                             ; error: 0.0003355350650966498
model: -9.85064746304969*x*y - 9.88165587447878*x*z + 0.317830414364597*z - 1.47456142402531; error: 4.797141529731432e-05
model: 9.13297837960453*x**3*z**2 - 5.72249151313521*z                       ; error: 0.0005843205882743939
model: -9.94540415123951*x**2 - 1.75628318432348                             ; error: 0.0004862879609386354
model: -9.56041046192513*x*y**3*z**5 - 10.0*x - 0.737486227003016            ; error: 0.00031323274477990885
model: 9.9760972607838*x*y**2 - 9.9492144987344*x*z - 6.48465008405288*y + 9.99667473006181*z - 4.04206571793534; error: 7.895438249454528e-06
model: -9.99618018351094*x**2 - 9.99854454323111*x - 1.16181104930299*y - 0.460473861201634; error: 2.3597082323657923e-06
model: -9.96081650782342*x**2*z - 2.65900816667478*z - 0.972347188057613     ; error: 6.952640607837129e-05
model: 9.99851268971842*y*z - 9.56199106586642*z + 0.689012345824992         ; error: 9.078950694646401e-06
model: -9.95427685707474*x**2 - 1.49130915672215*y - 1.57426194428194        ; error: 4.372466350222387e-05
model: -9.94785251606325*x**2 - 10.0*x - 0.604668310664013                   ; error: 0.0002776972623389836
model: 9.99349626541518*x**2*y - 5.7699008108889*z                           ; error: 0.0005346547705305713
model: 9.56736233784903*x*z**3 - 5.86478892337527*z                          ; error: 0.0005152424963833256
model: -9.96506906184157*x**2*y - 1.87014965554788                           ; error: 0.00047080616796660313
model: 9.99067966937201*x*y - 6.15441554894775*z                             ; error: 0.00020932196790764406
model: -9.99881064628421*x*z**2 - 9.98959884619368*x - 0.604215726488391     ; error: 0.00015148510035864149
model: -9.51313658731968*x**3*y**2*z - 1.88904422218009                      ; error: 0.0005409683744235692
model: -8.24354374599154*x**4*z - 1.88872514550767                           ; error: 0.0005410216857576195
model: 9.98958807195358*x*y**2 - 3.15310799014102*z - 0.900876824743712      ; error: 5.5056657480038725e-05
model: -9.88742323769665*x*y**2*z - 1.86762466218533                         ; error: 0.000487260778411429
model: -7.65012544472613*x*z - 4.83234384090516*z                            ; error: 0.0005838588253469985
model: 9.83871627736535*x**3*y**2 - 9.99997908471704*x - 1.23288268342144*y - 0.586747760580554; error: 6.820890200348279e-06
model: 9.99044809429642*y**2*z - 6.49727924151455*y*z - 1.70332237367933     ; error: 5.4476261995352745e-05
model: -9.99932854934818*x*y - 9.99985604357838*x - 0.58878038625591         ; error: 1.2733007547843757e-05
model: -8.4970944563889*x**3*y - 10.0*x*z - 1.50726566493043                 ; error: 0.0001998477974018884
model: -9.92396938117206*x*y**2*z**2 - 9.97389445382836*x*y**2 - 1.82676349733483; error: 0.000421140765130268
model: -9.992054479469*x**2 - 2.65157031228163*z - 0.884895150232322         ; error: 5.615490817284859e-05
model: -9.99174623452231*x*z**2 - 1.75425492603865                           ; error: 0.0003329016176941725
model: -9.96950741487329*y**2*z - 1.71198967609322                           ; error: 0.00026254819374314255
model: -9.94314155874343*x**2*z - 9.95834802081241*x**2 - 9.98088100749953*x*z - 1.33273956687799; error: 0.0001404290933427149
model: -10.0*x*y**2 - 10.0*x*y*z - 1.77018592034676                          ; error: 0.000274875194700351
model: -8.48505756461149*x*y - 9.99215377079376*x*z - 1.38628089620428       ; error: 4.8832580930748306e-05
model: -9.99696110747046*x - 2.72276345586102*y + 4.40683594238669*z**2 - 0.914696848879842; error: 2.2570250374710258e-07
model: 9.89122941647271*x*y**2 - 5.84095544576643*z                          ; error: 0.0004940622439651886
model: 6.28486693370272*x**3*y*z**3 - 2.80358793278055*z - 0.968670719386686 ; error: 7.437547600958217e-05
model: -9.93627203603449*x*y**2*z - 9.99617292984586*x - 0.716167419619673   ; error: 0.0002664983049158617
model: -9.07507114656913*x*y**3*z**2 - 1.88668292124707                      ; error: 0.0005330645986572773
model: -9.49018712659415*x*y*z - 9.99644373370989*x*y - 1.68222796147179     ; error: 7.746062201389972e-05
model: -9.99028023311029*x*z - 6.28789377113393*y + 9.9966111606342*z - 4.01717252097135; error: 1.5535932473781773e-05
model: 9.44008538030867*x**2*y*z - 1.59875171094047*y - 1.70210185150667     ; error: 5.795140628089061e-05
model: -9.99997278826717*x*z - 9.99789814703606*x - 0.357920092297169        ; error: 6.876499451659693e-05
model: -9.87082236977085*x*y*z**2 - 1.85994827685019                         ; error: 0.00045358205141069206
model: 9.99448088046852*x*y**2 - 9.99770015578933*x - 2.63392810656673*z + 0.0782072005766832; error: 4.384385950806353e-06
model: 9.88943376910878*x*y**2*z**2 - 1.60622907028398*y - 1.70143082654152  ; error: 5.539257110407977e-05
model: 9.95499163084591*x*y - 9.99852178878545*x - 2.30240522768808*y - 0.600697027922743; error: 6.3148252805584195e-06
model: 9.98872603370772*x*y**2*z - 9.99945305670286*x - 1.33469443071285*y - 0.593079498348654; error: 4.269482668568051e-06
model: -9.32786226472426*x**2*y**3 - 1.88782500580118                        ; error: 0.0005363030685698883
model: -9.99664408965923*x**2 - 9.99973762955016*x - 2.14910722244514*z + 0.101594221670851; error: 4.759600243593329e-06
model: 9.95571070603187*x*y**2 - 4.52943737011243*y*z - 1.68434223941003     ; error: 9.981621390453297e-05
model: -9.84269492581149*x*y - 9.99885258218247*x - 0.297575121622037*z - 0.495668752734278; error: 8.424032655865221e-06
model: -9.30966672350297*x**3 - 2.79264683585468*z - 0.95722409039799        ; error: 7.1451619499001e-05
model: 9.99485098639443*y**2*z**2 - 1.97338178121338*y - 1.72335483783566    ; error: 2.8390204401884698e-05
model: -9.92750718568768*x*z - 0.887864496732053*y - 1.40362312360936        ; error: 4.647568491439363e-05
model: -9.99806487878799*x*z**3 - 1.83901854281801                           ; error: 0.0004353246496961635
model: -9.99577518082532*x - 7.61177054144617*y*z**2 - 0.551063820501093     ; error: 4.5663954441879e-05
model: -9.88326548939544*x**3 - 9.98912134250766*x*y - 1.72412835348169      ; error: 0.0001022384076850822
model: 9.81752584842544*x*y - 2.61282491639291*y - 1.71356998562561          ; error: 5.6577188959218346e-05
model: -8.43580073668222*x**3*y**2*z**2 - 1.88921161491991                   ; error: 0.0005413938549831867
model: -8.56592918441304*x**2*y**2*z**4 - 1.88872175300662                   ; error: 0.0005411614003330928
model: -7.39566291357986*x**4*y**2*z - 1.88917026133445                      ; error: 0.0005416202788729494
model: 9.28239615567144*x*y - 9.99995872227064*x - 0.985397873115605*y - 2.29257509734468*z; error: 1.0524084046140505e-05
model: -9.95617311307799*x**2*y*z - 1.88115078743443                         ; error: 0.0005155035550369149
model: 9.44208162587225*x**2*z**2 - 5.7616629996052*z                        ; error: 0.0005747120317039778
model: 0.208438823918018*x*z**2 - 9.9994454848464*x - 2.25647040449815*z     ; error: 1.1038835545169264e-05
model: -9.75511053072479*x*y*z**3 - 1.87684254831656                         ; error: 0.000503831594135187
model: -9.58516045703161*x**3*y - 1.88708281053395                           ; error: 0.0005339745954768649
model: 9.99570879170704*x*y*z - 7.34428630390222*y + 9.99517666242104*z - 4.33104042129218; error: 1.5527459057958844e-05
model: 9.9738109887783*x*y**2*z - 1.64240927175044*y - 1.70797190254353      ; error: 5.1030170955143085e-05
model: 9.82850940419074*x*y*z**2 - 1.73079538729161*y - 1.70625303158057     ; error: 5.140375164412972e-05
model: -9.78439533278332*x**2*z**2 - 10.0*x*z - 10.0*x - 2.87871239642388*z**2; error: 5.63028550618148e-05
model: -9.77258451234948*x**2*y - 3.96470430701683*z**2 - 1.4101929776224    ; error: 0.00010377211100100877
model: -9.92103311687443*x**3 - 3.92497677925596*y*z - 1.65535138733138      ; error: 0.0001133737062452068
model: 9.41679341295893*x**2*y**2*z**2 - 5.72211192866178*z                  ; error: 0.0005829082552365748
model: 10.0*x*y*z - 5.90410762382665*z                                       ; error: 0.0004117823583728783
model: 9.72274329697791*x**2*y*z - 4.02928122888982*x**2*z - 5.68661384637407*z; error: 0.0005654929093399095
model: -9.9884876140333*x**2 - 4.03771588177336*z**2 - 1.28453188833036      ; error: 8.401799072791849e-05
model: -9.9824329391425*x*y*z**2 - 10.0*x - 0.708023299975069                ; error: 0.000240031533672056
model: -9.99963886853631*x + 0.0892266267142983*y*z - 2.26295944582924*z     ; error: 1.088779989943514e-05
model: -9.88976683378889*x**2*z - 10.0*x*y - 1.69612644622048                ; error: 8.971645899280086e-05
model: -8.77441226823269*x**2*y**2*z - 1.8871312231052                       ; error: 0.0005359148615481286
model: 8.50805783117544*x*y*z + 9.73945699778537*y*z - 9.99933091286647*z + 0.791148327996338; error: 7.129012023471878e-06
model: -9.93544366182453*x**3*z - 4.24467017950818*z**2 - 1.38887470992292   ; error: 0.00010634210804375213
model: -3.46939028508351*x + 9.97874237795572*y*z**2 - 5.29081898320019*z    ; error: 6.3971950116598464e-06
model: -9.98769671281126*x*y*z - 9.99582611091979*x - 9.97179211414984*y**2*z**2 - 0.595027939905072; error: 6.811945643907407e-05
model: 9.96069084741016*x*y**2 + 4.95269947526744*y*z - 9.99964186572153*z**2 - 1.04442988011636; error: 7.76639188127785e-05
model: -9.84356972676828*x**2*y*z**2 - 10.0*x - 0.734386223565685            ; error: 0.00030532514928902874
model: -9.97147289669467*x**2 - 6.88507577375436*y + 9.99922994698177*z - 4.19101809524327; error: 1.3879225187200154e-05
model: 8.73943170252208*x**3*y**2 - 5.71910941937274*z                       ; error: 0.0005843441866866863
model: -9.99995196658953*x - 3.2335871915161*y*z - 0.556484730821953         ; error: 2.644012029112678e-05
model: -6.64095847996639*x**3*y**4 - 1.88948012578668                        ; error: 0.000541562525186978
model: -9.60493564804113*x**3*z - 1.88431831851715                           ; error: 0.00053536928084327
model: 9.98996731818574*x*z**2 - 6.1314175520768*z                           ; error: 0.00048154386729530217
model: 9.3475172594995*x**2*y - 1.67301960014395*y - 1.70246803735571        ; error: 5.886648456919931e-05
model: -9.66230261209522*x*y*z - 2.97409463140725*y*z - 1.66272714720727     ; error: 0.00011705459617232334
model: -9.97423642640518*x**2 - 9.97204266902205*x*z - 1.48935049894917*z - 0.887674090747637; error: 3.8371072862309396e-05
model: -9.95016910991467*x**2 - 3.85022872352617*y*z - 1.542200825591        ; error: 9.274254393111724e-05
model: -9.95416718639191*x**2*y**2 - 10.0*x - 0.731627764873234              ; error: 0.0003026754616409294
model: -9.93313126236556*x**2*y**2*z - 9.96228509686851*x*y*z**2 - 1.85727372520824; error: 0.0004472715005217448
model: 3.47993570706057*x**3*y + 9.9258630991075*x**2*y*z - 9.99772440239501*x - 1.27439780441693*y - 0.588923693132978; error: 6.4790976462570276e-06
model: 9.95794735349945*x*z**3 - 1.76134814492723*y - 1.72475621277489       ; error: 5.293662897730586e-05
model: -9.86752085421811*x**3 - 1.87385692117137                             ; error: 0.0005326315721960093
model: -9.99597351701025*x*y + 9.99979628623549*y*z**2 - 3.5799764758062*z - 0.814010373069934; error: 1.5467127764796968e-05
model: -9.97796034867127*x*y + 9.99715779621129*z**2 - 7.19064545936043*z - 0.547985036710602; error: 1.8013966231636028e-05
model: -9.87519882098297*x**2*z**3 - 1.88353913324217                        ; error: 0.0005289088224299467
model: -9.99995367228584*x - 0.0250505875104945*y - 2.23734242880401*z       ; error: 1.0965068787716516e-05
model: -9.9997717130028*x*y - 2.15263814845948*z**3 - 1.64807336780368       ; error: 8.179506164224305e-05
model: -9.90843564499647*x*y**2*z**2 - 10.0*x - 0.728517510509874            ; error: 0.00029094732810859233
model: 9.9935180347259*y*z**2 - 8.58340993886471*z**2 - 1.13209605885961     ; error: 6.074494847421306e-05
model: 9.77608765903125*x**2*y**2 - 9.97483089891113*x*z - 0.930150720037807*y - 1.40190020080715; error: 4.470866676443472e-05
model: 9.89765833157307*x*y*z**3 - 5.75158982450571*z                        ; error: 0.000550878454762423
model: -9.98566181745955*y**2*z**2 - 1.80964314773123                        ; error: 0.000354389008850385
model: -9.72367871052767*x**2*z - 10.0*x - 0.694725256618388                 ; error: 0.00027538053804183644
model: -9.99381196329062*x*z - 9.99982146248214*x - 1.04289354962001*z - 0.01573760585516; error: 4.0727572027045524e-06
model: 9.90279600721011*x*z**4 - 4.48982113746805*z**2 - 1.38547229625306    ; error: 0.00010493514076407623
model: -8.76648059995326*y*z + 9.94151635118287*z**3 - 1.83943012642499      ; error: 9.408802707924938e-05
model: 9.99965174792835*y*z - 5.0299406056448*y - 0.277212921085058*z - 1.7419663762819; error: 6.887271781881104e-07
model: -9.99826014912572*x*y - 9.51487152710509*y**2*z**3 - 1.70924835915133 ; error: 9.695302640473463e-05
model: -9.99586447273879*x - 3.47522132323443*z**2 - 0.332891151087226       ; error: 2.2435972882656006e-05
model: 9.97356401529661*x*y*z**2 - 7.12564210283017*y + 9.98925865074153*z - 4.32000802055475; error: 1.7880820379966384e-05
model: 9.4546135253156*x**2*y*z - 2.87119804144415*z - 0.95340100450349      ; error: 7.350570161121762e-05
model: -9.83767120730495*x**2 - 9.84943980074518*x*y**2*z**3 - 1.75375309642652; error: 0.00047506552383542967
model: 9.93752149395982*x**2*y*z**2 - 5.72259346318225*z                     ; error: 0.0005769960753843462
model: -9.9995814704855*x + 3.46260334299073*y*z - 2.49031147710756*y - 0.625525445210442; error: 4.862858286381675e-08
model: 1.49692469679755*x**2*z**2 - 9.98655937105589*x*z - 0.89125794034932*y - 1.40364116594593; error: 4.641309008383798e-05
model: -10.0*y*z**3 - 1.77964760556662                                       ; error: 0.00027983313379532676
model: -9.9244590266269*x**2*y - 10.0*x*z - 1.49090729109437                 ; error: 0.0001652748955656844
model: 9.9974344162985*y*z**2 - 5.53373186924024*z - 0.318418927227161       ; error: 1.859127017292538e-05
model: -9.62913069402458*x**2*y**3*z - 10.0*x - 0.737063745942741            ; error: 0.00031193205934665444
model: -8.99651960966816*x**2*y**2*z - 9.8387342789241*x**2 - 1.75547469139324; error: 0.00048109438484608095
model: 9.97928696140695*x*y*z - 1.97425889747491*y - 1.71331200408236        ; error: 4.755960830309498e-05
model: -6.05123905322352*x**3*y**2*z**2 - 9.99944045519439*x*y - 1.73873125441789; error: 0.0001066997477552613
model: -8.78771400262561*x + 9.79784017581674*z**2 - 8.55177624878387*z + 0.787721417208238; error: 4.7104771261458226e-08
model: 10.0*y*z**2 - 6.47371444034814*z                                      ; error: 7.490229445489541e-05
model: 9.80972420975369*x*y*z - 5.40008267915298*z**2 - 1.32222947286715     ; error: 0.00010562619942563641
model: -5.91159953664486*x**6*z - 1.88931039665329                           ; error: 0.0005416761183925135
model: 9.96437674775197*x*y*z**2 - 3.10575176336181*z - 0.897331293130545    ; error: 6.697585869801179e-05
model: -5.33624201511193*x**3*y**3*z**2 - 1.88938864103029                   ; error: 0.0005416212244827164
model: -3.20005121540936*x**2*z**2 - 1.54206980328847*y - 1.69665460354686   ; error: 5.9121971805915727e-05
model: -9.91035559038171*x**2*y - 9.94646258331174*x**2*z**2 - 1.85498090900621; error: 0.0004458371003865235
model: 9.96762888833902*x*y*z**2 - 5.7978813593429*z                         ; error: 0.0005086347723674128
model: -9.49072873899206*x**2*z**2 - 9.96611044212611*x**2 - 3.71748742427891*y*z - 1.53451860184899; error: 9.089410907294191e-05
model: -9.67915754601505*x**2*y**3*z + 9.97740162770143*y*z**2 - 7.01879381892566*y + 7.49491574263967*z - 3.72782439090826; error: 3.250434926904614e-06
model: 9.25494434966622*x*y**3*z**4 - 5.71917549098685*z                     ; error: 0.0005837112401303204
model: 9.99996280214698*z**2 - 9.14717653008129*z - 0.0523916950062689       ; error: 2.1449772573505056e-05
model: -9.99969912689157*x*z - 9.99918437188885*x + 0.0193086499353945*y - 1.09610736513107*z; error: 4.1263996055424595e-06
model: -2.39843320164239*x**2*y**2 - 1.88782197603016                        ; error: 0.0005385034420126417
model: -5.59720255898342*x + 9.99822407675944*y*z - 9.30268353221243*z + 1.24338386177844; error: 2.5547677911249107e-08
model: 8.4029327274213*x*z**2 - 3.39524807407489*z - 0.887525455891562       ; error: 7.327241120245281e-05
model: -9.81730997307052*x*y**2*z**3 - 1.88536265227391                      ; error: 0.0005296376020083352
model: -9.88078039684827*x**2 - 10.0*x*z - 1.37707881240259                  ; error: 0.00016787013984936544
model: -9.88951219351858*x**2*y*z**2 - 1.88636763696811                      ; error: 0.0005312742932269588
model: -9.96608022435219*x**2 + 9.78145816477727*z**2 - 8.82326052993981*z   ; error: 1.3249111596819557e-05
model: -9.98652125852714*x**2 - 9.97736516741683*x*y*z - 1.68704971950561    ; error: 0.00028894213980000473
model: -9.99505683225954*x**2*y**2*z**2 - 1.88827047627878                   ; error: 0.0005386397498264703
model: -9.99895663912767*x - 5.74465530052942*y + 8.40797078065671*z - 2.78670938174848; error: 6.920354126374712e-07
model: -9.61433356440196*x*y**3*z - 1.88269469467469                         ; error: 0.0005209375649485218
model: -9.98524552248436*x*y**2 - 9.9316384280021*y**2*z**3 - 1.80241051524917; error: 0.00036501461480038024
model: -9.93251435059171*x**2*y - 9.98914168264083*x - 0.719942683239781     ; error: 0.0002581778123105778
model: -9.999867617764*x*z - 2.20652879736976*y*z - 1.38591017023452         ; error: 7.34862235441783e-05
model: 9.97466043704711*x*y - 8.02983149295839*y + 9.99465980142495*z - 4.32898778756032; error: 1.9236511404228586e-05
model: -9.55335546527098*x**2*z - 4.09031221132431*z**2 - 1.37006110261071   ; error: 0.00010020316030397826
model: -9.99267303754724*x*z - 9.99945280833439*x - 0.569223549610329*y - 0.287905153739311; error: 2.9129756294310236e-06
model: 9.95800360115131*x*y*z - 9.99383607755039*x*y - 1.5668920624858*z - 1.29352403871912; error: 5.766285908951069e-05
model: 9.95825271318027*x*y**2*z - 3.0055844150223*z - 0.921746582308138     ; error: 6.602914653196317e-05
model: -9.97109733615835*x**2*y - 9.96315316402001*x*y**2*z - 1.84866194083052; error: 0.0004215798309583773
model: -9.99817706727116*x**2 - 9.99645631724749*x*y - 1.6054078621692       ; error: 7.914852639952051e-05
model: 9.78675324597937*x*y**2*z**3 - 9.99523773212527*x - 2.25977324178222*z; error: 1.0430781567068238e-05
model: 9.92727939931141*x*y**2 - 4.83223441964123*z**2 - 1.37201333525973    ; error: 8.878027485679133e-05
model: -2.31953942978514*x**4*z**3 - 1.88929170222097                        ; error: 0.0005416433399567163
model: -9.89609089920479*x**4 - 9.99841541817195*x - 0.736000750802286       ; error: 0.0003131489145793438
model: 9.99435929974712*y*z**2 - 8.08206487823603*y*z - 1.68338346139823     ; error: 7.787121713398324e-05
model: 9.99056872990146*y**2*z**2 - 5.9349403548225*z                        ; error: 0.000382843451372988
model: -9.7471347245027*x**2*z**4 - 1.88708574105957                         ; error: 0.0005360375192603055
model: -9.71133633953279*x**2*z**2 - 9.98622430554774*x**2 - 1.74053644428777; error: 0.0004603128453672675
model: 9.67741959201705*x*y - 9.94713145034468*x - 7.02575920100414*y + 8.85030736721714*z - 2.92254994114909; error: 9.142702694298717e-08
model: 9.99013505632794*x*y**2 - 9.97093866388668*x*z - 1.97735631563294*z - 0.908855410099606; error: 3.735596239933169e-05
model: -9.87487490643653*x**2*y*z - 9.97240010845457*x - 0.732586289366575   ; error: 0.00029326629070420635
model: 9.68343337231703*x*z**2 - 1.95089580219463*y - 1.78230094948855       ; error: 5.439458450174252e-05
model: -9.99975924563067*x + 1.39080555651566*y - 7.75906129466509*z**2      ; error: 5.439215410624114e-05
model: -7.39819313495085*x + 9.67424968049072*y*z**2 - 0.723470443740308*y - 3.7292706831921*z + 0.0354717854167896; error: 2.537818093515268e-07
model: -9.97634308506755*x**2*z - 1.48333345177378*y - 1.6646568691611       ; error: 5.5618571429829095e-05
model: -9.38450475936301*x**2*y**2*z**4 - 10.0*x*z - 1.50896718730294        ; error: 0.00020337283120814575
model: -9.42236806784959*x*y*z + 6.51382779879861*y*z - 9.9933399389512*z**2 - 1.02372775939687; error: 9.314603122069731e-05
model: 9.77956802731417*x**2*y**2*z - 2.80846411965232*z - 0.968986768047586 ; error: 7.35473534650817e-05
model: 9.42757385724258*x**2*y*z - 9.80189680339251*x**2*z + 1.99251348430276*y - 6.37362840346937*z; error: 8.993668068023386e-05
model: -1.71944109779497*x**4*y*z**3 - 1.88930669878338                      ; error: 0.0005416734204548374
model: 4.25710344952627*x**4*y - 6.95735364418916*y + 9.99803937504156*z - 4.31702846792302; error: 2.196725681209919e-05
model: -9.89430153025302*x**2*y*z - 10.0*x*z - 1.50134438335905              ; error: 0.000189623865054111
model: -9.85123986530726*x**2*y - 2.59319188026064*z - 1.02085639693627      ; error: 7.350040813866479e-05
model: -7.49101484114563*x**2*y**2*z**2 - 9.99750722143482*x*y - 9.99337554751905*x - 0.588956824218067; error: 1.264861267171848e-05
model: -7.70251972300333*x*y**2 - 10.0*x*y - 1.70362592459241                ; error: 0.00010026674175531203
model: -9.99877656724777*x + 4.99713336964468*y*z**2 - 1.96604492899713*y - 0.618873728152305; error: 1.6403047287101492e-07
model: -9.44147543285482*x*y - 9.94571362045229*x*z - 9.99956519326036*x + 3.00043003141852*y*z**2 - 0.294918266976097; error: 7.192828053501619e-07
model: 8.76768980776368*x**3*y*z**2 - 9.99869959909295*x - 1.22991095074825*y - 0.586897481597969; error: 6.87021262413851e-06
model: 1.97611046252268*x**3*y**2 - 1.88944816718651                         ; error: 0.0005419903396641452
model: -9.98494641900853*x*y*z**2 - 10.0*x*y - 1.71292676631429              ; error: 9.093956120233618e-05
model: -9.97564424728806*x*y**2 - 9.99802301372838*x - 0.684133780744958     ; error: 0.00022653514456653017
model: -9.99018872142143*x**2*z - 6.8818281866987*y + 9.99104617989538*z - 4.2786339588585; error: 2.02169918419683e-05
model: 9.96179331290149*x*y**3 - 9.8642459044004*x - 2.33480992474751*z      ; error: 9.972779971459275e-06
model: -0.0611822632062919*x*y**2*z + 9.99288098056719*y*z - 5.17449723362475*y - 1.81468721888828; error: 7.000564121888671e-07
model: -9.99813975401181*x + 7.46882504637848*y*z**2 - 4.32463752951741*z + 0.495959674221955; error: 5.747808975513019e-08
model: -7.48498034716192*x**3*y**3 - 9.99853195154588*x*y - 9.99948892780878*x - 0.589130056903328; error: 1.270620238483063e-05
model: -8.44371775020293*x**3*z - 9.99983861017943*x - 2.23371940457294*z + 0.000490256359549002; error: 1.076409017596985e-05
model: 9.99155537723284*x*z**3 - 3.14036563751741*z - 0.908608476493416      ; error: 6.9271093255535e-05
model: 9.99928909739282*x*y*z**2 + 1.85468669506226*y - 6.519122361914*z     ; error: 8.64978265926723e-05
model: 3.73720997438353*x**2*z - 9.99583209546367*x - 5.93528198430328*y + 8.69933027715581*z - 2.87639390492368; error: 7.085623429259175e-07
model: -9.73697993309914*x**3*y*z - 9.99464267955822*x*y*z - 1.82004552669813; error: 0.0003335121946032598
model: -6.54973413368484*x**2*y**5*z**2 - 1.8892858729932                    ; error: 0.0005416051616782096
model: -9.97428060188443*x**2*y*z - 9.77167428557381*x**2 - 1.75043907238024 ; error: 0.00046194939769725595
model: 9.76910088398665*x**2*y*z - 9.99702147164022*x - 2.33700701132215*z + 0.0220651385263082; error: 1.0669347445289887e-05
model: -9.97536710911033*x**2 - 9.75272250629274*x*y**3*z**2 - 1.7530504459078; error: 0.00047707599154139324
model: -2.54989789949368*x**2*z**2 - 2.7644633374916*z - 0.977401628839953   ; error: 7.428062738539944e-05
model: -0.615717344781824*x*z + 9.99541200487016*y*z - 5.13638949899776*y - 1.79618966396605; error: 6.987077997847548e-07
model: -9.67070720282054*x**2*y*z**2 - 9.99822811301098*x*y - 9.9866691412551*x - 0.587836503127664; error: 1.2113808875684278e-05
model: -4.61389565451561*x**3*y*z**2 - 1.88912745675882                      ; error: 0.0005411367521238118
model: -9.82480858586429*x*y**2*z - 9.99857775445983*x*y - 1.72108425465547  ; error: 9.949250577159491e-05
model: 9.99976423903812*y**2*z - 6.23254949657457*z                          ; error: 0.00020542133936530594
model: 9.97856562111487*x*y*z - 9.9445750720674*x*z - 6.66150807496237*y + 9.97942649168816*z - 4.03075223228332; error: 1.0296939751271535e-05
model: 9.98435147977024*x*y*z**3 - 9.99941619091825*x - 2.38618287076642*z + 0.0337036046099697; error: 9.409451845662119e-06
model: -9.86079022269759*x**3*z**2 - 1.88750673255313                        ; error: 0.0005384490304811174
model: 0.394730552921746*x*z**3 - 4.31016010824794*z**2 - 1.38840006864772   ; error: 0.00010754323519175051
model: 5.47120896279205*x**3*z**3 + 9.97849572426795*x*y*z**2 + 9.86736459084534*x*z**3 - 5.9573736435779*z; error: 0.0004409089649543786
model: 9.98374740450672*x**2*y + 10.0*x*y - 6.20526000788035*z               ; error: 0.0001847384262307129
model: 0.16705869263665*x**2*y*z - 9.98436482752409*x*y - 1.15488156399927*z**2 - 1.60926373385151; error: 7.521905708743793e-05
model: -7.53229192724029*x**3*y*z - 10.0*x - 0.737045312754729               ; error: 0.0003121710190727328
model: 9.0463898253093*x**2*y - 9.8918866870639*x - 2.82304367330546*y + 4.39059861406181*z**2 - 0.928367545344454; error: 1.5277758105277662e-07
model: 9.99723336335206*x*y*z - 9.99982576580904*x - 1.62686224325864*y - 0.602318946712607; error: 3.3373128996412557e-06
model: 9.16742409695199*x**3*y**2*z + 9.99749534830024*y*z - 5.17819289569809*y - 1.81471447371735; error: 6.98750426726668e-07
model: 3.61454498189582*x*z - 9.99611117556812*x - 6.61722089718354*y + 9.59910404470036*z - 3.20763519076451; error: 7.637117790961531e-07
model: -10.0*x**2 - 10.0*x - 5.1099547644975*z**2                            ; error: 9.321118578987348e-05
model: -9.90895441480614*x**3*z - 9.94980034319033*x*y - 1.12983966460554*y*z - 1.6762433892519; error: 7.67523723855893e-05
model: 9.77228686190349*x*y**2*z**2 - 9.37590481735963*y*z**2 - 1.66929328659214; error: 0.00016220054314142792
model: -7.41243755923177*x**2*y**2*z**2 - 10.0*x*y*z - 1.81988262593379      ; error: 0.00033396349955030347
model: -9.84875038874601*x**2*y**3 - 10.0*y**2*z**2 - 1.8081499687712        ; error: 0.0003509594032863208
model: -8.10356904253183*x + 5.29458418513116*y*z + 3.2984807978364*z**2 - 8.05813019575255*z + 1.00492629560881; error: 1.986833989716507e-09
model: 9.99967080125217*y*z - 1.43666383341662*y - 6.93096743577613*z        ; error: 4.8900665872361875e-06
model: 9.99996793649948*y*z**2 - 3.01055587834097*y - 1.76544130264461       ; error: 7.681929391667577e-06
model: 5.52956174619685*y*z - 9.93155299251849*z**2 - 1.03719858536829       ; error: 9.429455591745488e-05
model: -9.99427456603484*x**2 - 9.9995634273048*x*y - 9.99711567154866*x - 0.456199968455681; error: 4.633071467636921e-06
model: 9.9943475658041*y**2*z + 6.45456700713971*z**2 - 8.60462169015242*z   ; error: 2.358855822048414e-06
model: 9.56232890679025*x*z**3 - 4.47065535736744*y*z - 1.6901114244846      ; error: 0.00011727191323580167
model: -9.41374113554744*x**2*z - 5.58727409644811*z                         ; error: 0.0005841667122105407
model: -9.99679396412883*x*y - 9.99347364030216*x - 0.340750805846042*y*z - 0.572514853891965; error: 9.675241557906722e-06
model: 9.97170848653323*x*z**2 - 7.34800766560256*y + 9.99612598794062*z - 4.4025078878292; error: 1.9307252507490316e-05
model: 9.95803084994047*x*z**3 - 9.99653459902199*x - 2.60693679335799*z + 0.0672920021193107; error: 9.1207135016108e-06
model: 4.34816558136974*x**3*y - 9.99975903658189*x - 1.23611810870182*y - 0.586552106091616; error: 6.8892842244839936e-06
model: -9.97383762444015*x**2*z - 9.4189434255694*x*y + 9.99778040811099*y*z - 7.55549931064462*z + 0.2104901986733; error: 5.68230898109508e-06
model: -9.98668411742364*x*y - 2.18675958041288*y*z**2 - 1.68995218085961    ; error: 8.63439782527583e-05
model: -9.9286529870197*x*y**2*z**2 - 9.9987769044747*x*y - 9.99954057556301*x - 0.581835222844955; error: 1.1769048482224602e-05
model: -9.95759842938641*x**2*y - 10.0*y*z**3 - 1.76194538541038             ; error: 0.0002399517828179314
model: -9.95984063473212*x + 3.37454312528997*y*z**2 + 3.42906027220695*y*z - 5.52528671746394*z + 0.793167251807431; error: 9.12033333315245e-09
model: -9.18452761799503*x**2*y - 9.99928453627659*x - 2.06886150838481*z - 0.0426271605539977; error: 1.0712725273223415e-05
model: 9.92835042844622*x**2*y - 9.98182724093845*x - 5.97749133789687*y + 8.62450921223328*z - 2.8485230104862; error: 5.152159701429238e-07
model: -5.48578592409475*x**3*y**3*z**4 - 2.81252551439708*z - 0.96584738537293; error: 7.441263422874125e-05
model: 9.50444497768585*x**2*y**3*z - 9.99716834705749*x - 0.0307213426776309*y - 2.23832976718072*z; error: 1.085394964796959e-05
model: -9.97541333538137*x**3*y - 9.9915645288668*x - 0.736482462330569      ; error: 0.00030775072766427825
model: -9.85091083477356*x**2*y*z**2 - 9.95859221130557*x**2*z - 10.0*x - 0.690270937390803; error: 0.00026638057781045555
model: -9.87910413567217*x**2*z - 10.0*x*z**2 - 1.71082596450472             ; error: 0.000293554629162309
model: 9.78197104006835*x*y**2*z**4 + 1.97738939890521*y - 6.48036329983778*z; error: 9.561807993123882e-05
model: 9.26408529321042*x**3*y + 9.9730992961201*x*y - 6.15761301078257*z    ; error: 0.00020727066386743359
model: 7.84778202396426*x*y + 1.1684497387054*y - 6.52199527774824*z         ; error: 9.499664193047744e-05
model: 9.98850048778502*z**3 - 6.02673428466085*z - 0.351373490347646        ; error: 2.413415261707339e-05
model: 9.96586820346529*x*y**2*z**4 - 5.72301720097766*z                     ; error: 0.0005800963890292546
model: -8.8725764211791*x**3*y**3*z**3 - 2.80661889718608*z - 0.967896636150988; error: 7.441603342105344e-05
model: 9.13897676201174*x**3*y*z + 1.98030934621635*y - 6.48053834969901*z   ; error: 9.658496746589662e-05
model: -9.92437482413454*x*y*z**7 - 1.88883749312735                         ; error: 0.0005401653097842059
model: -9.99919499388348*z**5 - 1.8171347011148                              ; error: 0.00036679487569016674
model: -9.99322780588914*x*z + 7.24871939153579*y*z - 9.99910060247489*z**2 - 0.746311472648431; error: 5.426680172717091e-05
model: -3.24765533662667*y + 9.99896080572881*z**3 - 1.92932795031129        ; error: 1.0671323696878131e-05
model: -9.99492471307543*x*z**3 - 10.0*x - 0.687033494938518                 ; error: 0.00022773691033333451
model: -10.0*x*z - 10.0*x - 2.28910354326151*y                               ; error: 0.0008004348586258407
model: 9.3965795958602*x**2*y*z**4 - 5.72228682217944*z                      ; error: 0.0005837811644390146
[2] [1, 3]



model: -9.99969912689157*x*z - 9.99918437188885*x + 0.0193086499353945*y - 1.09610736513107*z; error: 4.1263996055424595e-0
