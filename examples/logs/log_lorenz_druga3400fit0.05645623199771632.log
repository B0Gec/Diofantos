["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
3400 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: operands could not be broadcast together with shapes (1000,1) (955,1) !! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
Estimating model C0*x**2 + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1
Estimating model C0*x*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1
Estimating model C0*x + C1*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3*z**2 + C2
Estimating model C0*x**2*z + C1*x**2 + C2*x*z + C3
Estimating model C0*x*y**2 + C1*x*y*z + C2
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x + C1*y + C2*z**2 + C3
Estimating model C0*x**2*y**3*z
Estimating model C0*x*y + C1*x*z**2 + C2*x
Estimating model C0*y*z**2 + C1*y*z
Estimating model C0*x*y**2 + C1*z
Estimating model C0*x**3*y*z**3 + C1*z + C2
Estimating model C0*x*y**2*z + C1*x + C2
Estimating model C0*x + C1*y*z
Estimating model C0*x*y**3*z**2 + C1
Estimating model C0*x*y*z + C1*x*y + C2
Estimating model C0*y**3 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*z**2 + C2
Estimating model C0*x*z + C1*y*z
Estimating model C0*x**2*y
Estimating model C0*x*z + C1*y + C2*z + C3
Estimating model C0*x**2*y*z
Estimating model C0*x**2*y*z + C1*y + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x**2*y*z + C1*y
Estimating model C0*y**4 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4 + C1*y + C2
Estimating model C0*x*y*z**2 + C1
Estimating model C0*x**2 + C1*x*y*z
Estimating model C0*x*y**2 + C1*x + C2*z + C3
Estimating model C0*x**3*z
Estimating model C0*x*y**2*z**2 + C1*y + C2
Estimating model C0*y**3
Excepted an error: operands could not be broadcast together with shapes (1000,1) (958,1) !! 
Model: C0*y**3
Estimating model C0*x + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2
Estimating model C0*x*y*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2*y + C3
Estimating model C0*x*y + C1*x + C2*y + C3
Estimating model C0*x*y**2*z + C1*x + C2*y + C3
Estimating model C0*x**2*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2 + C2
Estimating model C0*x**3*y*z**3
Estimating model C0*y**2*z**2
Estimating model C0*x*y**4*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1*x + C2
Estimating model C0*y**3*z
Estimating model C0*x*z + C1*x
Estimating model C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5
Estimating model C0*x**2*y**3 + C1
Estimating model C0*x*y*z + C1*x + C2*y
Estimating model C0*x**2 + C1*x + C2*z + C3
Estimating model C0*x*y + C1*x + C2*y**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*x + C2*y**2 + C3
Estimating model C0*x*z + C1*y**2*z + C2
Estimating model C0*x*y**2 + C1*y*z + C2
Estimating model C0*x*y + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y
Estimating model C0*x*y + C1*x
Estimating model C0*x**3 + C1*z + C2
Estimating model C0*y**2*z**2 + C1*y + C2
Estimating model C0*x**2*y*z**2
Estimating model C0*x**2*z**2 + C1*x
Estimating model C0*x*z + C1*y + C2
Estimating model C0*x*z**3 + C1
Estimating model C0*x + C1*y*z**2 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6
Estimating model C0*x*y**3*z
Estimating model C0*x**3 + C1*x*y + C2
Estimating model C0*x*y + C1*y + C2
Estimating model C0*x**2*z**2
Estimating model C0*x**3*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**4 + C1
Estimating model C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2
Estimating model C0*x**4*y**2*z + C1
Estimating model C0*x*y + C1*x + C2*y + C3*z
Estimating model C0*x**2*y*z + C1
Estimating model C0*x**2*z + C1*y**3 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**3 + C2*z + C3
Estimating model C0*x*y**3*z**2
Estimating model C0*x**2*z**2 + C1*z
Estimating model C0*x*z**2 + C1*x + C2*z
Estimating model C0*x**2*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**3 + C2
Estimating model C0*x*y*z + C1*z**2
Estimating model C0*x*y*z**3 + C1
Estimating model C0*x**3*y + C1
Estimating model C0*x*y + C1*x*z
Estimating model C0*x**4*y**3
Estimating model C0*x*y*z + C1*y + C2*z + C3
Estimating model C0*x*y**2*z + C1*y + C2
Estimating model C0*x*y*z**2 + C1*y + C2
Estimating model C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2
Estimating model C0*x**2*y + C1*z**2 + C2
Estimating model C0*x**3*y
Estimating model C0*x**3 + C1*y*z + C2
Estimating model C0*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y + C2
Estimating model C0*x**2*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*z
Estimating model C0*x**2*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*y
Estimating model C0*x**2*y*z + C1*x**2*z + C2*z
Estimating model C0*x**2 + C1*z**2 + C2
Estimating model C0*x*y**2 + C1*x*z
Estimating model C0*x*y*z**2 + C1*x + C2
Estimating model C0*x*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y
Estimating model C0*x + C1*y*z + C2*z
Estimating model C0*x**2 + C1*x*y*z**4
Estimating model C0*x**2*z + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1
Estimating model C0*x*y*z + C1*y*z + C2*z + C3
Estimating model C0*x**3*z + C1*z**2 + C2
Estimating model C0*x**2*z + C1*y
Estimating model C0*x + C1*y*z**2 + C2*z
Estimating model C0*x + C1*y**4 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Estimating model C0*x*y**2 + C1*y*z + C2*z**2 + C3
Estimating model C0*x*y + C1*y
Estimating model C0*x**2 + C1*z**2
Estimating model C0*x**2*y**2*z
Estimating model C0*x**2*y*z**2 + C1*x + C2
Estimating model C0*x**2 + C1*y + C2*z + C3
Estimating model C0*x**3*y**2 + C1*z
Estimating model C0*x + C1*y*z**3
Estimating model C0*x**2*y**2*z + C1*y**3*z
Estimating model C0*x + C1*y*z + C2
Estimating model C0*x*y**2 + C1*x*y*z + C2*x
Estimating model C0*x**3*y**4 + C1
Estimating model C0*x**3*z + C1
Estimating model C0*x*z**2 + C1*z
Estimating model C0*x*y*z + C1*y*z**3
Estimating model C0*x**2*y + C1*y + C2
Estimating model C0*x*y*z + C1*y*z + C2
Estimating model C0*x**2 + C1*x*z + C2*z + C3
Estimating model C0*x*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y + C2
Estimating model C0*x**2 + C1*y*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*x**2*y**2 + C1*x + C2
Estimating model C0*x**2*y**2*z + C1*x*y*z**2 + C2
Estimating model C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4
Estimating model C0*y*z**2 + C1*y
Estimating model C0*x**2*y**3*z**4
Estimating model C0*x*z**3 + C1*y + C2
Estimating model C0*x**3 + C1
Estimating model C0*x**2*y**3 + C1*y*z
Estimating model C0*x*y + C1*y*z**2 + C2*z + C3
Estimating model C0*x*y + C1*z**2 + C2*z + C3
Estimating model C0*x**2*z**3 + C1
Estimating model C0*x + C1*y + C2*z
Estimating model C0*x**2 + C1*x*z
Estimating model C0*x**2*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*z**3 + C2
Estimating model C0*x + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y + C3
Estimating model C0*x*y**2*z**2 + C1*x + C2
Estimating model C0*y*z**2 + C1*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*z**2
Estimating model C0*x**2*y + C1*x
Estimating model C0*x**2*y**2 + C1*x*z + C2*y + C3
Estimating model C0*x*y*z**3 + C1*z
Estimating model C0*y**2*z**2 + C1
Estimating model C0*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1
Estimating model C0*x**2*z + C1*x + C2
Estimating model C0*x*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2*y + C3
Estimating model C0*x*z + C1*x + C2*z + C3
Estimating model C0*x*y**4*z + C1
Estimating model C0*x**4*y*z**2 + C1*y
Estimating model C0*x*z**4 + C1*z**2 + C2
Estimating model C0*y*z + C1*z**3 + C2
Estimating model C0*x**4*z
Estimating model C0*y**2*z**3
Estimating model C0*y*z + C1*y + C2*z + C3
Estimating model C0*z**4
Estimating model C0*x*y**4*z**2
Estimating model C0*x*y + C1*y**2*z**3 + C2
Estimating model C0*x*y**2 + C1*y
Estimating model C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Estimating model C0*x*y**2 + C1*x*y*z + C2*x*y
Estimating model C0*x + C1*z**2 + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*z + C2
Estimating model C0*x*y*z + C1*y
Estimating model C0*x*z**2 + C1*x*z
Estimating model C0*x**2 + C1*x*y**2*z**3 + C2
Estimating model C0*x**2*y*z**2 + C1*z
Estimating model C0*x + C1*y*z + C2*y + C3
Estimating model C0*x**2*z**2 + C1*x*z + C2*y + C3
Estimating model C0*y*z**3 + C1
Estimating model C0*x**2*y + C1*x*z + C2
Estimating model C0*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z + C1
Estimating model C0*y*z**2 + C1*z + C2
Estimating model C0*x**2*y**3*z + C1*x + C2
Estimating model C0*y**3*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y**2*z + C1*x**2 + C2
Estimating model C0*x*y*z + C1*y + C2
Estimating model C0*x**3*y**2*z**2 + C1*x*y + C2
Estimating model C0*x*z**2 + C1*x
Estimating model C0*x**2 + C1*x
Estimating model C0*y**2*z + C1*y
Excepted an error: operands could not be broadcast together with shapes (1000,1) (775,1) !! 
Model: C0*y**2*z + C1*y
Estimating model C0*x + C1*z**2 + C2*z + C3
Estimating model C0*x**2*y**2
Estimating model C0*y*z**2 + C1*z
Estimating model C0*x*y*z + C1*z**2 + C2
Estimating model C0*x*y*z**3
Estimating model C0*x**6*z + C1
Estimating model C0*x**2*z + C1*y**2*z
Estimating model C0*x + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2
Estimating model C0*x*y*z**2 + C1*z + C2
Estimating model C0*x**3*y**3*z**2 + C1
Estimating model C0*x**2*z**2 + C1*y + C2
Estimating model C0*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z
Estimating model C0*x**3*y + C1*x*y**2*z
Estimating model C0*x**2*y + C1*x**2*z**2 + C2
Estimating model C0*x**2*z**2 + C1*x*y
Estimating model C0*x**2*y + C1*y
Estimating model C0*x*y*z**2 + C1*z
Estimating model C0*x + C1*y*z**2 + C2*y
Estimating model C0*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y
Estimating model C0*x**2*z**2 + C1*x**2 + C2*y*z + C3
Estimating model C0*x**2 + C1*x + C2*y
Estimating model C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Estimating model C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x*z
Estimating model C0*x*y**3*z**4 + C1*z
Estimating model C0*x*y + C1*z**2
Estimating model C0*z**2 + C1*z + C2
Estimating model C0*x*y*z**4
Estimating model C0*x*z + C1*x + C2*y + C3*z
Estimating model C0*x**2*y**2 + C1
Estimating model C0*x + C1*y*z + C2*z + C3
Estimating model C0*x*y**3
Estimating model C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Estimating model C0*x*z**2 + C1*z + C2
Estimating model C0*x*y**2*z**3 + C1
Estimating model C0*x**2 + C1*x*z + C2
Estimating model C0*x**2*y*z**2 + C1
Estimating model C0*x**2 + C1*z**2 + C2*z
Estimating model C0*x**2 + C1*x*y*z + C2
Estimating model C0*x**2*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**3
Estimating model C0*x + C1*y + C2*z + C3
Estimating model C0*x**2*y*z**3
Estimating model C0*x*y**3*z + C1
Estimating model C0*x**2*y**3
Estimating model C0*x**2*y + C1*x*y**2*z
Estimating model C0*x*y**3*z**2 + C1*x*y*z
Estimating model C0*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2
Estimating model C0*x + C1*y*z**2
Estimating model C0*x*y + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2
Estimating model C0*x*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**2*z**3 + C2
Estimating model C0*x**2*z**2 + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z**2 + C1*y**2 + C2*z
Estimating model C0*x**2*y + C1*x + C2
Estimating model C0*x**2*z + C1*x*y**4*z**2
Estimating model C0*x*z + C1*y*z + C2
Estimating model C0*x*y + C1*x*z**2
Estimating model C0*x*y + C1*y + C2*z + C3
Estimating model C0*x + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3
Estimating model C0*x**2*z + C1*z**2 + C2
Estimating model C0*x**4*y*z
Estimating model C0*x**2*y*z + C1*x
Estimating model C0*x*z + C1*x + C2*y + C3
Estimating model C0*x*y*z + C1*x*y + C2*z + C3
Estimating model C0*y**3 + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y + C2*z + C3
Estimating model C0*x**2*y**4
ModelBox: 378 models
-> C0*z**3 + C1, p = 0.0004898357369634818, parse trees = 4, valid = True, error = 0.0001397548623323997
-> C0*x, p = 0.049073125736448, parse trees = 3, valid = True, error = 0.025164430092113322
-> C0*z, p = 0.050610214895616006, parse trees = 3, valid = True, error = 0.0005854182301205291
-> C0*x*y**2*z, p = 0.0007882450329600001, parse trees = 7, valid = True, error = 0.15351061967395868
-> C0*y*z + C1, p = 0.008801470863082786, parse trees = 16, valid = True, error = 0.00011761296748620813
-> C0*y + C1, p = 0.035146071067852794, parse trees = 19, valid = True, error = 5.917184352635108e-05
-> C0*x + C1, p = 0.03508790934339845, parse trees = 18, valid = True, error = 0.0003139859304245244
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 0.10226340810217253
-> C0*z + C1, p = 0.03698126966646376, parse trees = 25, valid = True, error = 7.442014682550424e-05
-> C0*y, p = 0.0490254336, parse trees = 2, valid = True, error = 0.0140414500441273
-> C0*x + C1*z + C2, p = 0.00293537610989568, parse trees = 17, valid = True, error = 1.1024922763906035e-05
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 6.994710209911979e-07
-> C0*y + C1*z, p = 0.003155988251085373, parse trees = 5, valid = True, error = 9.678591520818693e-05
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.10093180808412433
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.013863217396700218
-> C0*x*y + C1*y*z + C2, p = 2.1015063004446727e-05, parse trees = 4, valid = True, error = 7.758805007432144e-05
-> C0*y*z + C1*y + C2, p = 0.0002452779407455028, parse trees = 9, valid = True, error = 6.99156726754197e-07
-> C0*x*y*z, p = 0.005118474240000001, parse trees = 6, valid = True, error = 0.13934505353550872
-> C0*x + C1*y, p = 0.0030108672000000005, parse trees = 2, valid = True, error = 0.0028402209566566637
-> C0*y**2 + C1*z, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*y + C2, p = 0.002716043582009487, parse trees = 23, valid = True, error = 6.89237084118446e-06
-> C0*x*y**2 + C1, p = 0.0010889704488960005, parse trees = 7, valid = True, error = 0.00044173238207742186
-> C0*x*z + C1, p = 0.008795474719486145, parse trees = 15, valid = True, error = 0.0002036687394653022
-> C0*y**2, p = 0.006298870675046401, parse trees = 2, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 0.004110592357660955
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.141199920662858
-> C0*x*z + C1*z**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 6.896788863208552e-05
-> C0*x*y + C1, p = 0.008496314605633541, parse trees = 16, valid = True, error = 0.00010679176148363961
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = True, error = 7.285209381120745e-05
-> C0*x*z + C1*y, p = 0.0008254420089569282, parse trees = 5, valid = True, error = 0.011296096833341398
-> C0*x*y + C1*z + C2, p = 0.00018591637072200604, parse trees = 10, valid = True, error = 6.685456481453186e-05
-> C0*x**2 + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*y*z, p = 0.012953284499865601, parse trees = 3, valid = True, error = 0.04674171489237819
-> C0*x*z + C1*z + C2, p = 7.317737070133251e-05, parse trees = 6, valid = True, error = 5.370521313996089e-05
-> C0*x*z, p = 0.013008973499596801, parse trees = 5, valid = True, error = 0.10418595422359905
-> C0*x**2*z**2 + C1, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 0.0005140418137863554
-> C0*x*y*z + C1*x + C2, p = 1.9843828474347166e-05, parse trees = 5, valid = True, error = 0.0001501168651373444
-> C0*z**2 + C1, p = 0.0043908909760512005, parse trees = 7, valid = True, error = 0.00010754524162274614
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 0.024745360175943403
-> C0*x + C1*z**3 + C2, p = 3.304889002229762e-06, parse trees = 2, valid = True, error = 3.52239730340303e-05
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 0.14087791486474538
-> C0*x*y**2*z + C1*x*z, p = 4.851625656582146e-07, parse trees = 1, valid = True, error = 0.09800562202086588
-> C0*x**2*z + C1, p = 0.0012893641349529604, parse trees = 8, valid = True, error = 0.0004895415891429798
-> C0*y + C1*z + C2, p = 0.002399013971291013, parse trees = 19, valid = True, error = 2.1986655541499223e-05
-> C0*y**2 + C1*z + C2, p = 0.00011167151324921862, parse trees = 4, valid = False
-> C0*y**2*z + C1*z + C2, p = 1.4970115264420408e-05, parse trees = 4, valid = False
-> C0*y*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 2.814974222637844e-05
-> C0*x*y*z**2 + C1*x, p = 7.350947964518404e-06, parse trees = 2, valid = True, error = 0.022562076811422898
-> C0*x**2*z, p = 0.00255923712, parse trees = 3, valid = True, error = 0.15590741628648946
-> C0*x + C1*z**2, p = 0.00021094318080000006, parse trees = 1, valid = True, error = 0.00021168258996082378
-> C0*x*y**2*z**2, p = 3.062894985216001e-05, parse trees = 2, valid = True, error = 0.15982390160295049
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 0.16081685420404615
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 2.1510328360285772e-05
-> C0*y**2*z, p = 0.0025592371200000006, parse trees = 3, valid = True, error = 0.10268901935885946
-> C0*y**2 + C1, p = 0.003932707060187136, parse trees = 8, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 0.0003124544745564321
-> C0*x*y**2*z**2 + C1, p = 5.439701493743618e-06, parse trees = 3, valid = True, error = 0.0005526966355926497
-> C0*y*z**2 + C1, p = 0.0013676116704315314, parse trees = 9, valid = True, error = 0.000164475602055171
-> C0*x + C1*y**2, p = 0.0003974344704000001, parse trees = 2, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.0027806828228736685
-> C0*z**2 + C1*z, p = 0.0004488584516075522, parse trees = 4, valid = True, error = 2.2772302784976933e-05
-> C0*x*y*z + C1*x, p = 2.7881713220714502e-05, parse trees = 2, valid = True, error = 0.01894378098990219
-> C0*y**3 + C1, p = 0.00024640937164800014, parse trees = 2, valid = False
-> C0*x + C1*z, p = 0.0032019841486002586, parse trees = 5, valid = True, error = 1.1032970495426893e-05
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 0.11418444242012032
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.06928466061923667
-> C0*x**2*y**2*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.16310164277017686
-> C0*y + C1*z**2 + C2, p = 0.00016402941739008007, parse trees = 4, valid = True, error = 5.162855104678051e-06
-> C0*x*y*z + C1*z + C2, p = 2.043296226937406e-05, parse trees = 4, valid = True, error = 6.4987686653757e-05
-> C0*x**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = True, error = 0.00047104235816479645
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = True, error = 6.511320547212244e-05
-> C0*x*y*z**2, p = 0.0011601874944000003, parse trees = 10, valid = True, error = 0.15440578016475393
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = True, error = 0.0005416843840248686
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.12022269792825135
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 1.2972261113856007e-05, parse trees = 2, valid = False
-> C0*x*y*z + C1, p = 0.0022212179949256707, parse trees = 16, valid = True, error = 0.0003355239373767496
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 4.772524320884296e-05
-> C0*x + C1*y**3 + C2, p = 3.6261285184143386e-07, parse trees = 1, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005849408780007773
-> C0*x**2*z**3, p = 1.577854992384001e-05, parse trees = 1, valid = True, error = 0.16248988229629668
-> C0*x*y + C1*y**2 + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x*y**2, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.13642434974667567
-> C0*x**2 + C1, p = 0.004375729432166401, parse trees = 9, valid = True, error = 0.00048647823639504437
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 0.09585690918109353
-> C0*x**3*y*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = True, error = 0.16338691161944396
-> C0*x**2 + C1*y, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 0.012557236707924788
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = True, error = 0.00031328896415991613
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 2.354272041100313e-06
-> C0*x**2*z + C1*z + C2, p = 1.4969203127746564e-05, parse trees = 3, valid = True, error = 6.956687940213952e-05
-> C0*y*z + C1*z + C2, p = 0.00017617974460416006, parse trees = 5, valid = True, error = 9.075049269132226e-06
-> C0*x**2 + C1*y + C2, p = 0.00020496172559892486, parse trees = 6, valid = True, error = 4.366181372119701e-05
-> C0*y**2 + C1*y, p = 0.00020501259721113606, parse trees = 2, valid = False
-> C0*x**2 + C1*x + C2, p = 0.00010683038564352003, parse trees = 3, valid = True, error = 0.00027769021006211905
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0005348932559365641
-> C0*x*z**3 + C1*z, p = 7.803210144153604e-06, parse trees = 2, valid = True, error = 0.0005121382066851722
-> C0*x**3*y*z + C1*x, p = 9.417861568659461e-07, parse trees = 2, valid = True, error = 0.025083151484819603
-> C0*x**2*y + C1, p = 0.00084805521136681, parse trees = 7, valid = True, error = 0.0004710562164848966
-> C0*x*z**3, p = 0.00035860340736000015, parse trees = 3, valid = True, error = 0.15477931892478025
-> C0*x*y + C1*z, p = 0.0008189558784000003, parse trees = 4, valid = True, error = 0.00020945782814908874
-> C0*y*z**3, p = 0.0002390689382400001, parse trees = 2, valid = True, error = 0.13565169281943196
-> C0*x*z**2 + C1*x + C2, p = 1.6962245601326541e-06, parse trees = 2, valid = True, error = 0.0001517498132055521
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = True, error = 0.0005410124033510878
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.0005409684903517486
-> C0*x*y**2 + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 5.501838214085851e-05
-> C0*x*y**2*z + C1, p = 5.5607759308062726e-05, parse trees = 3, valid = True, error = 0.00048691237407148065
-> C0*x*z + C1*z, p = 0.0004218863616000001, parse trees = 2, valid = True, error = 0.0005838470004466494
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = True, error = 6.825675171677637e-06
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = True, error = 0.01389435264395344
-> C0*y**2*z + C1*y*z + C2, p = 1.0938210571203382e-06, parse trees = 2, valid = False
-> C0*y + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 0.00814911051321011
-> C0*x**3*y**2, p = 4.328061382656002e-05, parse trees = 3, valid = True, error = 0.1631604474749351
-> C0*x*y + C1*x + C2, p = 0.00018016181464596483, parse trees = 7, valid = True, error = 1.2744807015243992e-05
-> C0*y*z + C1*y, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.013816317279084438
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.00019927792191097037
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.04407841172527722
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = True, error = 0.0004212423179828533
-> C0*x**2 + C1*z + C2, p = 0.00011450182476496901, parse trees = 5, valid = True, error = 5.6079405702358796e-05
-> C0*x*z**2 + C1, p = 0.0012274935569842182, parse trees = 12, valid = True, error = 0.0003329026758693956
-> C0*y**2*z + C1, p = 0.0011337625180569604, parse trees = 8, valid = False
-> C0*x*y**3 + C1, p = 2.6230675046400012e-05, parse trees = 1, valid = False
-> C0*x + C1*y**3*z**2 + C2, p = 2.7945363781913173e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2 + C2*x*z + C3, p = 3.6887880192125384e-09, parse trees = 1, valid = True, error = 0.00014002938840169184
-> C0*x*y**2 + C1*x*y*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 0.0002754839150819755
-> C0*x*y + C1*x*z + C2, p = 1.2972261113856005e-05, parse trees = 2, valid = True, error = 4.8886283035402074e-05
-> C0*x + C1*y + C2*z**2 + C3, p = 9.23813678740931e-08, parse trees = 1, valid = True, error = 2.2554639847605614e-07
-> C0*x**2*y**3*z, p = 1.962054493470721e-06, parse trees = 1, valid = True, error = 0.16302031239417478
-> C0*x*y + C1*x*z**2 + C2*x, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.0071201244552476185
-> C0*y*z**2 + C1*y*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.03292386701373731
-> C0*x*y**2 + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.0004933001164768787
-> C0*x**3*y*z**3 + C1*z + C2, p = 7.029533299739621e-11, parse trees = 1, valid = True, error = 7.438493870458535e-05
-> C0*x*y**2*z + C1*x + C2, p = 1.7123384670289927e-06, parse trees = 2, valid = True, error = 0.00026623232298188194
-> C0*x + C1*y*z, p = 0.0004103600529557423, parse trees = 3, valid = True, error = 0.0025313799722576887
-> C0*x*y**3*z**2 + C1, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.0005324611575818888
-> C0*x*y*z + C1*x*y + C2, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 7.741008634534635e-05
-> C0*y**3 + C1*z**2 + C2, p = 8.821137557422085e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z, p = 8.353349959680002e-05, parse trees = 3, valid = True, error = 0.026677283600953713
-> C0*x**2*y, p = 0.002483965440000001, parse trees = 3, valid = True, error = 0.1545521704989816
-> C0*x*z + C1*y + C2*z + C3, p = 2.2171528289782346e-08, parse trees = 1, valid = True, error = 1.553871472761463e-05
-> C0*x**2*y*z, p = 0.0006756385996800002, parse trees = 6, valid = True, error = 0.16046531144906584
-> C0*x**2*y*z + C1*y + C2, p = 4.1096123208695825e-07, parse trees = 2, valid = True, error = 5.793958723415254e-05
-> C0*x*z + C1*x + C2, p = 7.838390503342083e-05, parse trees = 5, valid = True, error = 6.876998578528605e-05
-> C0*x**2*y*z + C1*y, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.014035370607401317
-> C0*y**4 + C1*y + C2, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1, p = 9.021617956454404e-05, parse trees = 4, valid = True, error = 0.00045299912824585387
-> C0*x**2 + C1*x*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.11963461246762919
-> C0*x*y**2 + C1*x + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = True, error = 4.399259912681207e-06
-> C0*x**3*z, p = 0.00022521286656000008, parse trees = 2, valid = True, error = 0.16261011272135453
-> C0*x*y**2*z**2 + C1*y + C2, p = 1.1643901575797151e-07, parse trees = 1, valid = True, error = 5.5393783856922326e-05
-> C0*y**3, p = 0.0008279884800000003, parse trees = 1, valid = False
-> C0*x + C1*y**2 + C2, p = 2.7485834193241175e-06, parse trees = 2, valid = False
-> C0*x*y*z + C1*y**2 + C2*y + C3, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3, p = 1.5979139671145846e-06, parse trees = 2, valid = True, error = 6.331395363265954e-06
-> C0*x*y**2*z + C1*x + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 4.272287541933772e-06
-> C0*x**2*y*z + C1*y**2 + C2, p = 6.50962591625742e-09, parse trees = 1, valid = False
-> C0*x**3*y*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = True, error = 0.16346469742184103
-> C0*y**2*z**2, p = 0.0006961124966400003, parse trees = 6, valid = True, error = 0.13575332860079597
-> C0*x*y**4*z + C1*x + C2, p = 1.1342372196486931e-10, parse trees = 1, valid = False
-> C0*y**3*z, p = 0.00045042573312000016, parse trees = 4, valid = True, error = 0.13455354388785448
-> C0*x*z + C1*x, p = 0.0004094779392000001, parse trees = 2, valid = True, error = 0.00590716823029697
-> C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1, p = 4.293436891594755e-06, parse trees = 2, valid = True, error = 0.0005364080563465289
-> C0*x*y*z + C1*x + C2*y, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.002771404661221388
-> C0*x**2 + C1*x + C2*z + C3, p = 4.632653888980257e-07, parse trees = 2, valid = True, error = 4.761079396105986e-06
-> C0*x*y + C1*x + C2*y**2 + C3, p = 1.994370685127886e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y**2*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.00012585566498689782
-> C0*x*y**2 + C1*y*z + C2, p = 4.9315347850435005e-08, parse trees = 1, valid = True, error = 9.980991093441333e-05
-> C0*x*y + C1*x + C2*z + C3, p = 1.7932853763794545e-07, parse trees = 2, valid = True, error = 8.401697631906033e-06
-> C0*x + C1*y**2 + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x, p = 0.0008011643028111362, parse trees = 5, valid = True, error = 0.011732012321748716
-> C0*x**3 + C1*z + C2, p = 8.042801890590725e-06, parse trees = 2, valid = True, error = 7.129565238276753e-05
-> C0*y**2*z**2 + C1*y + C2, p = 9.837332604037109e-07, parse trees = 3, valid = True, error = 2.841293262387813e-05
-> C0*x**2*y*z**2, p = 3.062894985216002e-05, parse trees = 2, valid = True, error = 0.16242260299234734
-> C0*x**2*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.024098971564546157
-> C0*x*z + C1*y + C2, p = 0.00020958079399262952, parse trees = 10, valid = True, error = 4.641780593107613e-05
-> C0*x*z**3 + C1, p = 7.114691602022403e-05, parse trees = 4, valid = True, error = 0.0004354745006535244
-> C0*x + C1*y*z**2 + C2, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 4.564184311166168e-05
-> C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6, p = 1.208381853002241e-13, parse trees = 1, valid = False
-> C0*x*y**3*z, p = 2.9728098385920014e-05, parse trees = 2, valid = True, error = 0.1594103446687821
-> C0*x**3 + C1*x*y + C2, p = 8.309877854699526e-07, parse trees = 1, valid = True, error = 0.00010206673399749009
-> C0*x*y + C1*y + C2, p = 7.058587830295934e-05, parse trees = 4, valid = True, error = 5.65260195018708e-05
-> C0*x**2*z**2, p = 0.0003480562483200001, parse trees = 3, valid = True, error = 0.16079196317267827
-> C0*x**3*y**2*z**2 + C1, p = 6.404145866688434e-08, parse trees = 1, valid = True, error = 0.000541402500963477
-> C0*x**2*y**2*z**4 + C1, p = 2.153656035459442e-09, parse trees = 1, valid = True, error = 0.0005411562178497204
-> C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5, p = 1.5481503975522824e-14, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2, p = 2.1519424516553446e-08, parse trees = 1, valid = False
-> C0*x**4*y**2*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.000541607265315736
-> C0*x*y + C1*x + C2*y + C3*z, p = 2.0548061604347923e-07, parse trees = 1, valid = True, error = 1.052557477913309e-05
-> C0*x**2*y*z + C1, p = 8.107663196160003e-05, parse trees = 3, valid = True, error = 0.0005154033674143872
-> C0*x**2*z + C1*y**3 + C2*z + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x*y**3*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 0.16202286200274887
-> C0*x**2*z**2 + C1*z, p = 7.573703963443205e-06, parse trees = 2, valid = True, error = 0.0005744554765282492
-> C0*x*z**2 + C1*x + C2*z, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 1.1053394674048857e-05
-> C0*x**2*y + C1*y**3 + C2, p = 2.632569304368811e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z**2, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.020018433148076283
-> C0*x*y*z**3 + C1, p = 1.5147407926886408e-05, parse trees = 4, valid = True, error = 0.0005029259740322638
-> C0*x**3*y + C1, p = 7.869202513920003e-05, parse trees = 3, valid = True, error = 0.0005338158386599721
-> C0*x*y + C1*x*z, p = 5.4051087974400024e-05, parse trees = 2, valid = True, error = 0.06303480644085852
-> C0*x**4*y**3, p = 2.5137380510466065e-07, parse trees = 1, valid = True, error = 0.16349098456624792
-> C0*x*y*z + C1*y + C2*z + C3, p = 3.9802327585817264e-10, parse trees = 1, valid = True, error = 1.5534819333132906e-05
-> C0*x*y**2*z + C1*y + C2, p = 1.0616498495579758e-06, parse trees = 2, valid = True, error = 5.101801365619164e-05
-> C0*x*y*z**2 + C1*y + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 5.1239189300631995e-05
-> C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2, p = 7.02953329973962e-11, parse trees = 1, valid = True, error = 5.638780244571598e-05
-> C0*x**2*y + C1*z**2 + C2, p = 2.117073013781301e-07, parse trees = 1, valid = True, error = 0.00010367058470902512
-> C0*x**3*y, p = 0.0002185889587200001, parse trees = 2, valid = True, error = 0.16243321862453217
-> C0*x**3 + C1*y*z + C2, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.00011347330775734454
-> C0*y**2 + C1*y + C2, p = 0.00020221465853952005, parse trees = 5, valid = False
-> C0*x**2*y**2*z**2 + C1*z, p = 6.59821089295172e-08, parse trees = 1, valid = True, error = 0.0005828967864707832
-> C0*x*y*z + C1*z, p = 5.568899973120002e-05, parse trees = 2, valid = True, error = 0.00041185389214480844
-> C0*x**2*y + C1*y**2 + C2*y, p = 1.0969038768203376e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*z, p = 2.090313210887105e-09, parse trees = 1, valid = True, error = 0.0005658567749726342
-> C0*x**2 + C1*z**2 + C2, p = 6.6826799677440035e-06, parse trees = 1, valid = True, error = 8.399373368460002e-05
-> C0*x*y**2 + C1*x*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.08802024459310001
-> C0*x*y*z**2 + C1*x + C2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 0.00023998070005128535
-> C0*x*y + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 1.089131836730186e-05
-> C0*x**2 + C1*x*y*z**4, p = 8.973566814414343e-09, parse trees = 1, valid = True, error = 0.13993461778926528
-> C0*x**2*z + C1*x*y + C2, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 8.970450844898237e-05
-> C0*x**2*y**2*z + C1, p = 7.134743612620803e-06, parse trees = 2, valid = True, error = 0.0005358541890025003
-> C0*x*y*z + C1*y*z + C2*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 7.074022986154383e-06
-> C0*x**3*z + C1*z**2 + C2, p = 3.9802327585817284e-10, parse trees = 1, valid = True, error = 0.00010634819029860186
-> C0*x**2*z + C1*y, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.013660484207982238
-> C0*x + C1*y*z**2 + C2*z, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 6.386298248307757e-06
-> C0*x + C1*y**4 + C2, p = 8.788526819130217e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z**2 + C3, p = 6.935157558552801e-12, parse trees = 1, valid = True, error = 6.811011427222436e-05
-> C0*x*y**2 + C1*y*z + C2*z**2 + C3, p = 9.121366738416457e-10, parse trees = 1, valid = True, error = 7.766092868620763e-05
-> C0*x*y + C1*y, p = 0.0007948689408000002, parse trees = 4, valid = True, error = 0.013596310494580993
-> C0*x**2 + C1*z**2, p = 2.7844499865600016e-05, parse trees = 1, valid = True, error = 0.016758505610683695
-> C0*x**2*y**2*z, p = 7.432024596480003e-05, parse trees = 5, valid = True, error = 0.16228781917646873
-> C0*x**2*y*z**2 + C1*x + C2, p = 3.6887880192125393e-09, parse trees = 1, valid = True, error = 0.0003074489694431312
-> C0*x**2 + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 1.3894241189028874e-05
-> C0*x**3*y**2 + C1*z, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.0005843259153807266
-> C0*x + C1*y*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.016956037138602328
-> C0*x**2*y**2*z + C1*y**3*z, p = 1.1158583758117932e-09, parse trees = 1, valid = True, error = 0.1337281532137158
-> C0*x + C1*y*z + C2, p = 0.00010110501692375042, parse trees = 3, valid = True, error = 2.6452391470081656e-05
-> C0*x*y**2 + C1*x*y*z + C2*x, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.015386074482980391
-> C0*x**3*y**4 + C1, p = 6.032971322511856e-08, parse trees = 1, valid = True, error = 0.0005415523394211551
-> C0*x**3*z + C1, p = 6.0537218531328016e-05, parse trees = 3, valid = True, error = 0.000535322372210202
-> C0*x*z**2 + C1*z, p = 5.7376545177600026e-05, parse trees = 2, valid = True, error = 0.0004819735935604786
-> C0*x*y*z + C1*y*z**3, p = 6.79815667758662e-08, parse trees = 1, valid = True, error = 0.1160133866397351
-> C0*x**2*y + C1*y + C2, p = 1.888608603340801e-05, parse trees = 3, valid = True, error = 5.898750495582363e-05
-> C0*x*y*z + C1*y*z + C2, p = 8.821137557422084e-07, parse trees = 1, valid = True, error = 0.00011700673795722481
-> C0*x**2 + C1*x*z + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 3.82856459035169e-05
-> C0*x*y**2 + C1*y + C2, p = 1.5108868826726406e-06, parse trees = 1, valid = False
-> C0*x**2 + C1*y*z + C2, p = 1.4528932447518728e-05, parse trees = 3, valid = True, error = 9.264087078174334e-05
-> C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5, p = 2.910621829023736e-17, parse trees = 1, valid = False
-> C0*x**2*y**2 + C1*x + C2, p = 1.9943706851278858e-07, parse trees = 1, valid = True, error = 0.0003027638525542254
-> C0*x**2*y**2*z + C1*x*y*z**2 + C2, p = 2.7592134383709796e-10, parse trees = 1, valid = True, error = 0.00044729081509177585
-> C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4, p = 4.74310783563812e-13, parse trees = 1, valid = True, error = 6.464909467768784e-06
-> C0*y*z**2 + C1*y, p = 2.872661362134222e-05, parse trees = 2, valid = True, error = 0.013954619418597743
-> C0*x**2*y**3*z**4, p = 4.935461747927887e-09, parse trees = 1, valid = True, error = 0.16348780441462304
-> C0*x*z**3 + C1*y + C2, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 5.292022357155986e-05
-> C0*x**3 + C1, p = 0.000400181537459405, parse trees = 3, valid = True, error = 0.0005327103705901908
-> C0*x**2*y**3 + C1*y*z, p = 6.215788635315246e-08, parse trees = 1, valid = True, error = 0.046608925285649604
-> C0*x*y + C1*y*z**2 + C2*z + C3, p = 3.9802327585817274e-10, parse trees = 1, valid = True, error = 1.5536175566179716e-05
-> C0*x*y + C1*z**2 + C2*z + C3, p = 2.3238126610709484e-10, parse trees = 1, valid = True, error = 1.8073637166221387e-05
-> C0*x**2*z**3 + C1, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.0005288311359050132
-> C0*x + C1*y + C2*z, p = 0.00014741205811200005, parse trees = 3, valid = True, error = 1.0964495048165849e-05
-> C0*x**2 + C1*x*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 0.08653618372362555
-> C0*x**2*y + C1*y**2 + C2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**3 + C2, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 8.181932649650663e-05
-> C0*x + C1*y**2 + C2*y + C3, p = 1.3489198088501337e-07, parse trees = 2, valid = False
-> C0*x*y**2*z**2 + C1*x + C2, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.000290740796310663
-> C0*y*z**2 + C1*z**2 + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 6.0760973512577945e-05
-> C0*x**2*y**2*z**2 + C1*z**2, p = 8.973566814414341e-09, parse trees = 1, valid = True, error = 0.024709073301822586
-> C0*x**2*y + C1*x, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.02301520486705254
-> C0*x**2*y**2 + C1*x*z + C2*y + C3, p = 3.5802942539415818e-09, parse trees = 1, valid = True, error = 4.46324720414855e-05
-> C0*x*y*z**3 + C1*z, p = 5.150118695141379e-07, parse trees = 1, valid = True, error = 0.0005507577575608016
-> C0*y**2*z**2 + C1, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.0003542363118752344
-> C0*y**3*z + C1, p = 2.7025543987200005e-05, parse trees = 1, valid = False
-> C0*x**2*z + C1*x + C2, p = 2.840564036185056e-09, parse trees = 1, valid = True, error = 0.0002745019021686809
-> C0*x*z + C1*y**2 + C2*y + C3, p = 2.0548061604347912e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*z + C3, p = 4.903910944649774e-06, parse trees = 4, valid = True, error = 4.074682713161578e-06
-> C0*x*y**4*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = True, error = 0.0005364528757784742
-> C0*x**4*y*z**2 + C1*y, p = 8.453472544028734e-09, parse trees = 1, valid = True, error = 0.014041356058565345
-> C0*x*z**4 + C1*z**2 + C2, p = 1.731938097915181e-08, parse trees = 1, valid = True, error = 0.00010496048869597435
-> C0*y*z + C1*z**3 + C2, p = 9.363852172984324e-07, parse trees = 1, valid = True, error = 9.405938465119149e-05
-> C0*x**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 0.16340782452391212
-> C0*y**2*z**3, p = 1.5778549923840007e-05, parse trees = 1, valid = True, error = 0.15190956104901687
-> C0*y*z + C1*y + C2*z + C3, p = 1.8476273574818618e-07, parse trees = 2, valid = True, error = 6.884400658718679e-07
-> C0*z**4, p = 0.00012315672576000003, parse trees = 1, valid = True, error = 0.13432800561705704
-> C0*x*y**4*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = True, error = 0.16291264662037433
-> C0*x*y + C1*y**2*z**3 + C2, p = 1.583570614308413e-08, parse trees = 1, valid = True, error = 9.695715255557077e-05
-> C0*x*y**2 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.014021932820825183
-> C0*x**2*y*z**2 + C1*y**2*z + C2*y*z, p = 3.752530276184532e-11, parse trees = 1, valid = True, error = 0.03644965619244012
-> C0*x*y**2 + C1*x*y*z + C2*x*y, p = 1.96916183966787e-09, parse trees = 1, valid = True, error = 0.07693476835789827
-> C0*x + C1*z**2 + C2, p = 1.2150327214080007e-05, parse trees = 1, valid = True, error = 2.248416348542982e-05
-> C0*x*y*z**2 + C1*y + C2*z + C3, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 1.7825586333396467e-05
-> C0*x**2*y*z + C1*z + C2, p = 2.9266417342512693e-09, parse trees = 1, valid = True, error = 7.349778816704133e-05
-> C0*x*y*z + C1*y, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 0.013893018510512875
-> C0*x*z**2 + C1*x*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.08633686054589108
-> C0*x**2 + C1*x*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = True, error = 0.0004750641204224227
-> C0*x**2*y*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 0.0005771439871511105
-> C0*x + C1*y*z + C2*y + C3, p = 1.5685070171468247e-06, parse trees = 2, valid = True, error = 4.923960297745112e-08
-> C0*x**2*z**2 + C1*x*z + C2*y + C3, p = 2.18912801721995e-10, parse trees = 1, valid = True, error = 4.647384605258956e-05
-> C0*y*z**3 + C1, p = 5.7376545177600026e-05, parse trees = 2, valid = True, error = 0.00027983310877428385
-> C0*x**2*y + C1*x*z + C2, p = 8.853091246110093e-10, parse trees = 1, valid = True, error = 0.00016539989683967945
-> C0*y**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*y*z**2 + C1*z + C2, p = 1.7476253043790977e-06, parse trees = 2, valid = True, error = 1.8600765965962005e-05
-> C0*x**2*y**3*z + C1*x + C2, p = 3.5802942539415818e-09, parse trees = 1, valid = True, error = 0.00031254093083883606
-> C0*y**3*z + C1*y*z + C2*y + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x**2 + C2, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.0004806112178962831
-> C0*x*y*z + C1*y + C2, p = 6.4861305569280024e-06, parse trees = 1, valid = True, error = 4.751131143984242e-05
-> C0*x**3*y**2*z**2 + C1*x*y + C2, p = 1.119900461192334e-12, parse trees = 1, valid = True, error = 0.00010676044178277685
-> C0*x*z**2 + C1*x, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.01675259238834427
-> C0*x**2 + C1*x, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 0.01693297534736009
-> C0*y**2*z + C1*y, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2*z + C3, p = 5.234944179531945e-08, parse trees = 1, valid = True, error = 2.1277695357203706e-08
-> C0*x**2*y**2, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 0.1598848885974872
-> C0*y*z**2 + C1*z, p = 2.8688272588800013e-05, parse trees = 1, valid = True, error = 7.493154965463655e-05
-> C0*x*y*z + C1*z**2 + C2, p = 5.234944179531943e-08, parse trees = 1, valid = True, error = 0.00010555161747767581
-> C0*x*y*z**3, p = 4.733564977152003e-05, parse trees = 3, valid = True, error = 0.16001001664035602
-> C0*x**6*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 0.0005416808388896321
-> C0*x**2*z + C1*y**2*z, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 0.09803419393986267
-> C0*x + C1*y**2*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*z + C2, p = 1.126967149760349e-06, parse trees = 2, valid = True, error = 6.708792173425686e-05
-> C0*x**3*y**3*z**2 + C1, p = 8.453472544028734e-09, parse trees = 1, valid = True, error = 0.0005415865065174591
-> C0*x**2*z**2 + C1*y + C2, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 5.916833330182142e-05
-> C0*y**2 + C1*y*z, p = 5.4051087974400024e-05, parse trees = 2, valid = False
-> C0*x**3*y + C1*x*y**2*z, p = 8.204840998616124e-09, parse trees = 1, valid = True, error = 0.1525225960017961
-> C0*x**2*y + C1*x**2*z**2 + C2, p = 1.536995008005225e-08, parse trees = 1, valid = True, error = 0.000446646809329189
-> C0*x**2*z**2 + C1*x*y, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 0.10047789724303166
-> C0*x**2*y + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 0.013965317387522262
-> C0*x*y*z**2 + C1*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 0.0005086121319241946
-> C0*x + C1*y*z**2 + C2*y, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.0025829986803993024
-> C0*y**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*x**2 + C2*y*z + C3, p = 5.016751706129053e-10, parse trees = 1, valid = True, error = 9.107175878277868e-05
-> C0*x**2 + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.0018575350253382395
-> C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y, p = 6.427344244675929e-11, parse trees = 1, valid = True, error = 0.0025760128242112456
-> C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4, p = 6.847497167012697e-14, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 0.08742817243307968
-> C0*x*y**3*z**4 + C1*z, p = 1.2204050867603506e-09, parse trees = 1, valid = True, error = 0.0005837399987263169
-> C0*x*y + C1*z**2, p = 2.7844499865600016e-05, parse trees = 1, valid = True, error = 0.01440549493302561
-> C0*z**2 + C1*z + C2, p = 5.2160495616000025e-05, parse trees = 1, valid = True, error = 2.144375575618169e-05
-> C0*x*y*z**4, p = 2.1458827896422413e-06, parse trees = 1, valid = True, error = 0.16211936522709772
-> C0*x*z + C1*x + C2*y + C3*z, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 4.156906520222351e-06
-> C0*x**2*y**2 + C1, p = 7.869202513920003e-05, parse trees = 3, valid = True, error = 0.000529525675507786
-> C0*x + C1*y*z + C2*z + C3, p = 1.6038431922585608e-06, parse trees = 1, valid = True, error = 2.8312316524974583e-08
-> C0*x*y**3, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 0.15187299694699732
-> C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4, p = 2.8896489827303353e-11, parse trees = 1, valid = False
-> C0*x*z**2 + C1*z + C2, p = 6.885185421312004e-06, parse trees = 1, valid = True, error = 7.307256605676673e-05
-> C0*x*y**2*z**3 + C1, p = 1.1996747078094036e-07, parse trees = 1, valid = True, error = 0.0005296560909114823
-> C0*x**2 + C1*x*z + C2, p = 6.4861305569280024e-06, parse trees = 1, valid = True, error = 0.0001674990982159518
-> C0*x**2*y*z**2 + C1, p = 8.821137557422087e-07, parse trees = 1, valid = True, error = 0.000531364856051863
-> C0*x**2 + C1*z**2 + C2*z, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 1.3236497169133541e-05
-> C0*x**2 + C1*x*y*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = True, error = 0.000288654161242822
-> C0*x**2*y**2*z**2 + C1, p = 4.851625656582148e-07, parse trees = 1, valid = True, error = 0.0005395349702814717
-> C0*x**2*y**2*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = True, error = 0.16335110612359488
-> C0*x + C1*y + C2*z + C3, p = 2.830311515750401e-06, parse trees = 1, valid = True, error = 6.930015290206372e-07
-> C0*x**2*y*z**3, p = 2.0827685899468813e-06, parse trees = 1, valid = True, error = 0.1631664482968934
-> C0*x*y**3*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 0.0005228536536018174
-> C0*x**2*y**3, p = 1.4426871275520007e-05, parse trees = 1, valid = True, error = 0.16204738258823512
-> C0*x**2*y + C1*x*y**2*z, p = 6.215788635315246e-08, parse trees = 1, valid = True, error = 0.14529746155621967
-> C0*x*y**3*z**2 + C1*x*y*z, p = 1.1496722659879079e-09, parse trees = 1, valid = True, error = 0.1381980439379111
-> C0*y**2 + C1*y*z + C2, p = 3.73601120079053e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.009237096379672054
-> C0*x*y + C1*y**2, p = 2.6230675046400012e-05, parse trees = 1, valid = False
-> C0*x*z**2 + C1*y, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 0.013281274867773942
-> C0*x*y**2 + C1*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = True, error = 0.00036539075835975634
-> C0*x**2*z**2 + C1*y**2 + C2*z, p = 1.5835706143084127e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2, p = 7.806248893808646e-06, parse trees = 2, valid = True, error = 0.00025763525855312556
-> C0*x**2*z + C1*x*y**4*z**2, p = 1.5175673911040386e-10, parse trees = 1, valid = True, error = 0.15535072790919943
-> C0*x*z + C1*y*z + C2, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 7.351804957081654e-05
-> C0*x*y + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 0.08745872610986315
-> C0*x*y + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 1.9211013387714846e-05
-> C0*x + C1*y**3, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z + C1*z**2 + C2, p = 2.1812267414716428e-07, parse trees = 1, valid = True, error = 9.977343276717477e-05
-> C0*x**4*y*z, p = 1.962054493470721e-06, parse trees = 1, valid = True, error = 0.16346962709753443
-> C0*x**2*y*z + C1*x, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 0.02435494008570948
-> C0*x*z + C1*x + C2*y + C3, p = 1.1835683484104399e-08, parse trees = 1, valid = True, error = 2.9199945472676482e-06
-> C0*x*y*z + C1*x*y + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 5.777172018323601e-05
-> C0*y**3 + C1*y + C2*z + C3, p = 1.5623102199017813e-09, parse trees = 1, valid = False
-> C0*x**2*y**4, p = 1.904347008368641e-06, parse trees = 1, valid = True, error = 0.16292218013809287

Final score:
model: -7.99956390808682*z**3 - 1.53601467156585                             ; error: 0.0001397548623323997
model: -5.7148001930335*z                                                    ; error: 0.0005854182301205291
model: -3.95297726508033*y*z - 1.66964919201431                              ; error: 0.00011761296748620813
model: -1.57274948371399*y - 1.6984443201067                                 ; error: 5.917184352635108e-05
model: -10.0*x - 0.737763726995786                                           ; error: 0.0003139859304245244
model: -2.78995459225087*z - 0.972763485769189                               ; error: 7.442014682550424e-05
model: -9.99950425785277*x - 2.259835935904*z + 0.004315332254472            ; error: 1.1024922763906035e-05
model: 0.91302216816566*x**2*z + 9.99289694817585*y*z - 5.18326126418026*y - 1.81763415342223; error: 6.994710209911979e-07
model: 2.01186935261466*y - 6.49049181175232*z                               ; error: 9.678591520818693e-05
model: -9.98806942156656*x*y - 1.07110761054772*y*z - 1.68391346480288       ; error: 7.758805007432144e-05
model: 9.99926406051845*y*z - 5.17693529207158*y - 1.81474120815262          ; error: 6.99156726754197e-07
model: -9.99971061873407*x - 1.22892893571471*y - 0.586449980929467          ; error: 6.89237084118446e-06
model: -9.98812739173457*x*y**2 - 1.83551117142726                           ; error: 0.00044173238207742186
model: -10.0*x*z - 1.50914181904782                                          ; error: 0.0002036687394653022
model: -9.9660022626763*x*z - 2.34760229412141*z**2 - 1.23617066114214       ; error: 6.896788863208552e-05
model: -9.99627756053409*x*y - 1.73934628979052                              ; error: 0.00010679176148363961
model: 9.46542347044633*x**2*y**2 - 2.76359732919796*z - 0.986707424271126   ; error: 7.285209381120745e-05
model: -9.90323600467821*x*y - 0.866935915068871*z - 1.4608127712664         ; error: 6.685456481453186e-05
model: -9.9909800511087*x*z - 1.56695241389609*z - 0.995120889598602         ; error: 5.370521313996089e-05
model: -9.97768853937821*x**2*z**2 - 1.87368777698265                        ; error: 0.0005140418137863554
model: -10.0*x*y*z - 10.0*x - 0.669422153620086                              ; error: 0.0001501168651373444
model: -4.24488336051963*z**2 - 1.39416456041272                             ; error: 0.00010754524162274614
model: -9.99828292391353*x - 6.76701154606305*z**3 - 0.438836879416296       ; error: 3.52239730340303e-05
model: -9.99295820231012*x**2*z - 1.84485466231193                           ; error: 0.0004895415891429798
model: -6.95019212771748*y + 9.99404108270723*z - 4.31624175502725           ; error: 2.1986655541499223e-05
model: 6.03696167757571*y*z - 6.78264358336631*z                             ; error: 2.814974222637844e-05
model: -10.0*x - 6.21607795818244*z**2                                       ; error: 0.00021168258996082378
model: -9.97424550203264*x*z**2 - 9.99959767057438*x - 2.1724465320648*y*z - 0.48111892885352; error: 2.1510328360285772e-05
model: -9.46652655642306*x**2*y*z**3 - 9.88843808297964*x - 0.749543123590287; error: 0.0003124544745564321
model: 3.9977383782277*x*y**2*z**2 - 1.89304601422878                        ; error: 0.0005526966355926497
model: -9.07453616106583*y*z**2 - 1.66842287145066                           ; error: 0.000164475602055171
model: 9.99976367005938*z**2 - 9.30260651214936*z                            ; error: 2.2772302784976933e-05
model: -9.99957939325005*x - 2.24662775557629*z                              ; error: 1.1032970495426893e-05
model: -4.94269915936606*y + 9.99984089514345*z**2 - 2.44462133980511        ; error: 5.162855104678051e-06
model: 9.98063238298793*x*y*z - 3.55040612608725*z - 0.787403076003288       ; error: 6.4987686653757e-05
model: -10.0*x**2 - 5.31388764064666*z                                       ; error: 0.00047104235816479645
model: -9.94846090120849*x**2 - 9.9919456308609*x - 9.87755606927277*y**2*z - 0.429136763872701; error: 6.511320547212244e-05
model: -0.176316688476065*x**4*y**5*z**2 - 1.88913411267166                  ; error: 0.0005416843840248686
model: -9.99605616030289*x*y*z - 1.82115444702137                            ; error: 0.0003355239373767496
model: -9.99894345950116*x*y - 9.9854538830645*x*z + 0.353544980381694*z - 1.47993460744279; error: 4.772524320884296e-05
model: 4.27695634064454*x**3*z**2 - 5.72369765531289*z                       ; error: 0.0005849408780007773
model: -9.90992801426147*x**2 - 1.75675662613873                             ; error: 0.00048647823639504437
model: -9.29878950670387*x*y**3*z**5 - 9.99812581820985*x - 0.737540956884406; error: 0.00031328896415991613
model: -9.9988832546196*x**2 - 9.99954975251818*x - 1.16340198637889*y - 0.460490106589975; error: 2.354272041100313e-06
model: -9.92461624447808*x**2*z - 2.67976644575569*z - 0.965654981529189     ; error: 6.956687940213952e-05
model: 9.9995260257762*y*z - 9.55979823224665*z + 0.688175724654612          ; error: 9.075049269132226e-06
model: -9.9978802823726*x**2 - 1.48962664896899*y - 1.57380849250703         ; error: 4.366181372119701e-05
model: -9.94989782334057*x**2 - 10.0*x - 0.604646280437961                   ; error: 0.00027769021006211905
model: 9.9354167141014*x**2*y - 5.76540690025922*z                           ; error: 0.0005348932559365641
model: 10.0*x*z**3 - 5.87443899014934*z                                      ; error: 0.0005121382066851722
model: -9.92834317129986*x**2*y - 1.87021630555285                           ; error: 0.0004710562164848966
model: 9.98372316330717*x*y - 6.15035091265407*z                             ; error: 0.00020945782814908874
model: -9.97463750571572*x*z**2 - 9.99360902221016*x - 0.603937582248413     ; error: 0.0001517498132055521
model: -8.99661552712783*x**3*y**2*z - 1.88871930767048                      ; error: 0.0005410124033510878
model: -8.90298684321495*x**4*z - 1.88876436080821                           ; error: 0.0005409684903517486
model: 9.99956503660343*x*y**2 - 3.18186678401038*z - 0.891458585894713      ; error: 5.501838214085851e-05
model: -9.95448883898307*x*y**2*z - 1.86748041349903                         ; error: 0.00048691237407148065
model: -8.77024622360207*x*z - 4.70229774132519*z                            ; error: 0.0005838470004466494
model: 9.89248667131871*x**3*y**2 - 9.99955783191252*x - 1.23947601356798*y - 0.585742592107763; error: 6.825675171677637e-06
model: -9.99806942728036*x*y - 9.99823219502946*x - 0.589362200526785        ; error: 1.2744807015243992e-05
model: -9.77400081587718*x**3*y - 10.0*x*z - 1.50699187450131                ; error: 0.00019927792191097037
model: -9.96844155379542*x*y**2*z**2 - 9.95039764647207*x*y**2 - 1.82704114531612; error: 0.0004212423179828533
model: -9.99144246409945*x**2 - 2.6817547877265*z - 0.874695514258329        ; error: 5.6079405702358796e-05
model: -9.99128829826919*x*z**2 - 1.7546227434395                            ; error: 0.0003329026758693956
model: -9.98742030833118*x**2*z - 9.94278671445409*x**2 - 9.99720973626411*x*z - 1.33159113909465; error: 0.00014002938840169184
model: -9.90896375903883*x*y**2 - 9.98875683044083*x*y*z - 1.77110648511338  ; error: 0.0002754839150819755
model: -8.05082548538424*x*y - 9.92634124462084*x*z - 1.394753069583         ; error: 4.8886283035402074e-05
model: -9.99729767471731*x - 2.72371139233171*y + 4.40771724907617*z**2 - 0.914682462861063; error: 2.2554639847605614e-07
model: 9.98668736029692*x*y**2 - 5.84614034097249*z                          ; error: 0.0004933001164768787
model: 6.36597485716351*x**3*y*z**3 - 2.79247397589463*z - 0.972482681441798 ; error: 7.438493870458535e-05
model: -9.99333573080168*x*y**2*z - 9.99666793549095*x - 0.716097203091031   ; error: 0.00026623232298188194
model: -9.71673640855146*x*y**3*z**2 - 1.8864978309634                       ; error: 0.0005324611575818888
model: -9.78181100195038*x*y*z - 9.99904821275365*x*y - 1.68075912440835     ; error: 7.741008634534635e-05
model: -9.98013556800064*x*z - 6.29133110018622*y + 9.9997002019243*z - 4.01856966677506; error: 1.553871472761463e-05
model: 9.58513944403861*x**2*y*z - 1.59816050253571*y - 1.70141421563121     ; error: 5.793958723415254e-05
model: -9.999527140258*x*z - 9.99833384838576*x - 0.358029602486114          ; error: 6.876998578528605e-05
model: -9.94108024967265*x*y*z**2 - 1.85972457444124                         ; error: 0.00045299912824585387
model: 9.99495092977578*x*y**2 - 9.99521078624494*x - 2.62978432424782*z + 0.076848845734722; error: 4.399259912681207e-06
model: 9.97966704751163*x*y**2*z**2 - 1.61858821234455*y - 1.70132184921791  ; error: 5.5393783856922326e-05
model: 9.66613088530808*x*y - 9.99901069174096*x - 2.27446683492321*y - 0.599907815984284; error: 6.331395363265954e-06
model: 9.96762572689763*x*y**2*z - 9.99988042945803*x - 1.33221890204848*y - 0.593268989770189; error: 4.272287541933772e-06
model: -9.14492446264511*x**2*y**3 - 1.88785428738384                        ; error: 0.0005364080563465289
model: -9.99526452968482*x**2 - 9.99971599862691*x - 2.14966363878452*z + 0.101720067871808; error: 4.761079396105986e-06
model: -10.0*x*z - 6.28136499035426*y**2*z - 1.39831076358677                ; error: 0.00012585566498689782
model: 9.96757087195247*x*y**2 - 4.56384447511575*y*z - 1.68282788723157     ; error: 9.980991093441333e-05
model: -9.9233173958475*x*y - 9.9979775272188*x - 0.299515278055716*z - 0.493444721318127; error: 8.401697631906033e-06
model: -9.97371531518029*x**3 - 2.75335680476792*z - 0.969476984963307       ; error: 7.129565238276753e-05
model: 9.98423945237674*y**2*z**2 - 1.97330411993904*y - 1.72350035542017    ; error: 2.841293262387813e-05
model: -9.98069986290369*x*z - 0.886841874118499*y - 1.40231747282867        ; error: 4.641780593107613e-05
model: -9.98315641162124*x*z**3 - 1.8391689283146                            ; error: 0.0004354745006535244
model: -9.99884809084855*x - 7.57680562488902*y*z**2 - 0.551404779860473     ; error: 4.564184311166168e-05
model: -9.90194847712764*x**3 - 9.99798873866929*x*y - 1.72426416969976      ; error: 0.00010206673399749009
model: 9.99978906640163*x*y - 2.63099005445027*y - 1.71446252091295          ; error: 5.65260195018708e-05
model: -8.19276469774608*x**3*y**2*z**2 - 1.88929787239074                   ; error: 0.000541402500963477
model: -8.51928797497422*x**2*y**2*z**4 - 1.88914285913971                   ; error: 0.0005411562178497204
model: -8.96646673999345*x**4*y**2*z - 1.88912956586179                      ; error: 0.000541607265315736
model: 9.82641201417701*x*y - 9.99922151092008*x - 1.05487171688613*y - 2.28922739689033*z; error: 1.052557477913309e-05
model: -9.99493588421607*x**2*y*z - 1.88112074871619                         ; error: 0.0005154033674143872
model: 9.66010342863173*x**2*z**2 - 5.76426791704447*z                       ; error: 0.0005744554765282492
model: 0.262638962040128*x*z**2 - 9.99523401658882*x - 2.25801912215071*z    ; error: 1.1053394674048857e-05
model: -9.99846377695578*x*y*z**3 - 1.87698315875961                         ; error: 0.0005029259740322638
model: -9.78345579388074*x**3*y - 1.88703682275831                           ; error: 0.0005338158386599721
model: 9.99747613555875*x*y*z - 7.35485105435799*y + 9.99264609061499*z - 4.32958008916438; error: 1.5534819333132906e-05
model: 9.94066833983812*x*y**2*z - 1.65115685801436*y - 1.70716155787128     ; error: 5.101801365619164e-05
model: 9.9904888675054*x*y*z**2 - 1.72161461972408*y - 1.7075318124886       ; error: 5.1239189300631995e-05
model: -8.88888348245668*x**2*z**2 - 10.0*x*z - 10.0*x - 2.88644078532805*z**2; error: 5.638780244571598e-05
model: -9.96201390249928*x**2*y - 3.94466489237004*z**2 - 1.41161747988998   ; error: 0.00010367058470902512
model: -9.60605261190267*x**3 - 3.95638074754995*y*z - 1.6551422385198       ; error: 0.00011347330775734454
model: 9.39030443720242*x**2*y**2*z**2 - 5.72039690018809*z                  ; error: 0.0005828967864707832
model: 9.99568841538197*x*y*z - 5.90347406735488*z                           ; error: 0.00041185389214480844
model: 9.22757560002141*x**2*y*z - 8.84833129219495*x**2*z - 5.62165989652263*z; error: 0.0005658567749726342
model: -9.99030213756251*x**2 - 4.05402023949784*z**2 - 1.28291233126389     ; error: 8.399373368460002e-05
model: -9.98990986340559*x*y*z**2 - 10.0*x - 0.708012575623152               ; error: 0.00023998070005128535
model: -9.99655220231782*x + 0.106681823352639*y*z - 2.26643904321164*z      ; error: 1.089131836730186e-05
model: -9.89727444314978*x**2*z - 10.0*x*y - 1.69609651755093                ; error: 8.970450844898237e-05
model: -8.86720266837206*x**2*y**2*z - 1.887108094775                        ; error: 0.0005358541890025003
model: 6.81800446736944*x*y*z + 9.95112032717025*y*z - 9.99967927782349*z + 0.789940909630853; error: 7.074022986154383e-06
model: -9.66010449620968*x**3*z - 4.21140709854399*z**2 - 1.39290153543854   ; error: 0.00010634819029860186
model: -3.44804977932128*x + 9.99745821025278*y*z**2 - 5.30053683539555*z    ; error: 6.386298248307757e-06
model: -9.99592993466615*x*y*z - 10.0*x - 9.94668777650189*y**2*z**2 - 0.594280082042609; error: 6.811011427222436e-05
model: 9.96755317949767*x*y**2 + 4.9084734107813*y*z - 9.98795545537337*z**2 - 1.04308030617134; error: 7.766092868620763e-05
model: -9.15968596627192*x**2*y*z**2 - 9.91586532082698*x - 0.743966067129093; error: 0.0003074489694431312
model: -9.95451181408768*x**2 - 6.88826886731544*y + 9.99963938957066*z - 4.1913188081997; error: 1.3894241189028874e-05
model: 9.73196853387723*x**3*y**2 - 5.71480487162535*z                       ; error: 0.0005843259153807266
model: -9.99712085295433*x - 3.24079367130702*y*z - 0.556222365918029        ; error: 2.6452391470081656e-05
model: -7.50670188285537*x**3*y**4 - 1.88884982734881                        ; error: 0.0005415523394211551
model: -9.68281364917235*x**3*z - 1.88457865300136                           ; error: 0.000535322372210202
model: 9.95084798684971*x*z**2 - 6.12672679016907*z                          ; error: 0.0004819735935604786
model: 4.80579047476614*x**2*y - 1.61353122123702*y - 1.70131657676456       ; error: 5.898750495582363e-05
model: -9.82467590283351*x*y*z - 2.90295973713816*y*z - 1.66507796579597     ; error: 0.00011700673795722481
model: -9.99962701387864*x**2 - 9.99886254734569*x*z - 1.47149219245098*z - 0.892121641610963; error: 3.82856459035169e-05
model: -9.98673311882757*x**2 - 3.82321083676259*y*z - 1.54308503750935      ; error: 9.264087078174334e-05
model: -9.87553773048788*x**2*y**2 - 10.0*x - 0.731756959764489              ; error: 0.0003027638525542254
model: -9.51289375623709*x**2*y**2*z - 9.98840131832262*x*y*z**2 - 1.85729837268344; error: 0.00044729081509177585
model: 1.72753488365126*x**3*y + 9.99757558473602*x**2*y*z - 9.99993182767365*x - 1.27485082727233*y - 0.588574891142926; error: 6.464909467768784e-06
model: 9.97056600491829*x*z**3 - 1.743556283126*y - 1.72773927091264         ; error: 5.292022357155986e-05
model: -9.7811146152845*x**3 - 1.87399260952889                              ; error: 0.0005327103705901908
model: -9.83586932439659*x*y + 9.99190666975639*y*z**2 - 3.61403649087827*z - 0.805389309117594; error: 1.5536175566179716e-05
model: -9.97243794353714*x*y + 9.98851786459463*z**2 - 7.15657500540007*z - 0.558331172597331; error: 1.8073637166221387e-05
model: -9.94164893455206*x**2*z**3 - 1.88309167969732                        ; error: 0.0005288311359050132
model: -9.99980868501719*x - 0.0248710343568637*y - 2.23708896026561*z       ; error: 1.0964495048165849e-05
model: -9.99125228753456*x*y - 2.0315554148142*z**3 - 1.65355093518549       ; error: 8.181932649650663e-05
model: -10.0*x*y**2*z**2 - 10.0*x - 0.728438892724134                        ; error: 0.000290740796310663
model: 9.98821644498913*y*z**2 - 8.55004948444491*z**2 - 1.13601256430459    ; error: 6.0760973512577945e-05
model: 9.70024885331452*x**2*y**2 - 9.99984350429*x*z - 0.909697818056867*y - 1.40331041475695; error: 4.46324720414855e-05
model: 9.93203787664387*x*y*z**3 - 5.75244022265366*z                        ; error: 0.0005507577575608016
model: -9.99724605390212*y**2*z**2 - 1.80930642463224                        ; error: 0.0003542363118752344
model: -9.95273807710049*x**2*z - 10.0*x - 0.693593778390541                 ; error: 0.0002745019021686809
model: -9.99367701089433*x*z - 9.99820494072007*x - 1.05247164414419*z - 0.012309344077448; error: 4.074682713161578e-06
model: -7.67993750226812*x*y**4*z - 1.88800039601029                         ; error: 0.0005364528757784742
model: 9.96936710914156*x*z**4 - 4.54420300170018*z**2 - 1.37922351602943    ; error: 0.00010496048869597435
model: -8.70984897862743*y*z + 9.99726778859811*z**3 - 1.84451410025897      ; error: 9.405938465119149e-05
model: 9.9991453311878*y*z - 4.98935746390263*y - 0.351099769936705*z - 1.72286661464302; error: 6.884400658718679e-07
model: -9.9926972658795*x*y - 9.86223554948207*y**2*z**3 - 1.70829510263738  ; error: 9.695715255557077e-05
model: -9.9892590940773*x - 3.49809408506885*z**2 - 0.330583076686377        ; error: 2.248416348542982e-05
model: 9.99142961211741*x*y*z**2 - 7.11524478392796*y + 9.99996034561054*z - 4.32421637497632; error: 1.7825586333396467e-05
model: 9.67550377852551*x**2*y*z - 2.89665594160269*z - 0.945073146142668    ; error: 7.349778816704133e-05
model: -9.95473949788966*x**2 - 9.32319776795254*x*y**2*z**3 - 1.7524570198119; error: 0.0004750641204224227
model: 9.69026290951171*x**2*y*z**2 - 5.7243304183112*z                      ; error: 0.0005771439871511105
model: -9.98553491975684*x + 3.45772989892736*y*z - 2.48712078857483*y - 0.627333302043241; error: 4.923960297745112e-08
model: -7.96330773596896*x**2*z**2 - 9.94542493829638*x*z - 0.83865191433951*y - 1.39674959131765; error: 4.647384605258956e-05
model: -10.0*y*z**3 - 1.7796124639181                                        ; error: 0.00027983310877428385
model: -9.89452331051089*x**2*y - 9.99946630673146*x*z - 1.49137456623955    ; error: 0.00016539989683967945
model: 9.99387650094699*y*z**2 - 5.53728618159752*z - 0.317304657743777      ; error: 1.8600765965962005e-05
model: -9.66481699846488*x**2*y**3*z - 9.96611875319942*x - 0.740921318392158; error: 0.00031254093083883606
model: -9.99323283191479*x**2*y**2*z - 9.81039038069225*x**2 - 1.75560836920829; error: 0.0004806112178962831
model: 9.93895566939194*x*y*z - 1.94564387779352*y - 1.71603833829013        ; error: 4.751131143984242e-05
model: -3.80257696483298*x**3*y**2*z**2 - 9.99710691852931*x*y - 1.73874441117045; error: 0.00010676044178277685
model: -9.99367397719905*x + 8.22368001365456*z**2 - 7.48650580489791*z + 0.760601561018968; error: 2.1277695357203706e-08
model: 9.99973574554306*y*z**2 - 6.47197858938454*z                          ; error: 7.493154965463655e-05
model: 9.91247815199569*x*y*z - 5.3817147801724*z**2 - 1.32464669635335      ; error: 0.00010555161747767581
model: -1.85453566674949*x**6*z - 1.88930824886475                           ; error: 0.0005416808388896321
model: 9.79819988435646*x*y*z**2 - 3.09099828073404*z - 0.901192211812623    ; error: 6.708792173425686e-05
model: -8.27718301392422*x**3*y**3*z**2 - 1.88928035711522                   ; error: 0.0005415865065174591
model: 4.99119923618718*x**2*z**2 - 1.57662793983153*y - 1.70490561220179    ; error: 5.916833330182142e-05
model: -9.85927480802325*x**2*y - 9.75693061538903*x**2*z**2 - 1.8551410640011; error: 0.000446646809329189
model: 9.97066944856463*x*y*z**2 - 5.79790683732845*z                        ; error: 0.0005086121319241946
model: -8.49753977060625*x**2*z**2 - 9.98364253496343*x**2 - 3.75132065169784*y*z - 1.5346138981225; error: 9.107175878277868e-05
model: 9.11864083295791*x*y**3*z**4 - 5.71823368451672*z                     ; error: 0.0005837399987263169
model: 9.99989751361216*z**2 - 9.16191745012574*z - 0.0473140109326431       ; error: 2.144375575618169e-05
model: -9.9979537746089*x*z - 9.98839647003411*x + 0.0261641732042772*y - 1.10359823881443*z; error: 4.156906520222351e-06
model: -9.25139450354668*x**2*y**2 - 1.88358369568077                        ; error: 0.000529525675507786
model: -8.18109481212457*x + 7.61793995486024*y*z - 7.53976982055997*z + 1.09688543660462; error: 2.8312316524974583e-08
model: 9.80555715123683*x*z**2 - 3.50796939841192*z - 0.86912556283617       ; error: 7.307256605676673e-05
model: -9.80206282138641*x*y**2*z**3 - 1.88536878860253                      ; error: 0.0005296560909114823
model: -9.99637537048971*x**2 - 9.99897056533042*x*z - 1.37536023190591      ; error: 0.0001674990982159518
model: -9.79374422975011*x**2*y*z**2 - 1.88594135967215                      ; error: 0.000531364856051863
model: -9.99791823695387*x**2 + 9.81083770783302*z**2 - 8.83132295698424*z   ; error: 1.3236497169133541e-05
model: -9.97446167298975*x**2 - 9.99890990102134*x*y*z - 1.68682368664662    ; error: 0.000288654161242822
model: -7.04902830748039*x**2*y**2*z**2 - 1.88857681541752                   ; error: 0.0005395349702814717
model: -9.99919178851216*x - 5.7696001386837*y + 8.45058796719019*z - 2.7974079660576; error: 6.930015290206372e-07
model: -8.70485004884079*x*y**3*z - 1.88373051979498                         ; error: 0.0005228536536018174
model: -9.88776252856721*x*y**2 - 9.97361122748385*y**2*z**3 - 1.80274130645843; error: 0.00036539075835975634
model: -10.0*x**2*y - 10.0*x - 0.718702999901791                             ; error: 0.00025763525855312556
model: -9.99333832544067*x*z - 2.17749945946434*y*z - 1.38806914719265       ; error: 7.351804957081654e-05
model: 9.99586216147219*x*y - 8.04096162502737*y + 9.99932860913796*z - 4.33040921793841; error: 1.9211013387714846e-05
model: -9.98638709836613*x**2*z - 4.02260610004005*z**2 - 1.37614813897615   ; error: 9.977343276717477e-05
model: -9.99261650022255*x*z - 9.99595487542152*x - 0.565516153043776*y - 0.288567878613458; error: 2.9199945472676482e-06
model: 9.9181572257315*x*y*z - 9.95576959274089*x*y - 1.54805085993274*z - 1.29994158367546; error: 5.777172018323601e-05
[2] [1, 3]
1082-883


model: -9.9979537746089*x*z - 9.98839647003411*x + 0.0261641732042772*y - 1.10359823881443*z; error: 4.156906520222351e-06
model: -9.99261650022255*x*z - 9.99595487542152*x - 0.565516153043776*y - 0.288567878613458; error: 2.9199945472676482e-06

# dy/dt = x*(\rho-z) - y
sigma = 1.3  # 1 # 0 
rho = -15 # 1 # 0
beta = 3.4  # 1 # 

x*(-15-z) -y = -15*x-x*z-y
