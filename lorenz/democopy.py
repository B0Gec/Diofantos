# %% # 0.) import modules and set a random seed
import numpy as np
import sympy as sp
from model import Model
from odes import example_tB_data  # import datasets T, X and Y
from parameter_estimation import fit_models, model_error
from generate import generate_models    
from generators.grammar import GeneratorGrammar
np.random.seed(2)

# 1.) construct dataset
T, Ys, Xs, _, a = example_tB_data()  # dataset constructed in odes.py
X = np.array([Xs]).T; Y = np.array([Ys]).T  # convert in conformed shape

# 2.) generate grammar and models:
grammar = GeneratorGrammar("""S -> S '+' T [0.4] | T [0.6]
                            T -> V [0.6] | 'C' "*" V [0.4]
                            V -> 'x' [0.5] | 'y' [0.5]""")
symbols = {"x":['y', 'x'], "start":"S", "const":"C"}
symbols = {"x":['x'], "start":"S", "const":"C"}
models = generate_models(grammar, symbols, strategy_parameters = {"N":5})
print(models)
# fit_models(models)

# # 3.) discover the right equation 😊
# # fit_models(models, X, Y, T)
fit_models(models, X, Y)
# print("202 pred")
# model = models[0]
# model2 = models[1] 
# print(model2, model2.params, "model2") 
# print(model, model.params, "model") # model_error(model, [], X, Y) 
# print("303 po tem")
# def lambd (model2):
#     lamb_expr = sp.lambdify(model2.sym_vars, model2.full_expr(model2.params), "numpy")
#     # print(model2.sym_vars, model2.full_expr(model2.params), "sym_vars and full_expr")
#     return lamb_expr
# print(lambd(model))
# print(lambd(model2))
# lamb_expr = sp.lambdify(model2.sym_vars, model2.full_expr(model2.params), "numpy")
# print(lamb_expr)
# lambd(model)(x=1)
# print(lambd(model)(x=1))
# print(lambd(model2)(x=1))
# print(lambd(model)(*X.T))
# print(X.shape, "shape")
# # print(model2.evalua)
# testY = model.evaluate(X, model.params)
# # testY = model2.evaluate(np.array([[1]]), model2.params)
# res = np.mean((Y-testY)**2)
# if np.isnan(res) or np.isinf(res) or not np.isreal(res):
#     print(model.expr, model.params, model.sym_params, model.sym_vars)
#     # return 10**9
# print( res)
# print(model.params)




# 4.) print models' results
print("\n", models, "\n\nFinal score:")
for m in models:
    print(f"model: {str(m.get_full_expr()):<30}; error: {m.get_error():<15}")
# print("\n While dataset was generated by diff. eq. ẏ = 0.4·y + x   "
#     + "\U0001F60A")

# # %% # 5.) check solution of ODE graphically
# from parameter_estimation import ode
# import matplotlib.pyplot as plt 
# # %%
# our_win_model = [m for m in models][2]
# odeY = ode([our_win_model], [our_win_model.params], T, X, Y[0])
# plt.plot(T, Y,"r-")
# plt.show()
# plt.plot(T, odeY[0], "k--")

# models = generate_models(grammar, symbols, strategy_parameters = {"N":2})
# model = models[0]
# print(model)
# fit_models(models, X, Y, T)
# fit_models()