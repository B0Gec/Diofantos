# 0.) import modules and set a random seed
import numpy as np
from odes import example_tB_data  # import datasets T, X and Y
from parameter_estimation import fit_models
from generate import generate_models    
from generators.grammar import GeneratorGrammar
np.random.seed(2)

# 1.) construct dataset
T, Ys, Xs, _, a = example_tB_data()  # dataset constructed in odes.py
X = np.array([Xs]).T; Y = np.array([Ys]).T  # convert in conformed shape

# 2.) generate grammar and models:
grammar = GeneratorGrammar("""S -> S '+' T [0.4] | T [0.6]
                            T -> V [0.6] | 'C' "*" V [0.4]
                            V -> 'x' [0.5] | 'y' [0.5]""")
symbols = {"x":['y', 'x'], "start":"S", "const":"C"}
models = generate_models(grammar, symbols, strategy_parameters = {"N":20})

# 3.) discover the right equation 😊
fit_models(models, X, Y, T)
   
print("\n", models, "\n\nFinal score:")
for m in models:
    print(f"model: {str(m.get_full_expr()):<30}; error: {m.get_error():<15}")
print("\n While dataset was generated by diff. eq. ẏ = 0.4·y + x   "
    + "\U0001F60A")
