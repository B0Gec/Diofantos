# %% # 0.) import modules and set a random seed
import sys
import numpy as np
sys.path += [".", ".."]
from parameter_estimation import fit_models
from generate import generate_models
from generators.grammar import GeneratorGrammar
np.random.seed(2)

B = -2.56; a = 0.4; ts = np.linspace(0.45, 0.87, 1000)
Xs = (ts+B)*np.exp(a*ts); Ys = np.exp(a*ts)
data = np.hstack((ts.reshape(-1, 1), Xs.reshape(-1, 1), Ys.reshape(-1, 1)))
grammar = GeneratorGrammar("""S -> S '+' T [0.4] | T [0.6]
                            T -> V [0.6] | 'C' "*" V [0.4]
                            V -> 'x' [0.5] | 'y' [0.5]""")
symbols = {"x":['y', 'x'], "start":"S", "const":"C"}
models = generate_models(grammar, symbols, strategy_settings={"N":20})
models = fit_models(models, data, target_variable_index=-1, time_index=0, task_type="differential")

# 4.) print models' results
print("\n", models, "\n\nFinal score:")
for m in models:
    print(f"model: {str(m.get_full_expr()):<30}; error: {m.get_error():<15}")
print("\n While dataset was generated by diff. eq. ẏ = 0.4·y + x   ")