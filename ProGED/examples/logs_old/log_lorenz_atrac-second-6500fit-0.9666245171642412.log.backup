["'y'", "'x'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'y' [0.33]
    V -> 'x' [0.33]
    V -> 'z' [0.34]
6500 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*x
Estimating model C0*z
Estimating model C0*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z
Estimating model C0*y*z + C1
Estimating model C0*y + C1
Estimating model C0*x + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*y
Estimating model C0*x + C1*z + C2
Estimating model C0*x**2*z + C1*y*z + C2*y + C3
Estimating model C0*y + C1*z
Estimating model C0*y*z**2
Estimating model C0*x**3 + C1*y
Estimating model C0*x*y + C1*y*z + C2
Estimating model C0*y*z + C1*y + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1
Estimating model C0*x*z + C1
Estimating model C0*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2
Estimating model C0*x + C1*z**3
Estimating model C0*x**2
Estimating model C0*x*z + C1*z**2 + C2
Estimating model C0*x*y + C1
Estimating model C0*x**2*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*z + C2
Estimating model C0*x*z + C1*y
Estimating model C0*x*y + C1*z + C2
Estimating model C0*x**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2
Estimating model C0*y*z
Estimating model C0*x*z + C1*z + C2
Estimating model C0*x*z
Estimating model C0*x**2*z**2 + C1
Estimating model C0*x*y*z + C1*x + C2
Estimating model C0*z**2 + C1
Estimating model C0*z**2
Estimating model C0*x + C1*z**3 + C2
Estimating model C0*x + C1*y**5 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**5 + C2
Estimating model C0*x*z**2
Estimating model C0*x*y**2*z + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x*z
Estimating model C0*x**2*z + C1
Estimating model C0*y + C1*z + C2
Estimating model C0*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z + C2
Estimating model C0*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z + C2
Estimating model C0*y*z + C1*z
Estimating model C0*x*y*z**2 + C1*x
Estimating model C0*x**2*z
Estimating model C0*x + C1*z**2
Estimating model C0*x*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2
Estimating model C0*x**3
Estimating model C0*x*z**2 + C1*x + C2*y*z + C3
Estimating model C0*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z
Estimating model C0*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1
Estimating model C0*x**2*y*z**3 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3 + C1*x + C2
Estimating model C0*x*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1
Estimating model C0*y*z**2 + C1
Estimating model C0*x + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2
Estimating model C0*x*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2
Estimating model C0*x*y**2 + C1*x + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2*y
Estimating model C0*z**2 + C1*z
Estimating model C0*x*y*z + C1*x
Estimating model C0*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1
Estimating model C0*x + C1*z
Estimating model C0*x*y*z + C1*z**4
Estimating model C0*x*y + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2*z
Estimating model C0*x**2*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2
Estimating model C0*y + C1*z**2 + C2
Estimating model C0*x*y*z + C1*z + C2
Estimating model C0*x**2 + C1*z
Estimating model C0*x**2 + C1*x + C2*y**2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x + C2*y**2*z + C3
Estimating model C0*x*y*z**2
Estimating model C0*x**4*y**5*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**5*z**2 + C1
Estimating model C0*x**2 + C1*x*z**2
Estimating model C0*x*y**2 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z + C2
Estimating model C0*x*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2
Estimating model C0*x*y*z + C1
Estimating model C0*x*y + C1*x*z + C2*z + C3
Estimating model C0*x + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3 + C2
Estimating model C0*x**3*z**2 + C1*z
Estimating model C0*x**2*z**3
Estimating model C0*x*y + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2
Estimating model C0*x*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2
Estimating model C0*x**2 + C1
Estimating model C0*x**3*y*z**2 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*y**2
Estimating model C0*z**3
Estimating model C0*x**3*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2
Estimating model C0*x**2 + C1*y
Estimating model C0*x*y**3*z**5 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**5 + C1*x + C2
Estimating model C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1*y + C2
Estimating model C0*x**2 + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x**2 + C1*y + C2
Estimating model C0*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y
Estimating model C0*x**2 + C1*x + C2
Estimating model C0*x**2*y + C1*z
Estimating model C0*x*z**3 + C1*z
Estimating model C0*x**3*y*z + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x
Estimating model C0*x**2*y + C1
Estimating model C0*x*z**3
Estimating model C0*x*y + C1*z
Estimating model C0*y*z**3
Estimating model C0*x*z**2 + C1*x + C2
Estimating model C0*x**3*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z + C1
Estimating model C0*x**4*z + C1
Estimating model C0*x*y**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z + C2
Estimating model C0*x*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1
Estimating model C0*x*z + C1*z
Estimating model C0*x**3*y**2 + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1*x + C2*y + C3
Estimating model C0*x**3*y*z + C1*x*y*z + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x*y*z + C2*y
Estimating model C0*y**2*z + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y*z + C2
Estimating model C0*y + C1*z**2
Estimating model C0*x**3*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2
Estimating model C0*x*y + C1*x + C2
Estimating model C0*y*z + C1*y
Estimating model C0*x**3*y + C1*x*z + C2
Estimating model C0*x**2*z + C1*y*z
Estimating model C0*x*y**2*z**2 + C1*x*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x*y**2 + C2
Estimating model C0*x**2 + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1
Estimating model C0*x*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1
Estimating model C0*x + C1*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3*z**2 + C2
Estimating model C0*x**2*z + C1*x**2 + C2*x*z + C3
Estimating model C0*x*y**2 + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x + C1*y + C2*z**2 + C3
Estimating model C0*x**2*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z
Estimating model C0*x*y + C1*x*z**2 + C2*x
Estimating model C0*y*z**2 + C1*y*z
Estimating model C0*x*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z
Estimating model C0*x**3*y*z**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**3 + C1*z + C2
Estimating model C0*x*y**2*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x + C2
Estimating model C0*x + C1*y*z
Estimating model C0*x*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1
Estimating model C0*x*y*z + C1*x*y + C2
Estimating model C0*y**3 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*z**2 + C2
Estimating model C0*x*z + C1*y*z
Estimating model C0*x**2*y
Estimating model C0*x*z + C1*y + C2*z + C3
Estimating model C0*x**2*y*z
Estimating model C0*x**2*y*z + C1*y + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x**2*y*z + C1*y
Estimating model C0*y**4 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4 + C1*y + C2
Estimating model C0*x*y*z**2 + C1
Estimating model C0*x**2 + C1*x*y*z
Estimating model C0*x*y**2 + C1*x + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2*z + C3
Estimating model C0*x**3*z
Estimating model C0*x*y**2*z**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*y + C2
Estimating model C0*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3
Estimating model C0*x + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2
Estimating model C0*x*y*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2*y + C3
Estimating model C0*x*y + C1*x + C2*y + C3
Estimating model C0*x*y**2*z + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x + C2*y + C3
Estimating model C0*x**2*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2 + C2
Estimating model C0*x**3*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**3
Estimating model C0*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2
Estimating model C0*x*y**4*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1*x + C2
Estimating model C0*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z
Estimating model C0*x*z + C1*x
Estimating model C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5
Estimating model C0*x**2*y**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1
Estimating model C0*x*y*z + C1*x + C2*y
Estimating model C0*x**2 + C1*x + C2*z + C3
Estimating model C0*x*y + C1*x + C2*y**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*x + C2*y**2 + C3
Estimating model C0*x*z + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2*z + C2
Estimating model C0*x*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2
Estimating model C0*x*y + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y
Estimating model C0*x*y + C1*x
Estimating model C0*x**3 + C1*z + C2
Estimating model C0*y**2*z**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*y + C2
Estimating model C0*x**2*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2
Estimating model C0*x**2*z**2 + C1*x
Estimating model C0*x*z + C1*y + C2
Estimating model C0*x*z**3 + C1
Estimating model C0*x + C1*y*z**2 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6
Estimating model C0*x*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z
Estimating model C0*x**3 + C1*x*y + C2
Estimating model C0*x*y + C1*y + C2
Estimating model C0*x**2*z**2
Estimating model C0*x**3*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**4 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**4 + C1
Estimating model C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2
Estimating model C0*x**4*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**2*z + C1
Estimating model C0*x*y + C1*x + C2*y + C3*z
Estimating model C0*x**2*y*z + C1
Estimating model C0*x**2*z + C1*y**3 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**3 + C2*z + C3
Estimating model C0*x*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2
Estimating model C0*x**2*z**2 + C1*z
Estimating model C0*x*z**2 + C1*x + C2*z
Estimating model C0*x**2*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**3 + C2
Estimating model C0*x*y*z + C1*z**2
Estimating model C0*x*y*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1
Estimating model C0*x**3*y + C1
Estimating model C0*x*y + C1*x*z
Estimating model C0*x**4*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**3
Estimating model C0*x*y*z + C1*y + C2*z + C3
Estimating model C0*x*y**2*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y + C2
Estimating model C0*x*y*z**2 + C1*y + C2
Estimating model C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2
Estimating model C0*x**2*y + C1*z**2 + C2
Estimating model C0*x**3*y
Estimating model C0*x**3 + C1*y*z + C2
Estimating model C0*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y + C2
Estimating model C0*x**2*y**2*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*z
Estimating model C0*x**2*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*y
Estimating model C0*x**2*y*z + C1*x**2*z + C2*z
Estimating model C0*x**2 + C1*z**2 + C2
Estimating model C0*x*y**2 + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z
Estimating model C0*x*y*z**2 + C1*x + C2
Estimating model C0*x*y + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y
Estimating model C0*x + C1*y*z + C2*z
Estimating model C0*x**2 + C1*x*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y*z**4
Estimating model C0*x**2*z + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1
Estimating model C0*x*y*z + C1*y*z + C2*z + C3
Estimating model C0*x**3*z + C1*z**2 + C2
Estimating model C0*x**2*z + C1*y
Estimating model C0*x + C1*y*z**2 + C2*z
Estimating model C0*x + C1*y**4 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4 + C2
Estimating model C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z**2 + C3
Estimating model C0*x*y**2 + C1*y*z + C2*z**2 + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2*z**2 + C3
Estimating model C0*x*y + C1*y
Estimating model C0*x**2 + C1*z**2
Estimating model C0*x**2*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z
Estimating model C0*x**2*y*z**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x + C2
Estimating model C0*x**2 + C1*y + C2*z + C3
Estimating model C0*x**3*y**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1*z
Estimating model C0*x + C1*y*z**3
Estimating model C0*x**2*y**2*z + C1*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*y**3*z
Estimating model C0*x + C1*y*z + C2
Estimating model C0*x*y**2 + C1*x*y*z + C2*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2*x
Estimating model C0*x**3*y**4 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**4 + C1
Estimating model C0*x**3*z + C1
Estimating model C0*x*z**2 + C1*z
Estimating model C0*x*y*z + C1*y*z**3
Estimating model C0*x**2*y + C1*y + C2
Estimating model C0*x*y*z + C1*y*z + C2
Estimating model C0*x**2 + C1*x*z + C2*z + C3
Estimating model C0*x*y**2 + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y + C2
Estimating model C0*x**2 + C1*y*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5
Estimating model C0*x**2*y**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x + C2
Estimating model C0*x**2*y**2*z + C1*x*y*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x*y*z**2 + C2
Estimating model C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4
Estimating model C0*y*z**2 + C1*y
Estimating model C0*x**2*y**3*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**4
Estimating model C0*x*z**3 + C1*y + C2
Estimating model C0*x**3 + C1
Estimating model C0*x**2*y**3 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*y*z
Estimating model C0*x*y + C1*y*z**2 + C2*z + C3
Estimating model C0*x*y + C1*z**2 + C2*z + C3
Estimating model C0*x**2*z**3 + C1
Estimating model C0*x + C1*y + C2*z
Estimating model C0*x**2 + C1*x*z
Estimating model C0*x**2*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*z**3 + C2
Estimating model C0*x + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2 + C2*y + C3
Estimating model C0*x*y**2*z**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x + C2
Estimating model C0*y*z**2 + C1*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*z**2
Estimating model C0*x**2*y + C1*x
Estimating model C0*x**2*y**2 + C1*x*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x*z + C2*y + C3
Estimating model C0*x*y*z**3 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*z
Estimating model C0*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1
Estimating model C0*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1
Estimating model C0*x**2*z + C1*x + C2
Estimating model C0*x*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2 + C2*y + C3
Estimating model C0*x*z + C1*x + C2*z + C3
Estimating model C0*x*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z + C1
Estimating model C0*x**4*y*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**2 + C1*y
Estimating model C0*x*z**4 + C1*z**2 + C2
Estimating model C0*y*z + C1*z**3 + C2
Estimating model C0*x**4*z
Estimating model C0*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**3
Estimating model C0*y*z + C1*y + C2*z + C3
Estimating model C0*z**4
Estimating model C0*x*y**4*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z**2
Estimating model C0*x*y + C1*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2*z**3 + C2
Estimating model C0*x*y**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y
Estimating model C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*y**2*z + C2*y*z
Estimating model C0*x*y**2 + C1*x*y*z + C2*x*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y*z + C2*x*y
Estimating model C0*x + C1*z**2 + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*z + C2
Estimating model C0*x*y*z + C1*y
Estimating model C0*x*z**2 + C1*x*z
Estimating model C0*x**2 + C1*x*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**2*z**3 + C2
Estimating model C0*x**2*y*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*z
Estimating model C0*x + C1*y*z + C2*y + C3
Estimating model C0*x**2*z**2 + C1*x*z + C2*y + C3
Estimating model C0*y*z**3 + C1
Estimating model C0*x**2*y + C1*x*z + C2
Estimating model C0*y**4*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z + C1
Estimating model C0*y*z**2 + C1*z + C2
Estimating model C0*x**2*y**3*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x + C2
Estimating model C0*y**3*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y**2*z + C1*x**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x**2 + C2
Estimating model C0*x*y*z + C1*y + C2
Estimating model C0*x**3*y**2*z**2 + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z**2 + C1*x*y + C2
Estimating model C0*x*z**2 + C1*x
Estimating model C0*x**2 + C1*x
Estimating model C0*y**2*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y
Estimating model C0*x + C1*z**2 + C2*z + C3
Estimating model C0*x**2*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2
Estimating model C0*y*z**2 + C1*z
Estimating model C0*x*y*z + C1*z**2 + C2
Estimating model C0*x*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3
Estimating model C0*x**6*z + C1
Estimating model C0*x**2*z + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*y**2*z
Estimating model C0*x + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2
Estimating model C0*x*y*z**2 + C1*z + C2
Estimating model C0*x**3*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**2 + C1
Estimating model C0*x**2*z**2 + C1*y + C2
Estimating model C0*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z
Estimating model C0*x**3*y + C1*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y + C1*x*y**2*z
Estimating model C0*x**2*y + C1*x**2*z**2 + C2
Estimating model C0*x**2*z**2 + C1*x*y
Estimating model C0*x**2*y + C1*y
Estimating model C0*x*y*z**2 + C1*z
Estimating model C0*x + C1*y*z**2 + C2*y
Estimating model C0*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y
Estimating model C0*x**2*z**2 + C1*x**2 + C2*y*z + C3
Estimating model C0*x**2 + C1*x + C2*y
Estimating model C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y
Estimating model C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x*z
Estimating model C0*x*y**3*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**4 + C1*z
Estimating model C0*x*y + C1*z**2
Estimating model C0*z**2 + C1*z + C2
Estimating model C0*x*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**4
Estimating model C0*x*z + C1*x + C2*y + C3*z
Estimating model C0*x**2*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2 + C1
Estimating model C0*x + C1*y*z + C2*z + C3
Estimating model C0*x*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3
Estimating model C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4
Estimating model C0*x*z**2 + C1*z + C2
Estimating model C0*x*y**2*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3 + C1
Estimating model C0*x**2 + C1*x*z + C2
Estimating model C0*x**2*y*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1
Estimating model C0*x**2 + C1*z**2 + C2*z
Estimating model C0*x**2 + C1*x*y*z + C2
Estimating model C0*x**2*y**2*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1
Estimating model C0*x**2*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**3
Estimating model C0*x + C1*y + C2*z + C3
Estimating model C0*x**2*y*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3
Estimating model C0*x*y**3*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z + C1
Estimating model C0*x**2*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3
Estimating model C0*x**2*y + C1*x*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*x*y**2*z
Estimating model C0*x*y**3*z**2 + C1*x*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1*x*y*z
Estimating model C0*y**2 + C1*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2
Estimating model C0*x + C1*y*z**2
Estimating model C0*x*y + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2
Estimating model C0*x*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**2*z**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**2*z**3 + C2
Estimating model C0*x**2*z**2 + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z**2 + C1*y**2 + C2*z
Estimating model C0*x**2*y + C1*x + C2
Estimating model C0*x**2*z + C1*x*y**4*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x*y**4*z**2
Estimating model C0*x*z + C1*y*z + C2
Estimating model C0*x*y + C1*x*z**2
Estimating model C0*x*y + C1*y + C2*z + C3
Estimating model C0*x + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**3
Estimating model C0*x**2*z + C1*z**2 + C2
Estimating model C0*x**4*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z
Estimating model C0*x**2*y*z + C1*x
Estimating model C0*x*z + C1*x + C2*y + C3
Estimating model C0*x*y*z + C1*x*y + C2*z + C3
Estimating model C0*y**3 + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y + C2*z + C3
Estimating model C0*x**2*y**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**4
Estimating model C0*x*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x**2*z + C1*x*z
Estimating model C0*x*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*z + C2
Estimating model C0*x*y + C1*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**3*z**2
Estimating model C0*x*y + C1*y*z
Estimating model C0*x**3*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z
Estimating model C0*x**2*y + C1*x*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1*x*y**2*z + C2
Estimating model C0*x**2 + C1*x*y + C2
Estimating model C0*x**2*y**2*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*y
Estimating model C0*x**4*z**2
Estimating model C0*x*y**2*z**3 + C1*x + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3 + C1*x + C2*z
Estimating model C0*x*y**2 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*z**2 + C2
Estimating model C0*x**4*z**3 + C1
Estimating model C0*x**4 + C1*x + C2
Estimating model C0*x + C1*y**2*z + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z + C2*y
Estimating model C0*y**2*z + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y*z + C2
Estimating model C0*y**2*z**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*z
Estimating model C0*x*y*z + C1*x*y
Estimating model C0*x**2*z**4 + C1
Estimating model C0*x**2*z**2 + C1*x**2 + C2
Estimating model C0*x*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*y + C3
Estimating model C0*x**2 + C1*x*y**5*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**5*z + C2
Estimating model C0*x**2*y*z**2 + C1*x*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x*y
Estimating model C0*x*y**2 + C1*x*z + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*z + C2*z + C3
Estimating model C0*x**2 + C1*x*y + C2*y
Estimating model C0*x**2*y*z + C1*x + C2
Estimating model C0*x*z**2 + C1*y + C2
Estimating model C0*x + C1*y + C2*z**2
Estimating model C0*x*y*z + C1*x*z**2
Estimating model C0*x + C1*y*z**2 + C2*y + C3*z + C4
Estimating model C0*x*y*z + C1*x + C2*y*z
Estimating model C0*x**4 + C1*x
Estimating model C0*x**2*z + C1*y + C2
Estimating model C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4
Estimating model C0*x**2*y**2*z**4 + C1*x*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**4 + C1*x*z + C2
Estimating model C0*x + C1*y**4*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**4*z
Estimating model C0*x*y*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z**2
Estimating model C0*y**2 + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*y*z + C2*y + C3
Estimating model C0*x*y**3 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*x + C2
Estimating model C0*x**2*y*z**3 + C1*x*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**3 + C1*x*z
Estimating model C0*x*y + C1*y**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z
Estimating model C0*x**2*y**2*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*z + C2
Estimating model C0*x**2*y*z + C1*x**2*z + C2*y + C3*z
Estimating model C0*x**4*y*z**3 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**3 + C1
Estimating model C0*x**4*y + C1*y + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y + C1*y + C2*z + C3
Estimating model C0*x**2*y*z + C1*x*z + C2
Estimating model C0*x**2*y + C1*z + C2
Estimating model C0*x**2*y + C1*x + C2*y
Estimating model C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*y**3*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z**2 + C1
Estimating model C0*x*y**2 + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x*y + C2
Estimating model C0*x*y + C1*z**3
Estimating model C0*x**2*y**3 + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*x
Estimating model C0*x + C1*y*z**2 + C2*y + C3
Estimating model C0*x*y + C1*y**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**2 + C2*z + C3
Estimating model C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4
Estimating model C0*x**3*y*z**2 + C1*x + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1*x + C2*y + C3
Estimating model C0*x**3*z**2 + C1*y
Estimating model C0*x*y**2 + C1*y**3*z + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y**3*z + C2*z + C3
Estimating model C0*x**3*y**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2 + C1
Estimating model C0*x**2 + C1*y**2 + C2*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*y
Estimating model C0*x*y*z**2 + C1*x*y + C2
Estimating model C0*x*y**2 + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x + C2
Estimating model C0*x**2*z + C1*y + C2*z + C3
Estimating model C0*x*y**3 + C1*x + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*x + C2*z
Estimating model C0*x*y**2*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*x + C1*y*z**2 + C2*z + C3
Estimating model C0*x**3*y**3 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3 + C1*x*y + C2*x + C3
Estimating model C0*x**3*z + C1*x + C2*z + C3
Estimating model C0*y**3*z + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z
Estimating model C0*x*z**3 + C1*z + C2
Estimating model C0*x*y*z**2 + C1*y + C2*z
Estimating model C0*x**2*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x*z**4 + C1*x
Estimating model C0*x**3*y*z + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x*y*z + C2
Estimating model C0*y**4*z**3 + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**3 + C1*y + C2*z
Estimating model C0*y**4*z**2 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**4*z**2 + C1*z + C2
Estimating model C0*x**2*y**5*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**5*z**2 + C1
Estimating model C0*x*y + C1*x + C2*y
Estimating model C0*x**2*y*z + C1*x**2 + C2
Estimating model C0*x**2*y*z + C1*x + C2*z + C3
Estimating model C0*x + C1*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x + C1*y**2*z**2
Estimating model C0*y**2 + C1*z**2 + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2*z + C3
Estimating model C0*x**2 + C1*x*y**3*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**3*z**2 + C2
Estimating model C0*x**2*z**2 + C1*z + C2
Estimating model C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z
Estimating model C0*y**3*z + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y
Estimating model C0*x*z + C1*y*z + C2*y + C3
Estimating model C0*x**2*y*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x**3*y*z**2 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z**2 + C1
Estimating model C0*x*y**2*z + C1*x*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*x*y + C2
Estimating model C0*y**2*z + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z
Estimating model C0*x*z**3 + C1*x + C2*y*z
Estimating model C0*x*y*z + C1*x*z + C2*y + C3*z + C4
Estimating model C0*x*y*z**3 + C1*x + C2*z + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*x + C2*z + C3
Estimating model C0*x*y**3*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3*z**2 + C1*y
Estimating model C0*x**3*z**2 + C1
Estimating model C0*x*z**3 + C1*z**2 + C2
Estimating model C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z
Estimating model C0*x**2 + C1*x*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y**2
Estimating model C0*x**2*y + C1*x*y + C2*z
Estimating model C0*x**2*y*z + C1*x*y + C2*z**2 + C3
Estimating model C0*y*z**4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y*z**4
Estimating model C0*x**3*y*z + C1*x + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*x + C2
Estimating model C0*x**2*y + C1*x + C2*y + C3*z**2 + C4
Estimating model C0*x*y*z + C1*x + C2*y + C3
Estimating model C0*y**2 + C1*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2 + C1*z**2 + C2
Estimating model C0*x*y**3 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*y
Estimating model C0*x**3*y**2*z + C1*y*z + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**2*z + C1*y*z + C2*y + C3
Estimating model C0*y**2*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**2 + C1*y
Estimating model C0*x*z + C1*x + C2*y + C3*z + C4
Estimating model C0*x**2*y*z**2 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*y
Estimating model C0*x**2 + C1*x + C2*z**2
Estimating model C0*y**2*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**3 + C1*y**2
Estimating model C0*x**2*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**2
Estimating model C0*x**3*z + C1*x*y + C2*y*z + C3
Estimating model C0*x*y**2*z**2 + C1*y*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*y*z**2 + C2
Estimating model C0*x**2*y**2*z**2 + C1*x*y*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z**2 + C1*x*y*z + C2
Estimating model C0*x*y*z + C1*x*y + C2*y
Estimating model C0*x**2*z + C1*x*y**3*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x*y**3*z**2
Estimating model C0*x*y**2*z + C1*y**2 + C2*y + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z + C1*y**2 + C2*y + C3
Estimating model C0*x**2*y**3 + C1*y**2*z**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3 + C1*y**2*z**2 + C2
Estimating model C0*x + C1*y*z + C2*z**2 + C3*z + C4
Estimating model C0*y*z + C1*y + C2*z
Estimating model C0*y*z**2 + C1*y + C2
Estimating model C0*y*z + C1*z**2 + C2
Estimating model C0*x**2*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z + C1*y**2
Estimating model C0*x**2 + C1*x*y + C2*x + C3
Estimating model C0*y**2*z + C1*z**2 + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z + C1*z**2 + C2*z
Estimating model C0*x*z**3 + C1*y*z + C2
Estimating model C0*y**3 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3 + C1*y*z
Estimating model C0*x**2*z + C1*z
Estimating model C0*x*y**2*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**3
Estimating model C0*x**2 + C1*y + C2*z**2
Estimating model C0*x*y + C1*x + C2*y*z + C3
Estimating model C0*x*z**2 + C1*y + C2*z + C3
Estimating model C0*y**3*z + C1*y + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*y + C2
Estimating model C0*y**4*z
Excepted an error: operands could not be broadcast together with shapes (1000,1) (993,1) !! 
Model: C0*y**4*z
Estimating model C0*x*z**3 + C1*x + C2*z + C3
Estimating model C0*x*z + C1*y**2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**2*z
Estimating model C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x
Estimating model C0*x**3*y + C1*x + C2*y + C3
Estimating model C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4
Estimating model C0*x*y + C1*y*z**2 + C2
Estimating model C0*x*y**2*z**2 + C1*x*y + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**2 + C1*x*y + C2*x + C3
Estimating model C0*x*z + C1*y**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**3
Estimating model C0*x**4*y**2*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y**2*z**2
Estimating model C0*x**2*y + C1*y*z**3 + C2
Estimating model C0*y**3*z + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**3*z + C1*z + C2
Estimating model C0*x + C1*y*z**2 + C2*y*z + C3*z + C4
Estimating model C0*x**2 + C1*y*z
Estimating model C0*x*y + C1*x*z + C2*y
Estimating model C0*x**2*y + C1*x + C2*z + C3
Estimating model C0*x**2*y + C1*x + C2*y + C3*z + C4
Estimating model C0*x*y**2 + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*x
Estimating model C0*x**3*y**3*z**4 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**4 + C1*z + C2
Estimating model C0*y*z + C1*z**2
Estimating model C0*x**2*y**3*z + C1*x + C2*y + C3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z + C1*x + C2*y + C3*z
Estimating model C0*x**3*y + C1*x + C2
Estimating model C0*x*y*z**3 + C1*y**2*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**3 + C1*y**2*z + C2
Estimating model C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3
Estimating model C0*x**2*z + C1*x*z**2 + C2
Estimating model C0*x**2 + C1*x*y*z + C2*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*x*y*z + C2*y**2
Estimating model C0*x*y**2*z**4 + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**4 + C1*y + C2*z
Estimating model C0*x**3*y + C1*x*y + C2*z
Estimating model C0*x*y + C1*y + C2*z
Estimating model C0*z**3 + C1*z + C2
Estimating model C0*x*y**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**3 + C1*z + C2
Estimating model C0*x*y**2*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2*z**4 + C1*z
Estimating model C0*x**3*y**3*z**3 + C1*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z**3 + C1*z + C2
Estimating model C0*x*y*z**5
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**5
Estimating model C0*x*y**4*z**3 + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**4*z**3 + C1*y**2
Estimating model C0*y**4
Estimating model C0*x**3 + C1*y*z
Estimating model C0*x**2 + C1*x*y
Estimating model C0*y**2*z**4 + C1*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**2*z**4 + C1*y
Estimating model C0*x**2*y**3*z**3
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**3*z**3
Estimating model C0*x**3*y*z + C1*y + C2*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y*z + C1*y + C2*z
Estimating model C0*x**3*y**3*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**3*y**3*z
Estimating model C0*x*y*z**7 + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z**7 + C1
Estimating model C0*y + C1*z**4
Estimating model C0*x*z + C1*y**3*z + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*z + C1*y**3*z + C2
Estimating model C0*x*y*z + C1*y**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2
Estimating model C0*x**4*y*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y*z**2
Estimating model C0*x*y**2 + C1*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y**2 + C1*y*z
Estimating model C0*x**4*y
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**4*y
Estimating model C0*y**5*z + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y**5*z + C1
Estimating model C0*z**5 + C1
Estimating model C0*x**2*y**2*z + C1*x
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y**2*z + C1*x
Estimating model C0*x*z + C1*y*z + C2*z**2 + C3
Estimating model C0*y + C1*z**3 + C2
Estimating model C0*x*z**3 + C1*x + C2
Estimating model C0*x**3*z**2 + C1*x*z
Estimating model C0*x*y*z + C1*y*z
Estimating model C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*z + C1*x + C2*y**2 + C3*z + C4
Estimating model C0*x**2*z + C1*x**2
Estimating model C0*x*y*z + C1*y**2 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y*z + C1*y**2 + C2
Estimating model C0*x*y + C1*y**3 + C2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x*y + C1*y**3 + C2
Estimating model C0*x*z + C1*x + C2*y
Estimating model C0*x**2*y*z**4 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z**4 + C1*z
ModelBox: 582 models
-> C0*z**3 + C1, p = 0.0005941567281954819, parse trees = 6, valid = True, error = 14.340019334254288
-> C0*x, p = 0.049073125736448, parse trees = 3, valid = True, error = 20.29842225408522
-> C0*z, p = 0.050610214895616006, parse trees = 3, valid = True, error = 36.16448835662133
-> C0*x*y**2*z, p = 0.0012386707660800003, parse trees = 11, valid = False
-> C0*y*z + C1, p = 0.008844354370897185, parse trees = 18, valid = True, error = 6.3389390764692894
-> C0*y + C1, p = 0.03571110332596223, parse trees = 26, valid = True, error = 0.07904368526156173
-> C0*x + C1, p = 0.035453365119552056, parse trees = 25, valid = True, error = 7.153700074732472
-> C0*x*y, p = 0.012545280000000002, parse trees = 2, valid = True, error = 18.605973444506223
-> C0*z + C1, p = 0.03736403312954575, parse trees = 34, valid = True, error = 17.46640054472541
-> C0*y, p = 0.0490254336, parse trees = 2, valid = True, error = 4.245064493792276
-> C0*x + C1*z + C2, p = 0.003170149020676915, parse trees = 24, valid = True, error = 1.5205971607204074
-> C0*x**2*z + C1*y*z + C2*y + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.015314432620635131
-> C0*y + C1*z, p = 0.003255751967181373, parse trees = 7, valid = True, error = 0.06018827513575914
-> C0*y*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 42.78940922513268
-> C0*x**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 1.0022924432920572
-> C0*x*y + C1*y*z + C2, p = 2.415635103555408e-05, parse trees = 7, valid = True, error = 0.36764723332339566
-> C0*y*z + C1*y + C2, p = 0.0003735110458301765, parse trees = 19, valid = True, error = 0.06415260868352057
-> C0*x*y*z, p = 0.005118474240000001, parse trees = 6, valid = True, error = 38.7542156832984
-> C0*x + C1*y, p = 0.0030585593364480003, parse trees = 3, valid = True, error = 0.04154030490166526
-> C0*y**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = False
-> C0*x + C1*y + C2, p = 0.003095864070790441, parse trees = 32, valid = True, error = 0.03373301583090899
-> C0*x*y**2 + C1, p = 0.0013468259332915205, parse trees = 10, valid = False
-> C0*x*z + C1, p = 0.009017039509860544, parse trees = 19, valid = True, error = 4.755148102798686
-> C0*y**2, p = 0.006298870675046401, parse trees = 2, valid = False
-> C0*x + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 10.40031590038804
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 7.083023289037299
-> C0*x*z + C1*z**2 + C2, p = 1.4166957522891577e-05, parse trees = 3, valid = True, error = 3.8316474222425265
-> C0*x*y + C1, p = 0.008711362784526343, parse trees = 20, valid = True, error = 2.813051038074814
-> C0*x**2*y**2 + C1*z + C2, p = 2.054806160434792e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y, p = 0.0008254420089569282, parse trees = 5, valid = True, error = 0.6446521490610685
-> C0*x*y + C1*z + C2, p = 0.00035924679305129897, parse trees = 19, valid = True, error = 1.4430990724717707
-> C0*x**2 + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*y*z, p = 0.012953284499865601, parse trees = 3, valid = True, error = 25.608869619131067
-> C0*x*z + C1*z + C2, p = 0.00012450359294086355, parse trees = 8, valid = True, error = 2.806794793630018
-> C0*x*z, p = 0.013008973499596801, parse trees = 5, valid = True, error = 12.308274870423942
-> C0*x**2*z**2 + C1, p = 2.9448343057858572e-05, parse trees = 2, valid = True, error = 14.689578524700048
-> C0*x*y*z + C1*x + C2, p = 3.967582126521022e-05, parse trees = 9, valid = True, error = 1.9847644779605615
-> C0*z**2 + C1, p = 0.0043908909760512005, parse trees = 7, valid = True, error = 7.81841942216366
-> C0*z**2, p = 0.006658560000000002, parse trees = 1, valid = True, error = 20.38080842203956
-> C0*x + C1*z**3 + C2, p = 3.304889002229762e-06, parse trees = 2, valid = True, error = 2.8530015109893756
-> C0*x + C1*y**5 + C2, p = 1.0969038768203372e-07, parse trees = 1, valid = False
-> C0*x*z**2, p = 0.0026367897600000005, parse trees = 3, valid = True, error = 25.404743100085337
-> C0*x*y**2*z + C1*x*z, p = 9.703251313164293e-07, parse trees = 2, valid = False
-> C0*x**2*z + C1, p = 0.0014119040444226603, parse trees = 13, valid = True, error = 9.2459892152245
-> C0*y + C1*z + C2, p = 0.003069950275218309, parse trees = 30, valid = True, error = 0.05873514815675326
-> C0*y**2 + C1*z + C2, p = 0.00018439479525113865, parse trees = 7, valid = False
-> C0*y**2*z + C1*z + C2, p = 1.7343803188963076e-05, parse trees = 7, valid = False
-> C0*y*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 12.633429315135688
-> C0*x*y*z**2 + C1*x, p = 7.350947964518404e-06, parse trees = 2, valid = True, error = 12.24973295948191
-> C0*x**2*z, p = 0.00255923712, parse trees = 3, valid = True, error = 20.711980967110115
-> C0*x + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 6.345576657439307
-> C0*x*y**2*z**2, p = 7.657237463040004e-05, parse trees = 5, valid = False
-> C0*x**3, p = 0.0008279884800000003, parse trees = 1, valid = True, error = 15.404257203714367
-> C0*x*z**2 + C1*x + C2*y*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 0.2434966658387232
-> C0*y**2*z, p = 0.0025592371200000006, parse trees = 3, valid = False
-> C0*y**2 + C1, p = 0.003953518174273536, parse trees = 9, valid = False
-> C0*x**2*y*z**3 + C1*x + C2, p = 1.583570614308413e-08, parse trees = 1, valid = False
-> C0*x*y**2*z**2 + C1, p = 1.8230350952005636e-05, parse trees = 8, valid = False
-> C0*y*z**2 + C1, p = 0.0015973338569590712, parse trees = 16, valid = True, error = 16.342591141414815
-> C0*x + C1*y**2, p = 0.0003974344704000001, parse trees = 2, valid = False
-> C0*x*z + C1*y**2, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*z**2 + C1*z, p = 0.0004488584516075522, parse trees = 4, valid = True, error = 11.495591467465164
-> C0*x*y*z + C1*x, p = 5.576342644142901e-05, parse trees = 4, valid = True, error = 9.381577578533184
-> C0*y**3 + C1, p = 0.00024640937164800014, parse trees = 2, valid = False
-> C0*x + C1*z, p = 0.0032526105119922584, parse trees = 6, valid = True, error = 7.721789608887937
-> C0*x*y*z + C1*z**4, p = 7.004161425392276e-08, parse trees = 1, valid = True, error = 28.966928980027546
-> C0*x*y + C1*y**2*z, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**2*y**2*z**2, p = 8.086042760970244e-06, parse trees = 4, valid = False
-> C0*y + C1*z**2 + C2, p = 0.0002268061079961601, parse trees = 6, valid = True, error = 0.07192000028177813
-> C0*x*y*z + C1*z + C2, p = 2.043296226937406e-05, parse trees = 4, valid = True, error = 6.348805700544319
-> C0*x**2 + C1*z, p = 0.00040947793920000016, parse trees = 2, valid = True, error = 4.774890435187606
-> C0*x**2 + C1*x + C2*y**2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y*z**2, p = 0.0013922249932800006, parse trees = 12, valid = True, error = 46.24176546593244
-> C0*x**4*y**5*z**2 + C1, p = 1.9442716340144685e-11, parse trees = 1, valid = False
-> C0*x**2 + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 2.6475319052475235
-> C0*x*y**2 + C1*y**2*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*z + C1*y**2 + C2, p = 1.2972261113856007e-05, parse trees = 2, valid = False
-> C0*x*y*z + C1, p = 0.0026835531317103887, parse trees = 24, valid = True, error = 13.119847694366182
-> C0*x*y + C1*x*z + C2*z + C3, p = 5.413116551671152e-11, parse trees = 1, valid = True, error = 0.19283042161079364
-> C0*x + C1*y**3 + C2, p = 6.657974862977438e-06, parse trees = 2, valid = False
-> C0*x**3*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = True, error = 21.13909536490224
-> C0*x**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = True, error = 35.69215726084812
-> C0*x*y + C1*y**2 + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x*y**2, p = 0.002483965440000001, parse trees = 3, valid = False
-> C0*x**2 + C1, p = 0.004401535213633537, parse trees = 11, valid = True, error = 2.057235397948557
-> C0*x**3*y*z**2 + C1*y**2, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*z**3, p = 0.0009055641600000002, parse trees = 1, valid = True, error = 29.333260110367036
-> C0*x**3*y*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y, p = 0.0004037298324111361, parse trees = 3, valid = True, error = 0.4267614759046657
-> C0*x*y**3*z**5 + C1*x + C2, p = 5.344694758458029e-13, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*z + C2*y + C3*z + C4, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x*y**3*z + C1*y + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*y + C3, p = 1.5108868826726406e-06, parse trees = 1, valid = True, error = 0.0005611603898739102
-> C0*x**2*z + C1*z + C2, p = 2.1651883095490566e-05, parse trees = 4, valid = True, error = 5.094362219097881
-> C0*y*z + C1*z + C2, p = 0.000287563866095826, parse trees = 13, valid = True, error = 3.1698815064312416
-> C0*x**2 + C1*y + C2, p = 0.0002050487526833668, parse trees = 7, valid = True, error = 0.05427689119556682
-> C0*y**2 + C1*y, p = 0.00040372983241113614, parse trees = 3, valid = False
-> C0*x**2 + C1*x + C2, p = 0.00021366077128704005, parse trees = 6, valid = True, error = 0.4271908298405613
-> C0*x**2*y + C1*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 15.713659334721576
-> C0*x*z**3 + C1*z, p = 7.803210144153604e-06, parse trees = 2, valid = True, error = 20.98027961796095
-> C0*x**3*y*z + C1*x, p = 9.417861568659461e-07, parse trees = 2, valid = False
-> C0*x**2*y + C1, p = 0.001049519513626215, parse trees = 9, valid = True, error = 9.194511528421213
-> C0*x*z**3, p = 0.00035860340736000015, parse trees = 3, valid = True, error = 32.98026093868964
-> C0*x*y + C1*z, p = 0.0008198120476335148, parse trees = 5, valid = True, error = 8.279283168150675
-> C0*y*z**3, p = 0.0002390689382400001, parse trees = 2, valid = True, error = 48.17917931643902
-> C0*x*z**2 + C1*x + C2, p = 8.378904527876657e-06, parse trees = 3, valid = True, error = 2.3568107657080035
-> C0*x**3*y**2*z + C1, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 14.922725177587362
-> C0*x*y**2 + C1*z + C2, p = 1.297226111385601e-05, parse trees = 2, valid = False
-> C0*x*y**2*z + C1, p = 0.0002447865672184628, parse trees = 10, valid = False
-> C0*x*z + C1*z, p = 0.0006328295424000001, parse trees = 3, valid = True, error = 8.21409837062021
-> C0*x**3*y**2 + C1*x + C2*y + C3, p = 8.339979556240391e-10, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*x*y*z + C2*y, p = 2.6780601019483034e-10, parse trees = 1, valid = False
-> C0*y**2*z + C1*y*z + C2, p = 1.3084550002327196e-06, parse trees = 4, valid = False
-> C0*y + C1*z**2, p = 0.00042188636160000017, parse trees = 2, valid = True, error = 0.6954949092419475
-> C0*x**3*y**2, p = 5.770748510208003e-05, parse trees = 4, valid = False
-> C0*x*y + C1*x + C2, p = 0.0003112030179730392, parse trees = 14, valid = True, error = 0.4312916799192052
-> C0*y*z + C1*y, p = 0.0008189558784000002, parse trees = 4, valid = True, error = 0.6379760754076431
-> C0*x**3*y + C1*x*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = True, error = 2.7608273282818843
-> C0*x**2*z + C1*y*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 15.195231418013282
-> C0*x*y**2*z**2 + C1*x*y**2 + C2, p = 2.0288334105668962e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*z + C2, p = 0.00017548449155972435, parse trees = 8, valid = True, error = 1.3456421870118167
-> C0*x*z**2 + C1, p = 0.0014505870649982983, parse trees = 14, valid = True, error = 12.017430717459828
-> C0*y**2*z + C1, p = 0.0014367761930649604, parse trees = 11, valid = False
-> C0*x*y**3 + C1, p = 5.875671210393603e-05, parse trees = 3, valid = False
-> C0*x + C1*y**3*z**2 + C2, p = 2.7945363781913173e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2 + C2*x*z + C3, p = 3.6887880192125384e-09, parse trees = 1, valid = True, error = 0.2686331850863745
-> C0*x*y**2 + C1*x*y*z + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x*z + C2, p = 2.594452222771201e-05, parse trees = 4, valid = True, error = 0.5657891504804146
-> C0*x + C1*y + C2*z**2 + C3, p = 9.23813678740931e-08, parse trees = 1, valid = True, error = 0.0007864498959397288
-> C0*x**2*y**3*z, p = 1.962054493470721e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x*z**2 + C2*x, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 1.596768913546479
-> C0*y*z**2 + C1*y*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 19.32090465818885
-> C0*x*y**2 + C1*z, p = 5.405108797440003e-05, parse trees = 2, valid = False
-> C0*x**3*y*z**3 + C1*z + C2, p = 7.029533299739621e-11, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*x + C2, p = 1.7123384670289927e-06, parse trees = 2, valid = False
-> C0*x + C1*y*z, p = 0.0006150990225557423, parse trees = 4, valid = True, error = 6.278984094644405
-> C0*x*y**3*z**2 + C1, p = 2.3287803151594308e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 0.28631542237126334
-> C0*y**3 + C1*z**2 + C2, p = 8.821137557422085e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z, p = 0.00016706699919360004, parse trees = 6, valid = True, error = 11.296090846918585
-> C0*x**2*y, p = 0.002483965440000001, parse trees = 3, valid = True, error = 32.83103302923452
-> C0*x*z + C1*y + C2*z + C3, p = 2.2171528289782346e-08, parse trees = 1, valid = True, error = 0.04061838856083894
-> C0*x**2*y*z, p = 0.0010134578995200003, parse trees = 9, valid = True, error = 43.57976157131031
-> C0*x**2*y*z + C1*y + C2, p = 1.2671304656014544e-06, parse trees = 3, valid = True, error = 0.07601144646415012
-> C0*x*z + C1*x + C2, p = 0.00026299404547967245, parse trees = 14, valid = True, error = 0.9528054335265113
-> C0*x**2*y*z + C1*y, p = 7.134743612620803e-06, parse trees = 2, valid = True, error = 1.9261032419009008
-> C0*y**4 + C1*y + C2, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1, p = 0.00014479139930112004, parse trees = 9, valid = True, error = 19.275741888403658
-> C0*x**2 + C1*x*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 1.9233766981477993
-> C0*x*y**2 + C1*x + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x**3*z, p = 0.0003378192998400001, parse trees = 3, valid = True, error = 26.24866314120247
-> C0*x*y**2*z**2 + C1*y + C2, p = 1.443843795398847e-07, parse trees = 2, valid = False
-> C0*y**3, p = 0.0008279884800000003, parse trees = 1, valid = False
-> C0*x + C1*y**2 + C2, p = 5.210983781261849e-05, parse trees = 5, valid = False
-> C0*x*y*z + C1*y**2 + C2*y + C3, p = 2.7123441317739246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3, p = 1.9605268189560183e-06, parse trees = 3, valid = True, error = 0.0008019774008962151
-> C0*x*y**2*z + C1*x + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*y**2 + C2, p = 6.50962591625742e-09, parse trees = 1, valid = False
-> C0*x**3*y*z**3, p = 5.498509077459768e-07, parse trees = 2, valid = False
-> C0*y**2*z**2, p = 0.0006961124966400003, parse trees = 6, valid = False
-> C0*x*y**4*z + C1*x + C2, p = 1.1342372196486931e-10, parse trees = 1, valid = False
-> C0*y**3*z, p = 0.00045042573312000016, parse trees = 4, valid = False
-> C0*x*z + C1*x, p = 0.0006142169088000002, parse trees = 3, valid = True, error = 4.62257585998116
-> C0*x**2*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5, p = 1.1728412102668808e-13, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1, p = 7.955323066232345e-06, parse trees = 4, valid = False
-> C0*x*y*z + C1*x + C2*y, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 0.0019526294068767447
-> C0*x**2 + C1*x + C2*z + C3, p = 4.632653888980257e-07, parse trees = 2, valid = True, error = 0.4255741320048685
-> C0*x*y + C1*x + C2*y**2 + C3, p = 1.994370685127886e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y**2*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2, p = 4.9315347850435005e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*z + C3, p = 1.7932853763794545e-07, parse trees = 2, valid = True, error = 0.4290696305205604
-> C0*x + C1*y**2 + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = False
-> C0*x*y + C1*x, p = 0.0008011643028111362, parse trees = 5, valid = True, error = 4.066126569666968
-> C0*x**3 + C1*z + C2, p = 8.042801890590725e-06, parse trees = 2, valid = True, error = 3.464312924872204
-> C0*y**2*z**2 + C1*y + C2, p = 1.8658470161459193e-06, parse trees = 4, valid = False
-> C0*x**2*y*z**2, p = 6.125789970432002e-05, parse trees = 4, valid = False
-> C0*x**2*z**2 + C1*x, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 10.609737189137729
-> C0*x*z + C1*y + C2, p = 0.00027772840571075306, parse trees = 15, valid = True, error = 0.06462534132471555
-> C0*x*z**3 + C1, p = 0.00010672037403033604, parse trees = 6, valid = True, error = 16.60807109549586
-> C0*x + C1*y*z**2 + C2, p = 8.286523160002564e-06, parse trees = 2, valid = True, error = 2.5973096836327425
-> C0*x*y*z + C1*x + C2*y**2 + C3*y*z + C4*y + C5*z + C6, p = 1.208381853002241e-13, parse trees = 1, valid = False
-> C0*x*y**3*z, p = 2.9728098385920014e-05, parse trees = 2, valid = False
-> C0*x**3 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = True, error = 0.14430588028788596
-> C0*x*y + C1*y + C2, p = 0.00019443892282459111, parse trees = 12, valid = True, error = 0.05334593778911096
-> C0*x**2*z**2, p = 0.0005800937472000002, parse trees = 5, valid = True, error = 29.937447650051098
-> C0*x**3*y**2*z**2 + C1, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x**2*y**2*z**4 + C1, p = 2.153656035459442e-09, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x*y + C2*x + C3*y**2*z + C4*y + C5, p = 1.5481503975522824e-14, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2, p = 2.1519424516553446e-08, parse trees = 1, valid = False
-> C0*x**4*y**2*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y + C3*z, p = 2.0548061604347923e-07, parse trees = 1, valid = True, error = 0.0008008266963662371
-> C0*x**2*y*z + C1, p = 0.00011614497783939075, parse trees = 6, valid = True, error = 16.927328813465923
-> C0*x**2*z + C1*y**3 + C2*z + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x*y**3*z**2, p = 4.043021380485122e-06, parse trees = 2, valid = False
-> C0*x**2*z**2 + C1*z, p = 7.573703963443205e-06, parse trees = 2, valid = True, error = 19.127770566733304
-> C0*x*z**2 + C1*x + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 4.113390561313915
-> C0*x**2*y + C1*y**3 + C2, p = 2.632569304368811e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z**2, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 19.842657683503816
-> C0*x*y*z**3 + C1, p = 2.2721111890329614e-05, parse trees = 6, valid = False
-> C0*x**3*y + C1, p = 0.00011272894907940869, parse trees = 6, valid = True, error = 13.956308582741816
-> C0*x*y + C1*x*z, p = 5.4051087974400024e-05, parse trees = 2, valid = True, error = 11.911236915840078
-> C0*x**4*y**3, p = 2.5137380510466065e-07, parse trees = 1, valid = False
-> C0*x*y*z + C1*y + C2*z + C3, p = 3.9802327585817264e-10, parse trees = 1, valid = True, error = 0.02360477675427576
-> C0*x*y**2*z + C1*y + C2, p = 1.917819083072472e-06, parse trees = 3, valid = False
-> C0*x*y*z**2 + C1*y + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.07817175222581775
-> C0*x**2*z**2 + C1*x*z + C2*x + C3*z**2, p = 7.02953329973962e-11, parse trees = 1, valid = True, error = 1.5480726273733691
-> C0*x**2*y + C1*z**2 + C2, p = 2.117073013781301e-07, parse trees = 1, valid = True, error = 7.6436142616417895
-> C0*x**3*y, p = 0.0002185889587200001, parse trees = 2, valid = True, error = 39.84927292014376
-> C0*x**3 + C1*y*z + C2, p = 8.561692335144965e-07, parse trees = 1, valid = True, error = 4.328165448618291
-> C0*y**2 + C1*y + C2, p = 0.0002557635419581711, parse trees = 9, valid = False
-> C0*x**2*y**2*z**2 + C1*z, p = 6.59821089295172e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*z, p = 8.353349959680003e-05, parse trees = 3, valid = True, error = 19.270512448057982
-> C0*x**2*y + C1*y**2 + C2*y, p = 1.0969038768203376e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*z, p = 2.090313210887105e-09, parse trees = 1, valid = True, error = 2.2236954354392293
-> C0*x**2 + C1*z**2 + C2, p = 7.067602333886058e-06, parse trees = 2, valid = True, error = 0.4234920017556721
-> C0*x*y**2 + C1*x*z, p = 3.5673718063104024e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*x + C2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 3.201015285557268
-> C0*x*y + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 2.6116215025407716
-> C0*x**2 + C1*x*y*z**4, p = 8.973566814414343e-09, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*y + C2, p = 1.0616498495579756e-06, parse trees = 2, valid = True, error = 0.32519656120089213
-> C0*x**2*y**2*z + C1, p = 1.4269487225241606e-05, parse trees = 4, valid = False
-> C0*x*y*z + C1*y*z + C2*z + C3, p = 6.910126316982166e-09, parse trees = 1, valid = True, error = 0.43945250274793735
-> C0*x**3*z + C1*z**2 + C2, p = 3.9802327585817284e-10, parse trees = 1, valid = True, error = 7.816831039934071
-> C0*x**2*z + C1*y, p = 8.107663196160003e-05, parse trees = 3, valid = True, error = 1.3653155082327089
-> C0*x + C1*y*z**2 + C2*z, p = 1.817688951226369e-06, parse trees = 2, valid = True, error = 4.56429996390554
-> C0*x + C1*y**4 + C2, p = 8.788526819130217e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z**2 + C3, p = 6.935157558552801e-12, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2*z**2 + C3, p = 9.121366738416457e-10, parse trees = 1, valid = False
-> C0*x*y + C1*y, p = 0.0007948689408000002, parse trees = 4, valid = True, error = 0.43800363117689806
-> C0*x**2 + C1*z**2, p = 2.7844499865600016e-05, parse trees = 1, valid = True, error = 3.693686096303068
-> C0*x**2*y**2*z, p = 0.00011891239354368005, parse trees = 8, valid = False
-> C0*x**2*y*z**2 + C1*x + C2, p = 3.6887880192125393e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 0.03682045801547395
-> C0*x**3*y**2 + C1*z, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 13.144854328919408
-> C0*x**2*y**2*z + C1*y**3*z, p = 1.1158583758117932e-09, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2, p = 0.000291113263347794, parse trees = 12, valid = True, error = 0.9893223811273171
-> C0*x*y**2 + C1*x*y*z + C2*x, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x**3*y**4 + C1, p = 6.032971322511856e-08, parse trees = 1, valid = False
-> C0*x**3*z + C1, p = 0.00014161385049292805, parse trees = 6, valid = True, error = 12.47127242751637
-> C0*x*z**2 + C1*z, p = 5.7376545177600026e-05, parse trees = 2, valid = True, error = 16.39685865042672
-> C0*x*y*z + C1*y*z**3, p = 6.79815667758662e-08, parse trees = 1, valid = True, error = 21.04762499020399
-> C0*x**2*y + C1*y + C2, p = 2.5181448044544013e-05, parse trees = 4, valid = True, error = 0.06573335173573548
-> C0*x*y*z + C1*y*z + C2, p = 8.821137557422084e-07, parse trees = 1, valid = True, error = 0.46521162141675226
-> C0*x**2 + C1*x*z + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.1907268041355145
-> C0*x*y**2 + C1*y + C2, p = 3.021773765345281e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y*z + C2, p = 2.1388664124525782e-05, parse trees = 5, valid = True, error = 0.2718495484437778
-> C0*x**2*y*z**2 + C1*x**2 + C2*x + C3*y**2*z + C4*y + C5, p = 2.910621829023736e-17, parse trees = 1, valid = False
-> C0*x**2*y**2 + C1*x + C2, p = 1.9943706851278858e-07, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x*y*z**2 + C2, p = 2.7592134383709796e-10, parse trees = 1, valid = False
-> C0*x**3*y + C1*x**2*y*z + C2*x + C3*y + C4, p = 4.74310783563812e-13, parse trees = 1, valid = True, error = 0.00040010854733692013
-> C0*y*z**2 + C1*y, p = 2.872661362134222e-05, parse trees = 2, valid = True, error = 1.803356158108882
-> C0*x**2*y**3*z**4, p = 4.935461747927887e-09, parse trees = 1, valid = False
-> C0*x*z**3 + C1*y + C2, p = 9.088444756131845e-07, parse trees = 1, valid = True, error = 0.07901492531096557
-> C0*x**3 + C1, p = 0.00044787367390740503, parse trees = 4, valid = True, error = 6.163964859140628
-> C0*x**2*y**3 + C1*y*z, p = 6.215788635315246e-08, parse trees = 1, valid = False
-> C0*x*y + C1*y*z**2 + C2*z + C3, p = 3.9802327585817274e-10, parse trees = 1, valid = True, error = 0.32471473852754057
-> C0*x*y + C1*z**2 + C2*z + C3, p = 2.3238126610709484e-10, parse trees = 1, valid = True, error = 0.237061052101223
-> C0*x**2*z**3 + C1, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 18.33436222459761
-> C0*x + C1*y + C2*z, p = 0.00014741205811200005, parse trees = 3, valid = True, error = 0.041506221210426575
-> C0*x**2 + C1*x*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 4.01263314911595
-> C0*x**2*y + C1*y**2 + C2*z + C3, p = 6.509625916257422e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**3 + C2, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 0.6768410498184824
-> C0*x + C1*y**2 + C2*y + C3, p = 1.3489198088501337e-07, parse trees = 2, valid = False
-> C0*x*y**2*z**2 + C1*x + C2, p = 1.4438437953988472e-07, parse trees = 2, valid = False
-> C0*y*z**2 + C1*z**2 + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 7.757373679607582
-> C0*x**2*y**2*z**2 + C1*z**2, p = 8.973566814414341e-09, parse trees = 1, valid = False
-> C0*x**2*y + C1*x, p = 2.7061662831869965e-05, parse trees = 2, valid = True, error = 7.47395468908904
-> C0*x**2*y**2 + C1*x*z + C2*y + C3, p = 3.5802942539415818e-09, parse trees = 1, valid = False
-> C0*x*y*z**3 + C1*z, p = 5.150118695141379e-07, parse trees = 1, valid = False
-> C0*y**2*z**2 + C1, p = 3.4527179833344013e-05, parse trees = 2, valid = False
-> C0*y**3*z + C1, p = 2.8582215320862724e-05, parse trees = 2, valid = False
-> C0*x**2*z + C1*x + C2, p = 1.2975101677892194e-05, parse trees = 3, valid = True, error = 1.7636253104902655
-> C0*x*z + C1*y**2 + C2*y + C3, p = 2.0548061604347912e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*z + C3, p = 4.903910944649774e-06, parse trees = 4, valid = True, error = 0.6877444703033461
-> C0*x*y**4*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x**4*y*z**2 + C1*y, p = 8.453472544028734e-09, parse trees = 1, valid = False
-> C0*x*z**4 + C1*z**2 + C2, p = 1.731938097915181e-08, parse trees = 1, valid = True, error = 7.410502588870596
-> C0*y*z + C1*z**3 + C2, p = 9.363852172984324e-07, parse trees = 1, valid = True, error = 1.2177901060769392
-> C0*x**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = True, error = 30.3359084511395
-> C0*y**2*z**3, p = 3.155709984768002e-05, parse trees = 2, valid = False
-> C0*y*z + C1*y + C2*z + C3, p = 1.788605928006747e-06, parse trees = 3, valid = True, error = 0.04181792298732386
-> C0*z**4, p = 0.00012315672576000003, parse trees = 1, valid = True, error = 35.52682418298498
-> C0*x*y**4*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x*y + C1*y**2*z**3 + C2, p = 1.583570614308413e-08, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y, p = 7.869202513920005e-05, parse trees = 3, valid = False
-> C0*x**2*y*z**2 + C1*y**2*z + C2*y*z, p = 3.752530276184532e-11, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*y*z + C2*x*y, p = 1.96916183966787e-09, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2, p = 0.0002146557807820801, parse trees = 5, valid = True, error = 1.5348961775425867
-> C0*x*y*z**2 + C1*y + C2*z + C3, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 0.024210049469252284
-> C0*x**2*y*z + C1*z + C2, p = 1.7671541532186681e-06, parse trees = 3, valid = True, error = 8.167656546634275
-> C0*x*y*z + C1*y, p = 2.7025543987200005e-05, parse trees = 1, valid = True, error = 1.4716772799869593
-> C0*x*z**2 + C1*x*z, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 10.696242614414645
-> C0*x**2 + C1*x*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*z, p = 4.998644615872516e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*y + C3, p = 3.4987794708885983e-06, parse trees = 4, valid = True, error = 0.000179210242387171
-> C0*x**2*z**2 + C1*x*z + C2*y + C3, p = 2.18912801721995e-10, parse trees = 1, valid = True, error = 0.0358400468242255
-> C0*y*z**3 + C1, p = 9.295000318771204e-05, parse trees = 4, valid = True, error = 21.121624441748228
-> C0*x**2*y + C1*x*z + C2, p = 8.853091246110093e-10, parse trees = 1, valid = True, error = 3.6495230926173328
-> C0*y**4*z + C1, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*y*z**2 + C1*z + C2, p = 9.917751569758034e-06, parse trees = 7, valid = True, error = 7.870002732723297
-> C0*x**2*y**3*z + C1*x + C2, p = 3.5802942539415818e-09, parse trees = 1, valid = False
-> C0*y**3*z + C1*y*z + C2*y + C3, p = 8.853091246110093e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*x**2 + C2, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*y + C2, p = 1.9458391670784007e-05, parse trees = 3, valid = True, error = 0.07175747535068303
-> C0*x**3*y**2*z**2 + C1*x*y + C2, p = 1.119900461192334e-12, parse trees = 1, valid = False
-> C0*x*z**2 + C1*x, p = 5.5688999731200025e-05, parse trees = 2, valid = True, error = 9.115523024173433
-> C0*x**2 + C1*x, p = 0.0003974344704000001, parse trees = 2, valid = True, error = 2.7061448274597795
-> C0*y**2*z + C1*y, p = 2.7025543987200012e-05, parse trees = 1, valid = False
-> C0*x + C1*z**2 + C2*z + C3, p = 5.234944179531945e-08, parse trees = 1, valid = True, error = 0.8446510909071719
-> C0*x**2*y**2, p = 0.0005464723968000002, parse trees = 5, valid = False
-> C0*y*z**2 + C1*z, p = 5.737654517760002e-05, parse trees = 2, valid = True, error = 21.91537757156991
-> C0*x*y*z + C1*z**2 + C2, p = 5.234944179531943e-08, parse trees = 1, valid = True, error = 7.792873236672186
-> C0*x*y*z**3, p = 4.733564977152003e-05, parse trees = 3, valid = False
-> C0*x**6*z + C1, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 18.532232608425325
-> C0*x**2*z + C1*y**2*z, p = 4.851625656582147e-07, parse trees = 1, valid = False
-> C0*x + C1*y**2*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*z + C2, p = 1.126967149760349e-06, parse trees = 2, valid = True, error = 9.370864723211241
-> C0*x**3*y**3*z**2 + C1, p = 1.690694508805747e-08, parse trees = 2, valid = False
-> C0*x**2*z**2 + C1*y + C2, p = 2.6251705370888124e-07, parse trees = 2, valid = True, error = 0.07818890458496808
-> C0*y**2 + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = False
-> C0*x**3*y + C1*x*y**2*z, p = 8.204840998616124e-09, parse trees = 1, valid = False
-> C0*x**2*y + C1*x**2*z**2 + C2, p = 1.536995008005225e-08, parse trees = 1, valid = True, error = 3.1561301434281988
-> C0*x**2*z**2 + C1*x*y, p = 4.851625656582147e-07, parse trees = 1, valid = True, error = 8.041827022513797
-> C0*x**2*y + C1*y, p = 2.7061662831869968e-05, parse trees = 2, valid = True, error = 1.0833891215920683
-> C0*x*y*z**2 + C1*z, p = 7.573703963443204e-06, parse trees = 2, valid = True, error = 24.19335498341854
-> C0*x + C1*y*z**2 + C2*y, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.0022231289901707223
-> C0*y**3 + C1*y, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*x**2 + C2*y*z + C3, p = 5.016751706129053e-10, parse trees = 1, valid = True, error = 0.25868842697091526
-> C0*x**2 + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.010387681768218946
-> C0*x**2*y**2 + C1*x + C2*y*z**2 + C3*y, p = 6.427344244675929e-11, parse trees = 1, valid = False
-> C0*x**2*y**3*z + C1*y*z**2 + C2*y + C3*z + C4, p = 6.847497167012697e-14, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*z, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 10.467837504294591
-> C0*x*y**3*z**4 + C1*z, p = 1.2204050867603506e-09, parse trees = 1, valid = False
-> C0*x*y + C1*z**2, p = 5.568899973120003e-05, parse trees = 2, valid = True, error = 17.59602508354045
-> C0*z**2 + C1*z + C2, p = 5.2160495616000025e-05, parse trees = 1, valid = True, error = 4.359055439355882
-> C0*x*y*z**4, p = 2.1458827896422413e-06, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y + C3*z, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 8.850671037604271e-05
-> C0*x**2*y**2 + C1, p = 7.869202513920003e-05, parse trees = 3, valid = False
-> C0*x + C1*y*z + C2*z + C3, p = 1.6067698339928121e-06, parse trees = 2, valid = True, error = 0.7052884329769217
-> C0*x*y**3, p = 0.00010929447936000005, parse trees = 1, valid = False
-> C0*x*y*z + C1*x + C2*y**2*z + C3*z + C4, p = 2.8896489827303353e-11, parse trees = 1, valid = False
-> C0*x*z**2 + C1*z + C2, p = 6.885185421312004e-06, parse trees = 1, valid = True, error = 6.557259928561396
-> C0*x*y**2*z**3 + C1, p = 1.1996747078094036e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*z + C2, p = 6.4861305569280024e-06, parse trees = 1, valid = True, error = 0.3480357327190646
-> C0*x**2*y*z**2 + C1, p = 4.55758773800141e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*z**2 + C2*z, p = 9.088444756131847e-07, parse trees = 1, valid = True, error = 1.9911468169699829
-> C0*x**2 + C1*x*y*z + C2, p = 1.1109651974084108e-06, parse trees = 3, valid = True, error = 0.24756703212197198
-> C0*x**2*y**2*z**2 + C1, p = 5.131079294401279e-07, parse trees = 2, valid = False
-> C0*x**2*y**2*z**3, p = 2.749254538729884e-07, parse trees = 1, valid = False
-> C0*x + C1*y + C2*z + C3, p = 5.323957552177265e-05, parse trees = 8, valid = True, error = 0.0008226341040322094
-> C0*x**2*y*z**3, p = 2.0827685899468813e-06, parse trees = 1, valid = False
-> C0*x*y**3*z + C1, p = 1.0907596034974684e-05, parse trees = 4, valid = False
-> C0*x**2*y**3, p = 2.8853742551040014e-05, parse trees = 2, valid = False
-> C0*x**2*y + C1*x*y**2*z, p = 6.215788635315246e-08, parse trees = 1, valid = False
-> C0*x*y**3*z**2 + C1*x*y*z, p = 1.1496722659879079e-09, parse trees = 1, valid = False
-> C0*y**2 + C1*y*z + C2, p = 6.859731677007056e-06, parse trees = 2, valid = False
-> C0*x + C1*y*z**2, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 10.888747501556036
-> C0*x*y + C1*y**2, p = 5.2461350092800024e-05, parse trees = 2, valid = False
-> C0*x*z**2 + C1*y, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 1.7178942705615108
-> C0*x*y**2 + C1*y**2*z**3 + C2, p = 2.0903132108871057e-09, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*y**2 + C2*z, p = 1.5835706143084127e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2, p = 8.168861745650079e-06, parse trees = 3, valid = True, error = 1.2779997029889543
-> C0*x**2*z + C1*x*y**4*z**2, p = 1.5175673911040386e-10, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2, p = 1.8176889512263685e-05, parse trees = 5, valid = True, error = 4.186008456252465
-> C0*x*y + C1*x*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 7.160946821529637
-> C0*x*y + C1*y + C2*z + C3, p = 1.5566713336627204e-06, parse trees = 1, valid = True, error = 0.03288686534873455
-> C0*x + C1*y**3, p = 2.6230675046400015e-05, parse trees = 1, valid = False
-> C0*x**2*z + C1*z**2 + C2, p = 2.1812267414716428e-07, parse trees = 1, valid = True, error = 7.760750635787311
-> C0*x**4*y*z, p = 1.962054493470721e-06, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 11.130267903350004
-> C0*x*z + C1*x + C2*y + C3, p = 1.1835683484104399e-08, parse trees = 1, valid = True, error = 0.00018803715641311185
-> C0*x*y*z + C1*x*y + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.23654516936787467
-> C0*y**3 + C1*y + C2*z + C3, p = 1.5623102199017813e-09, parse trees = 1, valid = False
-> C0*x**2*y**4, p = 1.904347008368641e-06, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z + C2*y + C3, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*z, p = 7.350947964518402e-06, parse trees = 2, valid = True, error = 11.294140990584985
-> C0*x*y**2*z + C1*z + C2, p = 8.850403974764597e-07, parse trees = 2, valid = False
-> C0*x*y + C1*y**3*z**2, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x*y + C1*y*z, p = 8.107663196160004e-05, parse trees = 3, valid = True, error = 11.371404743739015
-> C0*x**3*y*z, p = 2.9728098385920014e-05, parse trees = 2, valid = False
-> C0*x**2*y + C1*x*y**2*z + C2, p = 3.580294253941581e-09, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2, p = 1.5108868826726408e-06, parse trees = 1, valid = True, error = 1.2780540226713237
-> C0*x**2*y**2*z + C1*y, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x**4*z**2, p = 2.021510690242561e-06, parse trees = 1, valid = True, error = 35.87355058963859
-> C0*x*y**2*z**3 + C1*x + C2*z, p = 2.1536560354594418e-09, parse trees = 1, valid = False
-> C0*x*y**2 + C1*z**2 + C2, p = 8.821137557422087e-07, parse trees = 1, valid = False
-> C0*x**4*z**3 + C1, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 20.85810921409195
-> C0*x**4 + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 1.8818268898279398
-> C0*x + C1*y**2*z + C2*y, p = 8.561692335144962e-07, parse trees = 1, valid = False
-> C0*y**2*z + C1*y + C2*z, p = 8.821137557422084e-07, parse trees = 1, valid = False
-> C0*y*z**2 + C1*y*z + C2, p = 9.088444756131843e-07, parse trees = 1, valid = True, error = 0.7583121144539785
-> C0*y**2*z**2 + C1*z, p = 3.7868519817216017e-06, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*y, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 5.355426349545783
-> C0*x**2*z**4 + C1, p = 5.15011869514138e-07, parse trees = 1, valid = True, error = 20.806271786231825
-> C0*x**2*z**2 + C1*x**2 + C2, p = 1.1643901575797155e-07, parse trees = 1, valid = True, error = 0.5658801105664606
-> C0*x*y + C1*x + C2*y + C3*z + C4, p = 4.931534785043499e-08, parse trees = 1, valid = True, error = 0.0008441946201632752
-> C0*x*y + C1*y**2 + C2*y + C3, p = 1.9943706851278858e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**5*z + C2, p = 1.497193129936275e-11, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x*y, p = 6.404145866688434e-08, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*z + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.2444540281444165
-> C0*x**2*y*z + C1*x + C2, p = 8.561692335144962e-07, parse trees = 1, valid = True, error = 2.712179024742013
-> C0*x*z**2 + C1*y + C2, p = 1.3365359935488005e-05, parse trees = 2, valid = True, error = 0.07583373418130805
-> C0*x + C1*y + C2*z**2, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 0.0010278981379745835
-> C0*x*y*z + C1*x*z**2, p = 4.998644615872514e-07, parse trees = 1, valid = True, error = 12.971963273666915
-> C0*x + C1*y*z**2 + C2*y + C3*z + C4, p = 6.9101263169821644e-09, parse trees = 1, valid = True, error = 2.5363512057682844e-05
-> C0*x*y*z + C1*x + C2*y*z, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 1.011187280423733
-> C0*x**4 + C1*x, p = 3.4624491061248015e-06, parse trees = 1, valid = True, error = 7.907290221815908
-> C0*x**2*z + C1*y + C2, p = 8.042801890590723e-06, parse trees = 2, valid = True, error = 0.07199343528377387
-> C0*x**2*y**3*z + C1*x**2*z + C2*y + C3*z + C4, p = 6.646100191512326e-14, parse trees = 1, valid = False
-> C0*x**2*y**2*z**4 + C1*x*z + C2, p = 3.8662433148567914e-11, parse trees = 1, valid = False
-> C0*x + C1*y**4*z, p = 9.417861568659461e-07, parse trees = 2, valid = False
-> C0*x*y*z + C1*y*z + C2*z**2 + C3, p = 5.41311655167115e-11, parse trees = 1, valid = True, error = 0.4438723839200527
-> C0*y**3*z**2, p = 1.5314474926080006e-05, parse trees = 1, valid = False
-> C0*y**2 + C1*y*z + C2*y + C3, p = 2.083211800796642e-07, parse trees = 2, valid = False
-> C0*x*y**3 + C1*x + C2, p = 4.786489644306927e-08, parse trees = 1, valid = False
-> C0*x**2*y*z**3 + C1*x*z, p = 8.973566814414343e-09, parse trees = 1, valid = False
-> C0*x*y + C1*y**2 + C2*z, p = 8.561692335144968e-07, parse trees = 1, valid = False
-> C0*x**2*y**2*z + C1*z + C2, p = 1.1643901575797151e-07, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x**2*z + C2*y + C3*z, p = 6.622112252090349e-11, parse trees = 1, valid = True, error = 0.025979689688771436
-> C0*x**4*y*z**3 + C1, p = 8.709638378696271e-09, parse trees = 1, valid = False
-> C0*x**4*y + C1*y + C2*z + C3, p = 2.732030113327557e-14, parse trees = 1, valid = False
-> C0*x**2*y*z + C1*x*z + C2, p = 6.706887307659161e-09, parse trees = 1, valid = True, error = 2.338228422511055
-> C0*x**2*y + C1*z + C2, p = 6.486130556928005e-06, parse trees = 1, valid = True, error = 4.35201332261595
-> C0*x**2*y + C1*x + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 0.003924442083000808
-> C0*x**2*y**2*z**2 + C1*x*y + C2*x + C3, p = 1.5425626187222228e-11, parse trees = 1, valid = False
-> C0*y**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = False
-> C0*x*y**2 + C1*x*y + C2, p = 1.0304248539827413e-06, parse trees = 2, valid = False
-> C0*x*y + C1*z**3, p = 3.7868519817216017e-06, parse trees = 1, valid = True, error = 8.434528926693075
-> C0*x**2*y**3 + C1*x, p = 4.5704328200847384e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*y + C3, p = 2.1170730137813002e-07, parse trees = 1, valid = True, error = 0.002400701474276424
-> C0*x*y + C1*y**2 + C2*z + C3, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y + C1*x*z + C2*x + C3*y*z**2 + C4, p = 5.2729389949188664e-14, parse trees = 1, valid = True, error = 0.04960969210976694
-> C0*x**3*y*z**2 + C1*x + C2*y + C3, p = 4.869200185360551e-10, parse trees = 1, valid = False
-> C0*x**3*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = True, error = 2.4363530784190925
-> C0*x*y**2 + C1*y**3*z + C2*z + C3, p = 2.8046593067676784e-11, parse trees = 1, valid = False
-> C0*x**3*y**2 + C1, p = 3.4624491061248015e-06, parse trees = 1, valid = False
-> C0*x**2 + C1*y**2 + C2*y, p = 8.309877854699524e-07, parse trees = 1, valid = False
-> C0*x*y*z**2 + C1*x*y + C2, p = 1.1643901575797154e-07, parse trees = 1, valid = True, error = 0.638952109650706
-> C0*x*y**2 + C1*x + C2, p = 1.2590724022272007e-05, parse trees = 2, valid = False
-> C0*x**2*z + C1*y + C2*z + C3, p = 2.1170730137813005e-07, parse trees = 1, valid = True, error = 0.02456606529815328
-> C0*x*y**3 + C1*x + C2*z, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*y*z + C2*y + C3, p = 8.85309124611009e-10, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*z + C3, p = 1.6584303160757197e-09, parse trees = 1, valid = True, error = 0.958254532798076
-> C0*x**3*y**3 + C1*x*y + C2*x + C3, p = 1.4531580378793259e-11, parse trees = 1, valid = False
-> C0*x**3*z + C1*x + C2*z + C3, p = 3.8631670892116767e-10, parse trees = 1, valid = True, error = 0.9600645304682295
-> C0*y**3*z + C1*z, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*x*z**3 + C1*z + C2, p = 9.363852172984326e-07, parse trees = 1, valid = True, error = 8.908856626560718
-> C0*x*y*z**2 + C1*y + C2*z, p = 1.1996747078094033e-07, parse trees = 1, valid = True, error = 0.0443312692955253
-> C0*x**2*z + C1*x + C2*y + C3*z + C4, p = 6.706887307659159e-09, parse trees = 1, valid = True, error = 1.9434922394130745e-05
-> C0*x*z**4 + C1*x, p = 5.150118695141379e-07, parse trees = 1, valid = True, error = 13.190299180252858
-> C0*x**3*y*z + C1*x*y*z + C2, p = 1.168608044486532e-10, parse trees = 1, valid = False
-> C0*y**4*z**3 + C1*y + C2*z, p = 2.842825966806464e-10, parse trees = 1, valid = False
-> C0*y**4*z**2 + C1*z + C2, p = 3.800569474340191e-09, parse trees = 1, valid = False
-> C0*x**2*y**5*z**2 + C1, p = 2.678060101948303e-10, parse trees = 1, valid = False
-> C0*x*y + C1*x + C2*y, p = 6.295362011136003e-06, parse trees = 1, valid = True, error = 0.010971353075529397
-> C0*x**2*y*z + C1*x**2 + C2, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.3861140166879305
-> C0*x**2*y*z + C1*x + C2*z + C3, p = 6.706887307659157e-09, parse trees = 1, valid = True, error = 0.9689174214331723
-> C0*x + C1*y**2*z**2, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*y**2 + C1*z**2 + C2*z + C3, p = 2.181226741471643e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y**3*z**2 + C2, p = 4.869200185360552e-10, parse trees = 1, valid = False
-> C0*x**2*z**2 + C1*z + C2, p = 9.68255275446228e-10, parse trees = 1, valid = True, error = 7.940524621704409
-> C0*x*y**5 + C1*x*y*z**2 + C2*x + C3*y*z, p = 2.0104453079324783e-14, parse trees = 1, valid = False
-> C0*y**3*z + C1*y, p = 3.567371806310401e-06, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2*y + C3, p = 2.92664173425127e-09, parse trees = 1, valid = True, error = 0.04277020000940109
-> C0*x**2*y*z**2 + C1*x*y + C2*x + C3, p = 4.869200185360553e-10, parse trees = 1, valid = False
-> C0*x**3*y*z**2 + C1, p = 4.851625656582147e-07, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*x*y + C2, p = 2.7123441317739253e-08, parse trees = 1, valid = False
-> C0*y**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = False
-> C0*x*z**3 + C1*x + C2*y*z, p = 1.631557602620789e-08, parse trees = 1, valid = True, error = 2.6944409002612315
-> C0*x*y*z + C1*x*z + C2*y + C3*z + C4, p = 9.71762683356005e-13, parse trees = 1, valid = True, error = 0.0096224372737431
-> C0*x*y*z**3 + C1*x + C2*z + C3, p = 7.361838510272763e-12, parse trees = 1, valid = False
-> C0*x*y**3*z**2 + C1*y, p = 1.280829173337687e-07, parse trees = 2, valid = False
-> C0*x**3*z**2 + C1, p = 3.675473982259201e-06, parse trees = 1, valid = True, error = 16.76658983082739
-> C0*x*z**3 + C1*z**2 + C2, p = 3.0563613492620843e-08, parse trees = 1, valid = True, error = 7.610767797379387
-> C0*x**3*z**3 + C1*x*y*z**2 + C2*x*z**3 + C3*z, p = 1.3676662771262981e-17, parse trees = 1, valid = True, error = 5.655501869394933
-> C0*x**2 + C1*x*y**2, p = 3.462449106124803e-06, parse trees = 1, valid = False
-> C0*x**2*y + C1*x*y + C2*z, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.9795425564195288
-> C0*x**2*y*z + C1*x*y + C2*z**2 + C3, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 0.454862397503037
-> C0*y*z**4, p = 1.6256687800320006e-05, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*x + C2, p = 1.1301433882391353e-07, parse trees = 1, valid = False
-> C0*x**2*y + C1*x + C2*y + C3*z**2 + C4, p = 8.853091246110095e-10, parse trees = 1, valid = True, error = 0.00018665304001345943
-> C0*x*y*z + C1*x + C2*y + C3, p = 4.1096123208695825e-07, parse trees = 2, valid = True, error = 0.0007924239628762388
-> C0*y**2 + C1*z**2 + C2, p = 3.8492236614205467e-07, parse trees = 1, valid = False
-> C0*x*y**3 + C1*y, p = 3.4624491061248015e-06, parse trees = 1, valid = False
-> C0*x**3*y**2*z + C1*y*z + C2*y + C3, p = 1.542562618722223e-11, parse trees = 1, valid = False
-> C0*y**2*z**2 + C1*y, p = 3.675473982259201e-06, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y + C3*z + C4, p = 2.9266417342512697e-09, parse trees = 1, valid = True, error = 7.644366109038636e-05
-> C0*x**2*y*z**2 + C1*y, p = 4.851625656582148e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x + C2*z**2, p = 8.821137557422087e-07, parse trees = 1, valid = True, error = 1.1636428895616666
-> C0*y**2*z**3 + C1*y**2, p = 6.59821089295172e-08, parse trees = 1, valid = False
-> C0*x**2*y**3*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x**3*z + C1*x*y + C2*y*z + C3, p = 4.869200185360551e-10, parse trees = 1, valid = True, error = 0.34009149425084956
-> C0*x*y**2*z**2 + C1*y*z**2 + C2, p = 5.168774485102659e-10, parse trees = 1, valid = False
-> C0*x**2*y**2*z**2 + C1*x*y*z + C2, p = 2.75921343837098e-10, parse trees = 1, valid = False
-> C0*x*y*z + C1*x*y + C2*y, p = 1.1301433882391354e-07, parse trees = 1, valid = True, error = 0.05109182559993588
-> C0*x**2*z + C1*x*y**3*z**2, p = 1.1496722659879079e-09, parse trees = 1, valid = False
-> C0*x*y**2*z + C1*y**2 + C2*y + C3, p = 3.580294253941582e-09, parse trees = 1, valid = False
-> C0*x**2*y**3 + C1*y**2*z**2 + C2, p = 2.678060101948304e-10, parse trees = 1, valid = False
-> C0*x + C1*y*z + C2*z**2 + C3*z + C4, p = 7.1195240841634434e-09, parse trees = 1, valid = True, error = 0.21017968601548273
-> C0*y*z + C1*y + C2*z, p = 6.682679967744002e-06, parse trees = 1, valid = True, error = 0.0563504243799898
-> C0*y*z**2 + C1*y + C2, p = 3.2076863845171216e-06, parse trees = 2, valid = True, error = 0.07575332463176238
-> C0*y*z + C1*z**2 + C2, p = 2.2843392783412118e-08, parse trees = 1, valid = True, error = 4.324922261567052
-> C0*x**2*y*z + C1*y**2, p = 4.708930784329731e-07, parse trees = 1, valid = False
-> C0*x**2 + C1*x*y + C2*x + C3, p = 2.75701803512079e-09, parse trees = 1, valid = True, error = 0.350758537551189
-> C0*y**2*z + C1*z**2 + C2*z, p = 1.236028486833931e-07, parse trees = 1, valid = False
-> C0*x*z**3 + C1*y*z + C2, p = 1.236028486833931e-07, parse trees = 1, valid = True, error = 1.5820912649536554
-> C0*y**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**2*z + C1*z, p = 2.7844499865600013e-05, parse trees = 1, valid = True, error = 13.497386087508865
-> C0*x*y**2*z**3, p = 4.1655371798937625e-06, parse trees = 2, valid = False
-> C0*x**2 + C1*y + C2*z**2, p = 8.821137557422085e-07, parse trees = 1, valid = True, error = 0.28595278631544596
-> C0*x*y + C1*x + C2*y*z + C3, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.06069458932501464
-> C0*x*z**2 + C1*y + C2*z + C3, p = 4.362453482943286e-07, parse trees = 2, valid = True, error = 0.027552655058381212
-> C0*y**3*z + C1*y + C2, p = 1.7123384670289929e-06, parse trees = 2, valid = False
-> C0*y**4*z, p = 1.4864049192960007e-05, parse trees = 1, valid = False
-> C0*x*z**3 + C1*x + C2*z + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 1.0888414535327609
-> C0*x*z + C1*y**2*z, p = 3.675473982259202e-06, parse trees = 1, valid = False
-> C0*x**2 + C1*y**2 + C2*z**2 + C3*z + C4, p = 9.121366738416462e-10, parse trees = 1, valid = False
-> C0*x**2*z + C1*x, p = 5.405108797440001e-05, parse trees = 2, valid = True, error = 7.518987968625645
-> C0*x**3*y + C1*x + C2*y + C3, p = 1.5163599193164343e-09, parse trees = 1, valid = True, error = 0.0008353065976606284
-> C0*x**2*z + C1*x*y + C2*y*z + C3*z + C4, p = 1.204020409470973e-10, parse trees = 1, valid = True, error = 0.12481417987550374
-> C0*x*y + C1*y*z**2 + C2, p = 1.764227511484417e-06, parse trees = 2, valid = True, error = 0.4415349174796078
-> C0*x*y**2*z**2 + C1*x*y + C2*x + C3, p = 6.731182336242426e-12, parse trees = 1, valid = False
-> C0*x*z + C1*y**3, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y**2*z**2, p = 3.5222802266786394e-08, parse trees = 1, valid = False
-> C0*x**2*y + C1*y*z**3 + C2, p = 3.800569474340192e-09, parse trees = 1, valid = True, error = 3.519763134493226
-> C0*y**3*z + C1*z + C2, p = 2.1170730137813005e-07, parse trees = 1, valid = False
-> C0*x + C1*y*z**2 + C2*y*z + C3*z + C4, p = 2.2554652298629788e-10, parse trees = 1, valid = True, error = 0.2282991302555109
-> C0*x**2 + C1*y*z, p = 2.7025543987200012e-05, parse trees = 1, valid = True, error = 2.5962320375531007
-> C0*x*y + C1*x*z + C2*y, p = 8.561692335144963e-07, parse trees = 1, valid = True, error = 0.16075659796714917
-> C0*x**2*y + C1*x + C2*z + C3, p = 1.1835683484104402e-08, parse trees = 1, valid = True, error = 0.7152675795676134
-> C0*x**2*y + C1*x + C2*y + C3*z + C4, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.00012011558782723944
-> C0*x*y**2 + C1*x, p = 5.246135009280003e-05, parse trees = 2, valid = False
-> C0*x**3*y**3*z**4 + C1*z + C2, p = 5.103441175610964e-12, parse trees = 1, valid = False
-> C0*y*z + C1*z**2, p = 2.8688272588800013e-05, parse trees = 1, valid = True, error = 18.84261509849104
-> C0*x**2*y**3*z + C1*x + C2*y + C3*z, p = 6.427344244675929e-11, parse trees = 1, valid = False
-> C0*x**3*y + C1*x + C2, p = 8.309877854699524e-07, parse trees = 1, valid = True, error = 2.1287907423793544
-> C0*x*y*z**3 + C1*y**2*z + C2, p = 2.1536560354594418e-09, parse trees = 1, valid = False
-> C0*x**2*y*z**2 + C1*x**2*z + C2*x + C3, p = 6.62211225209035e-11, parse trees = 1, valid = False
-> C0*x**2*z + C1*x*z**2 + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 2.6549022422084336
-> C0*x**2 + C1*x*y*z + C2*y**2, p = 1.4917892724756588e-08, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*y + C2*z, p = 2.9289722082248415e-10, parse trees = 1, valid = False
-> C0*x**3*y + C1*x*y + C2*z, p = 1.4917892724756588e-08, parse trees = 1, valid = True, error = 1.7874224137721635
-> C0*x*y + C1*y + C2*z, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 0.05998773881215206
-> C0*z**3 + C1*z + C2, p = 1.4187654807552007e-05, parse trees = 2, valid = True, error = 7.771643817885402
-> C0*x*y**3 + C1*z + C2, p = 2.0548061604347915e-07, parse trees = 1, valid = False
-> C0*x*y**2*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = False
-> C0*x**3*y**3*z**3 + C1*z + C2, p = 2.302751047292124e-15, parse trees = 1, valid = False
-> C0*x*y*z**5, p = 2.918400593913448e-07, parse trees = 1, valid = False
-> C0*x*y**4*z**3 + C1*y**2, p = 1.5175673911040386e-10, parse trees = 1, valid = False
-> C0*y**4, p = 0.00010929447936000005, parse trees = 1, valid = True, error = 58.212901951166245
-> C0*x**3 + C1*y*z, p = 3.5673718063104015e-06, parse trees = 1, valid = True, error = 8.104848699360122
-> C0*x**2 + C1*x*y, p = 2.6230675046400012e-05, parse trees = 1, valid = True, error = 3.8975783620464806
-> C0*y**2*z**4 + C1*y, p = 6.798156677586621e-08, parse trees = 1, valid = False
-> C0*x**2*y**3*z**3, p = 3.629015991123446e-08, parse trees = 1, valid = False
-> C0*x**3*y*z + C1*y + C2*z, p = 1.5369950080052242e-08, parse trees = 1, valid = False
-> C0*x**3*y**3*z, p = 2.589911931381352e-07, parse trees = 1, valid = False
-> C0*x*y*z**7 + C1, p = 3.109175273377334e-10, parse trees = 1, valid = False
-> C0*y + C1*z**4, p = 3.901605072076801e-06, parse trees = 1, valid = True, error = 2.5217325145806364
-> C0*x*z + C1*y**3*z + C2, p = 2.794536378191317e-08, parse trees = 1, valid = False
-> C0*x*y*z + C1*y**2, p = 3.5673718063104015e-06, parse trees = 1, valid = False
-> C0*x**4*y*z**2, p = 2.668394111120181e-07, parse trees = 1, valid = False
-> C0*x*y**2 + C1*y*z, p = 3.5673718063104024e-06, parse trees = 1, valid = False
-> C0*x**4*y, p = 1.4426871275520007e-05, parse trees = 1, valid = False
-> C0*y**5*z + C1, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*z**5 + C1, p = 4.019835528806403e-06, parse trees = 1, valid = True, error = 20.75322839804768
-> C0*x**2*y**2*z + C1*x, p = 4.7089307843297307e-07, parse trees = 1, valid = False
-> C0*x*z + C1*y*z + C2*z**2 + C3, p = 2.9664683684014336e-08, parse trees = 1, valid = True, error = 3.4031681887125766
-> C0*y + C1*z**3 + C2, p = 6.885185421312002e-06, parse trees = 1, valid = True, error = 0.07812450509188332
-> C0*x*z**3 + C1*x + C2, p = 2.8792192987425686e-08, parse trees = 1, valid = True, error = 3.3212797274245407
-> C0*x**3*z**2 + C1*x*z, p = 6.598210892951721e-08, parse trees = 1, valid = True, error = 9.79351546667896
-> C0*x*y*z + C1*y*z, p = 3.675473982259202e-06, parse trees = 1, valid = True, error = 21.096163172346017
-> C0*x**2*z + C1*x + C2*y**2 + C3*z + C4, p = 2.889648982730334e-11, parse trees = 1, valid = False
-> C0*x**2*z + C1*x**2, p = 3.5673718063104024e-06, parse trees = 1, valid = True, error = 2.1726623394280677
-> C0*x*y*z + C1*y**2 + C2, p = 8.561692335144965e-07, parse trees = 1, valid = False
-> C0*x*y + C1*y**3 + C2, p = 8.309877854699526e-07, parse trees = 1, valid = False
-> C0*x*z + C1*x + C2*y, p = 6.50962591625742e-09, parse trees = 1, valid = True, error = 0.0033668325250160443
-> C0*x**2*y*z**4 + C1*z, p = 9.245493081517807e-09, parse trees = 1, valid = False

Final score:
model: -0.801302679237565*x**2 + 6.20585027903014*x + 9.9999646378683*y - 1.52585782872715; error: 0.0005611603898739102
model: 10.0*x + 6.98497574445671*y - 1.02640349075074*z**2 - 0.142145258768674; error: 0.0007864498959397288
model: -0.394230576356942*x*y + 6.37865870933345*x + 10.0*y - 1.57649346369041; error: 0.0008019774008962151
model: -0.236117219121037*x*y + 5.91274893877196*x + 9.99909302722605*y - 3.34577976991185*z; error: 0.0008008266963662371
model: -0.00766731140031616*x**3*y + 0.00492847668878268*x**2*y*z + 8.38385878996979*x + 7.90731591070038*y - 0.614611194980886; error: 0.00040010854733692013
model: 9.97238703031483*x - 0.428036906369901*y*z + 7.42650542799168*y - 0.628351300949291; error: 0.000179210242387171
model: -0.675811792417062*x*z + 7.54505430264039*x + 8.63668323251803*y - 1.95849263052411*z; error: 8.850671037604271e-05
model: 5.22716663129031*x + 9.99938533140536*y - 8.37415615793685*z + 2.36173532518252; error: 0.0008226341040322094
model: -0.877950876789105*x*z + 9.99535400929563*x + 7.38550161602604*y - 0.617064542958862; error: 0.00018803715641311185
model: -0.690511726565638*x*y + 7.32150360894514*x + 9.96083657663779*y + 6.30285916545396*z - 4.53338271665795; error: 0.0008441946201632752
model: 9.27506721125998*x - 0.0210197623922166*y*z**2 + 7.79502798689463*y - 5.47178317830793*z + 1.5363497766863; error: 2.5363512057682844e-05
model: -0.0408426932463937*x**2*z + 7.19051930409847*x + 8.76129781330126*y - 4.73927932292811*z + 1.1445323362156; error: 1.9434922394130745e-05
model: -0.0390358624202915*x**2*y + 9.37914502408191*x + 7.63632382977442*y + 0.0956514293101994*z**2 - 0.76627380273228; error: 0.00018665304001345943
model: -0.0431890116822257*x*y*z + 9.98548246279993*x + 6.99847043774328*y - 0.336852765794953; error: 0.0007924239628762388
model: -0.544339346673222*x*z + 5.68163846500563*x + 9.56132633857798*y - 3.16239072377797*z + 0.383451881229683; error: 7.644366109038636e-05
model: -0.00372847838092404*x**3*y + 9.98621462215951*x + 6.96977343005835*y - 0.320580365105526; error: 0.0008353065976606284
model: -0.0272200817531278*x**2*y + 7.81213148102818*x + 8.46063857340686*y - 2.03624577676065*z - 0.0116021121509501; error: 0.00012011558782723944
[2] [1, 3]


========================== discussion: ==============================
model: -9.85764357227234*x + 9.9333747564978*y                               ; error: 2.94709382690573e-06
model: -9.55829580188787*x + 9.78920618974904*y + 0.0232261285460231         ; error: 2.4772067855792343e-06

Really: dx_dt = \rho(y-x) = -\rho*x + \rho*y,
where \rho:= 10, tj. -10*x + 10*y.
we can see eq_dicoverer found the right equation.