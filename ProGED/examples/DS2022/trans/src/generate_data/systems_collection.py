from src.generate_data.system_obj import System
import numpy as np
import ProGED as pg
import sympy

n_inits = 10

sys_bacres = System(sys_name="bacres",
                    benchmark="strogatz",
                    sys_vars=["x", "y"],
                    orig_expr=["20 - x - ((x * y) / (1 + 0.5 * x**2))",
                               "10 - (x * y / (1 + 0.5 * x**2))"],
                    sym_structure=["C - (x*y / (C * x**2 + C)) - x",
                                    "C - (x*y / (C * x**2 + C))"],
                    sym_params=[[20, 0.5, 1], [10, 0.5, 1]],
                    inits=np.tile([5, 10], n_inits).reshape(n_inits, -1) + np.random.normal(1, 1, (n_inits, 2)),
                    bounds=[0, 20],
                    data_column_names=["x", "y"],
                    grammar_type=['strogatz1'],
                    grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                    gram_structure=["C*x*y / (C*x**2 + C) + C*x + C", "C*x*y/(C*x**2 + C) + C"],
                    gram_params=[[-1., 0.5, 1., -1., 20.], [-1., 0.5, 1., 10.]],
                    expr_parts_yes=[["C0*x*y", "/(C", "+ C", "*x**2 + C"],
                                    ["C0*x*y", "/(C", "+ C", "*x**2 + C"]],
                    expr_parts_no=[["sqrt", "tan", "exp", "cot", "sin", "x**3", "y**3"],
                                   ["sqrt", "tan", "exp", "cot", "sin", "x**3", "y**3"]],
                    num_samples=5000,
                    num_batches=100,
                    sindy_params=[20, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  10,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], #['1', 'x', 'y', 'x^2', 'y^2', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'xy', 'x/y', 'y/x', 'cos(y)/(x)', 'x^3', 'y^3', 'x^2y', 'y^2x']

                    )

sys_barmag = System(sys_name="barmag",
                    benchmark="strogatz",
                    sys_vars=["x", "y"],
                    orig_expr=["0.5 * sin(x-y) - sin(x)", "0.5 * sin(y-x) - sin(y)"],
                    sym_structure=["C * sin(x-y) - sin(x)", "C * sin(x-y) - sin(y)"],
                    sym_params=[[0.5], [-0.5]],
                    inits=np.tile([2*np.pi, 2*np.pi], n_inits).reshape(n_inits, -1) + np.random.uniform(0, 1, (n_inits, 2)),
                    bounds=[-5, 5],
                    data_column_names=["x", "y"],
                    grammar_type=['strogatzosc1'],
                    grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                    gram_structure=["C*sin(C*x) + C*sin(C*x + C*y)", "C*sin(C*y) + C*sin(C*x + C*y)"],
                    gram_params=[[-1., 1., 0.5, 1., -1.], [-1., 1., -0.5, 1., -1.]],
                    expr_parts_yes=[["C0*sin(C1*x", "*sin(C", "*x + C"],
                                    ["C0*sin(C1*y", "*sin(C", "*x + C"]],
                    expr_parts_no=[["sqrt", "tan", "exp", "cot", "cos", '/', "x*", "y*"],
                                   ["sqrt", "tan", "exp", "cot", "cos", '/', "x*", "y*"]],
                    num_samples=5000,
                    num_batches=100,
                    sindy_params=[0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0.5, 0, 0, 0,
                                  0,  0,-1, 0, 0, 0, 0, 0, 0, 0,-0.5, 0, 0, 0],
                    ) # ['1', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'tan(x)', 'tan(y)', 'cot(x)', 'cot(y)', 'sin(x+y)', 'sin(x-y)', 'sin^2(y) * sin(x)', 'cos^2(y) * sin(x)', 'cos(x) cot(y)']



sys_glider = System(sys_name="glider",
                    benchmark="strogatz",
                    sys_vars=["x", "y"],
                    orig_expr=["-0.05 * x**2 - sin(y)", "x - (cos(y)/x)"],
                    sym_structure=["C * x**2 - sin(y)", "x - (cos(y)/x)"],
                    sym_params=[[-0.05], []],
                    inits=np.tile([5, 0], n_inits).reshape(n_inits, -1) + np.random.normal(1, 1, (n_inits, 2)),
                    bounds=[-5, 5],
                    data_column_names=["x", "y"],
                    grammar_type=['strogatz1'],
                    grammar_vars=[["'x'", "'y'"], [1 / 2, 1 / 2]],
                    gram_structure=["C*x**2 + C*sin(C*y)", "C*x + C*cos(C*y)/(C*x)"],
                    gram_params=[[-0.05, -1., 1.], [1., -1., 1., 1.]],
                    expr_parts_yes=[["C0*x**2 + C1*sin(C2*y)"],
                                    ["C0*x + C1*cos(C2*y", ")/(C"]],
                    expr_parts_no=[["sqrt", "tan", "exp", "cot", "cos", '/', "x**3", "y*", "C5"],
                                   ["sqrt", "tan", "exp", "cot", "sin", "x*", "y*", "C5"]],
                    num_samples=5000,
                    num_batches=100,
                    sindy_params=[0, 0, 0, -0.05, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 1, 0,     0, 0, 0, 0, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0],
                    ) # ['1', 'x', 'y', 'x^2', 'y^2', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'xy', 'x/y', 'y/x', 'cos(y)/(x)', 'x^3', 'y^3', 'x^2y', 'y^2x']



sys_lotka = System(sys_name="lv",
                   benchmark="strogatz",
                   sys_vars=["x", "y"],
                   orig_expr=["3*x - 2*x*y - x**2", "2*y - x*y - y**2"],
                   sym_structure=["C*x**2 + C*x*y + C*x", "C*y - x*y - y**2"],
                   sym_params=[[-1, -2, 3], [2]],
                   inits=np.random.randint(low=1, high=8, size=(n_inits, 2)),
                   bounds=[-5, 5],
                   data_column_names=["x", "y"],
                   grammar_type=['polynomial1'],
                   grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                   gram_structure=["C*x**2 + C*x*y + C*x", "C*x*y + C*y**2 + C*y"],
                   gram_params=[[-1, -2, 3], [-1., -1., 2.]],
                   expr_parts_yes=[["C0*x**2 + C1*x*y + C2*x"],
                                   ["C0*x*y + C1*y**2 + C2*y"]],
                   expr_parts_no=[["sqrt", "tan", "exp", "cot", '/', "x**3", "y*", "C5"],
                                  ["sqrt", "tan", "exp", "cot", '/', "x**", "C5"]],
                   num_samples=1000,
                   num_batches=20,
                   sindy_params=[0, 3, 0, -1, 0, -2, 0, 0, 0, 0,
                                 0, 0, 2, 0, -2, -1, 0, 0, 0, 0],
                   )

sys_predprey = System(sys_name="predprey",
                      benchmark="strogatz",
                      sys_vars=["x", "y"],
                      orig_expr=["x*(4 - x - y/(1+x))", "y*(x/(1+x) - 0.075*y)"],
                      sym_structure=["x * (C - x - y/(C + x))", "y * (C*y + x/(C + x))"],
                      sym_params=[[4, 1], [-0.075, 1]],
                      inits=np.tile([5, 10], n_inits).reshape(n_inits, -1) + np.random.normal(1, 1, (n_inits, 2)),
                      bounds=[-5, 5],
                      data_column_names=["x", "y"],
                      grammar_type=['strogatz1'],
                      grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                      gram_structure=["C*x**2 + C*x*y/(C*x + C) + C*x", "C*x*y/(C*x + C) + C*y**2"],
                      gram_params=[[-1., -1., 1., 1., 4.], [1., 1., 1., -0.075]],
                      expr_parts_yes=[["C0*x**2 + ", "*x*y/(C"],
                                      ["C0*x*y/(C", "*y**2"]],
                      expr_parts_no=[["sqrt", "tan", "sin", "exp", "cos", "y**", "x**3", "y "],
                                     ["sqrt", "tan", "sin", "exp", "cos", "x**", "y**3", "y "]],
                      num_samples=5000,
                      num_batches=100,
                      sindy_params=[0, 4, 0,-1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, # ['1', 'x', 'y', 'x^2', 'y^2', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'xy', 'x/y', 'y/x', 'cos(y)/(x)', 'x^3', 'y^3', 'x^2y', 'y^2x']
                                    0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1, 0, 0, 0, 0, 0],
                      )


sys_shearflow = System(sys_name="shearflow",
                       benchmark="strogatz",
                       sys_vars=["x", "y"],
                       orig_expr=["cot(y) * cos(x)", "(cos(y)**2 + 0.1*sin(y)**2) * sin(x)"],
                       sym_structure=["cos(x) * cot(y)", "(C*sin(y)**2 + cos(y)**2) * sin(x)"],
                       sym_params=[[], [0.1]],
                       inits=np.array([2*np.pi*np.random.rand(n_inits)-np.pi, np.pi*np.random.rand(n_inits)-np.pi/2]).reshape(n_inits, -1),
                       bounds=[-5, 5],
                       data_column_names=["x", "y"],
                       grammar_type=['strogatzosc1'],
                       grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                       gram_structure=["C*cos(C*x) * cot(C*y)",
                                       "C*sin(C*x)*sin(C*y)**2 + C*sin(C*x)*cos(C*y)**2"],
                       gram_params=[[1., 1., 1.], [0.1, 1., 1., 1., 1., 1.]],
                       expr_parts_yes=[["C0*cos(C1*x)*cot(C2*y)"],
                                       ["C0*sin(C1*x)*sin(C2*y)**2", "*cos("]],
                       expr_parts_no=[["sqrt", "tan", "sin", "exp", '/', "x**", "y**"],
                                      ["sqrt", "tan", "exp", "cot", '/', "x**", "y**"]],
                       num_samples=5000,
                       num_batches=100,
                       sindy_params=[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                                     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.1, 1, 0,], # ['1', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'tan(x)', 'tan(y)', 'cot(x)', 'cot(y)', 'sin(x+y)', 'sin(x-y)', 'sin^2(x) * sin(y)', 'cos^2(x) * sin(y)', 'cos(x) cot(y)']
                       )




sys_vdp = System(sys_name="vdp",
                 benchmark="strogatz",
                 sys_vars=["x", "y"],
                 orig_expr=["10 * (y - 1/3 * (x**3 - x))", "-0.1 * x"],
                 sym_structure=["C * (C * (x**3 - x) + y)", "C * x"],
                 sym_params=[[10, -1/3], [-1/10]],
                 inits=np.random.rand(n_inits*2).reshape(n_inits, -1),
                 bounds=[-10, 10],
                 data_column_names=["x", "y"],
                 grammar_type=['polynomial1'],
                 grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                 gram_structure=["C*x**3 + C*x + C*y",
                                 "C*x"],
                 gram_params=[[-10/3, 10/3, 10], [-1/10]],
                 expr_parts_yes=[["C0*x**3 +", "C1*x +", "*y"],
                                 ["C0*x"]],
                 expr_parts_no=[["sqrt", "sin", "cos", "exp", '/', 'y**', 'C4'],
                                ["sqrt", "sin", "cos", "exp", '/', "x** ",'C2']],
                 num_samples=1000,
                 num_batches=20,
                 sindy_params=[0, 10/3, 10, 0, 0, 0, -10/3, 0, 0, 0,
                               0,    1,  0, 0, 0, 0,     0, 0, 0, 0], # ['1', 'x', 'y', 'x^2', 'y^2', 'xy', 'x^3', 'y^3', 'x^2y', 'y^2x']
                 )

sys_myvdp = System(sys_name="myvdp",
                   benchmark="custom",
                   sys_vars=["x", "y"],
                   orig_expr=["y", "-3*x + 2*y*(1 - x**2)"],
                   sym_structure=["y", "C*x + C*y*(1 - x**2)"],
                   sym_params=[[], [-3., 2.]],
                   inits=np.random.uniform(low=-5, high=5, size=(n_inits*2,)).reshape(n_inits, -1),
                   bounds=[-5, 5],
                   data_column_names=["x", "y"],
                   grammar_type=['polynomial1'],
                   grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                   gram_structure=["C*y", "C*x**2*y + C*x + C*y"],
                   gram_params=[[1.], [-2., -3., 2.]],
                   expr_parts_yes=[["C0*y"],
                                   ["C0*x**2*y +", "*x +", "*y"]],
                   expr_parts_no=[["sqrt", "sin", "cos", "exp", "y*", "x", 'C2', '/', '+', '-'],
                                  ["sqrt", "sin", "cos", "exp", "x**2 ", "x**3*y", "x**4", '/', 'C4']],
                   num_samples=1000,
                   num_batches=20,
                   sindy_params=[0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                                 0,-3, 2, 0, 0, 0, 0, 0,-2, 0], # ['1', 'x', 'y', 'x^2', 'y^2', 'xy', 'x^3', 'y^3', 'x^2y', 'y^2x']
                   )

sys_stl = System(sys_name="stl",
                 benchmark="custom",
                 sys_vars=["x", "y"],
                 orig_expr=["-3*y + x*(1 - x**2 - y**2)", "3*x + y*(1 - x**2 - y**2)"],
                 sym_structure=["C*y + x*(C - x**2 - y**2)", "C*x + y*(C - x**2 - y**2)"],
                 sym_params=[[-3., 1.], [3., 1.]],
                 inits=np.random.uniform(low=-5, high=5, size=(n_inits*2,)).reshape(n_inits, -1),
                 bounds=[-5, 5],
                 data_column_names=["x", "y"],
                 grammar_type=['polynomial1'],
                 grammar_vars=[["'x'", "'y'"], [1/2, 1/2]],
                 gram_structure=["C*x**3 + C*x*y**2 + C*x + C*y",
                                 "C*x**2*y + C*x + C*y**3 + C*y"],
                 gram_params=[[-1., -1., 1., -3.], [-1., 3., -1., 1.]],
                 expr_parts_yes=[["C0*x**3 +", "*x*y**2 +", "*x +"],
                                 ["C0*x**2*y +", "*y**3", "*x +"]],
                 expr_parts_no=[['/', "sqrt", "sin", "cos", "exp", "*x*y ", "x**3*y", "x*y**3", "x**2*y*", "x**3*y*", "y**4", "x**4"],
                                ['/', "sqrt", "sin", "cos", "exp", "*x*y ", "x**3*y", "x*y**3", "x**2*y*", "x**3*y*", "y**4", "x**4"]],
                num_samples = 5000,
                num_batches =100,
                sindy_params=[0, 1, -3, 0, 0, 0, -1, 0, 0, -1,
                              0, 3,  1, 0, 0, 0,  0,-1, -1, 0], # ['1', 'x', 'y', 'x^2', 'y^2', 'xy', 'x^3', 'y^3', 'x^2y', 'y^2x']
                )

sys_cphase = System(sys_name="cphase",
                    benchmark="custom",
                    sys_vars=["x", "y", "t"],
                    orig_expr=["C*sin(x) + C*sin(y) + C*sin(C*t) + C", "C*sin(x) + C*sin(y) + C"],
                    sym_structure=["C*sin(x) + C*sin(y) + C*sin(C*t) + C", "C*sin(x) + C*sin(y) + C"],
                    sym_params=[[0.8, 0.8, -0.5, 2*np.pi*0.0015, 2.], [0, 0.6, 4.53]],
                    inits=np.random.uniform(low=-5, high=5, size=(n_inits*2,)).reshape(n_inits, -1),
                    bounds=[-5, 5],
                    data_column_names=["x", "y"],
                    grammar_type=['strogatzosc2'],
                    grammar_vars=[["'x'", "'y'", "'t'"], [0.4, 0.4, 0.2]],
                    gram_structure=["C*sin(C*x) + C*sin(C*y) + C*sin(C*t) + C", "C*sin(C*x) + C*sin(C*y) + C"],
                    gram_params=[[0.8, 1., 0.8, 1., -0.5, 2*np.pi*0.0015, 2.], [0, 1., 0.6, 1., 4.53]],
                    expr_parts_yes=[["C0*sin(x) +", "C1*sin(y) +", "*t)"],
                                    ["C0*sin(x) +", "*sin(y) +"]],
                    expr_parts_no=[['/', "sqrt", "exp", "sqrt", "x*y", "x*", "y*", "t*"],
                                   ['/', "sqrt", "exp", "sqrt", "x*y", "x*", "y*", "t*"]],
                    num_samples=7500,
                    num_batches=150,
                    sindy_params=[], # ['1', 'sin(x)', 'sin(y)', 'cos(x)', 'cos(y)', 'tan(x)', 'tan(y)', 'cot(x)', 'cot(y)', 'sin(x+y)', 'sin(x-y)', 'sin^2(x) * sin(y)', 'cos^2(x) * sin(y)', 'cos(x) cot(y)']

                    )

sys_lorenz = System(sys_name="lorenz",
                    benchmark="custom",
                    sys_vars=["x", "y", "z"],
                    orig_expr=["10*(-x + y)", "28*x - x*z - y", "(-8/3)*z + x*y"],
                    sym_structure=["C*(-x + y)", "C*x - x*z - y", "C*z + x*y"],
                    sym_params=[[10.], [28.], [-8/3]],
                    inits=np.random.uniform(low=-5, high=5, size=(n_inits*3,)).reshape(n_inits, -1),
                    bounds=[-30, 30],
                    data_column_names=["x", "y", "z"],
                    grammar_type=['polynomial2'],
                    grammar_vars=[["'x'", "'y'", "'z'"], [1/3, 1/3, 1/3]],
                    gram_structure=["C*x + C*y", "C*x*z + C*x + C*y", "C*x*y + C*z"],
                    gram_params=[[-10., 10.], [-1., 28., -1.], [1., -8/3]],
                    expr_parts_yes=[["C0*x + C1*y"],
                                    ["C0*x*z + C1*x + C2*y"],
                                    ["C0*x*y + C1*z"]],
                    expr_parts_no=[['/', "sqrt", "sin", "cos", "exp", "x**", "y**", "z**", "C3"],
                                   ['/', "sqrt", "sin", "cos", "exp", "x**", "y**", "z**", "C4"],
                                   ['/', "sqrt", "sin", "cos", "exp", "x**", "y**", "z**", "C3"]],
                    num_samples=1000,
                    num_batches=20,
                    sindy_params=[0, -10, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0,  28, -1, 0, 0, 0, 0, 0,-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  0, 0, 0, -8/3, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                                  ], # ['1', 'x', 'y', 'z', 'x^2', 'y^2', 'z^2', 'xy', 'xz', 'yz', 'x^3', 'y^3', 'z^3', 'x^2y', 'x^2z', 'y^2z', 'y^2x', 'z^2x', 'z^2y']
                    )

sindy_params_vdpvdpUS = np.zeros(31*4)
sindy_params_vdpvdpUS[[2, 33, 34, 51, 67, 97, 98, 100, 117]] = [1, -3, 0.5, -0.5, 1, -3, 0.5, 0.4, -0.5]
sys_vdpvdpUS = System(sys_name="vdpvdpUS",
                      benchmark="custom",
                      sys_vars=["x", "y", "u", "v"],
                      orig_expr=["y", "-3*x + 0.5*y*(1 - x**2)", "v", "-3*u + 0.5v*(1 - u**2) + 0.4*y**2"],
                      sym_structure=["y", "C*x + C*y*(C - x**2)", "v", "C*u + C*v*(C - u**2) + C*y**2"],
                      sym_params=[[], [-3., 0.5, 1.], [], [-3., 0.5, 1., 0.4]],
                      inits=np.random.uniform(low=-5, high=5, size=(n_inits*4,)).reshape(n_inits, -1),
                      bounds=[-5, 5],
                      data_column_names=["x", "y", "u", "v"],
                      grammar_type=['polynomial3','polynomial4'],
                      grammar_vars=[[["'x'", "'y'", "'u'", "'v'"], [0.45, 0.45, 0.05, 0.05]],
                                    [["'x'", "'y'", "'u'", "'v'"], [0.05, 0.05, 0.45, 0.45]]],
                      gram_structure=["C*y",
                                      "C*x**2*y + C*x + C*y",
                                      "C*v",
                                      "C*u**2*v + C*u + C*v + C*y**2"],
                      gram_params=[[1.], [-0.5, -3., 0.5], [1.], [-0.5, -3., 0.5, 0.4]],
                      expr_parts_yes=[["C0*y"],
                                      ["*x**2*y +", "*x +", "*y"],
                                      ["C0*v"],
                                      ["*u +", "*v +", "*u**2*v +", "*y**2"]],
                      expr_parts_no=[['/', "sqrt", "sin", "cos", "exp", "y*", "x", "u", "v", 'C1', 'C2', '/', '+', '-'],
                                     ['/', "sqrt", "sin", "cos", "exp", "u", "x**2 ", "x**3*y", "x**4", '/'],
                                     ['/', "sqrt", "sin", "cos", "exp", "x", "y", "v*", "u*v", 'C1', 'C2', '/', '+', '-'],
                                     ['/', "sqrt", "sin", "cos", "exp", "x", "u**2 ", "u**3*v", "u**4", '/']],
                      num_samples=1000,
                      num_batches=20,
                      sindy_params=sindy_params_vdpvdpUS,
                      # ['1', 'x', 'y', 'u', 'v', 'x^2', 'y^2', 'u^2', 'v^2', 'xy', 'xu', 'xv', 'yu', 'yv', 'uv', 'x^3', 'y^3', 'u^3', 'v^3', 'x^2y', 'x^2u', 'x^2v', 'y^2u', 'y^2v', 'u^2v', 'y^2x', 'u^2x', 'v^2x', 'u^2y', 'v^2y', 'v^2u']
                      )

sindy_params_stlvdpBL = np.zeros(31*4)
sindy_params_stlvdpBL[[1, 2, 15, 25, 32, 33, 35, 47, 50, 66, 95, 96, 97, 117]] = [1, -3, -1, -1,  3, 1, 0.8, -1, -1, 1, 0.4, -3, 0.5, -0.5]

sys_stlvdpBL = System(sys_name="stlvdpBL",
                      benchmark="custom",
                      sys_vars=["x", "y", "u", "v"],
                      orig_expr=["-3*y + x*(1 - x**2 - y**2)", "3*x + y*(1 - x**2 - y**2) + 0.8*v", "v", "-3*u + 0.5*v*(1 - u**2) + 0.4*y"],
                      sym_structure=["C*y + x*(C - x**2 - y**2)", "C*v + C*x + y*(C - x**2 - y**2)", "v", "C*u + C*v*(1 - u**2) + C*y"],
                      sym_params=[[-3., 1.], [0.8, 3., 1.], [], [-3., 0.5, 0.4]], # freq w = 3; a = 1, eta = 0.5; couplings C1 = 0.8, C2 = 0.2
                      inits=np.random.uniform(low=-5, high=5, size=(n_inits*4,)).reshape(n_inits, -1),
                      bounds=[-5, 5],
                      data_column_names=["x", "y", "u", "v"],
                      grammar_type=['polynomial3','polynomial4'],
                      grammar_vars=[[["'x'", "'y'", "'u'", "'v'"], [0.45, 0.45, 0.05, 0.05]],
                                    [["'x'", "'y'", "'u'", "'v'"], [0.05, 0.05, 0.45, 0.45]]],
                      gram_structure=["C*x**3 + C*x*y**2 + C*x + C*y",
                                      "C*v + C*x**2*y + C*x + C*y**3 + C*y",
                                      "C*v",
                                      "C*u**2*v + C*u + C*v + C*y"],
                      gram_params=[[-1., -1., 1., -3.], [0.8, -1., 3., -1., 1.], [1.], [-0.5, -3., 0.5, 0.4]],
                      expr_parts_yes=[["*x**3 +", "*x*y**2 +", "*x +", "C4*"],
                                      ["C0*v +", "*x**2*y", "*y**3", "*x +"],
                                      ["C0*v"],
                                      ["*u**2*v", "*u +", "*v +", "*y"]],
                      expr_parts_no=[['/', "sqrt", "sin", "cos", "exp", "u", "v", "x*y**3", "y**4", "x**4"],
                                     ['/', "sqrt", "sin", "cos", "exp", "u", "v*", "x**3*y", "x*y**3", "y**4", "x**4"],
                                     ['/', "sqrt", "sin", "cos", "exp", "x", "y", "v*", "u", 'C1', 'C2', '/', '+'],
                                     ['/', "sqrt", "sin", "cos", "exp", "x", "y*", "u**2 ", "u**3*v", "u**4", '/']],
                      num_samples=2000,
                      num_batches=20,
                      sindy_params=sindy_params_stlvdpBL,
                      )

strogatz = {
    sys_bacres.sys_name: sys_bacres,
    sys_barmag.sys_name: sys_barmag,
    sys_glider.sys_name: sys_glider,
    sys_lotka.sys_name: sys_lotka,
    sys_predprey.sys_name: sys_predprey,
    sys_shearflow.sys_name: sys_shearflow,
    sys_vdp.sys_name: sys_vdp,
}

mysystems = {
    # sys_myvdp.sys_name: sys_myvdp,
    sys_stl.sys_name: sys_stl,
    sys_cphase.sys_name: sys_cphase,
    sys_lorenz.sys_name: sys_lorenz,
    # sys_vdpvdpUS.sys_name: sys_vdpvdpUS,
    # sys_stlvdpBL.sys_name: sys_stlvdpBL,
}
