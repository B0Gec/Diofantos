from ProGED.examples.DS2022.trans.mlj import ete
import pandas as pd
import numpy as np
import time

def downsample(lorenz: np.ndarray, size: int) -> np.ndarray:
    m = int(lorenz.shape[0] / size)
    lorenz = lorenz[:(m * size), :]
    remains = lorenz[(m * size):, :]
    remaining = remains.mean(axis=0)

    def aggregate(array: np.ndarray) -> np.ndarray:
        return array.reshape(-1, m).mean(axis=1)

    lor = np.apply_along_axis(aggregate, 0, lorenz)
    lor = np.vstack((lor, remaining))
    return lor



c = pd.read_csv('ete_dx.csv')
a = np.array(c)
print(a.shape, a[:6, :6])
# d = downsample(a, 100)
# print(d[:10, :10])

X = a[:, :2]
y = a[:, -1]
print(X[:6, :5], y[:6])

start = time.time()

settings = {
    # 'n_trees_to_refine': 1,
    # 'n_trees_to_refine': 2,
    'n_trees_to_refine': 3,  # good
    # 'n_trees_to_refine': 5,  # good
    # 'n_trees_to_refine': 4,
    # 'n_trees_to_refine': 10,
    # 'n_trees_to_refine': 15,
    # 'n_trees_to_refine': 20,
}

print(settings)
eq = ete(X, y, settings)
print(eq)

duration = time.time() - start
print(duration)

# def ete_fit(X, x_dot: np.ndarray, sys_name="default", settings=DEFAULT_SETTINGS):
#     # print(X.shape, x_dot.shape)
#     eqs = []
#     for i in range(x_dot.shape[1]):
#         y = x_dot[:, i]
#         # print(y.shape)
#         eqs.append(ete(X, y, settings))
#

# c = pd.read_csv('results/good/vdp100.csv')
# for i in c:
#     print(i, c[i])
#     print()
#     eqs = [e for e in c[i][2:4]]
#     print(eqs)
#
#
# # online results:
# # 0.015*x1⋅(0.007*x0 + 68.0)
# # 0.015*x1⋅ 68.0) , tj. 0*x1*x0 + 1*x1
# # dx = y

# offline:
# (0.00012448863262091802 - 0.26511025499252517*x_1)*(-0.472474337927469*sqrt(1 - 0.011288456031638073*sqrt(1 - 0.12788799216752359*x_0)) - 3.29)
# (-0.803 - 0.752/(-745.517881743959*sqrt(-0.00037055297763304646*x_0 + (0.4128428237751253*x_0 + 0.058650126058307891)/(0.7364173749792365*x_1 + 68.47965419824272) + 0.99465900340152749) - 0.00434))*(0.00048440496980374861 - 1.24454536371491*x_1)

# edited:
# (0.00012448863262091802 - 0.26511025499252517*x_1)*(-0.472474337927469*sqrt(1 - 0.011288456031638073*sqrt(1 - 0.12788799216752359*x_0)) - 3.29)
# dx = -0.265*x_1*-0.5*sqrt(1-

# refine 10 no good
# (-0.13255512749626258*x_1 - 7.7556836895407888e-6)*(0.095835217836757477*sqrt(-0.015739072152742626*x_0 - 0.0079827662274703848*x_1 + 1) - 7.640000000000001)
# (0.094632385502810773 - 60.97535864828078*x_1)*(-0.0073021035873233126*sqrt((0.00033757961783439494*cos(0.004631717192530115*x_0 + 91.399917541166914) + 1)**2 + 0.05159945636739828) - 0.0089)
# edit
# (-0.13255512749626258*x_1 - 7.7556836895407888e-6)*(0.095835217836757477*sqrt(-0.015739072152742626*x_0 - 0.0079827662274703848*x_1 + 1) - 7.640000000000001)
# (0.094632385502810773 - 60.97535864828078*x_1)*(-0.0073021035873233126*sqrt((0.00033757961783439494*cos(0.004631717192530115*x_0 + 91.399917541166914) + 1)**2 + 0.05159945636739828) - 0.0089)

# refine 1 bingo
# (7.9760411863510441e-5 - 0.3402248272404073*x_1)*(0.9620000000000001 - 3.89704214757808*sqrt(1 + 5.09981851179673e-5/(0.001823510705720518*x_0 - 3.3500324641075164)))
# ( - 0.3402248272404073*x_1)*(0.9620000000000001 - 3.89704214757808)
# = 1*x_1

# refine 2
# 4159498572377172*sqrt(1 - 0.24177096230428838*x_1)) + 0.033100000000000004)*(0.37926900758517707*sqrt(0.0062638085278495816*x_0 + 1) + 2.45)

# ref 3 bingo
# 1.001527629971762*x_1 + 0.00012860541770036426*(x_0 - 0.0030109081830765468)**2 + 0.00015970961009875695
# 1.001527629971762*x_1

# ref 4 skor
# (0.9 - 0.07600000000000001*Abs(0.0013 - 0.00943/((-0.0489430273415387*x_0 - 69.199128663354265)*(0.006848681587306899*x_1 - 31.600189215956344))))*(1.111990236218647*x_1 - 0.0014221606534932879)

# ref 5 bingo
# 1.001527629971762*x_1 + (0.05091241890371686*x_0 - 0.095806397881855327)*(0.003836734523641821*x_1 + 0.00044399837284456942) - 0.00027029038990124325


# ref 10 skor
# 1.001527629971762*x_1 - 0.0069539966619014538*exp(-0.0028665588293926535*x_0 + 0.004447960944874588*x_1) + 0.0080297096100987611

# ref 15 skor
# 1.001527629971762*x_1 + 0.00088970961009875719 + 0.00279/((-0.00035011405549833938*x_0 - 0.93099376689135692)*(-1.334809836587419*x_0 - 766.18231843570059*exp(0.4705707026117321*x_1) + 38.303763726701939))

# ref 20 fail
# (8.7657350358699793e-5 - 0.31445021911613402*x_1)*(-0.0094*Abs(1.50172668985322*sqrt(sqrt(sqrt(0.859470468431772*Abs(-53.53827431995441*x_0 - (-6.856400253509147*x_0 - 69.177934955738679)*(46.32065288619398*x_1 - 0.34675093053293236) + 1.0243461966788003) + 1) + 0.003979641386895956) - 0.2949187914922992) - 22.1) - 3.0100000000000002)

# ref3
# (-0.159 + 0.28200000000000003/(0.05237122746829327*x_0 + 1.056022515720225*x_1 - 112.23010824888781))*(0.003399023955463045*x_0 - 6.193270123575379*x_1 + 4.7679682317155157e-5)
# ref3
# 0.0008825791815687305*x_0 + 0.99936256288932274*x_1 + 0.00083381363922726583
# ref3
# (0.0035099999999999997 - 0.297184118014405*sqrt(1 + 0.00037696335078534033/(-0.41900000000000004 + 38.1/(6.134290014043822*x_0 - 9.6392092576848592))))*(0.0035976041186350938 - 3.402248272404073*x_1)



