




 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





IDEA: max ORDER for GRAMMAR = floor(DATASET ROWS (LEN(SEQ)))/2)-1
fibs ['0', '1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025', '121393', '196418', '317811', '514229', '832040', '1346269', '2178309', '3524578', '5702887', '9227465', '14930352', '24157817', '39088169', '63245986', '102334155', '165580141', '267914296', '433494437', '701408733', '1134903170', '1836311903', '2971215073', '4807526976', '7778742049']
1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 175
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 86
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
----. inside oeis_eq_disco
seq_id, nof_eqs, max_order,  before A000045 None None
seq_id, nof_eqs, max_order, shape,  after A000045 None 24
data shape (49, 26)
data: Matrix([
[         1,  1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         1,  2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         2,  3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         3,  4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         5,  5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         8,  6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        13,  7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        21,  8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        34,  9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        55, 10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        89, 11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       144, 12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       233, 13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       377, 14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       610, 15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       987, 16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[      1597, 17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[      2584, 18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[      4181, 19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[      6765, 20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[     10946, 21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[     17711, 22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[     28657, 23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[     46368, 24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[     75025, 25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[    121393, 26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[    196418, 27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[    317811, 28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[    514229, 29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[    832040, 30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[   1346269, 31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[   2178309, 32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[   3524578, 33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[   5702887, 34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[   9227465, 35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[  14930352, 36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[  24157817, 37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[  39088169, 38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[  63245986, 39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[ 102334155, 40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[ 165580141, 41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[ 267914296, 42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[ 433494437, 43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[ 701408733, 44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[1134903170, 45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[1836311903, 46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[2971215073, 47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[4807526976, 48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[7778742049, 49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
data[:4][:4] : Matrix([
[1, 1, 0, 0, 0, 0],
[1, 2, 1, 0, 0, 0],
[2, 3, 1, 1, 0, 0],
[3, 4, 2, 1, 1, 0],
[5, 5, 3, 2, 1, 1],
[8, 6, 5, 3, 2, 1]]) 
 Matrix([
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     1],
[     1],
[     2],
[     3],
[     5],
[     8],
[    13],
[    21],
[    34],
[    55],
[    89],
[   144],
[   233],
[   377],
[   610],
[   987],
[  1597],
[  2584],
[  4181],
[  6765],
[ 10946],
[ 17711],
[ 28657],
[ 46368],
[ 75025],
[121393]])
data.shape (49, 26)
variable_names ['an', 'n', 'an_1', 'an_2', 'an_3', 'an_4', 'an_5', 'an_6', 'an_7', 'an_8', 'an_9', 'an_10', 'an_11', 'an_12', 'an_13', 'an_14', 'an_15', 'an_16', 'an_17', 'an_18', 'an_19', 'an_20', 'an_21', 'an_22', 'an_23', 'an_24']
=>> Grammar used: 
Grammar with 30 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.334924]
    V -> 'an_2' [0.101145]
    V -> 'an_3' [0.0310115]
    V -> 'an_4' [0.00997137]
    V -> 'an_5' [0.00365935]
    V -> 'an_6' [0.00176574]
    V -> 'an_7' [0.00119766]
    V -> 'an_8' [0.00102724]
    V -> 'an_9' [0.00097611]
    V -> 'an_10' [0.000960772]
    V -> 'an_11' [0.000956171]
    V -> 'an_12' [0.00095479]
    V -> 'an_13' [0.000954376]
    V -> 'an_14' [0.000954252]
    V -> 'an_15' [0.000954214]
    V -> 'an_16' [0.000954203]
    V -> 'an_17' [0.0009542]
    V -> 'an_18' [0.000954199]
    V -> 'an_19' [0.000954199]
    V -> 'an_20' [0.000954199]
    V -> 'an_21' [0.000954198]
    V -> 'an_22' [0.000954198]
    V -> 'an_23' [0.000954198]
    V -> 'an_24' [0.000954198]

ModelBox: 91 models
-> C0*an_1 + C1*n + an_1, p = 0.00013956223063931868, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.002926874890742275, parse trees = 1, valid = False
-> n**3, p = 0.0072, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001339694656488916, parse trees = 1, valid = False
-> an_1**2, p = 0.01615303595362485, parse trees = 1, valid = False
-> n, p = 0.18, parse trees = 1, valid = False
-> C0*n + an_14*n, p = 8.244734850453433e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0028937404580160818, parse trees = 1, valid = False
-> n**2, p = 0.036, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 7.024499737781462e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1**3, p = 1.2946440521943475e-06, parse trees = 1, valid = False
-> an_1, p = 0.1205725190840034, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_3*n + an_2, p = 1.047574576585032e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00038767286288699643, parse trees = 1, valid = False
-> an_1**2*n, p = 0.009691821572174911, parse trees = 3, valid = False
-> an_2*n**2, p = 0.0014564885496187276, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.004369465648856183, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + n, p = 2.097343511450968e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00025968163143773673, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_4*n, p = 9.277514695809498e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005787480916032164, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.000585374978148455, parse trees = 1, valid = False
-> an_1*an_3*n**2, p = 5.9826059087498965e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + an_1**2, p = 2.157740086990579e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.04822900763360136, parse trees = 2, valid = False
-> an_2, p = 0.03641221374046819, parse trees = 1, valid = False
-> an_3*n**3, p = 8.93129770992611e-05, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.1965211817499795e-05, parse trees = 1, valid = False
-> an_3**2*n, p = 2.76972495775456e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008738931297712368, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2**2*n**2, p = 7.614752556495648e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.002164013595314473, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014468702290080408, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00017947817726249692, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0002083493129771579, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2**2*n + an_1**2*n, p = 5.1007216552113086e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_2*n, p = 4.68299982518764e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n, p = 1.568447460535615e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_2*an_3*n + an_1, p = 7.261330835812974e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009645801526720272, parse trees = 2, valid = False
-> an_3, p = 0.011164122137407634, parse trees = 1, valid = False
-> an_4*n**3, p = 2.8717557251915727e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3, p = 3.037070909210618e-12, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011574961832064325, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + an_2*n, p = 6.273789842142459e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.753457257739928e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_7 + n, p = 4.1588683235256785e-06, parse trees = 1, valid = False
-> an_1*an_24*n**2, p = 1.8408018186829341e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.004878124817903792, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n, p = 6.639151884055571e-16, parse trees = 1, valid = False
-> C0*an_18 + C1*n + an_2*n, p = 2.001282881135933e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.000117074995629691, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**3 + an_1, p = 4.202481363726381e-07, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 3.2152671755733985e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.001938364314434982, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.003876728628869964, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.00432, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_2*n, p = 1.8821369526427374e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.014564885496187277, parse trees = 2, valid = False
-> an_1*an_2*an_3*n**2, p = 2.420443611937658e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0009756249635807582, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.00038767286288699643, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.00023260371773219785, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n, p = 4.504197974455335e-09, parse trees = 1, valid = False
-> an_1*an_5, p = 0.00017648687430811048, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_4*n**3 + n, p = 3.446106870229887e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.000585374978148455, parse trees = 1, valid = False
-> C0*n + n, p = 0.0216, parse trees = 1, valid = False
-> an_1**2*an_2*an_3*n**3, p = 6.485310746491276e-08, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0028937404580160818, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2, p = 3.893680700350545e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1**2, p = 6.232359154505682e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.00023260371773219785, parse trees = 1, valid = False
-> C0*an_1**4*n**2 + C1*n + an_1, p = 1.1185724610959254e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.6140791008926915e-05, parse trees = 1, valid = False
-> an_2*an_3*n, p = 9.033564477599542e-05, parse trees = 1, valid = False
-> C0*an_2*n**3 + C1*an_2 + n, p = 8.48543558068186e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1**3*n**4, p = 4.474289844383701e-09, parse trees = 1, valid = False
-> C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1, p = 4.310243790083787e-10, parse trees = 1, valid = False
-> an_9, p = 0.0003513996755725212, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00013070395504463458, parse trees = 1, valid = False
-> an_17, p = 0.00034351196792813403, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005787480916032162, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_1*n + C2*n + an_19, p = 1.912089936360464e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0028937404580160818, parse trees = 1, valid = False
task data <class 'sympy.matrices.dense.MutableDenseMatrix'>
X origin Matrix([
[ 1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
Y origin Matrix([
[         1],
[         1],
[         2],
[         3],
[         5],
[         8],
[        13],
[        21],
[        34],
[        55],
[        89],
[       144],
[       233],
[       377],
[       610],
[       987],
[      1597],
[      2584],
[      4181],
[      6765],
[     10946],
[     17711],
[     28657],
[     46368],
[     75025],
[    121393],
[    196418],
[    317811],
[    514229],
[    832040],
[   1346269],
[   2178309],
[   3524578],
[   5702887],
[   9227465],
[  14930352],
[  24157817],
[  39088169],
[  63245986],
[ 102334155],
[ 165580141],
[ 267914296],
[ 433494437],
[ 701408733],
[1134903170],
[1836311903],
[2971215073],
[4807526976],
[7778742049]])
shapes: task.data (49, 26), X (49, 25), Y (49, 1), 
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*n + an_14*n <class 'ProGED.model.Model'>
C0*n + an_14*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_14*n)
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
C0*an_1 + C1*an_3 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*an_3)
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3, C1*an_1*an_3*n)
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
C0*an_2 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**3)
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
C0*an_1 + C1*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_4*n)
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
C0*an_1**2*an_3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*an_3)
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
an_1*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**3)
an_3**2*n <class 'ProGED.model.Model'>
an_3**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_3**2)
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2**2*n**2)
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n, C1*an_2**2*n)
C0*an_1*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**3)
C0*an_1**2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n)
C0*n**2 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_2*n)
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
C0*an_2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n)
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_4*n**3 <class 'ProGED.model.Model'>
an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**3)
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1**2*an_2**2*n**4)
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
C0*an_1**2*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**3)
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
C0*an_1 + C1*an_7 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_7 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_7)
an_1*an_24*n**2 <class 'ProGED.model.Model'>
an_1*an_24*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, n**2)
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_2, C3*n, an_20*n, C0*an_1**2*n, C1*an_1*an_7*n**2)
C0*an_18 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_18 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18, C1*n, an_2*n)
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
C0*an_1**2*an_2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n**3)
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
C0*an_1*n + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1*an_2*n)
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_4, C0*an_1*an_2, C1*an_1*n**2)
an_1*an_5 <class 'ProGED.model.Model'>
an_1*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5)
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
C0*an_4*n**3 + n <class 'ProGED.model.Model'>
C0*an_4*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n**3)
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
an_1**2*an_2*an_3*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**2, n**3)
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1**3*an_2*an_21*n**2)
C0*an_1 + C1*an_2*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*n)
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
C0*an_1*n + C1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n**2, C0*an_1*n)
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
C0*an_1**4*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**4*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**4*n**2)
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
C0*an_2*n**3 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**3)
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**3*n**4, C0*an_1*n)
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_1*an_17*n**2)
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C2*n, C0*an_1**3*n, C1*an_1*n)
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
returning 0 earlier
Estimating model C0*an_1 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1 -0.931638490088389*an_1 - 3.21490762629033*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1 C0*an_1 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1 -0.931638490088389*an_1 - 3.21490762629033*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1 C0*an_1 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220128*an_1 + 20220127*n                                            ; p: 0.00013956223063931868 ; error: 20220127
Estimating model C0*an_1 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_2 -3.38729302238944*an_1 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_2 C0*an_1 + an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_2 -3.38729302238944*an_1 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_2 C0*an_1 + an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [5], [8]]) Matrix([[1], [2], [3], [5], [8]])
x [Matrix([[1]])]
{'x': [1], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 0.002926874890742275   ; error: 0
Estimating model n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**3 n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**3 n**3 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**3 n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**3 n**3 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-7], [-25], [-61], [-120], [-208], [-330], [-491]])
x []
model: n**3                                                                  ; p: 0.0072                 ; error: 20220127
Estimating model C0*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n -0.0909437746198349*an_3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n C0*an_3 + n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n -0.0909437746198349*an_3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n C0*an_3 + n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3]]) Matrix([[0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_3 + n                                                     ; p: 0.001339694656488916   ; error: 20220127
Estimating model an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2 an_1**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2 an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2 an_1**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2 an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
model: an_1**2                                                               ; p: 0.01615303595362485    ; error: 20220127
Estimating model n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
model: n                                                                     ; p: 0.18                   ; error: 20220127
Estimating model C0*n + an_14*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_14*n an_14*n + 1.14611160322801*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_14*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_14*n C0*n + an_14*n 13 [1, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_14*n an_14*n + 1.14611160322801*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_14*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_14*n C0*n + an_14*n 13 [1, 15] 1 14
X.rows, remove_rows, len(model.sym_params), nof_eqs 1 13 1 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*n + an_14*n
model: an_14*n + 1.14611160322801*n                                          ; p: 8.244734850453433e-06  ; error: 100000000
Estimating model C0*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1 an_1 - 2.15534738151254*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1 C0*n**2 + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1 an_1 - 2.15534738151254*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1 C0*n**2 + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1 + 20220127*n**2                                                  ; p: 0.0028937404580160818  ; error: 20220127
Estimating model n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**2 n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**2 n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**2 n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**2 n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
model: n**2                                                                  ; p: 0.036                  ; error: 20220127
Estimating model C0*an_1 + C1*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + n 4.886008142797*an_1 - 3.71837779808204*an_2*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + n C0*an_1 + C1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + n 4.886008142797*an_1 - 3.71837779808204*an_2*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + n C0*an_1 + C1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [2, 4], [3, 10], [5, 18], [8, 35]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1 + 20220127*an_2*n + n                                   ; p: 7.024499737781462e-05  ; error: 20220127
Estimating model C0*an_1 + C1*an_3 + an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + an_1**3 an_1**3 - 1.53874602431923*an_1 + 1.54939711452807*an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + an_1**3 C0*an_1 + C1*an_3 + an_1**3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + an_1**3 an_1**3 - 1.53874602431923*an_1 + 1.54939711452807*an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + an_1**3 C0*an_1 + C1*an_3 + an_1**3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 1], [5, 2], [8, 3]]) Matrix([[-22], [-117], [-499]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1**3 + 20220127*an_1 + 20220127*an_3                               ; p: 1.2946440521943475e-06 ; error: 20220127
Estimating model an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1 an_1 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1 an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1 an_1 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1 an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
model: an_1                                                                  ; p: 0.1205725190840034     ; error: 20220127
Estimating model C0*an_1**3 + C1*an_1*an_3*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3 + C1*an_1*an_3*n + an_2 -3.44148861733947*an_1**3 + 2.03926281466229*an_1*an_3*n + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3 + C1*an_1*an_3*n + an_2 C0*an_1**3 + C1*an_1*an_3*n + an_2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3 + C1*an_1*an_3*n + an_2 -3.44148861733947*an_1**3 + 2.03926281466229*an_1*an_3*n + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3 + C1*an_1*an_3*n + an_2 C0*an_1**3 + C1*an_1*an_3*n + an_2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[27, 15], [125, 60], [512, 168]]) Matrix([[3], [5], [8]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**3 + 20220127*an_1*an_3*n + an_2                        ; p: 1.047574576585032e-08  ; error: 20220127
Estimating model C0*an_1**2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + n 4.44362290153865*an_1**2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + n C0*an_1**2*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + n 4.44362290153865*an_1**2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + n C0*an_1**2*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [16], [45], [150], [448]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*n + n                                                ; p: 0.00038767286288699643 ; error: 20220127
Estimating model an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*n an_1**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*n an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*n an_1**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*n an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
model: an_1**2*n                                                             ; p: 0.009691821572174911   ; error: 20220127
Estimating model an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n**2 an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n**2 an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n**2 an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n**2 an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[-7], [-13], [-45], [-100], [-232]])
x []
model: an_2*n**2                                                             ; p: 0.0014564885496187276  ; error: 20220127
Estimating model C0*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2 an_2 - 1.44632215307908*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2 C0*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2 an_2 - 1.44632215307908*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2 C0*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [4], [5], [6], [7]]) Matrix([[1], [2], [3], [5], [8]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_2 + 20220127*n                                                     ; p: 0.004369465648856183   ; error: 20220127
Estimating model C0*an_2 + C1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**3 + n -1.86108359610879*an_2 - 1.99323635796169*n**3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**3 + n C0*an_2 + C1*n**3 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**3 + n -1.86108359610879*an_2 - 1.99323635796169*n**3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**3 + n C0*an_2 + C1*n**3 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 27], [1, 64], [2, 125], [3, 216], [5, 343]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_2 + 20220127*n**3 + n                                     ; p: 2.097343511450968e-05  ; error: 20220127
Estimating model C0*an_1**2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + an_1*n 2.37749321905208*an_1**2 + an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + an_1*n C0*an_1**2 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + an_1*n 2.37749321905208*an_1**2 + an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + an_1*n C0*an_1**2 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2 + an_1*n                                             ; p: 0.00025968163143773673 ; error: 20220127
Estimating model C0*an_1 + C1*n + an_1*an_4*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_4*n an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_4*n C0*an_1 + C1*n + an_1*an_4*n 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_4*n an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_4*n C0*an_1 + C1*n + an_1*an_4*n 3 [1, 2, 5] 1 4
X.rows, remove_rows, len(model.sym_params), nof_eqs 4 3 2 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1 + C1*n + an_1*an_4*n
model: an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n               ; p: 9.277514695809498e-07  ; error: 100000000
Estimating model C0*n + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**2 an_1*n**2 + 1.68083643878194*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**2 C0*n + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**2 an_1*n**2 + 1.68083643878194*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**2 C0*n + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n**2 + 20220127*n                                                ; p: 0.0005787480916032164  ; error: 20220127
Estimating model C0*an_1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_2 0.179925273167348*an_1*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_2 C0*an_1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_2 0.179925273167348*an_1*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_2 C0*an_1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [8], [15], [30], [56]]) Matrix([[1], [2], [3], [5], [8]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + an_2                                                ; p: 0.000585374978148455   ; error: 20220127
Estimating model an_1*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**2 an_1*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**2 an_1*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**2 an_1*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**2 an_1*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-70], [-352], [-1163]])
x []
model: an_1*an_3*n**2                                                        ; p: 5.9826059087498965e-05 ; error: 20220127
Estimating model C0*an_1**2*an_3 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + an_1**2 -3.52117204598396*an_1**2*an_3 + an_1**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + an_1**2 C0*an_1**2*an_3 + an_1**2 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + an_1**2 -3.52117204598396*an_1**2*an_3 + an_1**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + an_1**2 C0*an_1**2*an_3 + an_1**2 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[9], [50], [192]]) Matrix([[-4], [-17], [-51]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*an_3 + an_1**2                                       ; p: 2.157740086990579e-06  ; error: 20220127
Estimating model an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n an_1*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n an_1*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
model: an_1*n                                                                ; p: 0.04822900763360136    ; error: 20220127
Estimating model an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2 an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2 an_2 1 [3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2 an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2 an_2 1 [3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[1], [2], [3], [5], [8]])
x []
model: an_2                                                                  ; p: 0.03641221374046819    ; error: 20220127
Estimating model an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**3 an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**3 an_3*n**3 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**3 an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**3 an_3*n**3 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-120], [-424], [-1016]])
x []
model: an_3*n**3                                                             ; p: 8.93129770992611e-05   ; error: 20220127
Estimating model an_1*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**3 an_1*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**3 an_1*an_3*n**3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**3 an_1*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**3 an_1*an_3*n**3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-370], [-2152], [-8219]])
x []
model: an_1*an_3*n**3                                                        ; p: 1.1965211817499795e-05 ; error: 20220127
Estimating model an_3**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3**2*n an_3**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3**2*n an_3**2*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3**2*n an_3**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3**2*n an_3**2*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[0], [-16], [-50]])
x []
model: an_3**2*n                                                             ; p: 2.76972495775456e-05   ; error: 20220127
Estimating model C0*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + n 1.19942705341058*an_2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + n C0*an_2*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + n 1.19942705341058*an_2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + n C0*an_2*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [4], [10], [18], [35]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_2*n + n                                                   ; p: 0.0008738931297712368  ; error: 20220127
Estimating model C0*an_1 + C1*n + an_1*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_2**2*n**2 an_1*an_2**2*n**2 + 0.953056313182407*an_1 - 1.29380419473357*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_2**2*n**2 C0*an_1 + C1*n + an_1*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_2**2*n**2 an_1*an_2**2*n**2 + 0.953056313182407*an_1 - 1.29380419473357*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_2**2*n**2 C0*an_1 + C1*n + an_1*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[-7], [-29], [-295], [-1612], [-9787]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*an_2**2*n**2 + 20220127*an_1 + 20220127*n                        ; p: 7.614752556495648e-08  ; error: 20220127
Estimating model an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3 an_1**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3 an_1**3 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3 an_1**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3 an_1**3 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-5], [-22], [-117], [-499]])
x []
model: an_1**3                                                               ; p: 0.002164013595314473   ; error: 20220127
Estimating model C0*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n -0.723215544453294*an_1 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n C0*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n -0.723215544453294*an_1 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n C0*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1 + n                                                     ; p: 0.014468702290080408   ; error: 20220127
Estimating model C0*an_1*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_3 -0.56735068822634*an_1*n + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_3 C0*an_1*n + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_3 -0.56735068822634*an_1*n + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_3 C0*an_1*n + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[15], [30], [56]]) Matrix([[4], [6], [10]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + an_3                                                ; p: 0.00017947817726249692 ; error: 20220127
Estimating model C0*an_2 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*n an_1*n + 3.45334946796427*an_2 - 0.695248129144802*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*n C0*an_2 + C1*n + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*n an_1*n + 3.45334946796427*an_2 - 0.695248129144802*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*n C0*an_2 + C1*n + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n + 20220127*an_2 + 20220127*n                                   ; p: 8.429399685337752e-06  ; error: 20220127
Estimating model C0*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1 an_1 - 4.1139580931143*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1 C0*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1 an_1 - 4.1139580931143*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1 C0*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1 + 20220127*n                                                     ; p: 0.0002083493129771579  ; error: 20220127
Estimating model C0*an_1 + C1*an_2**2*n + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2**2*n + an_1**2*n an_1**2*n - 4.72461864082546*an_1 - 0.163365744660633*an_2**2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2**2*n + an_1**2*n C0*an_1 + C1*an_2**2*n + an_1**2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2**2*n + an_1**2*n an_1**2*n - 4.72461864082546*an_1 - 0.163365744660633*an_2**2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2**2*n + an_1**2*n C0*an_1 + C1*an_2**2*n + an_1**2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [2, 4], [3, 20], [5, 54], [8, 175]]) Matrix([[-1], [-13], [-40], [-142], [-435]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1**2*n + 20220127*an_1 + 20220127*an_2**2*n                        ; p: 5.1007216552113086e-08 ; error: 20220127
Estimating model C0*an_1*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + an_2*n -4.04074229112346*an_1*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + an_2*n C0*an_1*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + an_2*n -4.04074229112346*an_1*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + an_2*n C0*an_1*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[27], [128], [375], [1080], [2744]]) Matrix([[-1], [-1], [-5], [-10], [-22]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n**3 + an_2*n                                           ; p: 4.68299982518764e-06   ; error: 20220127
Estimating model C0*an_1**2*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n -0.570436974378895*an_1**2*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n C0*an_1**2*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n -0.570436974378895*an_1**2*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n C0*an_1**2*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [16], [45], [150], [448]]) Matrix([[-1], [-1], [-5], [-10], [-22]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*n + an_2*n                                           ; p: 1.568447460535615e-05  ; error: 20220127
Estimating model C0*n**2 + an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1**2*an_2*n an_1**2*an_2*n - 2.5658071806154*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1**2*an_2*n C0*n**2 + an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1**2*an_2*n an_1**2*an_2*n - 2.5658071806154*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1**2*an_2*n C0*n**2 + an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[9], [16], [25], [36], [49]]) Matrix([[-1], [-13], [-85], [-442], [-2227]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1**2*an_2*n + 20220127*n**2                                        ; p: 3.13689492107123e-06   ; error: 20220127
Estimating model C0*an_1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + n -3.70386505215037*an_1*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + n C0*an_1*n**3 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + n -3.70386505215037*an_1*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + n C0*an_1*n**3 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [8], [27], [128], [375], [1080], [2744]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n**3 + n                                                ; p: 0.00011574961832064328 ; error: 20220127
Estimating model C0*an_2*an_3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_3*n + an_1 an_1 - 3.24437525310367*an_2*an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_3*n + an_1 C0*an_2*an_3*n + an_1 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_3*n + an_1 an_1 - 3.24437525310367*an_2*an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_3*n + an_1 C0*an_2*an_3*n + an_1 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[10], [36], [105]]) Matrix([[2], [3], [5]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1 + 20220127*an_2*an_3*n                                           ; p: 7.261330835812974e-06  ; error: 20220127
Estimating model an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n**2 an_1*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n**2 an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n**2 an_1*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n**2 an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
model: an_1*n**2                                                             ; p: 0.009645801526720272   ; error: 20220127
Estimating model an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3 an_3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3 an_3 2 [4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3 an_3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3 an_3 2 [4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[4], [6], [10]])
x []
model: an_3                                                                  ; p: 0.011164122137407634   ; error: 20220127
Estimating model an_4*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4*n**3 an_4*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4*n**3 an_4*n**3 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4*n**3 an_4*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4*n**3 an_4*n**3 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[-673]])
x []
model: an_4*n**3                                                             ; p: 2.8717557251915727e-05 ; error: 20220127
Estimating model C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2.57736761374815*an_1**2*an_2**2*n**4 + 0.263415921385857*an_1 + an_3 + 4.50301867916131*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2.57736761374815*an_1**2*an_2**2*n**4 + 0.263415921385857*an_1 + an_3 + 4.50301867916131*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 5, 22500], [5, 6, 291600], [8, 7, 3841600]]) Matrix([[4], [6], [10]])
x []
{'x': [20220127, 20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*an_2**2*n**4 + 20220127*an_1 + an_3 + 20220127*n     ; p: 3.037070909210618e-12  ; error: 20220127
Estimating model C0*n + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**3 an_1*n**3 - 3.53941366605452*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**3 C0*n + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**3 an_1*n**3 - 3.53941366605452*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**3 C0*n + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n**3 + 20220127*n                                                ; p: 0.00011574961832064325 ; error: 20220127
Estimating model C0*an_1**2*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**3 + an_2*n -2.63065138335986*an_1**2*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**3 + an_2*n C0*an_1**2*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**3 + an_2*n -2.63065138335986*an_1**2*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**3 + an_2*n C0*an_1**2*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[27], [256], [1125], [5400], [21952]]) Matrix([[-1], [-1], [-5], [-10], [-22]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*n**3 + an_2*n                                        ; p: 6.273789842142459e-07  ; error: 20220127
Estimating model C0*an_1**2*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + n 0.0868721793972393*an_1**2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + n C0*an_1**2*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + n 0.0868721793972393*an_1**2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + n C0*an_1**2*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [64], [225], [900], [3136]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*n**2 + n                                             ; p: 7.753457257739928e-05  ; error: 20220127
Estimating model C0*an_1 + C1*an_7 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_7 + n -3.9399742275706*an_1 - 1.6756216293962*an_7 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_7 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_7 + n C0*an_1 + C1*an_7 + n 6 [1, 2, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_7 + n -3.9399742275706*an_1 - 1.6756216293962*an_7 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_7 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_7 + n C0*an_1 + C1*an_7 + n 6 [1, 2, 8] 1 7
X.rows, remove_rows, len(model.sym_params), nof_eqs 2 6 2 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1 + C1*an_7 + n
model: -3.9399742275706*an_1 - 1.6756216293962*an_7 + n                      ; p: 4.1588683235256785e-06 ; error: 100000000
Estimating model an_1*an_24*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_24*n**2 an_1*an_24*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_24*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_24*n**2 an_1*an_24*n**2 23 [1, 2, 25] 1 24
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 24
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1*an_24*n**2
model: an_1*an_24*n**2                                                       ; p: 1.8408018186829341e-06 ; error: 100000000
Estimating model an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2 an_1*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2 an_1*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2 an_1*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2 an_1*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[1], [1], [-1], [-7], [-27]])
x []
model: an_1*an_2                                                             ; p: 0.004878124817903792   ; error: 20220127
Estimating model C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n 19 [1, 2, 3, 8, 21] 1 20
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 20
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n 19 [1, 2, 3, 8, 21] 1 20
X.rows, remove_rows, len(model.sym_params), nof_eqs 4 19 4 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n
model: -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n; p: 6.639151884055571e-16  ; error: 100000000
Estimating model C0*an_18 + C1*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_18 + C1*n + an_2*n -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_18 + C1*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_18 + C1*n + an_2*n C0*an_18 + C1*n + an_2*n 17 [1, 3, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_18 + C1*n + an_2*n -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_18 + C1*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_18 + C1*n + an_2*n C0*an_18 + C1*n + an_2*n 17 [1, 3, 19] 1 18
X.rows, remove_rows, len(model.sym_params), nof_eqs 2 17 2 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_18 + C1*n + an_2*n
model: -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n                 ; p: 2.001282881135933e-07  ; error: 100000000
Estimating model C0*n**2 + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*an_2 an_1*an_2 - 4.17618046771062*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*an_2 C0*n**2 + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*an_2 an_1*an_2 - 4.17618046771062*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*an_2 C0*n**2 + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[9], [16], [25], [36], [49]]) Matrix([[1], [1], [-1], [-7], [-27]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*an_2 + 20220127*n**2                                             ; p: 0.000117074995629691   ; error: 20220127
Estimating model C0*an_1**2*an_2*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n**3 + an_1 -2.46917679533612*an_1**2*an_2*n**3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n**3 + an_1 C0*an_1**2*an_2*n**3 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n**3 + an_1 -2.46917679533612*an_1**2*an_2*n**3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n**3 + an_1 C0*an_1**2*an_2*n**3 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[27], [256], [2250], [16200], [109760]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**2*an_2*n**3 + an_1                                     ; p: 4.202481363726381e-07  ; error: 20220127
Estimating model C0*n + an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_3*n an_3*n + 4.84244497296571*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_3*n C0*n + an_3*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_3*n an_3*n + 4.84244497296571*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_3*n C0*n + an_3*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[5], [6], [7]]) Matrix([[0], [-4], [-8]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_3*n + 20220127*n                                                   ; p: 3.2152671755733985e-05 ; error: 20220127
Estimating model C0*an_1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1 -3.96997638671773*an_1*n + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1 C0*an_1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1 -3.96997638671773*an_1*n + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1 C0*an_1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + an_1                                                ; p: 0.001938364314434982   ; error: 20220127
Estimating model C0*an_1 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n an_1*n + 0.58832509811073*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n C0*an_1 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n an_1*n + 0.58832509811073*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n C0*an_1 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n + 20220127*an_1                                                ; p: 0.003876728628869964   ; error: 20220127
Estimating model C0*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n**2 n**2 + 0.395514211589462*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n**2 C0*n + n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n**2 n**2 + 0.395514211589462*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n**2 C0*n + n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: n**2 + 20220127*n                                                     ; p: 0.00432                ; error: 20220127
Estimating model C0*an_1*n + C1*n + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_1*an_2*n an_1*an_2*n + 4.98897552081565*an_1*n - 2.45278598732714*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_1*an_2*n C0*an_1*n + C1*n + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_1*an_2*n an_1*an_2*n + 4.98897552081565*an_1*n - 2.45278598732714*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_1*an_2*n C0*an_1*n + C1*n + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[-1], [-5], [-25], [-82], [-267]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*an_2*n + 20220127*an_1*n + 20220127*n                            ; p: 1.8821369526427374e-06 ; error: 20220127
Estimating model an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n an_2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n an_2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[-1], [-1], [-5], [-10], [-22]])
x []
model: an_2*n                                                                ; p: 0.014564885496187277   ; error: 20220127
Estimating model an_1*an_2*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-145], [-1072], [-5867]])
x []
model: an_1*an_2*an_3*n**2                                                   ; p: 2.420443611937658e-06  ; error: 20220127
Estimating model an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n an_1*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n an_1*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[-1], [-5], [-25], [-82], [-267]])
x []
model: an_1*an_2*n                                                           ; p: 0.0009756249635807582  ; error: 20220127
Estimating model C0*an_1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1*n -1.7366609801189*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1*n C0*an_1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1*n -1.7366609801189*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1*n C0*an_1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220128*an_1*n                                                       ; p: 0.00038767286288699643 ; error: 20220127
Estimating model C0*an_1*n + C1*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + n 4.95104677152123*an_1*n - 1.00160428570936*an_1 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + n C0*an_1*n + C1*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + n 4.95104677152123*an_1*n - 1.00160428570936*an_1 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + n C0*an_1*n + C1*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + 20220127*an_1 + n                                   ; p: 0.00023260371773219785 ; error: 20220127
Estimating model C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3 [1, 2, 3, 5] 1 4
X.rows, remove_rows, len(model.sym_params), nof_eqs 4 3 3 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n
model: 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n; p: 4.504197974455335e-09  ; error: 100000000
Estimating model an_1*an_5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_5 an_1*an_5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_5 an_1*an_5 4 [2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_5 an_1*an_5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_5 an_1*an_5 4 [2, 6] 1 5
X.rows, remove_rows, len(model.sym_params), nof_eqs 3 4 0 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: an_1*an_5
model: an_1*an_5                                                             ; p: 0.00017648687430811048 ; error: 100000000
Estimating model C0*n**2 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*n**2 an_1*n**2 + 3.16777058585259*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*n**2 C0*n**2 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*n**2 an_1*n**2 + 3.16777058585259*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*n**2 C0*n**2 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n**2 + 20220127*n**2                                             ; p: 0.00011574961832064328 ; error: 20220127
Estimating model C0*an_4*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4*n**3 + n -4.66567071302591*an_4*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4*n**3 + n C0*an_4*n**3 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4*n**3 + n -4.66567071302591*an_4*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4*n**3 + n C0*an_4*n**3 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[686]]) Matrix([[6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_4*n**3 + n                                                ; p: 3.446106870229887e-06  ; error: 20220127
Estimating model C0*an_1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + n -0.379891564734828*an_1*an_2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + n C0*an_1*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + n -0.379891564734828*an_1*an_2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + n C0*an_1*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [6], [15], [40]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*an_2 + n                                                ; p: 0.000585374978148455   ; error: 20220127
Estimating model C0*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n 3.81307521430685*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n C0*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n 3.81307521430685*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n C0*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220128*n                                                            ; p: 0.0216                 ; error: 20220127
Estimating model an_1**2*an_2*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-2245], [-32392], [-329267]])
x []
model: an_1**2*an_2*an_3*n**3                                                ; p: 6.485310746491276e-08  ; error: 20220127
Estimating model C0*an_1 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n**2 -3.38476187356185*an_1 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n**2 C0*an_1 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n**2 -3.38476187356185*an_1 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n**2 C0*an_1 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1 + n**2                                                  ; p: 0.0028937404580160818  ; error: 20220127
Estimating model C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 20 [1, 2, 3, 22] 1 21
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 21
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 20 [1, 2, 3, 22] 1 21
X.rows, remove_rows, len(model.sym_params), nof_eqs 2 20 2 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2
model: an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n  ; p: 3.893680700350545e-12  ; error: 100000000
Estimating model C0*an_1 + C1*an_2*n + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + C2*n + n 1.11774259288263*an_1 + 1.03730829468596*an_2*n + 1.20089175639547*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + C2*n + n C0*an_1 + C1*an_2*n + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + C2*n + n 1.11774259288263*an_1 + 1.03730829468596*an_2*n + 1.20089175639547*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + C2*n + n C0*an_1 + C1*an_2*n + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 3], [2, 4, 4], [3, 5, 10], [5, 6, 18], [8, 7, 35]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1 + 20220127*an_2*n + 20220128*n                          ; p: 8.429399685337752e-06  ; error: 20220127
Estimating model C0*an_1*n + C1*an_2 + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*n + n -4.71570544893716*an_1*n - 0.592618022589214*an_2 + 1.12530943404008*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*n + n C0*an_1*n + C1*an_2 + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*n + n -4.71570544893716*an_1*n - 0.592618022589214*an_2 + 1.12530943404008*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*n + n C0*an_1*n + C1*an_2 + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 3], [1, 4, 8], [2, 5, 15], [3, 6, 30], [5, 7, 56]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + 20220127*an_2 + 20220128*n                          ; p: 8.429399685337752e-06  ; error: 20220127
Estimating model C0*an_1*n + C1*n**2 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n**2 + an_1**2 an_1**2 + 1.50005456450705*an_1*n + 3.8085740056491*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n**2 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n**2 + an_1**2 C0*an_1*n + C1*n**2 + an_1**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n**2 + an_1**2 an_1**2 + 1.50005456450705*an_1*n + 3.8085740056491*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n**2 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n**2 + an_1**2 C0*an_1*n + C1*n**2 + an_1**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [4, 2], [9, 3], [16, 8], [25, 15], [36, 30], [49, 56]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1**2 + 20220127*an_1*n + 20220127*n**2                             ; p: 6.232359154505682e-06  ; error: 20220127
Estimating model C0*an_1 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*n an_1*n + 2.26310868721149*an_1 + 0.620623973355764*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*n C0*an_1 + C1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*n an_1*n + 2.26310868721149*an_1 + 0.620623973355764*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*n C0*an_1 + C1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n + 20220127*an_1 + 20220127*n                                   ; p: 0.00023260371773219785 ; error: 20220127
Estimating model C0*an_1**4*n**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**4*n**2 + C1*n + an_1 -4.02958440341425*an_1**4*n**2 + an_1 + 3.19512905954627*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**4*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**4*n**2 + C1*n + an_1 C0*an_1**4*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**4*n**2 + C1*n + an_1 -4.02958440341425*an_1**4*n**2 + an_1 + 3.19512905954627*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**4*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**4*n**2 + C1*n + an_1 C0*an_1**4*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 4], [3, 9], [4, 256], [5, 2025], [6, 22500], [7, 200704]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1**4*n**2 + an_1 + 20220127*n                             ; p: 1.1185724610959254e-07 ; error: 20220127
Estimating model an_1**2*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n**2 an_1**2*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n**2 an_1**2*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n**2 an_1**2*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n**2 an_1**2*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[-7], [-61], [-445], [-2692], [-15667]])
x []
model: an_1**2*an_2*n**2                                                     ; p: 2.6140791008926915e-05 ; error: 20220127
Estimating model an_2*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_3*n an_2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_3*n an_2*an_3*n 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_3*n an_2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_3*n an_2*an_3*n 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[-5], [-28], [-92]])
x []
model: an_2*an_3*n                                                           ; p: 9.033564477599542e-05  ; error: 20220127
Estimating model C0*an_2*n**3 + C1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**3 + C1*an_2 + n 1.53482562619658*an_2*n**3 - 3.58680779358041*an_2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**3 + C1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**3 + C1*an_2 + n C0*an_2*n**3 + C1*an_2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**3 + C1*an_2 + n 1.53482562619658*an_2*n**3 - 3.58680779358041*an_2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**3 + C1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**3 + C1*an_2 + n C0*an_2*n**3 + C1*an_2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 27], [1, 64], [2, 250], [3, 648], [5, 1715]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_2*n**3 + 20220127*an_2 + n                                ; p: 8.48543558068186e-07   ; error: 20220127
Estimating model C0*an_1*n + C1*an_1 + an_1**3*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_1**3*n**4 an_1**3*n**4 + 4.22760676525618*an_1*n - 0.709171778324632*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_1**3*n**4 C0*an_1*n + C1*an_1 + an_1**3*n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_1**3*n**4 an_1**3*n**4 + 4.22760676525618*an_1*n - 0.709171778324632*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_1**3*n**4 C0*an_1*n + C1*an_1 + an_1**3*n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[1], [-15], [-79], [-2045], [-16870], [-161992], [-1229299]])
x []
{'x': [20220127, 20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1**3*n**4 + 20220127*an_1*n + 20220127*an_1                        ; p: 4.474289844383701e-09  ; error: 20220127
Estimating model C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
X.rows, remove_rows, len(model.sym_params), nof_eqs 3 16 3 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; p: 4.310243790083787e-10  ; error: 100000000
Estimating model an_9






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_9 an_9 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_9 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_9 an_9 8 [10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_9
model: an_9                                                                  ; p: 0.0003513996755725212  ; error: 100000000
Estimating model an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n an_1**2*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n an_1**2*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[-1], [-13], [-85], [-442], [-2227]])
x []
model: an_1**2*an_2*n                                                        ; p: 0.00013070395504463458 ; error: 20220127
Estimating model an_17






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_17 an_17 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_17 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_17 an_17 16 [18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_17
model: an_17                                                                 ; p: 0.00034351196792813403 ; error: 100000000
Estimating model C0*an_1*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**2 -2.70272190045233*an_1*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**2 C0*an_1*n + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**2 -2.70272190045233*an_1*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**2 C0*an_1*n + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: 20220127*an_1*n + n**2                                                ; p: 0.0005787480916032162  ; error: 20220127
Estimating model C0*an_1**3*n + C1*an_1*n + C2*n + an_19






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*n + C1*an_1*n + C2*n + an_19 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*n + C1*an_1*n + C2*n + an_19 C0*an_1**3*n + C1*an_1*n + C2*n + an_19 18 [1, 2, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*n + C1*an_1*n + C2*n + an_19 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*n + C1*an_1*n + C2*n + an_19 C0*an_1**3*n + C1*an_1*n + C2*n + an_19 18 [1, 2, 20] 1 19
X.rows, remove_rows, len(model.sym_params), nof_eqs 3 18 3 None
Excepted an error inside fit_one: Of type <class 'ValueError'> and message:Need more data!!!!!!! 
Model: C0*an_1**3*n + C1*an_1*n + C2*n + an_19
model: 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n; p: 1.912089936360464e-10  ; error: 100000000
Estimating model C0*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f1740694dc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n an_1*n - 4.01021245471769*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n C0*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n an_1*n - 4.01021245471769*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n C0*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [20220127], 'fun': 20220127} <class 'list'> <class 'int'>
model: an_1*n + 20220127*n                                                   ; p: 0.0028937404580160818  ; error: 20220127

Parameter fitting for sequence A000045 took 1.6476379099985934 secconds.

Final score:
model: 20220128*an_1 + 20220127*n    ; error: 20220127       
model: an_1 + an_2                   ; error: 0              
model: n**3                          ; error: 20220127       
model: 20220127*an_3 + n             ; error: 20220127       
model: an_1**2                       ; error: 20220127       
model: n                             ; error: 20220127       
model: an_14*n + 1.14611160322801*n  ; error: 100000000      
model: an_1 + 20220127*n**2          ; error: 20220127       
model: n**2                          ; error: 20220127       
model: 20220127*an_1 + 20220127*an_2*n + n; error: 20220127       
model: an_1**3 + 20220127*an_1 + 20220127*an_3; error: 20220127       
model: an_1                          ; error: 20220127       
model: 20220127*an_1**3 + 20220127*an_1*an_3*n + an_2; error: 20220127       
model: 20220127*an_1**2*n + n        ; error: 20220127       
model: an_1**2*n                     ; error: 20220127       
model: an_2*n**2                     ; error: 20220127       
model: an_2 + 20220127*n             ; error: 20220127       
model: 20220127*an_2 + 20220127*n**3 + n; error: 20220127       
model: 20220127*an_1**2 + an_1*n     ; error: 20220127       
model: an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n; error: 100000000      
model: an_1*n**2 + 20220127*n        ; error: 20220127       
model: 20220127*an_1*n + an_2        ; error: 20220127       
model: an_1*an_3*n**2                ; error: 20220127       
model: 20220127*an_1**2*an_3 + an_1**2; error: 20220127       
model: an_1*n                        ; error: 20220127       
model: an_2                          ; error: 20220127       
model: an_3*n**3                     ; error: 20220127       
model: an_1*an_3*n**3                ; error: 20220127       
model: an_3**2*n                     ; error: 20220127       
model: 20220127*an_2*n + n           ; error: 20220127       
model: an_1*an_2**2*n**2 + 20220127*an_1 + 20220127*n; error: 20220127       
model: an_1**3                       ; error: 20220127       
model: 20220127*an_1 + n             ; error: 20220127       
model: 20220127*an_1*n + an_3        ; error: 20220127       
model: an_1*n + 20220127*an_2 + 20220127*n; error: 20220127       
model: an_1 + 20220127*n             ; error: 20220127       
model: an_1**2*n + 20220127*an_1 + 20220127*an_2**2*n; error: 20220127       
model: 20220127*an_1*n**3 + an_2*n   ; error: 20220127       
model: 20220127*an_1**2*n + an_2*n   ; error: 20220127       
model: an_1**2*an_2*n + 20220127*n**2; error: 20220127       
model: 20220127*an_1*n**3 + n        ; error: 20220127       
model: an_1 + 20220127*an_2*an_3*n   ; error: 20220127       
model: an_1*n**2                     ; error: 20220127       
model: an_3                          ; error: 20220127       
model: an_4*n**3                     ; error: 20220127       
model: 20220127*an_1**2*an_2**2*n**4 + 20220127*an_1 + an_3 + 20220127*n; error: 20220127       
model: an_1*n**3 + 20220127*n        ; error: 20220127       
model: 20220127*an_1**2*n**3 + an_2*n; error: 20220127       
model: 20220127*an_1**2*n**2 + n     ; error: 20220127       
model: -3.9399742275706*an_1 - 1.6756216293962*an_7 + n; error: 100000000      
model: an_1*an_24*n**2               ; error: 100000000      
model: an_1*an_2                     ; error: 20220127       
model: -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n; error: 100000000      
model: -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n; error: 100000000      
model: an_1*an_2 + 20220127*n**2     ; error: 20220127       
model: 20220127*an_1**2*an_2*n**3 + an_1; error: 20220127       
model: an_3*n + 20220127*n           ; error: 20220127       
model: 20220127*an_1*n + an_1        ; error: 20220127       
model: an_1*n + 20220127*an_1        ; error: 20220127       
model: n**2 + 20220127*n             ; error: 20220127       
model: an_1*an_2*n + 20220127*an_1*n + 20220127*n; error: 20220127       
model: an_2*n                        ; error: 20220127       
model: an_1*an_2*an_3*n**2           ; error: 20220127       
model: an_1*an_2*n                   ; error: 20220127       
model: 20220128*an_1*n               ; error: 20220127       
model: 20220127*an_1*n + 20220127*an_1 + n; error: 20220127       
model: 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n; error: 100000000      
model: an_1*an_5                     ; error: 100000000      
model: an_1*n**2 + 20220127*n**2     ; error: 20220127       
model: 20220127*an_4*n**3 + n        ; error: 20220127       
model: 20220127*an_1*an_2 + n        ; error: 20220127       
model: 20220128*n                    ; error: 20220127       
model: an_1**2*an_2*an_3*n**3        ; error: 20220127       
model: 20220127*an_1 + n**2          ; error: 20220127       
model: an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n; error: 100000000      
model: 20220127*an_1 + 20220127*an_2*n + 20220128*n; error: 20220127       
model: 20220127*an_1*n + 20220127*an_2 + 20220128*n; error: 20220127       
model: an_1**2 + 20220127*an_1*n + 20220127*n**2; error: 20220127       
model: an_1*n + 20220127*an_1 + 20220127*n; error: 20220127       
model: 20220127*an_1**4*n**2 + an_1 + 20220127*n; error: 20220127       
model: an_1**2*an_2*n**2             ; error: 20220127       
model: an_2*an_3*n                   ; error: 20220127       
model: 20220127*an_2*n**3 + 20220127*an_2 + n; error: 20220127       
model: an_1**3*n**4 + 20220127*an_1*n + 20220127*an_1; error: 20220127       
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; error: 100000000      
model: an_9                          ; error: 100000000      
model: an_1**2*an_2*n                ; error: 20220127       
model: an_17                         ; error: 100000000      
model: 20220127*an_1*n + n**2        ; error: 20220127       
model: 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n; error: 100000000      
model: an_1*n + 20220127*n           ; error: 20220127       

Final score (sorted):
model: an_1 + an_2                   ; error: 0              
model: 20220128*an_1 + 20220127*n    ; error: 20220127       
model: an_1*an_2*an_3*n**2           ; error: 20220127       
model: an_2*n                        ; error: 20220127       
model: an_1*an_2*n + 20220127*an_1*n + 20220127*n; error: 20220127       
model: n**2 + 20220127*n             ; error: 20220127       
model: an_1*n + 20220127*an_1        ; error: 20220127       
model: 20220127*an_1*n + an_1        ; error: 20220127       
model: an_3*n + 20220127*n           ; error: 20220127       
model: 20220127*an_1**2*an_2*n**3 + an_1; error: 20220127       
model: an_1*an_2 + 20220127*n**2     ; error: 20220127       
model: an_1*an_2                     ; error: 20220127       
model: 20220127*an_1**2*n**2 + n     ; error: 20220127       
model: 20220127*an_1**2*n**3 + an_2*n; error: 20220127       
model: an_1*n**3 + 20220127*n        ; error: 20220127       
model: an_4*n**3                     ; error: 20220127       
model: an_3                          ; error: 20220127       
model: an_1*n**2                     ; error: 20220127       
model: an_1*an_2*n                   ; error: 20220127       
model: 20220128*an_1*n               ; error: 20220127       
model: 20220127*an_1*n + 20220127*an_1 + n; error: 20220127       
model: an_1*n**2 + 20220127*n**2     ; error: 20220127       
model: 20220127*an_1*n + n**2        ; error: 20220127       
model: an_1**2*an_2*n                ; error: 20220127       
model: an_1**3*n**4 + 20220127*an_1*n + 20220127*an_1; error: 20220127       
model: 20220127*an_2*n**3 + 20220127*an_2 + n; error: 20220127       
model: an_2*an_3*n                   ; error: 20220127       
model: an_1**2*an_2*n**2             ; error: 20220127       
model: 20220127*an_1**4*n**2 + an_1 + 20220127*n; error: 20220127       
model: an_1 + 20220127*an_2*an_3*n   ; error: 20220127       
model: an_1*n + 20220127*an_1 + 20220127*n; error: 20220127       
model: 20220127*an_1*n + 20220127*an_2 + 20220128*n; error: 20220127       
model: 20220127*an_1 + 20220127*an_2*n + 20220128*n; error: 20220127       
model: 20220127*an_1 + n**2          ; error: 20220127       
model: an_1**2*an_2*an_3*n**3        ; error: 20220127       
model: 20220128*n                    ; error: 20220127       
model: 20220127*an_1*an_2 + n        ; error: 20220127       
model: 20220127*an_4*n**3 + n        ; error: 20220127       
model: an_1**2 + 20220127*an_1*n + 20220127*n**2; error: 20220127       
model: 20220127*an_1*n**3 + n        ; error: 20220127       
model: 20220127*an_1**2*an_2**2*n**4 + 20220127*an_1 + an_3 + 20220127*n; error: 20220127       
model: 20220127*an_1**2*n + an_2*n   ; error: 20220127       
model: an_1*n**2 + 20220127*n        ; error: 20220127       
model: an_1**2*an_2*n + 20220127*n**2; error: 20220127       
model: 20220127*an_1**2 + an_1*n     ; error: 20220127       
model: 20220127*an_2 + 20220127*n**3 + n; error: 20220127       
model: an_2 + 20220127*n             ; error: 20220127       
model: an_2*n**2                     ; error: 20220127       
model: an_1**2*n                     ; error: 20220127       
model: 20220127*an_1**2*n + n        ; error: 20220127       
model: 20220127*an_1*n + an_2        ; error: 20220127       
model: 20220127*an_1**3 + 20220127*an_1*an_3*n + an_2; error: 20220127       
model: an_1**3 + 20220127*an_1 + 20220127*an_3; error: 20220127       
model: 20220127*an_1 + 20220127*an_2*n + n; error: 20220127       
model: n**2                          ; error: 20220127       
model: an_1 + 20220127*n**2          ; error: 20220127       
model: n                             ; error: 20220127       
model: an_1**2                       ; error: 20220127       
model: 20220127*an_3 + n             ; error: 20220127       
model: n**3                          ; error: 20220127       
model: an_1                          ; error: 20220127       
model: an_1*an_3*n**2                ; error: 20220127       
model: an_1*n + 20220127*n           ; error: 20220127       
model: an_1*n                        ; error: 20220127       
model: 20220127*an_1*n + an_3        ; error: 20220127       
model: 20220127*an_1 + n             ; error: 20220127       
model: an_1 + 20220127*n             ; error: 20220127       
model: 20220127*an_1**2*an_3 + an_1**2; error: 20220127       
model: an_1**3                       ; error: 20220127       
model: an_1*n + 20220127*an_2 + 20220127*n; error: 20220127       
model: an_1*an_2**2*n**2 + 20220127*an_1 + 20220127*n; error: 20220127       
model: an_1**2*n + 20220127*an_1 + 20220127*an_2**2*n; error: 20220127       
model: an_3**2*n                     ; error: 20220127       
model: an_1*an_3*n**3                ; error: 20220127       
model: 20220127*an_1*n**3 + an_2*n   ; error: 20220127       
model: an_3*n**3                     ; error: 20220127       
model: an_2                          ; error: 20220127       
model: 20220127*an_2*n + n           ; error: 20220127       
model: an_9                          ; error: 100000000      
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; error: 100000000      
model: an_17                         ; error: 100000000      
model: 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n; error: 100000000      
model: an_1*an_24*n**2               ; error: 100000000      
model: -3.9399742275706*an_1 - 1.6756216293962*an_7 + n; error: 100000000      
model: an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n; error: 100000000      
model: -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n; error: 100000000      
model: -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n; error: 100000000      
model: an_1*an_5                     ; error: 100000000      
model: 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n; error: 100000000      
model: an_14*n + 1.14611160322801*n  ; error: 100000000      

Total time consumed by now:2.6029497380004614


Equation discovery for all (chosen) OEIS sequences took 2.602957235001668 secconds, i.e. 0.043382620583361134 minutes or 0.0007230436763893522 hours.
