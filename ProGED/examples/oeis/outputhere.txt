




 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





IDEA: max ORDER for GRAMMAR = floor(DATASET ROWS (LEN(SEQ)))/2)-1
fibs ['0', '1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025', '121393', '196418', '317811', '514229', '832040', '1346269', '2178309', '3524578', '5702887', '9227465', '14930352', '24157817', '39088169', '63245986', '102334155', '165580141', '267914296', '433494437', '701408733', '1134903170', '1836311903', '2971215073', '4807526976', '7778742049']
1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 300
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 86
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
----. inside oeis_eq_disco
seq_id, nof_eqs, max_order,  before A000045 None None
seq_id, nof_eqs, max_order, shape,  after A000045 None 24
data shape (49, 26)
data: Matrix([
[         1,  1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         1,  2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         2,  3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         3,  4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         5,  5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         8,  6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        13,  7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        21,  8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        34,  9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        55, 10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        89, 11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       144, 12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       233, 13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       377, 14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       610, 15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       987, 16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[      1597, 17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[      2584, 18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[      4181, 19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[      6765, 20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[     10946, 21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[     17711, 22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[     28657, 23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[     46368, 24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[     75025, 25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[    121393, 26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[    196418, 27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[    317811, 28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[    514229, 29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[    832040, 30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[   1346269, 31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[   2178309, 32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[   3524578, 33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[   5702887, 34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[   9227465, 35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[  14930352, 36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[  24157817, 37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[  39088169, 38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[  63245986, 39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[ 102334155, 40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[ 165580141, 41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[ 267914296, 42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[ 433494437, 43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[ 701408733, 44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[1134903170, 45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[1836311903, 46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[2971215073, 47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[4807526976, 48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[7778742049, 49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
data[:4][:4] : Matrix([
[1, 1, 0, 0, 0, 0],
[1, 2, 1, 0, 0, 0],
[2, 3, 1, 1, 0, 0],
[3, 4, 2, 1, 1, 0],
[5, 5, 3, 2, 1, 1],
[8, 6, 5, 3, 2, 1]]) 
 Matrix([
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     1],
[     1],
[     2],
[     3],
[     5],
[     8],
[    13],
[    21],
[    34],
[    55],
[    89],
[   144],
[   233],
[   377],
[   610],
[   987],
[  1597],
[  2584],
[  4181],
[  6765],
[ 10946],
[ 17711],
[ 28657],
[ 46368],
[ 75025],
[121393]])
data.shape (49, 26)
variable_names ['an', 'n', 'an_1', 'an_2', 'an_3', 'an_4', 'an_5', 'an_6', 'an_7', 'an_8', 'an_9', 'an_10', 'an_11', 'an_12', 'an_13', 'an_14', 'an_15', 'an_16', 'an_17', 'an_18', 'an_19', 'an_20', 'an_21', 'an_22', 'an_23', 'an_24']
=>> Grammar used: 
Grammar with 30 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.334924]
    V -> 'an_2' [0.101145]
    V -> 'an_3' [0.0310115]
    V -> 'an_4' [0.00997137]
    V -> 'an_5' [0.00365935]
    V -> 'an_6' [0.00176574]
    V -> 'an_7' [0.00119766]
    V -> 'an_8' [0.00102724]
    V -> 'an_9' [0.00097611]
    V -> 'an_10' [0.000960772]
    V -> 'an_11' [0.000956171]
    V -> 'an_12' [0.00095479]
    V -> 'an_13' [0.000954376]
    V -> 'an_14' [0.000954252]
    V -> 'an_15' [0.000954214]
    V -> 'an_16' [0.000954203]
    V -> 'an_17' [0.0009542]
    V -> 'an_18' [0.000954199]
    V -> 'an_19' [0.000954199]
    V -> 'an_20' [0.000954199]
    V -> 'an_21' [0.000954198]
    V -> 'an_22' [0.000954198]
    V -> 'an_23' [0.000954198]
    V -> 'an_24' [0.000954198]

ModelBox: 132 models
-> C0*an_1 + C1*n + an_1, p = 0.00013956223063931868, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.002926874890742275, parse trees = 1, valid = False
-> n**3, p = 0.0072, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001339694656488916, parse trees = 1, valid = False
-> an_1**2, p = 0.01615303595362485, parse trees = 1, valid = False
-> n, p = 0.18, parse trees = 1, valid = False
-> C0*n + an_14*n, p = 8.244734850453433e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0028937404580160818, parse trees = 1, valid = False
-> n**2, p = 0.036, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 0.00014048999475562923, parse trees = 2, valid = False
-> C0*an_1 + C1*an_3 + an_1**3, p = 1.2946440521943475e-06, parse trees = 1, valid = False
-> an_1, p = 0.1205725190840034, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_3*n + an_2, p = 1.047574576585032e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00038767286288699643, parse trees = 1, valid = False
-> an_1**2*n, p = 0.009691821572174911, parse trees = 3, valid = False
-> an_2*n**2, p = 0.0029129770992374557, parse trees = 2, valid = False
-> C0*n + an_2, p = 0.004369465648856183, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + n, p = 2.097343511450968e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00025968163143773673, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_4*n, p = 9.277514695809498e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005787480916032164, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.000585374978148455, parse trees = 1, valid = False
-> an_1*an_3*n**2, p = 0.00011965211817499793, parse trees = 2, valid = False
-> C0*an_1**2*an_3 + an_1**2, p = 2.157740086990579e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.04822900763360136, parse trees = 2, valid = False
-> an_2, p = 0.03641221374046819, parse trees = 1, valid = False
-> an_3*n**3, p = 8.93129770992611e-05, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.1965211817499795e-05, parse trees = 1, valid = False
-> an_3**2*n, p = 2.76972495775456e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008738931297712368, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2**2*n**2, p = 7.614752556495648e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.002164013595314473, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.015631720878741397, parse trees = 2, valid = False
-> C0*an_1*n + an_3, p = 0.00017947817726249692, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.014677051603057566, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2**2*n + an_1**2*n, p = 5.1007216552113086e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_2*n, p = 4.68299982518764e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n, p = 1.568447460535615e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_2*an_3*n + an_1, p = 7.261330835812974e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.014468702290080408, parse trees = 3, valid = False
-> an_3, p = 0.011164122137407634, parse trees = 1, valid = False
-> an_4*n**3, p = 2.8717557251915727e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3, p = 3.037070909210618e-12, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011574961832064325, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + an_2*n, p = 6.273789842142459e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.753457257739928e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_7 + n, p = 4.1588683235256785e-06, parse trees = 1, valid = False
-> an_1*an_24*n**2, p = 1.8408018186829341e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.004878124817903792, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n, p = 6.639151884055571e-16, parse trees = 1, valid = False
-> C0*an_18 + C1*n + an_2*n, p = 2.001282881135933e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.000117074995629691, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**3 + an_1, p = 4.202481363726381e-07, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 3.2152671755733985e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.001938364314434982, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.003876728628869964, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.00432, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_2*n, p = 1.8821369526427374e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.014564885496187277, parse trees = 2, valid = False
-> an_1*an_2*an_3*n**2, p = 2.420443611937658e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0019512499271615164, parse trees = 2, valid = False
-> C0*an_1*n + an_1*n, p = 0.00038767286288699643, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0004652074354643957, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n, p = 4.504197974455335e-09, parse trees = 1, valid = False
-> an_1*an_5, p = 0.00017648687430811048, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_4*n**3 + n, p = 3.446106870229887e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.000585374978148455, parse trees = 1, valid = False
-> C0*n + n, p = 0.0216, parse trees = 1, valid = False
-> an_1**2*an_2*an_3*n**3, p = 6.485310746491276e-08, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0028937404580160818, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2, p = 3.893680700350545e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1**2, p = 6.232359154505682e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.00023260371773219785, parse trees = 1, valid = False
-> C0*an_1**4*n**2 + C1*n + an_1, p = 1.1185724610959254e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.6140791008926915e-05, parse trees = 1, valid = False
-> an_2*an_3*n, p = 9.033564477599542e-05, parse trees = 1, valid = False
-> C0*an_2*n**3 + C1*an_2 + n, p = 8.48543558068186e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1**3*n**4, p = 4.474289844383701e-09, parse trees = 1, valid = False
-> C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1, p = 4.310243790083787e-10, parse trees = 1, valid = False
-> an_9, p = 0.0003513996755725212, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00013070395504463458, parse trees = 1, valid = False
-> an_17, p = 0.00034351196792813403, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005787480916032162, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_1*n + C2*n + an_19, p = 1.912089936360464e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0028937404580160818, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_2, p = 7.02449973778146e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 8.333972519086315e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + an_1, p = 9.518440695619558e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.0003472488549619298, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1, p = 3.1161795772528414e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_3, p = 3.9024998543230025e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + C1*n + n, p = 2.8853514604192746e-06, parse trees = 1, valid = False
-> an_1**2*an_20, p = 6.165281149128489e-06, parse trees = 1, valid = False
-> C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1, p = 2.854674928983084e-10, parse trees = 1, valid = False
-> C0*n + an_2**2, p = 0.00017677990793087212, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.00432, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.010470866466488121, parse trees = 2, valid = False
-> an_1**2*an_2, p = 0.0013070395504463455, parse trees = 2, valid = False
-> C0*an_2*n + an_2, p = 0.0001767799079308721, parse trees = 1, valid = False
-> C0*n + an_1*an_18, p = 6.626889540365226e-07, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.7427830546014797e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + n**2, p = 1.0115279622405302e-06, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_1*an_2, p = 2.809799895112584e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 7.778374351147226e-05, parse trees = 2, valid = False
-> an_1**2*an_3*n**2, p = 8.01486516783132e-06, parse trees = 1, valid = False
-> C0*an_1*n + n**4, p = 2.3149923664128657e-05, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00014523192121678998, parse trees = 1, valid = False
-> an_2**3*an_6*n, p = 8.419262008910353e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3*n, p = 6.9578818805092585e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.0057874809160321635, parse trees = 2, valid = False
-> C0*an_2*n + C1*n + n, p = 0.00010486717557254841, parse trees = 1, valid = False
-> C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1, p = 3.9306599993346483e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.368310980295938e-05, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**3 + n, p = 8.404962727452765e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1, p = 5.566305504407362e-09, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.0004307633587787359, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00038767286288699643, parse trees = 1, valid = False
-> C0*n + an_2*n**3, p = 3.495572519084946e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001938364314434982, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n**2, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*an_2 + an_2*n**2, p = 3.535598158617442e-05, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004465648854963054, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00017477862595424736, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 0.00010768690635749815, parse trees = 1, valid = False
-> an_1**2*an_2**2*n**2, p = 1.0576045217355065e-06, parse trees = 1, valid = False
-> C0*an_14*an_2 + an_1**2*an_2, p = 6.055325596076297e-09, parse trees = 1, valid = False
task data <class 'sympy.matrices.dense.MutableDenseMatrix'>
X origin Matrix([
[ 1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
Y origin Matrix([
[         1],
[         1],
[         2],
[         3],
[         5],
[         8],
[        13],
[        21],
[        34],
[        55],
[        89],
[       144],
[       233],
[       377],
[       610],
[       987],
[      1597],
[      2584],
[      4181],
[      6765],
[     10946],
[     17711],
[     28657],
[     46368],
[     75025],
[    121393],
[    196418],
[    317811],
[    514229],
[    832040],
[   1346269],
[   2178309],
[   3524578],
[   5702887],
[   9227465],
[  14930352],
[  24157817],
[  39088169],
[  63245986],
[ 102334155],
[ 165580141],
[ 267914296],
[ 433494437],
[ 701408733],
[1134903170],
[1836311903],
[2971215073],
[4807526976],
[7778742049]])
shapes: task.data (49, 26), X (49, 25), Y (49, 1), 
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*n + an_14*n <class 'ProGED.model.Model'>
C0*n + an_14*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_14*n)
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
C0*an_1 + C1*an_3 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*an_3)
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3, C1*an_1*an_3*n)
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
C0*an_2 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**3)
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
C0*an_1 + C1*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_4*n)
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
C0*an_1**2*an_3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*an_3)
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
an_1*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**3)
an_3**2*n <class 'ProGED.model.Model'>
an_3**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_3**2)
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2**2*n**2)
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n, C1*an_2**2*n)
C0*an_1*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**3)
C0*an_1**2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n)
C0*n**2 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_2*n)
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
C0*an_2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n)
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_4*n**3 <class 'ProGED.model.Model'>
an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**3)
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1**2*an_2**2*n**4)
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
C0*an_1**2*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**3)
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
C0*an_1 + C1*an_7 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_7 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_7)
an_1*an_24*n**2 <class 'ProGED.model.Model'>
an_1*an_24*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, n**2)
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_2, C3*n, an_20*n, C0*an_1**2*n, C1*an_1*an_7*n**2)
C0*an_18 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_18 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18, C1*n, an_2*n)
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
C0*an_1**2*an_2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n**3)
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
C0*an_1*n + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1*an_2*n)
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_4, C0*an_1*an_2, C1*an_1*n**2)
an_1*an_5 <class 'ProGED.model.Model'>
an_1*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5)
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
C0*an_4*n**3 + n <class 'ProGED.model.Model'>
C0*an_4*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n**3)
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
an_1**2*an_2*an_3*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**2, n**3)
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1**3*an_2*an_21*n**2)
C0*an_1 + C1*an_2*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*n)
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
C0*an_1*n + C1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n**2, C0*an_1*n)
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
C0*an_1**4*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**4*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**4*n**2)
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
C0*an_2*n**3 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**3)
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**3*n**4, C0*an_1*n)
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_1*an_17*n**2)
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C2*n, C0*an_1**3*n, C1*an_1*n)
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
C0*an_1 + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n**2)
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
C0*an_1*an_2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*an_2)
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
C0*an_1**2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n)
C0*an_2 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2, C1*n)
C0*an_1**2*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_3)
an_1**2*an_20 <class 'ProGED.model.Model'>
an_1**2*an_20 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, an_1**2)
C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**3, C0*an_1*an_14*n)
C0*n + an_2**2 <class 'ProGED.model.Model'>
C0*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*n)
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
C0*n + an_1*an_18 <class 'ProGED.model.Model'>
C0*n + an_1*an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_18)
C0*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4)
C0*an_1 + C1*an_2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2, C2*n)
C0*n**3 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, C1*n, an_1*an_2)
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2, n**2)
C0*an_1*n + n**4 <class 'ProGED.model.Model'>
C0*an_1*n + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1*n)
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
an_2**3*an_6*n <class 'ProGED.model.Model'>
an_2**3*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n, an_2**3)
C0*an_1*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_1*n)
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
C0*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n)
C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1**2*an_9)
C0*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*n)
C0*an_1**3*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*an_2*n**3)
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*n, C0*an_1*n**2, C2*an_3*n)
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
C0*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**3)
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
C0*an_1**2*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_1**2*n)
C0*an_2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n**2)
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
an_1**2*an_2**2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_2**2, n**2)
C0*an_14*an_2 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_14*an_2 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_2, C0*an_14*an_2)
returning 0 earlier
Estimating model C0*an_1 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1 -0.931638490088389*an_1 - 3.21490762629033*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1 C0*an_1 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*n                                                      ; p: 0.00013956223063931868 ; error: 111
Estimating model C0*an_1 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_2 -3.38729302238944*an_1 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_2 C0*an_1 + an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [1], [2], [3], [5], [8]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([[1]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_2 -3.38729302238944*an_1 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_2 C0*an_1 + an_2 1 [2, 3] 1 2
chosen final nof_eqs: 49
X an Y shapes: (48, 25) (48, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], [39, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976]])
x [Matrix([[1]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [1], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 0.002926874890742275   ; error: 0
Estimating model n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**3 n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**3 n**3 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-7], [-25], [-61], [-120], [-208], [-330], [-491]])
x []
model: n**3                                                                  ; p: 0.0072                 ; error: 111
Estimating model C0*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n -0.0909437746198349*an_3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n C0*an_3 + n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_3 + n                                                          ; p: 0.001339694656488916   ; error: 111
Estimating model an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2 an_1**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2 an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
model: an_1**2                                                               ; p: 0.01615303595362485    ; error: 111
Estimating model n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
model: n                                                                     ; p: 0.18                   ; error: 111
Estimating model C0*n + an_14*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_14*n an_14*n + 1.14611160322801*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_14*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_14*n C0*n + an_14*n 13 [1, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[14]]) Matrix([[377]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_14*n + 111*n                                                       ; p: 8.244734850453433e-06  ; error: 111
Estimating model C0*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1 an_1 - 2.15534738151254*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1 C0*n**2 + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n**2                                                       ; p: 0.0028937404580160818  ; error: 111
Estimating model n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**2 n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**2 n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
model: n**2                                                                  ; p: 0.036                  ; error: 111
Estimating model C0*an_1 + C1*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + n 4.886008142797*an_1 - 3.71837779808204*an_2*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + n C0*an_1 + C1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [2, 4], [3, 10], [5, 18], [8, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2*n + n                                             ; p: 0.00014048999475562923 ; error: 111
Estimating model C0*an_1 + C1*an_3 + an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + an_1**3 an_1**3 - 1.53874602431923*an_1 + 1.54939711452807*an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + an_1**3 C0*an_1 + C1*an_3 + an_1**3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 1], [3, 1], [5, 2], [8, 3]]) Matrix([[1], [-5], [-22], [-117], [-499]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3 + 111*an_1 + 111*an_3                                         ; p: 1.2946440521943475e-06 ; error: 111
Estimating model an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1 an_1 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1 an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
model: an_1                                                                  ; p: 0.1205725190840034     ; error: 111
Estimating model C0*an_1**3 + C1*an_1*an_3*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3 + C1*an_1*an_3*n + an_2 -3.44148861733947*an_1**3 + 2.03926281466229*an_1*an_3*n + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3 + C1*an_1*an_3*n + an_2 C0*an_1**3 + C1*an_1*an_3*n + an_2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [8, 8], [27, 15], [125, 60], [512, 168]]) Matrix([[1], [2], [3], [5], [8]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3 + 111*an_1*an_3*n + an_2                                  ; p: 1.047574576585032e-08  ; error: 111
Estimating model C0*an_1**2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + n 4.44362290153865*an_1**2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + n C0*an_1**2*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [16], [45], [150], [448]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + n                                                     ; p: 0.00038767286288699643 ; error: 111
Estimating model an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*n an_1**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*n an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
model: an_1**2*n                                                             ; p: 0.009691821572174911   ; error: 111
Estimating model an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n**2 an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n**2 an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
model: an_2*n**2                                                             ; p: 0.0029129770992374557  ; error: 111
Estimating model C0*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2 an_2 - 1.44632215307908*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2 C0*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2 + 111*n                                                          ; p: 0.004369465648856183   ; error: 111
Estimating model C0*an_2 + C1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**3 + n -1.86108359610879*an_2 - 1.99323635796169*n**3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**3 + n C0*an_2 + C1*n**3 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 8], [1, 27], [1, 64], [2, 125], [3, 216], [5, 343]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + 111*n**3 + n                                               ; p: 2.097343511450968e-05  ; error: 111
Estimating model C0*an_1**2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + an_1*n 2.37749321905208*an_1**2 + an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + an_1*n C0*an_1**2 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + an_1*n                                                  ; p: 0.00025968163143773673 ; error: 111
Estimating model C0*an_1 + C1*n + an_1*an_4*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_4*n an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_4*n C0*an_1 + C1*n + an_1*an_4*n 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[3], [-10], [-22], [-99]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_4*n + 111*an_1 + 111*n                                        ; p: 9.277514695809498e-07  ; error: 111
Estimating model C0*n + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**2 an_1*n**2 + 1.68083643878194*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**2 C0*n + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*n                                                     ; p: 0.0005787480916032164  ; error: 111
Estimating model C0*an_1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_2 0.179925273167348*an_1*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_2 C0*an_1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [8], [15], [30], [56]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_2                                                     ; p: 0.000585374978148455   ; error: 111
Estimating model an_1*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**2 an_1*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**2 an_1*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-29], [-70], [-352], [-1163]])
x []
model: an_1*an_3*n**2                                                        ; p: 0.00011965211817499793 ; error: 111
Estimating model C0*an_1**2*an_3 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + an_1**2 -3.52117204598396*an_1**2*an_3 + an_1**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + an_1**2 C0*an_1**2*an_3 + an_1**2 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [50], [192]]) Matrix([[1], [-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_3 + an_1**2                                            ; p: 2.157740086990579e-06  ; error: 111
Estimating model an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n an_1*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
model: an_1*n                                                                ; p: 0.04822900763360136    ; error: 111
Estimating model an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2 an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2 an_2 1 [3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
model: an_2                                                                  ; p: 0.03641221374046819    ; error: 111
Estimating model an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**3 an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**3 an_3*n**3 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-61], [-120], [-424], [-1016]])
x []
model: an_3*n**3                                                             ; p: 8.93129770992611e-05   ; error: 111
Estimating model an_1*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**3 an_1*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**3 an_1*an_3*n**3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-125], [-370], [-2152], [-8219]])
x []
model: an_1*an_3*n**3                                                        ; p: 1.1965211817499795e-05 ; error: 111
Estimating model an_3**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3**2*n an_3**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3**2*n an_3**2*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1], [0], [-16], [-50]])
x []
model: an_3**2*n                                                             ; p: 2.76972495775456e-05   ; error: 111
Estimating model C0*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + n 1.19942705341058*an_2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + n C0*an_2*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + n                                                        ; p: 0.0008738931297712368  ; error: 111
Estimating model C0*an_1 + C1*n + an_1*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_2**2*n**2 an_1*an_2**2*n**2 + 0.953056313182407*an_1 - 1.29380419473357*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_2**2*n**2 C0*an_1 + C1*n + an_1*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-7], [-29], [-295], [-1612], [-9787]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n                                  ; p: 7.614752556495648e-08  ; error: 111
Estimating model an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3 an_1**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3 an_1**3 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-5], [-22], [-117], [-499]])
x []
model: an_1**3                                                               ; p: 0.002164013595314473   ; error: 111
Estimating model C0*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n -0.723215544453294*an_1 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n C0*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n                                                          ; p: 0.015631720878741397   ; error: 111
Estimating model C0*an_1*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_3 -0.56735068822634*an_1*n + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_3 C0*an_1*n + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [8], [15], [30], [56]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_3                                                     ; p: 0.00017947817726249692 ; error: 111
Estimating model C0*an_2 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*n an_1*n + 3.45334946796427*an_2 - 0.695248129144802*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*n C0*an_2 + C1*n + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_2 + 111*n                                             ; p: 8.429399685337752e-06  ; error: 111
Estimating model C0*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1 an_1 - 4.1139580931143*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1 C0*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n                                                          ; p: 0.014677051603057566   ; error: 111
Estimating model C0*an_1 + C1*an_2**2*n + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2**2*n + an_1**2*n an_1**2*n - 4.72461864082546*an_1 - 0.163365744660633*an_2**2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2**2*n + an_1**2*n C0*an_1 + C1*an_2**2*n + an_1**2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [2, 4], [3, 20], [5, 54], [8, 175]]) Matrix([[-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*an_1 + 111*an_2**2*n                                  ; p: 5.1007216552113086e-08 ; error: 111
Estimating model C0*an_1*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + an_2*n -4.04074229112346*an_1*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + an_2*n C0*an_1*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [27], [128], [375], [1080], [2744]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**3 + an_2*n                                                ; p: 4.68299982518764e-06   ; error: 111
Estimating model C0*an_1**2*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n -0.570436974378895*an_1**2*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n C0*an_1**2*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [16], [45], [150], [448]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_2*n                                                ; p: 1.568447460535615e-05  ; error: 111
Estimating model C0*n**2 + an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1**2*an_2*n an_1**2*an_2*n - 2.5658071806154*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1**2*an_2*n C0*n**2 + an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [16], [25], [36], [49]]) Matrix([[1], [-1], [-13], [-85], [-442], [-2227]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2*n + 111*n**2                                             ; p: 3.13689492107123e-06   ; error: 111
Estimating model C0*an_1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + n -3.70386505215037*an_1*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + n C0*an_1*n**3 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [8], [27], [128], [375], [1080], [2744]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**3 + n                                                     ; p: 0.00011574961832064328 ; error: 111
Estimating model C0*an_2*an_3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_3*n + an_1 an_1 - 3.24437525310367*an_2*an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_3*n + an_1 C0*an_2*an_3*n + an_1 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [10], [36], [105]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*an_2*an_3*n                                                ; p: 7.261330835812974e-06  ; error: 111
Estimating model an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n**2 an_1*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n**2 an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
model: an_1*n**2                                                             ; p: 0.014468702290080408   ; error: 111
Estimating model an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3 an_3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3 an_3 2 [4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [2], [4], [6], [10]])
x []
model: an_3                                                                  ; p: 0.011164122137407634   ; error: 111
Estimating model an_4*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4*n**3 an_4*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4*n**3 an_4*n**3 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-120], [-208], [-673]])
x []
model: an_4*n**3                                                             ; p: 2.8717557251915727e-05 ; error: 111
Estimating model C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2.57736761374815*an_1**2*an_2**2*n**4 + 0.263415921385857*an_1 + an_3 + 4.50301867916131*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 81], [2, 4, 1024], [3, 5, 22500], [5, 6, 291600], [8, 7, 3841600]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n                    ; p: 3.037070909210618e-12  ; error: 111
Estimating model C0*n + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**3 an_1*n**3 - 3.53941366605452*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**3 C0*n + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**3 + 111*n                                                     ; p: 0.00011574961832064325 ; error: 111
Estimating model C0*an_1**2*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**3 + an_2*n -2.63065138335986*an_1**2*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**3 + an_2*n C0*an_1**2*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [27], [256], [1125], [5400], [21952]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**3 + an_2*n                                             ; p: 6.273789842142459e-07  ; error: 111
Estimating model C0*an_1**2*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + n 0.0868721793972393*an_1**2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + n C0*an_1**2*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [64], [225], [900], [3136]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**2 + n                                                  ; p: 7.753457257739928e-05  ; error: 111
Estimating model C0*an_1 + C1*an_7 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_7 + n -3.9399742275706*an_1 - 1.6756216293962*an_7 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_7 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_7 + n C0*an_1 + C1*an_7 + n 6 [1, 2, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8, 0], [13, 1]]) Matrix([[6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_7 + n                                               ; p: 4.1588683235256785e-06 ; error: 111
Estimating model an_1*an_24*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_24*n**2 an_1*an_24*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_24*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_24*n**2 an_1*an_24*n**2 23 [1, 2, 25] 1 24
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 24
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1*an_24*n**2
model: an_1*an_24*n**2                                                       ; p: 1.8408018186829341e-06 ; error: 100000000
Estimating model an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2 an_1*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2 an_1*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
model: an_1*an_2                                                             ; p: 0.004878124817903792   ; error: 111
Estimating model C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n 19 [1, 2, 3, 8, 21] 1 20
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 20
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0]]) Matrix([[6765], [10946], [17711], [28657]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2584, 20, 349615220, 389669200], [4181, 21, 961069725, 1124728605], [6765, 22, 2635928152, 3231697040], [10946, 23, 7214628983, 9247320453]]) Matrix([[6765], [10925], [17689], [28611]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n       ; p: 6.639151884055571e-16  ; error: 111
Estimating model C0*an_18 + C1*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_18 + C1*n + an_2*n -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_18 + C1*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_18 + C1*n + an_2*n C0*an_18 + C1*n + an_2*n 17 [1, 3, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0]]) Matrix([[2584], [4181]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 18], [1, 19]]) Matrix([[-15182], [-26162]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_18 + an_2*n + 111*n                                            ; p: 2.001282881135933e-07  ; error: 111
Estimating model C0*n**2 + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*an_2 an_1*an_2 - 4.17618046771062*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*an_2 C0*n**2 + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [16], [25], [36], [49]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*n**2                                                  ; p: 0.000117074995629691   ; error: 111
Estimating model C0*an_1**2*an_2*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n**3 + an_1 -2.46917679533612*an_1**2*an_2*n**3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n**3 + an_1 C0*an_1**2*an_2*n**3 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [27], [256], [2250], [16200], [109760]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2*n**3 + an_1                                          ; p: 4.202481363726381e-07  ; error: 111
Estimating model C0*n + an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_3*n an_3*n + 4.84244497296571*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_3*n C0*n + an_3*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [4], [5], [6], [7]]) Matrix([[2], [-1], [0], [-4], [-8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_3*n + 111*n                                                        ; p: 3.2152671755733985e-05 ; error: 111
Estimating model C0*an_1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1 -3.96997638671773*an_1*n + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1 C0*an_1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_1                                                     ; p: 0.001938364314434982   ; error: 111
Estimating model C0*an_1 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n an_1*n + 0.58832509811073*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n C0*an_1 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_1                                                     ; p: 0.003876728628869964   ; error: 111
Estimating model C0*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n**2 n**2 + 0.395514211589462*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n**2 C0*n + n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: n**2 + 111*n                                                          ; p: 0.00432                ; error: 111
Estimating model C0*an_1*n + C1*n + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_1*an_2*n an_1*an_2*n + 4.98897552081565*an_1*n - 2.45278598732714*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_1*an_2*n C0*an_1*n + C1*n + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 2], [3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_1*n + 111*n                                      ; p: 1.8821369526427374e-06 ; error: 111
Estimating model an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n an_2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
model: an_2*n                                                                ; p: 0.014564885496187277   ; error: 111
Estimating model an_1*an_2*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-29], [-145], [-1072], [-5867]])
x []
model: an_1*an_2*an_3*n**2                                                   ; p: 2.420443611937658e-06  ; error: 111
Estimating model an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n an_1*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
model: an_1*an_2*n                                                           ; p: 0.0019512499271615164  ; error: 111
Estimating model C0*an_1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1*n -1.7366609801189*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1*n C0*an_1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1*n                                                            ; p: 0.00038767286288699643 ; error: 111
Estimating model C0*an_1*n + C1*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + n 4.95104677152123*an_1*n - 1.00160428570936*an_1 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + n C0*an_1*n + C1*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_1 + n                                             ; p: 0.0004652074354643957  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2, 32], [1, 6, 75], [1, 15, 180], [2, 40, 392]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n                          ; p: 4.504197974455335e-09  ; error: 111
Estimating model an_1*an_5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_5 an_1*an_5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_5 an_1*an_5 4 [2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[5], [3], [5]])
x []
model: an_1*an_5                                                             ; p: 0.00017648687430811048 ; error: 111
Estimating model C0*n**2 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*n**2 an_1*n**2 + 3.16777058585259*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*n**2 C0*n**2 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*n**2                                                  ; p: 0.00011574961832064328 ; error: 111
Estimating model C0*an_4*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4*n**3 + n -4.66567071302591*an_4*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4*n**3 + n C0*an_4*n**3 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [125], [216], [686]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_4*n**3 + n                                                     ; p: 3.446106870229887e-06  ; error: 111
Estimating model C0*an_1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + n -0.379891564734828*an_1*an_2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + n C0*an_1*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + n                                                     ; p: 0.000585374978148455   ; error: 111
Estimating model C0*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n 3.81307521430685*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n C0*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*n                                                                 ; p: 0.0216                 ; error: 111
Estimating model an_1**2*an_2*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-253], [-2245], [-32392], [-329267]])
x []
model: an_1**2*an_2*an_3*n**3                                                ; p: 6.485310746491276e-08  ; error: 111
Estimating model C0*an_1 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n**2 -3.38476187356185*an_1 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n**2 C0*an_1 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n**2                                                       ; p: 0.0028937404580160818  ; error: 111
Estimating model C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 20 [1, 2, 3, 22] 1 21
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 21
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0]]) Matrix([[10946], [17711]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4181, 21], [6765, 22]]) Matrix([[10946], [-4294172575393185649]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n                            ; p: 3.893680700350545e-12  ; error: 111
Estimating model C0*an_1 + C1*an_2*n + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + C2*n + n 1.11774259288263*an_1 + 1.03730829468596*an_2*n + 1.20089175639547*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + C2*n + n C0*an_1 + C1*an_2*n + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2, 0], [1, 3, 3], [2, 4, 4], [3, 5, 10], [5, 6, 18], [8, 7, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2*n + 112*n                                         ; p: 8.429399685337752e-06  ; error: 111
Estimating model C0*an_1*n + C1*an_2 + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*n + n -4.71570544893716*an_1*n - 0.592618022589214*an_2 + 1.12530943404008*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*n + n C0*an_1*n + C1*an_2 + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2, 2], [1, 3, 3], [1, 4, 8], [2, 5, 15], [3, 6, 30], [5, 7, 56]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_2 + 112*n                                         ; p: 8.429399685337752e-06  ; error: 111
Estimating model C0*an_1*n + C1*n**2 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n**2 + an_1**2 an_1**2 + 1.50005456450705*an_1*n + 3.8085740056491*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n**2 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n**2 + an_1**2 C0*an_1*n + C1*n**2 + an_1**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [4, 2], [9, 3], [16, 8], [25, 15], [36, 30], [49, 56]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*an_1*n + 111*n**2                                       ; p: 6.232359154505682e-06  ; error: 111
Estimating model C0*an_1 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*n an_1*n + 2.26310868721149*an_1 + 0.620623973355764*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*n C0*an_1 + C1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_1 + 111*n                                             ; p: 0.00023260371773219785 ; error: 111
Estimating model C0*an_1**4*n**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**4*n**2 + C1*n + an_1 -4.02958440341425*an_1**4*n**2 + an_1 + 3.19512905954627*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**4*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**4*n**2 + C1*n + an_1 C0*an_1**4*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 4], [3, 9], [4, 256], [5, 2025], [6, 22500], [7, 200704]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**4*n**2 + an_1 + 111*n                                       ; p: 1.1185724610959254e-07 ; error: 111
Estimating model an_1**2*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n**2 an_1**2*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n**2 an_1**2*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-61], [-445], [-2692], [-15667]])
x []
model: an_1**2*an_2*n**2                                                     ; p: 2.6140791008926915e-05 ; error: 111
Estimating model an_2*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_3*n an_2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_3*n an_2*an_3*n 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1], [-5], [-28], [-92]])
x []
model: an_2*an_3*n                                                           ; p: 9.033564477599542e-05  ; error: 111
Estimating model C0*an_2*n**3 + C1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**3 + C1*an_2 + n 1.53482562619658*an_2*n**3 - 3.58680779358041*an_2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**3 + C1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**3 + C1*an_2 + n C0*an_2*n**3 + C1*an_2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 27], [1, 64], [2, 250], [3, 648], [5, 1715]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**3 + 111*an_2 + n                                          ; p: 8.48543558068186e-07   ; error: 111
Estimating model C0*an_1*n + C1*an_1 + an_1**3*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_1**3*n**4 an_1**3*n**4 + 4.22760676525618*an_1*n - 0.709171778324632*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_1**3*n**4 C0*an_1*n + C1*an_1 + an_1**3*n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[1], [-15], [-79], [-2045], [-16870], [-161992], [-1229299]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*n**4 + 111*an_1*n + 111*an_1                                  ; p: 4.474289844383701e-09  ; error: 111
Estimating model C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824]]) Matrix([[610], [987], [1597]])
x [Matrix([
[1],
[0],
[0]])]
-- ***** ----- ***** ----- ***** ----- ***** ---
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181], [6765], [10946]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095]]) Matrix([[610], [987], [1597], [2584], [4181]])
x [Matrix([
[1],
[0],
[0]])]
Uuhuu! Eqation found even after double checkingwith 5 equations :)
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
chosen final nof_eqs: 49
X an Y shapes: (33, 25) (33, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], [39, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095], [6765, 22, 26489320], [10946, 23, 74952952], [17711, 24, 214583616], [28657, 25, 608580000], [46368, 26, 1724374600], [75025, 27, 4867252335], [121393, 28, 13705262368], [196418, 29, 38488183344], [317811, 30, 107833821300], [514229, 31, 301445595880], [832040, 32, 840933468160], [1346269, 33, 2341340180487], [2178309, 34, 6506836232296], [3524578, 35, 18051918509800], [5702887, 36, 49999720389840], [9227465, 37, 138274245022320], [14930352, 38, 381839035289608], [24157817, 39, 1052973943522839], [39088169, 40, 2899904353283200], [63245986, 41, 7976395596486240], [102334155, 42, 21913554738518100], [165580141, 43, 60134879328372472], [267914296, 44, 164842869592425376], [433494437, 45, 451403706958012575], [701408733, 46, 1234897858587747880], [1134903170, 47, 3375097867300613080], [1836311903, 48, 9216126132739515648], [2971215073, 49, 25143942550232165184]]) Matrix([[610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073]])
x [Matrix([
[1],
[0],
[0]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [1, 0, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1*an_17*n**2 + an_1                                                ; p: 4.310243790083787e-10  ; error: 0
Estimating model an_9






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_9 an_9 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_9 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_9 an_9 8 [10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_9
model: an_9                                                                  ; p: 0.0003513996755725212  ; error: 100000000
Estimating model an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n an_1**2*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-13], [-85], [-442], [-2227]])
x []
model: an_1**2*an_2*n                                                        ; p: 0.00013070395504463458 ; error: 111
Estimating model an_17






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_17 an_17 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_17 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_17 an_17 16 [18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_17
model: an_17                                                                 ; p: 0.00034351196792813403 ; error: 100000000
Estimating model C0*an_1*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**2 -2.70272190045233*an_1*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**2 C0*an_1*n + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n**2                                                     ; p: 0.0005787480916032162  ; error: 111
Estimating model C0*an_1**3*n + C1*an_1*n + C2*n + an_19






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*n + C1*an_1*n + C2*n + an_19 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*n + C1*an_1*n + C2*n + an_19 C0*an_1**3*n + C1*an_1*n + C2*n + an_19 18 [1, 2, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0]]) Matrix([[4181], [6765], [10946]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[19, 327816741376, 49096], [20, 1461741234820, 83620], [21, 6501636689625, 142065]]) Matrix([[4181], [6764], [10945]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n                            ; p: 1.912089936360464e-10  ; error: 111
Estimating model C0*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n an_1*n - 4.01021245471769*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n C0*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*n                                                        ; p: 0.0028937404580160818  ; error: 111
Estimating model C0*an_1 + C1*n**2 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + an_2 1.61768900689656*an_1 + an_2 + 3.89076752782736*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + an_2 C0*an_1 + C1*n**2 + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([
[1],
[0]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + an_2 1.61768900689656*an_1 + an_2 + 3.89076752782736*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + an_2 C0*an_1 + C1*n**2 + an_2 1 [1, 2, 3] 1 2
chosen final nof_eqs: 49
X an Y shapes: (48, 25) (48, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], [39, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49], [13, 64], [21, 81], [34, 100], [55, 121], [89, 144], [144, 169], [233, 196], [377, 225], [610, 256], [987, 289], [1597, 324], [2584, 361], [4181, 400], [6765, 441], [10946, 484], [17711, 529], [28657, 576], [46368, 625], [75025, 676], [121393, 729], [196418, 784], [317811, 841], [514229, 900], [832040, 961], [1346269, 1024], [2178309, 1089], [3524578, 1156], [5702887, 1225], [9227465, 1296], [14930352, 1369], [24157817, 1444], [39088169, 1521], [63245986, 1600], [102334155, 1681], [165580141, 1764], [267914296, 1849], [433494437, 1936], [701408733, 2025], [1134903170, 2116], [1836311903, 2209], [2971215073, 2304], [4807526976, 2401]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976]])
x [Matrix([
[1],
[0]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 7.02449973778146e-05   ; error: 0
Estimating model C0*an_1 + C1*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + n -3.07752780614617*an_1 - 1.04917697404411*n**2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + n C0*an_1 + C1*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*n**2 + n                                               ; p: 8.333972519086315e-06  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_2 + an_1 2.52599404073776*an_1*an_2 + an_1 - 1.22819108917753*an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_2 + an_1 C0*an_1*an_2 + C1*an_2 + an_1 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 1], [1, 2], [2, 6], [3, 15], [5, 40]]) Matrix([[0], [1], [1], [2], [3], [5]])
x [Matrix([
[1],
[0]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_2 + an_1 2.52599404073776*an_1*an_2 + an_1 - 1.22819108917753*an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_2 + an_1 C0*an_1*an_2 + C1*an_2 + an_1 1 [2, 3] 1 2
chosen final nof_eqs: 49
X an Y shapes: (48, 25) (48, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], [39, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 1], [1, 2], [2, 6], [3, 15], [5, 40], [8, 104], [13, 273], [21, 714], [34, 1870], [55, 4895], [89, 12816], [144, 33552], [233, 87841], [377, 229970], [610, 602070], [987, 1576239], [1597, 4126648], [2584, 10803704], [4181, 28284465], [6765, 74049690], [10946, 193864606], [17711, 507544127], [28657, 1328767776], [46368, 3478759200], [75025, 9107509825], [121393, 23843770274], [196418, 62423800998], [317811, 163427632719], [514229, 427859097160], [832040, 1120149658760], [1346269, 2932589879121], [2178309, 7677619978602], [3524578, 20100270056686], [5702887, 52623190191455], [9227465, 137769300517680], [14930352, 360684711361584], [24157817, 944284833567073], [39088169, 2472169789339634], [63245986, 6472224534451830], [102334155, 16944503814015855], [165580141, 44361286907595736], [267914296, 116139356908771352], [433494437, 304056783818718321], [701408733, 796030994547383610], [1134903170, 2084036199823432510], [1836311903, 5456077604922913919], [2971215073, 14284196614945309248]]) Matrix([[0], [1], [1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073]])
x [Matrix([
[1],
[0]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1*an_2 + an_1                                                      ; p: 9.518440695619558e-06  ; error: 0
Estimating model C0*n**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + C1*n + an_1 an_1 - 3.75795766913405*n**2 - 4.13557018801783*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + C1*n + an_1 C0*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [4, 2], [9, 3], [16, 4], [25, 5], [36, 6], [49, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n**2 + 111*n                                               ; p: 0.0003472488549619298  ; error: 111
Estimating model C0*an_1**2*n + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*n + an_1 4.66412214893353*an_1**2*n + an_1 - 2.4689103617128*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*n + an_1 C0*an_1**2*n + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 2], [3, 3], [4, 16], [5, 45], [6, 150], [7, 448]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_1 + 111*n                                          ; p: 3.1161795772528414e-05 ; error: 111
Estimating model C0*an_2 + C1*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_3 -2.62019439651843*an_2 + an_3 - 3.44932340734513*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_3 C0*an_2 + C1*n + an_3 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[2], [2], [4], [6], [10]])
x [Matrix([
[2],
[0]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_3 -2.62019439651843*an_2 + an_3 - 3.44932340734513*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_3 C0*an_2 + C1*n + an_3 2 [1, 3, 4] 1 3
chosen final nof_eqs: 49
X an Y shapes: (47, 25) (47, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0], [24, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0], [25, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1], [26, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1], [27, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2], [28, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3], [29, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5], [30, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8], [31, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13], [32, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21], [33, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34], [34, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55], [35, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89], [36, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144], [37, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233], [38, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377], [39, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610], [40, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597, 987], [41, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584, 1597], [42, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181, 2584], [43, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765, 4181], [44, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946, 6765], [45, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711, 10946], [46, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657, 17711], [47, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368, 28657], [48, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025, 46368], [49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]]) Matrix([[2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368], [75025], [121393], [196418], [317811], [514229], [832040], [1346269], [2178309], [3524578], [5702887], [9227465], [14930352], [24157817], [39088169], [63245986], [102334155], [165580141], [267914296], [433494437], [701408733], [1134903170], [1836311903], [2971215073], [4807526976], [7778742049]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [1, 4], [2, 5], [3, 6], [5, 7], [8, 8], [13, 9], [21, 10], [34, 11], [55, 12], [89, 13], [144, 14], [233, 15], [377, 16], [610, 17], [987, 18], [1597, 19], [2584, 20], [4181, 21], [6765, 22], [10946, 23], [17711, 24], [28657, 25], [46368, 26], [75025, 27], [121393, 28], [196418, 29], [317811, 30], [514229, 31], [832040, 32], [1346269, 33], [2178309, 34], [3524578, 35], [5702887, 36], [9227465, 37], [14930352, 38], [24157817, 39], [39088169, 40], [63245986, 41], [102334155, 42], [165580141, 43], [267914296, 44], [433494437, 45], [701408733, 46], [1134903170, 47], [1836311903, 48], [2971215073, 49]]) Matrix([[2], [2], [4], [6], [10], [16], [26], [42], [68], [110], [178], [288], [466], [754], [1220], [1974], [3194], [5168], [8362], [13530], [21892], [35422], [57314], [92736], [150050], [242786], [392836], [635622], [1028458], [1664080], [2692538], [4356618], [7049156], [11405774], [18454930], [29860704], [48315634], [78176338], [126491972], [204668310], [331160282], [535828592], [866988874], [1402817466], [2269806340], [3672623806], [5942430146]])
x [Matrix([
[2],
[0]])]
Uuhuu! Eqation found even after triple checking with MAX number of equations :)
{'x': [2, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.Integer'>
model: 2*an_2 + an_3                                                         ; p: 3.9024998543230025e-06 ; error: 0
Estimating model C0*an_1**2*an_3 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + C1*n + n -1.57759730177886*an_1**2*an_3 - 1.2539136373761*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + C1*n + n C0*an_1**2*an_3 + C1*n + n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [4, 4], [5, 9], [6, 50], [7, 192]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_3 + 112*n                                              ; p: 2.8853514604192746e-06 ; error: 111
Estimating model an_1**2*an_20






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_20 an_1**2*an_20 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_20 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_20 an_1**2*an_20 19 [2, 21] 1 20
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 20
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**2*an_20
model: an_1**2*an_20                                                         ; p: 6.165281149128489e-06  ; error: 100000000
Estimating model C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 -0.0208775425890451*an_1*an_14*n + 1.24792017829984*an_1 + 4.94489830566559*n**3 (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 13 [1, 2, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377], [610], [987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[233, 2744, 0], [377, 3375, 5655], [610, 4096, 9760]]) Matrix([[144], [233], [377]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3                                ; p: 2.854674928983084e-10  ; error: 111
Estimating model C0*n + an_2**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2**2 an_2**2 - 3.71867999939666*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2**2 C0*n + an_2**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [1], [2], [1], [-1], [-12]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2**2 + 111*n                                                       ; p: 0.00017677990793087212 ; error: 111
Estimating model C0*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + n 4.6155691256941*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + n C0*n**2 + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49], [64]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**2 + n                                                          ; p: 0.00432                ; error: 111
Estimating model C0*an_1 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1 2.05396393935447*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1 C0*an_1 + an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1                                                              ; p: 0.010470866466488121   ; error: 111
Estimating model an_1**2*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2 an_1**2*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2 an_1**2*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [-1], [-13], [-67], [-307]])
x []
model: an_1**2*an_2                                                          ; p: 0.0013070395504463455  ; error: 111
Estimating model C0*an_2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + an_2 1.44834384493757*an_2*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + an_2 C0*an_2*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + an_2                                                     ; p: 0.0001767799079308721  ; error: 111
Estimating model C0*n + an_1*an_18






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*an_18 an_1*an_18 + 4.07336963986265*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*an_18 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*an_18 C0*n + an_1*an_18 17 [1, 2, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[18]]) Matrix([[2584]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_18 + 111*n                                                    ; p: 6.626889540365226e-07  ; error: 111
Estimating model C0*n + an_2*an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2*an_4 an_2*an_4 - 3.38302469052073*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2*an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2*an_4 C0*n + an_2*an_4 3 [1, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [5], [6], [7]]) Matrix([[3], [3], [5], [3]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*an_4 + 111*n                                                     ; p: 1.7427830546014797e-05 ; error: 111
Estimating model C0*an_1 + C1*an_2 + C2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2 + C2*n + n**2 1.56262061547632*an_1 + 3.61839448123135*an_2 + n**2 + 2.36423613755898*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2 + C2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2 + C2*n + n**2 C0*an_1 + C1*an_2 + C2*n + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 2], [1, 1, 3], [2, 1, 4], [3, 2, 5], [5, 3, 6], [8, 5, 7]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2 + n**2 + 111*n                                    ; p: 1.0115279622405302e-06 ; error: 111
Estimating model C0*n**3 + C1*n + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**3 + C1*n + an_1*an_2 an_1*an_2 + 1.60804358510192*n**3 + 4.5434551134315*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**3 + C1*n + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**3 + C1*n + an_1*an_2 C0*n**3 + C1*n + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8, 2], [27, 3], [64, 4], [125, 5], [216, 6], [343, 7]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*n**3 + 111*n                                          ; p: 2.809799895112584e-06  ; error: 111
Estimating model C0*an_1*n**2 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*n + n -4.95874108371112*an_1*n**2 - 2.74128807803748*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*n + n C0*an_1*n**2 + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 4], [3, 9], [4, 32], [5, 75], [6, 180], [7, 392]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*n                                                 ; p: 7.778374351147226e-05  ; error: 111
Estimating model an_1**2*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_3*n**2 an_1**2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_3*n**2 an_1**2*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-61], [-220], [-1792], [-9395]])
x []
model: an_1**2*an_3*n**2                                                     ; p: 8.01486516783132e-06   ; error: 111
Estimating model C0*an_1*n + n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**4 0.133805101810338*an_1*n + n**4 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**4 C0*an_1*n + n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-15], [-79], [-253], [-620], [-1288], [-2388]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n**4                                                     ; p: 2.3149923664128657e-05 ; error: 111
Estimating model an_2*an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_4 an_2*an_4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_4 an_2*an_4 3 [3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [3], [5], [3]])
x []
model: an_2*an_4                                                             ; p: 0.00014523192121678998 ; error: 111
Estimating model an_2**3*an_6*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2**3*an_6*n an_2**3*an_6*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2**3*an_6*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2**3*an_6*n an_2**3*an_6*n 5 [1, 3, 7] 1 6
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 6
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0]]) Matrix([[8], [-862]])
x []
model: an_2**3*an_6*n                                                        ; p: 8.419262008910353e-09  ; error: 111
Estimating model C0*an_1*n + an_1**3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1**3*n an_1**3*n - 4.10165864013899*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1**3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1**3*n C0*an_1*n + an_1**3*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-29], [-130], [-742], [-3571]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*n + 111*an_1*n                                                ; p: 6.9578818805092585e-06 ; error: 111
Estimating model C0*an_1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n 0.683905627288907*an_1*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n C0*an_1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n                                                        ; p: 0.0057874809160321635  ; error: 111
Estimating model C0*an_2*n + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + C1*n + n 0.656169246815236*an_2*n - 2.26359549332221*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + C1*n + n C0*an_2*n + C1*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 3], [4, 4], [5, 10], [6, 18], [7, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + 112*n                                                    ; p: 0.00010486717557254841 ; error: 111
Estimating model C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 -1.79289234968428*an_1**2*an_9 + 4.74027401532273*an_1 - 2.48061731332473*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 8 [1, 2, 10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[34], [55], [89]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[21, 9, 0], [34, 10, 1156], [55, 11, 3025]]) Matrix([[13], [21], [34]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_9 + 112*an_1 + 111*n                                   ; p: 3.9306599993346483e-10 ; error: 111
Estimating model C0*an_1*an_2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + an_2 -4.77743096784286*an_1*an_2*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + an_2 C0*an_1*an_2*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [8], [30], [90], [280]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + an_2                                                ; p: 2.368310980295938e-05  ; error: 111
Estimating model C0*an_1**3*an_2*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*an_2*n**3 + n 1.91464422237747*an_1**3*an_2*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*an_2*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*an_2*n**3 + n C0*an_1**3*an_2*n**3 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [27], [512], [6750], [81000], [878080]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3*an_2*n**3 + n                                             ; p: 8.404962727452765e-08  ; error: 111
Estimating model C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 1.15147462696038*an_1*n**2 - 1.50662780322782*an_1 + 2.24120385524223*an_3*n + 3.29150881186522*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 9, 0], [2, 4, 32, 4], [3, 5, 75, 5], [5, 6, 180, 12], [8, 7, 392, 21]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n                         ; p: 5.566305504407362e-09  ; error: 111
Estimating model C0*an_4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4 + n 2.91933130945589*an_4 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4 + n C0*an_4 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_4 + n                                                          ; p: 0.0004307633587787359  ; error: 111
Estimating model C0*an_1 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n**2 an_1*n**2 + 3.68151141218052*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n**2 C0*an_1 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_1                                                  ; p: 0.00038767286288699643 ; error: 111
Estimating model C0*n + an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2*n**3 an_2*n**3 - 0.821083318603265*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2*n**3 C0*n + an_2*n**3 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [-25], [-61], [-245], [-640], [-1702]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n**3 + 111*n                                                     ; p: 3.495572519084946e-05  ; error: 111
Estimating model C0*an_1**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + n 2.16554316116902*an_1**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + n C0*an_1**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + n                                                       ; p: 0.001938364314434982   ; error: 111
Estimating model C0*an_1**2*n + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n**2 -3.13696835197748*an_1**2*n + an_2*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n**2 C0*an_1**2*n + an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [16], [45], [150], [448]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_2*n**2                                             ; p: 3.13689492107123e-06   ; error: 111
Estimating model C0*an_2 + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + an_2*n**2 an_2*n**2 + 4.59612377935806*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + an_2*n**2 C0*an_2 + an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n**2 + 111*an_2                                                  ; p: 3.535598158617442e-05  ; error: 111
Estimating model an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**2 an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**2 an_3*n**2 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-13], [-20], [-64], [-134]])
x []
model: an_3*n**2                                                             ; p: 0.0004465648854963054  ; error: 111
Estimating model C0*an_2*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**2 + n -2.47267156017275*an_2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**2 + n C0*an_2*n**2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [9], [16], [50], [108], [245]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**2 + n                                                     ; p: 0.00017477862595424736 ; error: 111
Estimating model C0*an_1 + C1*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + n 2.04511154936517*an_1 + 3.44460967165178*an_3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + n C0*an_1 + C1*an_3 + n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 1], [3, 1], [5, 2], [8, 3]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_3 + n                                               ; p: 0.00010768690635749815 ; error: 111
Estimating model an_1**2*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2**2*n**2 an_1**2*an_2**2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2**2*n**2 an_1**2*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-61], [-895], [-8092], [-78387]])
x []
model: an_1**2*an_2**2*n**2                                                  ; p: 1.0576045217355065e-06 ; error: 111
Estimating model C0*an_14*an_2 + an_1**2*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f51227cbdc0>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_14*an_2 + an_1**2*an_2 an_1**2*an_2 - 0.668696737508376*an_14*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_14*an_2 + an_1**2*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_14*an_2 + an_1**2*an_2 C0*an_14*an_2 + an_1**2*an_2 13 [2, 3, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[-7817239]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2 + 111*an_14*an_2                                         ; p: 6.055325596076297e-09  ; error: 111

Parameter fitting for sequence A000045 took 3.5263877949983 secconds.

Final score:
model: 112*an_1 + 111*n              ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: n**3                          ; error: 111            
model: 111*an_3 + n                  ; error: 111            
model: an_1**2                       ; error: 111            
model: n                             ; error: 111            
model: an_14*n + 111*n               ; error: 111            
model: an_1 + 111*n**2               ; error: 111            
model: n**2                          ; error: 111            
model: 111*an_1 + 111*an_2*n + n     ; error: 111            
model: an_1**3 + 111*an_1 + 111*an_3 ; error: 111            
model: an_1                          ; error: 111            
model: 111*an_1**3 + 111*an_1*an_3*n + an_2; error: 111            
model: 111*an_1**2*n + n             ; error: 111            
model: an_1**2*n                     ; error: 111            
model: an_2*n**2                     ; error: 111            
model: an_2 + 111*n                  ; error: 111            
model: 111*an_2 + 111*n**3 + n       ; error: 111            
model: 111*an_1**2 + an_1*n          ; error: 111            
model: an_1*an_4*n + 111*an_1 + 111*n; error: 111            
model: an_1*n**2 + 111*n             ; error: 111            
model: 111*an_1*n + an_2             ; error: 111            
model: an_1*an_3*n**2                ; error: 111            
model: 111*an_1**2*an_3 + an_1**2    ; error: 111            
model: an_1*n                        ; error: 111            
model: an_2                          ; error: 111            
model: an_3*n**3                     ; error: 111            
model: an_1*an_3*n**3                ; error: 111            
model: an_3**2*n                     ; error: 111            
model: 111*an_2*n + n                ; error: 111            
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n; error: 111            
model: an_1**3                       ; error: 111            
model: 111*an_1 + n                  ; error: 111            
model: 111*an_1*n + an_3             ; error: 111            
model: an_1*n + 111*an_2 + 111*n     ; error: 111            
model: an_1 + 111*n                  ; error: 111            
model: an_1**2*n + 111*an_1 + 111*an_2**2*n; error: 111            
model: 111*an_1*n**3 + an_2*n        ; error: 111            
model: 111*an_1**2*n + an_2*n        ; error: 111            
model: an_1**2*an_2*n + 111*n**2     ; error: 111            
model: 111*an_1*n**3 + n             ; error: 111            
model: an_1 + 111*an_2*an_3*n        ; error: 111            
model: an_1*n**2                     ; error: 111            
model: an_3                          ; error: 111            
model: an_4*n**3                     ; error: 111            
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n; error: 111            
model: an_1*n**3 + 111*n             ; error: 111            
model: 111*an_1**2*n**3 + an_2*n     ; error: 111            
model: 111*an_1**2*n**2 + n          ; error: 111            
model: 111*an_1 + 111*an_7 + n       ; error: 111            
model: an_1*an_24*n**2               ; error: 100000000      
model: an_1*an_2                     ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n; error: 111            
model: 111*an_18 + an_2*n + 111*n    ; error: 111            
model: an_1*an_2 + 111*n**2          ; error: 111            
model: 111*an_1**2*an_2*n**3 + an_1  ; error: 111            
model: an_3*n + 111*n                ; error: 111            
model: 111*an_1*n + an_1             ; error: 111            
model: an_1*n + 111*an_1             ; error: 111            
model: n**2 + 111*n                  ; error: 111            
model: an_1*an_2*n + 111*an_1*n + 111*n; error: 111            
model: an_2*n                        ; error: 111            
model: an_1*an_2*an_3*n**2           ; error: 111            
model: an_1*an_2*n                   ; error: 111            
model: 112*an_1*n                    ; error: 111            
model: 111*an_1*n + 111*an_1 + n     ; error: 111            
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n; error: 111            
model: an_1*an_5                     ; error: 111            
model: an_1*n**2 + 111*n**2          ; error: 111            
model: 111*an_4*n**3 + n             ; error: 111            
model: 111*an_1*an_2 + n             ; error: 111            
model: 112*n                         ; error: 111            
model: an_1**2*an_2*an_3*n**3        ; error: 111            
model: 111*an_1 + n**2               ; error: 111            
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n; error: 111            
model: 111*an_1 + 111*an_2*n + 112*n ; error: 111            
model: 111*an_1*n + 111*an_2 + 112*n ; error: 111            
model: an_1**2 + 111*an_1*n + 111*n**2; error: 111            
model: an_1*n + 111*an_1 + 111*n     ; error: 111            
model: 111*an_1**4*n**2 + an_1 + 111*n; error: 111            
model: an_1**2*an_2*n**2             ; error: 111            
model: an_2*an_3*n                   ; error: 111            
model: 111*an_2*n**3 + 111*an_2 + n  ; error: 111            
model: an_1**3*n**4 + 111*an_1*n + 111*an_1; error: 111            
model: an_1*an_17*n**2 + an_1        ; error: 0              
model: an_9                          ; error: 100000000      
model: an_1**2*an_2*n                ; error: 111            
model: an_17                         ; error: 100000000      
model: 111*an_1*n + n**2             ; error: 111            
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n; error: 111            
model: an_1*n + 111*n                ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: 111*an_1 + 111*n**2 + n       ; error: 111            
model: an_1*an_2 + an_1              ; error: 0              
model: an_1 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1**2*n + an_1 + 111*n  ; error: 111            
model: 2*an_2 + an_3                 ; error: 0              
model: 111*an_1**2*an_3 + 112*n      ; error: 111            
model: an_1**2*an_20                 ; error: 100000000      
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3; error: 111            
model: an_2**2 + 111*n               ; error: 111            
model: 111*n**2 + n                  ; error: 111            
model: 112*an_1                      ; error: 111            
model: an_1**2*an_2                  ; error: 111            
model: 111*an_2*n + an_2             ; error: 111            
model: an_1*an_18 + 111*n            ; error: 111            
model: an_2*an_4 + 111*n             ; error: 111            
model: 111*an_1 + 111*an_2 + n**2 + 111*n; error: 111            
model: an_1*an_2 + 111*n**3 + 111*n  ; error: 111            
model: 111*an_1*n**2 + 112*n         ; error: 111            
model: an_1**2*an_3*n**2             ; error: 111            
model: 111*an_1*n + n**4             ; error: 111            
model: an_2*an_4                     ; error: 111            
model: an_2**3*an_6*n                ; error: 111            
model: an_1**3*n + 111*an_1*n        ; error: 111            
model: 111*an_1*n + n                ; error: 111            
model: 111*an_2*n + 112*n            ; error: 111            
model: 111*an_1**2*an_9 + 112*an_1 + 111*n; error: 111            
model: 111*an_1*an_2*n + an_2        ; error: 111            
model: 111*an_1**3*an_2*n**3 + n     ; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n; error: 111            
model: 111*an_4 + n                  ; error: 111            
model: an_1*n**2 + 111*an_1          ; error: 111            
model: an_2*n**3 + 111*n             ; error: 111            
model: 111*an_1**2 + n               ; error: 111            
model: 111*an_1**2*n + an_2*n**2     ; error: 111            
model: an_2*n**2 + 111*an_2          ; error: 111            
model: an_3*n**2                     ; error: 111            
model: 111*an_2*n**2 + n             ; error: 111            
model: 111*an_1 + 111*an_3 + n       ; error: 111            
model: an_1**2*an_2**2*n**2          ; error: 111            
model: an_1**2*an_2 + 111*an_14*an_2 ; error: 111            

Final score (sorted):
model: an_1*an_24*n**2               ; error: 100000000      
model: an_9                          ; error: 100000000      
model: an_17                         ; error: 100000000      
model: an_1*n**2                     ; error: 111            
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n; error: 111            
model: an_4*n**3                     ; error: 111            
model: an_3                          ; error: 111            
model: an_1 + 111*an_2*an_3*n        ; error: 111            
model: 111*an_1**2*n**3 + an_2*n     ; error: 111            
model: 111*an_1*n**3 + n             ; error: 111            
model: an_1**2*an_2*n + 111*n**2     ; error: 111            
model: 111*an_1**2*n + an_2*n        ; error: 111            
model: 111*an_1*n**3 + an_2*n        ; error: 111            
model: an_1**2*n + 111*an_1 + 111*an_2**2*n; error: 111            
model: an_1 + 111*n                  ; error: 111            
model: an_1*n**3 + 111*n             ; error: 111            
model: 111*an_1**2*n**2 + n          ; error: 111            
model: 111*an_1*n + an_3             ; error: 111            
model: 111*an_1 + 111*an_7 + n       ; error: 111            
model: an_1*an_2                     ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n; error: 111            
model: 111*an_18 + an_2*n + 111*n    ; error: 111            
model: an_1*an_2 + 111*n**2          ; error: 111            
model: 111*an_1**2*an_2*n**3 + an_1  ; error: 111            
model: an_3*n + 111*n                ; error: 111            
model: 111*an_1*n + an_1             ; error: 111            
model: an_1*n + 111*an_1             ; error: 111            
model: n**2 + 111*n                  ; error: 111            
model: an_1*an_2*n + 111*an_1*n + 111*n; error: 111            
model: an_2*n                        ; error: 111            
model: an_1*an_2*an_3*n**2           ; error: 111            
model: an_1*n + 111*an_2 + 111*n     ; error: 111            
model: an_1**2*an_2 + 111*an_14*an_2 ; error: 111            
model: 112*an_1*n                    ; error: 111            
model: an_2 + 111*n                  ; error: 111            
model: n**3                          ; error: 111            
model: 111*an_3 + n                  ; error: 111            
model: an_1**2                       ; error: 111            
model: n                             ; error: 111            
model: an_14*n + 111*n               ; error: 111            
model: an_1 + 111*n**2               ; error: 111            
model: n**2                          ; error: 111            
model: 111*an_1 + 111*an_2*n + n     ; error: 111            
model: an_1**3 + 111*an_1 + 111*an_3 ; error: 111            
model: an_1                          ; error: 111            
model: 111*an_1**3 + 111*an_1*an_3*n + an_2; error: 111            
model: 111*an_1**2*n + n             ; error: 111            
model: an_1**2*n                     ; error: 111            
model: an_2*n**2                     ; error: 111            
model: 111*an_2 + 111*n**3 + n       ; error: 111            
model: 111*an_1 + n                  ; error: 111            
model: 111*an_1**2 + an_1*n          ; error: 111            
model: an_1*an_4*n + 111*an_1 + 111*n; error: 111            
model: an_1*n**2 + 111*n             ; error: 111            
model: 111*an_1*n + an_2             ; error: 111            
model: an_1*an_3*n**2                ; error: 111            
model: 111*an_1**2*an_3 + an_1**2    ; error: 111            
model: an_1*n                        ; error: 111            
model: an_2                          ; error: 111            
model: an_3*n**3                     ; error: 111            
model: an_1*an_3*n**3                ; error: 111            
model: an_3**2*n                     ; error: 111            
model: 111*an_2*n + n                ; error: 111            
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n; error: 111            
model: an_1**3                       ; error: 111            
model: an_1*an_2*n                   ; error: 111            
model: 111*an_1*n + 111*an_1 + n     ; error: 111            
model: an_1**2*an_2**2*n**2          ; error: 111            
model: 111*an_1*n + n                ; error: 111            
model: 112*an_1                      ; error: 111            
model: an_1**2*an_2                  ; error: 111            
model: 111*an_2*n + an_2             ; error: 111            
model: an_1*an_18 + 111*n            ; error: 111            
model: an_2*an_4 + 111*n             ; error: 111            
model: 111*an_1 + 111*an_2 + n**2 + 111*n; error: 111            
model: an_1*an_2 + 111*n**3 + 111*n  ; error: 111            
model: 111*an_1*n**2 + 112*n         ; error: 111            
model: an_1**2*an_3*n**2             ; error: 111            
model: 111*an_1*n + n**4             ; error: 111            
model: an_2*an_4                     ; error: 111            
model: an_2**3*an_6*n                ; error: 111            
model: an_1**3*n + 111*an_1*n        ; error: 111            
model: 111*an_2*n + 112*n            ; error: 111            
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n; error: 111            
model: 111*an_1**2*an_9 + 112*an_1 + 111*n; error: 111            
model: 111*an_1*an_2*n + an_2        ; error: 111            
model: 111*an_1**3*an_2*n**3 + n     ; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n; error: 111            
model: 111*an_4 + n                  ; error: 111            
model: an_1*n**2 + 111*an_1          ; error: 111            
model: an_2*n**3 + 111*n             ; error: 111            
model: 111*an_1**2 + n               ; error: 111            
model: 111*an_1**2*n + an_2*n**2     ; error: 111            
model: an_2*n**2 + 111*an_2          ; error: 111            
model: an_3*n**2                     ; error: 111            
model: 111*an_2*n**2 + n             ; error: 111            
model: 111*an_1 + 111*an_3 + n       ; error: 111            
model: 111*n**2 + n                  ; error: 111            
model: an_2**2 + 111*n               ; error: 111            
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3; error: 111            
model: 111*an_1**2*an_3 + 112*n      ; error: 111            
model: an_1*an_5                     ; error: 111            
model: an_1*n**2 + 111*n**2          ; error: 111            
model: 111*an_4*n**3 + n             ; error: 111            
model: 111*an_1*an_2 + n             ; error: 111            
model: 112*n                         ; error: 111            
model: an_1**2*an_2*an_3*n**3        ; error: 111            
model: 111*an_1 + n**2               ; error: 111            
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n; error: 111            
model: 111*an_1 + 111*an_2*n + 112*n ; error: 111            
model: 111*an_1*n + 111*an_2 + 112*n ; error: 111            
model: an_1**2 + 111*an_1*n + 111*n**2; error: 111            
model: an_1*n + 111*an_1 + 111*n     ; error: 111            
model: 111*an_1**4*n**2 + an_1 + 111*n; error: 111            
model: an_1**2*an_2*n**2             ; error: 111            
model: an_2*an_3*n                   ; error: 111            
model: 111*an_2*n**3 + 111*an_2 + n  ; error: 111            
model: an_1**3*n**4 + 111*an_1*n + 111*an_1; error: 111            
model: an_1**2*an_2*n                ; error: 111            
model: 111*an_1*n + n**2             ; error: 111            
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n; error: 111            
model: an_1*n + 111*n                ; error: 111            
model: 111*an_1 + 111*n**2 + n       ; error: 111            
model: an_1 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1**2*n + an_1 + 111*n  ; error: 111            
model: 112*an_1 + 111*n              ; error: 111            
model: an_1*an_17*n**2 + an_1        ; error: 0              
model: an_1 + an_2                   ; error: 0              
model: an_1*an_2 + an_1              ; error: 0              
model: 2*an_2 + an_3                 ; error: 0              
model: an_1 + an_2                   ; error: 0              

Total time consumed by now:4.7885037979940535


Equation discovery for all (chosen) OEIS sequences took 4.788509117999638 secconds, i.e. 0.07980848529999397 minutes or 0.0013301414216665662 hours.
