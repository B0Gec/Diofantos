Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 50
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = simplerational2
=>> generator_settings = {'functions': ["'sqrt'", "'exp'", "'log'"], 'p_F': [0.333, 0.333, 0.333]}
=>> optimizer = differential_evolution
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 5
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence = 50
=>> number of all considered sequences = 14
=>> list of considered sequences = ('A000009', 'A000040', 'A000045', 'A000124', 'A000219', 'A000292', 'A000720', 'A001045', 'A001097', 'A001481', 'A001615', 'A002572', 'A005230', 'A027642')
 ('A000009', 
'A000040', 
'A000045', 
'A000124', 
'A000219', 
'A000292',  done
'A000720', 
'A001045', 
'A001097', 
'A001481', 
'A001615', 
'A002572', 
'A005230', 
'A027642')
=>> Grammar used: 
Grammar with 61 productions (start state = S)
    S -> P '/' R [0.2]
    S -> P [0.8]
    P -> P '+' 'C' '*' R [0.4]
    P -> 'C' '*' R [0.3]
    P -> 'C' [0.3]
    R -> 'sqrt' '(' 'C' '*' M ')' [0.133253]
    R -> 'exp' '(' 'C' '*' M ')' [0.133253]
    R -> 'log' '(' 'C' '*' M ')' [0.133253]
    R -> M [0.60024]
    M -> M '*' V [0.4]
    M -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 44 models

sequences extracted: 14
A000009 Expansion of Product_{m >= 1} (1 + x^m) 
[]
[
Asymptotics: a(n) ~ exp(Pi l_n / sqrt(3)) / ( 4 3^(1/4) l_n^(3/2) ) where l_n = (n-1/24)^(1/2) (Ayoub),
a lot
]
check fitting 44 44
error: 0.8282648275336897      model: 1.659*an_1 - 0.679*an_3 + 0.138       
error: 0.8822377610961187      model: 1.111*an_1 - 0.348*sqrt(n) + 0.014*n**2
error: 1.0438400775820538      model: 2.011*an_1 - 1.000*an_2 + 0.089*n - 0.673
error: 1.167824564753903       model: 2.216*an_1 - 1.229*an_2                         
error: 1.4730262793941031      model: -2.204e-5*an_1*an_13 + 1.134*an_1 + 3.973 - 3.997*exp(-0.063*n)
error: 4.727683251918812       model: 1.118*an_1 - 2.592*n + 2.881*sqrt(n**2)
error: 32.3649704065889        model: 3.522*sqrt(an_1) + 1.700*an_5                   
error: 68.16252772582405       model: 0.326*an_1*n - 0.346*an_2*n + 3.963*exp(0.105*n)
error: 73.06834862445626       model: 1.267*an_2 + 4.0                                           
error: 167.88239494209475      model: 0.542*an_1*n - 0.584*an_2*n                   
error: 609.3153387583064       model: 0.047*an_2*n/log(0.134*n) + 2.338*sqrt(n**2)
error: 1490.332039219021       model: 2.359*an_7                                                 
error: 3499.207808492948       model: 4.0*exp(0.137*n) + 3.963 - 2.321*exp(-1.133*an_1*n**2)
error: 3669.1724178634117      model: 4.0*exp(0.138*n)                                          
error: 8153.876033010145       model: 0.024*an_1*n                                              
error: 109579.1157157033       model: 0.000*an_1**2                                          
error: 163928.27212394722      model: 2.617e-7*an_1*an_3*n**2 + 3.793                 
error: 212489.36849094034      model: 8.887e-11*an_1**2*n**4                                     
error: 344110.16721900436      model: 0.002*an_1**2*an_39/n                                   
error: 710117.7044091646       model: 7.959*sqrt(an_1) + 3.272 - 0.099*exp(-1.589*an_1**3*n**2)
error: 798349.8298058405       model: 8.0*sqrt(n) + 4.0*n                                                   
error: 842885.4285714285       model: 4.0*n + 4.0                                                           
error: 846628.4489795918       model: 4.0*n                                                                 
error: 846633.855986226        model: 3.999*n - 2.556*exp(-1.200*an_1**4*n**3)
error: 967811.0222743251       model: 8.0*sqrt(n)                                                           
error: 970814.0342450519       model: 4.0*log(4.0*an_1*n)                                                   
error: 1002123.8622331421      model: 4.0*log(4.0*n)                                                        
error: 1017068.780992271       model: 4.0*an_42 - 2.185*exp(-2.904*n)                 
error: 1020552.0512086863      model: 4.0 - 2.298*exp(-0.131*an_2*n)                  
error: 1020552.0736001722      model: -3.770*n*exp(-1.816*an_2) + 4.0 + 2.399*exp(-0.917*n**2)
error: 1020552.5284618476      model: -0.163*sqrt(n)*exp(-2.361*an_1*n) + 4.0        
error: 1024878.5291873798      model: 4.0*n/an_1                                                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 1.020*an_1/an_3 - 0.207                         
error: 1000000000.0            model: 0.838*an_1**2*an_3*n**2 + 3.613*n**2 - 0.442*log(-0.460*an_7)/log(1.000*n**2)
error: 1000000000.0            model: -2.054*an_2*an_4*n/log(-0.997*an_1*an_2)       
error: 1000000000.0            model: -0.710*an_1 + 0.324*log(2.349*an_1) - 1.851*log(2.239*an_1**5*an_2*n**3)
error: 1000000000.0            model: -1.034*an_1*n**2 + 2.975*log(-1.327*n)


A000040  the Primes   (no disc)
[]
[ a(n) ~ n * log n ,
more
]
check fitting 44 44
error: 6.518908073445741       model: 0.703*an_1 + 0.144*an_2 + 0.802*n + 0.428
error: 6.667923798151011       model: 0.843*an_1 + 0.113*n + 0.697*sqrt(n**2)
error: 6.8651100137198275      model: 0.877*an_1 + 2.242*sqrt(n) + 0.007*n**2
error: 7.345269773613438       model: 3.667*n*exp(0.001*an_2) - 3.990 + 3.984*exp(-0.327*n**2)
error: 7.381933851654963       model: 0.860*an_1 + 0.159*an_3 + 4.0                 
error: 7.496656324903939       model: -1.281e-5*an_1*an_13 + 1.009*an_1 + 4.0 - 3.637*exp(-0.252*n)
error: 8.471356470614532       model: 0.026*an_2*n/log(0.675*n) + 3.080*sqrt(n**2)
error: 9.221642441017538       model: 3.544*sqrt(an_1) + 0.872*an_5                  
error: 11.020779829397602      model: 1.207*an_1 - 0.178*an_2                        
error: 14.69377459939517       model: 1.046*an_2 + 4.0                                           
error: 129.66964897362854      model: 1.505*sqrt(n) + 4.0*n                                      
error: 167.20408163265307      model: 4.0*n + 4.0                                                           
error: 186.30612244897958      model: 4.0*n                                                                 
error: 186.30612244897958      model: 4.0*n - 2.411*exp(-1.991*an_1**4*n**3)          
error: 210.44604919309845      model: 1.294*an_7                                                 
error: 602.9103298108458       model: 0.087*an_1*n - 0.067*an_2*n + 4.0*exp(0.038*n)
error: 771.7980227132343       model: 0.098*an_1*n - 0.075*an_2*n                 
error: 829.3252699368235       model: 0.025*an_1*n                                             
error: 1204.861855251947       model: 0.005*an_1**2                                           
error: 1246.8484902494472      model: 0.000*an_1*n**2 + 4.0*log(4.0*n)                       
error: 1363.2927398059137      model: 0.000*an_2*an_4*n/log(0.000*an_1*an_2)  
error: 1619.5647321370461      model: -4.0*an_42 + 4.0*exp(0.091*n)                            
error: 1866.798588361727       model: 4.0*exp(0.088*n) + 4.0 + 1.866*exp(-1.679*an_1*n**2)
error: 2099.520854965079       model: 4.0*exp(0.088*n)                                         
error: 2209.2268760195693      model: 8.0*sqrt(an_1) + 4.0 - 1.069*exp(-3.045*an_1**3*n**2)
error: 3407.2106731270064      model: 2.863e-6*an_1*an_3*n**2 + 4.0                              
error: 5730.346791482593       model: 1.200e-9*an_1**2*n**4                                      
error: 7569.1960294218825      model: 8.0*sqrt(n)                                                           
error: 8714.218667064895       model: 4.0*log(4.0*an_1*n)                                                   
error: 9060.190755673626       model: 0.010*an_1**2*an_39/n                                    
error: 11847.088308753137      model: 4.0*log(4.0*n)                                                        
error: 14758.040824543576      model: 4.0 - 0.998*exp(-2.128*an_2*n)                 
error: 14758.04339624218       model: -4.134*sqrt(n)*exp(-0.795*an_1*n) + 4.0        
error: 15368.215714979546      model: 4.0*n/an_1                                                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 1.958*an_1/an_3 - 1.949                         
error: 1000000000.0            model: -3.922*an_1**2*an_3*n**2 - 3.677*n**2 - 2.468*log(-1.691*an_7)/log(-2.100*n**2)
error: 1000000000.0            model: 1.163*an_1 - 2.766*log(0.350*an_1) + 2.787*log(-1.317*an_1**5*an_2*n**3)


A000045 (fibonacci checked)
[]
[lots]
check fitting 44 44
error: 0.002525008139111645    model: 0.447*exp(0.481*n)                            
error: 0.0186240574568429      model: 0.951*an_1 + 1.078*an_2 - 0.003*n + 0.095
error: 0.020412500277747485    model: 0.988*an_1 + 1.018*an_2                        
error: 0.032870959939031316    model: 1.590*an_1 + 0.070*an_3 + 0.017  
error: 0.0522359393934134      model: 2.618*an_2 + 0.036                            
error: 1.9089676365051371      model: -1.211*an_42 + 0.447*exp(0.481*n)  
error: 518.3610146655051       model: -4.884e-15*an_1*an_13 + 1.618*an_1 + 1.670 + 0.597*exp(-3.118*n)
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.585*an_2*an_4*n/log(-3.098*an_1*an_2)        
error: 1000000000.0            model: -3.833*an_1 - 1.899*log(-0.538*an_1) - 1.627*log(-1.328*an_1**5*an_2*n**3)
error: 1000000000.0            model: 0.714*exp(2.383*an_2*n) + 2.014     
error: 1000000000.0            model: 0.648*an_1 + 3.444*n - 7.327*sqrt(-n**2)
error: 1000000000.0            model: -2.669*n/an_1                                              
error: 1000000000.0            model: -0.023*an_5 + 5.357*sqrt(-an_1)               
error: 1000000000.0            model: 0.291*n*exp(-0.994*an_2) + 2.108*exp(1.316*n**2) + 0.695
error: 1000000000.0            model: -1.960*exp(2.394*an_1*n**2) + 3.062 + 0.741*exp(-3.865*n)
error: 1000000000.0            model: 0.665*log(-1.587*an_1*n)                       
error: 1000000000.0            model: -2.467*sqrt(-n)*exp(0.771*an_1*n) + 1.274
error: 1000000000.0            model: -0.706*sqrt(-an_1) - 2.012*exp(3.370*an_1**3*n**2) - 1.627
error: 1000000000.0            model: -3.377*sqrt(-n)                                            
error: 1000000000.0            model: 1.088*log(-2.150*n)                              
error: 1000000000.0            model: 1.909*an_2*n/log(-1.915*n) - 2.493*sqrt(n**2)
error: 1000000000.0            model: -1.742*an_1 - 2.860*n**2 - 3.834*sqrt(-n)
error: 1000000000.0            model: 0.186*n - 0.981*sqrt(-n)                      
error: 1000000000.0            model: 0.975*n + 3.434*exp(0.921*an_1**4*n**3)
error: 1000000000.0            model: 0.264*an_1*n**2 - 1.084*log(-1.345*n)
error: 4150453970236.2085      model: 1.925*an_1*n - 3.071*an_2*n + 3.875*exp(0.402*n)
error: 853213629946271.4       model: -0.609*an_1*n + 1.040*an_2*n                   
error: 853213629955611.2       model: 0.033*an_1*n                                             
error: 1.9080144449383408e+17  model: 3.767e-10*an_1**2                                          
error: 2.1144616328508304e+17  model: 4.103e-13*an_1*an_3*n**2 + 3.946                 
error: 3.921088580289738e+17   model: 3.328e-10*an_1**2*an_39/n                                  
error: 1.4854538484599636e+18  model: 4.0*an_7                                                              
error: 1.9980680062314079e+18  model: 4.0*n + 1.963                                               
error: 1.998068007863679e+18   model: 4.0*n                                                                 
error: 1.9980681654039537e+18  model: 0                                                                     


A000124 Central polygonal numbers, Lazy Caterer (discovered)
[ n(n+1)/2 + 1 ]
[ 
a_n = a_{n-1} + n,
a(n+3) = 3*a(n+2) - 3*a(n+1) + a(n),
a(n) = 2*a(n-1) - a(n-2) + 1,
a(n) = 1 + floor(n/2) + ceiling(n^2/2),
a(n) = (n+1)^2 - n*(n+3)/2( nic v resnici),
a(n) = floor((n+2)/2)*ceiling((n+2)/2) + floor((n-1)/2)*ceiling((n-1)/2) 
     = floor((n+2)**2/4) + floor((n-1)**2/4),
(done)
 ]
check fitting 44 44
error: 9.726250818315227e-11   model: 0.999*an_1 - 1.526*n + 2.526*sqrt(n**2)
error: 1.0575367586859861e-06  model: 0.992*an_1 + 0.007*an_2 + 1.007*n - 0.006
    {-2, -1} => discovered (True)   a_n = a_{n-1} + n
error: 0.017956509951151244    model: -0.570*an_1 + 1.166*sqrt(n) + 0.787*n**2
error: 0.01888161417812767     model: 1.509*an_1 - 0.509*an_3 + 1.271     
error: 0.10072564286290261     model: 2.081*an_1 - 1.083*an_2                         
    {-1} => discovered (True)       a_n = 2*a_{n-1} - a_{n-2} + 1 
                                        = 1+1+2+...+(n-1) + 1+1+2+...+(n-2)+(n-1) - ( 1+1+2+...+(n-2) ) + 1 = 1+1+2+...+n 
error: 0.527759355874446       model: 0.544*an_1*n - 0.547*an_2*n + 3.400*exp(0.069*n)
error: 3.446361293238291       model: -3.684e-5*an_1*an_13 + 1.056*an_1 + 2.697*exp(0.011*n) + 3.797
error: 5.8835782526538045      model: 6.280*sqrt(an_1) + 1.022*an_5                   
error: 12.278779868471254      model: 0.564*an_1*n - 0.566*an_2*n                   
error: 157.2110593080802       model: 1.101*an_2 + 4.0                                           
error: 282.9810191470969       model: 0.044*an_2*n/log(0.282*n) + 6.547*sqrt(n**2)
error: 2961.603484067329       model: 1.450*an_7                                                 
error: 9975.174939001528       model: 0.024*an_1*n                                             
error: 21341.880420431684      model: 4.0*n*exp(0.001*an_2) + 3.813 + 2.159*exp(-1.571*n**2)
error: 24139.335107557876      model: 0.000*an_1*n**2 + 4.0*log(4.0*n)                       
error: 28058.742608343113      model: 0.001*an_1**2                                           
error: 41476.764163573964      model: -4.0*an_42 + 4.0*exp(0.123*n)                             
error: 43688.26592691233       model: 4.0*exp(0.122*n) + 4.0 - 3.049*exp(-0.396*an_1*n**2)
error: 44756.64618106472       model: 4.0*exp(0.122*n)                                          
error: 65728.47268192789       model: 5.589e-7*an_1*an_3*n**2 + 3.912                  
error: 96909.32525373151       model: 2.235e-10*an_1**2*n**4                                     
error: 167211.82811398845      model: 7.989*sqrt(an_1) + 3.878 + 1.415*exp(-3.293*an_1**3*n**2)
error: 174208.8949997189       model: 0.001*an_1**2*an_39/n                                   
error: 176320.7592931251       model: 8.0*sqrt(n) + 4.0*n                                                   
error: 204124.0                model: 4.0*n + 4.0                                                           
error: 206715.91836967564      model: 4.0*n - 4.0*exp(-0.698*an_1**4*n**3)                      
error: 206716.0                model: 4.0*n                                                                 
error: 280114.8497207933       model: 8.0*sqrt(n)                                                           
error: 282387.0400778652       model: 4.0*log(4.0*an_1*n)                                                   
error: 302964.6992221484       model: 4.0*log(4.0*n)                                                        
error: 316123.91839069134      model: 4.0 - 1.985*exp(-2.098*an_2*n)                  
error: 316124.0022637268       model: 1.503*sqrt(n)*exp(-4.0*an_1*n) + 4.0                       
error: 319300.6408630608       model: 4.0*n/an_1                                                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: -2.817*an_1/an_3 - 1.513                        
error: 1000000000.0            model: 0.837*an_1**2*an_3*n**2 - 0.718*n**2 + 3.444*log(-2.238*an_7)/log(2.774*n**2)
error: 1000000000.0            model: 1.658*an_2*an_4*n/log(-2.794*an_1*an_2)         
error: 1000000000.0            model: -2.904*an_1 + 1.359*log(2.313*an_1) + 3.329*log(3.923*an_1**5*an_2*n**3)
seq. 4 A000219 (quick checked (no disc))
check fitting 44 44
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 863874027.2540842       model: 2.826*an_1 - 2.001*an_2 + 3.918*n - 3.002
error: 867096020.4830873       model: 2.826*an_1 - 2.001*an_2                         
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.585*an_2*an_4*n/log(-3.098*an_1*an_2)        
error: 1000000000.0            model: -3.465*an_1 - 1.187*log(-3.493*an_1) - 1.611*log(3.746*an_1**5*an_2*n**3)
error: 1000000000.0            model: 1.000*exp(1.063*an_2*n) - 2.758      
error: 1000000000.0            model: 0.237*an_1 - 2.709*n + 3.995*sqrt(-n**2)
error: 1000000000.0            model: -0.231*an_5 - 6.560*sqrt(-an_1)                
error: 1000000000.0            model: 3.739*n*exp(1.025*an_2) + 0.289*exp(3.192*n**2) + 2.348
error: 1000000000.0            model: 0.782*exp(3.151*an_1*n**2) + 0.098 + 1.497*exp(-0.707*n)
error: 1000000000.0            model: -2.786*log(-2.118*an_1*n)                       
error: 1000000000.0            model: -1.398*sqrt(-n)*exp(3.712*an_1*n) + 0.165
error: 1000000000.0            model: -2.893*sqrt(-an_1) + 3.251*exp(0.874*an_1**3*n**2) + 1.364
error: 1000000000.0            model: 1.133*sqrt(-n)                                             
error: 1000000000.0            model: 0.339*log(-2.926*n)                            
error: 1000000000.0            model: -0.701*an_2*n/log(2.696*n) - 2.337*sqrt(-n**2)
error: 1000000000.0            model: 2.265*an_1 + 1.844*n**2 - 2.237*sqrt(-n)
error: 1000000000.0            model: -1.201*n - 1.584*sqrt(-n)                       
error: 1000000000.0            model: -0.700*n + 0.040*exp(3.601*an_1**4*n**3)
error: 1000000000.0            model: -2.572*an_1*n**2 - 1.976*log(-0.193*n)
error: 2052763642.6375334      model: 2.119*an_1 - 1.419*an_3 + 1.020      
error: 1785252210193.5486      model: 0.329*an_1*n - 0.428*an_2*n + 1.705*exp(0.256*n)
error: 1795219341019.38        model: 0.329*an_1*n - 0.429*an_2*n                   
error: 3024818243261.248       model: -2.564e-10*an_1*an_13 + 1.438*an_1 + 1.693*exp(0.057*n) + 0.988
error: 93265414884550.33       model: 2.040*an_2 + 3.924                              
error: 2139192113942999.2      model: 0.029*an_1*n                                             
error: 2.0767968354861124e+16  model: 4.0*exp(0.436*n)                                          
error: 2.076796977360404e+16   model: 2.184*an_42 + 4.0*exp(0.436*n)                 
error: 2.2520155740320125e+17  model: 3.191e-10*an_1**2                                          
error: 2.6261526718633078e+17  model: 2.708e-13*an_1*an_3*n**2 - 3.335                
error: 5.956251225685432e+17   model: 3.087e-11*an_1**2*an_39/n                                  
error: 1.0262920294638788e+18  model: 4.0*an_7                                                              
error: 2.190921705950857e+18   model: 4.0*n + 3.537                                              
error: 2.1909217094910615e+18  model: 4.0*n                                                                 
error: 2.1909218965269489e+18  model: -1.998*n/an_1                                              
error: 2.1909218965269489e+18  model: 0                                                                     


A000292  Tetrahedral    (quick checked, discovered)
[ a(n) = n*(n+1)*(n+2)/6 ]
[ a(n) = (n+3)*a(n-1)/n,
a(n) = 4*a(n-1) - 6*a(n-2) + 4*a(n-3) - a(n-4) for n >= 4,
a(n) = (1/6)*floor(n^5/(n^2 + 1)),
a(n) = 3*a(n-1) - 3*a(n-2) + a(n-3) + 1,
a(n) = a(n-2) + n^2,
a(n) = n + 2*a(n-1) - a(n-2),
a(n) = (n**3 + 2*n)/3 - a(n-2),
(done)
]
check fitting 44 44
error: 3.203874099327748e-07   model: 1.999*an_1 - 0.999*an_2 + 1.000*n - 0.000
    {-1} => discovered (True)   a_n = 2*a_{n-1} - a_{n-2} + n
error: 0.08057339090814337     model: 0.999*an_1 + 1.182*sqrt(n) + 0.514*n**2
error: 9.016581762817749       model: 1.579*an_1 - 0.586*an_3 + 4.0                   
error: 9.318342794960778       model: 2.122*an_1 - 1.128*an_2                         
    {-1} => discovered (seems half True)   a_n = 2*a_{n-1} - a_{n-2}
error: 295.1646022211477       model: 0.420*an_1*n - 0.426*an_2*n + 4.0*exp(0.122*n)
error: 525.3992409936166       model: 1.044*an_1 + 0.884*n + 7.355*sqrt(n**2)
error: 1502.8905967054031      model: 0.407*an_1*n - 0.410*an_2*n                   
error: 1820.621584143078       model: -5.172e-6*an_1*an_13 + 1.087*an_1 + 3.988*exp(0.087*n) + 3.923
error: 37835.88305009488       model: 1.151*an_2 + 4.0                                             
error: 106932.94714194175      model: 8.0*sqrt(an_1) + 1.343*an_5                                 
error: 177066.29680199872      model: 0.036*an_2*n/log(0.095*n) + 8.0*sqrt(n**2)  
error: 524634.3634540503       model: 1.679*an_7                                                 
error: 1253351.4426653343      model: 0.024*an_1*n                                             
error: 6491468.80263552        model: 6.856e-5*an_1**2                                            
error: 11374060.588494286      model: -4.0*an_42 + 4.0*exp(0.180*n)                              
error: 11493096.432927094      model: 4.0*exp(0.180*n) + 3.285 + 2.273*exp(-2.681*an_1*n**2)
error: 11506548.602950234      model: 4.0*exp(0.180*n)                                          
error: 12606996.874880634      model: 3.457e-8*an_1*an_3*n**2 + 3.827                 
error: 17389046.366428316      model: 1.332e-11*an_1**2*n**4                                     
error: 36270517.06025218       model: 1.709e-5*an_1**2*an_39/n                                   
error: 59024899.34814921       model: 7.908*sqrt(an_1) + 3.359 - 1.592*exp(-0.253*an_1**3*n**2)
error: 65443422.02036457       model: 8.0*sqrt(n) + 4.0*n                                                   
error: 65940683.85714286       model: 4.0*n + 4.0                                                           
error: 65984067.82618992       model: 4.0*n - 0.264*exp(-3.343*an_1**4*n**3)         
error: 65984067.85714286       model: 4.0*n                                                                 
error: 67162696.11079223       model: 8.0*sqrt(n)                                                           
error: 67490266.49378769       model: 4.0*log(4.0*n)                                                        
error: 67668163.67623214       model: -3.365*sqrt(n)*exp(-2.339*an_1*n) + 4.0         
error: 67668163.76706627       model: 4.0 - 1.684*exp(-2.333*an_2*n)                  
error: 67668163.89096309       model: 1.098*n*exp(-1.557*an_2) + 4.0 - 1.889*exp(-1.656*n**2)
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: -0.898*an_1/an_3 + 1.919                       
error: 1000000000.0            model: -0.227*an_1**2*an_3*n**2 + 1.675*n**2 + 3.801*log(-2.491*an_7)/log(1.245*n**2)
error: 1000000000.0            model: 0.833*an_2*an_4*n/log(-2.938*an_1*an_2)        
error: 1000000000.0            model: -1.346*an_1 - 2.801*log(-0.578*an_1) - 1.241*log(0.290*an_1**5*an_2*n**3)
error: 1000000000.0            model: 0.818*n/an_1                                              
error: 1000000000.0            model: -0.615*log(2.240*an_1*n)                       
error: 1000000000.0            model: -2.540*an_1*n**2 - 3.347*log(-0.037*n)


A000720  PrimePi(n)   (no disc?)
""number of primes <= n""
(all formulas:)[
 a(n) ~ n/log(n) ,
For n >= 33, a(n) = 1 + Sum_{j=3..n} ((j-2)! - j*floor((j-2)!/j)) (Hardy and Wright); for n >= 1, a(n) = n - 1 + Sum_{j=2..n} (floor((2 - Sum_{i=1..j} (floor(j/i)-floor((j-1)/i)))/j)),
a(n) = Sum_{j=2..n} H(-sin^2 (Pi*(Gamma(j)+1)/j)) where H(x) is the Heaviside step function, taking H(0)=1. - Keshav Raghavan, Jun 18 2016,
]
check fitting 44 44
error: 0.12588616768006808     model: 0.364*an_1 + 1.030*sqrt(n) + 0.001*n**2
error: 0.12897762911839303     model: 0.209*n*exp(0.009*an_2) + 3.468 - 2.088*exp(-0.010*n**2)
error: 0.1314615092910516      model: 0.375*an_1 + 0.223*an_2 + 0.105*n + 1.193
error: 0.1324146310371207      model: 1.053*sqrt(n) + 0.157*n                         
error: 0.16803182479585257     model: 3.998*exp(0.025*n) + 1.648 - 3.513*exp(-0.001*an_1*n**2)
error: 0.1859382920704938      model: 0.759*an_1 + 0.204*an_3 + 0.734   
error: 0.18779529929246216     model: 0.003*an_1*an_13 + 0.925*an_1 + 0.715 + 1.136*exp(-1.268*n)
error: 0.2264972927948404      model: 0.274*n + 2.045                                
error: 0.23795189613424825     model: 0.950*an_2 + 1.020                             
error: 0.24932876152770972     model: 0.870*an_1 + 0.157*an_2                       
error: 0.2548662127203876      model: 1.044*an_1 - 3.789*n + 3.782*sqrt(n**2)
error: 0.31512939306422166     model: 0.000*an_1*n**2 + 2.670*log(0.782*n)
error: 0.3154166326343628      model: 1.388*sqrt(an_1) + 0.672*an_5                  
error: 0.3884345827849866      model: -0.081*an_2*n/log(4.0*n) + 0.528*sqrt(n**2)  
error: 0.7132550125671352      model: 4.580*sqrt(an_1) - 4.0 + 4.0*exp(-0.259*an_1**3*n**2)
error: 0.8296835353170858      model: -0.694*an_42 + 3.703*exp(0.032*n) 
error: 0.9419044513858821      model: 0.010*an_1*n - 0.003*an_2*n + 3.883*exp(0.020*n)
error: 0.9459213977783135      model: 1.938*sqrt(n)                                              
error: 1.0470137169140539      model: 4.0*exp(0.029*n)                                         
error: 1.2062990488290821      model: 0.338*n + 0.981*exp(-0.013*an_1**4*n**3)
error: 1.241232314818341       model: 0.336*n                                                   
error: 1.9328027245597728      model: 4.0*log(0.486*n)                                          
error: 2.3840556785827287      model: 1.197*an_7                                                 
error: 6.255474022906344       model: 0.083*an_1**2                                            
error: 7.426126518809263       model: 2.988e-5*an_1*an_3*n**2 + 4.0                              
error: 8.68742357159677        model: 0.051*an_1*n - 0.025*an_2*n                 
error: 8.790948228373647       model: 0.026*an_1*n                                             
error: 9.318388395042975       model: 0.005*an_2*an_4*n/log(0.070*an_1*an_2)     
error: 39.159423254126665      model: 4.0 - 2.595*exp(-0.125*an_2*n)                 
error: 39.1673325526837        model: -2.597*sqrt(n)*exp(-0.175*an_1*n) + 4.0         
error: 42.44665021695872       model: 1.822e-8*an_1**2*n**4                                      
error: 58.12047113483531       model: 0.875*an_1**2*an_39/n                                     
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: -1.572*an_1/an_3 + 0.196                       
error: 1000000000.0            model: 1.758*an_1**2*an_3*n**2 - 1.778*n**2 + 3.667*log(1.397*an_7)/log(-0.549*n**2)
error: 1000000000.0            model: -1.524*an_1 + 1.530*log(3.245*an_1) + 0.074*log(-3.210*an_1**5*an_2*n**3)
error: 1000000000.0            model: -1.159*n/an_1                                              
error: 1000000000.0            model: -0.063*log(-1.398*an_1*n)                     


A001045  Jacobsthal sequence   (quick checked, discovered)
[ a_n = a_{n-1} + 2*a_{n-2} ]
[ a_n =? [2**n/3] , a lot formulas]
check fitting 44 44
error: 0.020408962209893834    model: 1.000*an_1 + 1.998*an_2                         
    {-1, 1, 2} => discovered (True)   a_n = a_{n-1} + 2*a_{n-2} 
error: 0.10008550924094338     model: 2.956*an_1 - 3.824*an_3 - 0.029    
    {-1} => discovered (True)   a_n = 3*a_{n-1} - 4*a_{n-3} =
                                    = a_{n-1} + 2*a_{n-1} - 4*a_{n-3}
                                    = a_{n-1} + (2*a_{n-2}+4*a_{n-3}) - 4*a_{n-3}
                                    = a_{n-1} + 2*a_{n-2} 
error: 0.12861693170065824     model: 1.025*an_1 + 1.948*an_2 - 0.015*n + 0.087
error: 0.9913482917708217      model: 3.999*an_2 + 0.043                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 116340298.98267359      model: -2.488*an_42 + 0.333*exp(0.693*n)   
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.585*an_2*an_4*n/log(-3.098*an_1*an_2)        
error: 1000000000.0            model: -3.807*an_1 - 1.906*log(-0.538*an_1) - 1.625*log(-1.328*an_1**5*an_2*n**3)
error: 1000000000.0            model: 0.714*exp(2.383*an_2*n) + 2.014     
error: 1000000000.0            model: -3.905*an_1 + 3.102*n + 5.982*sqrt(-n**2)
error: 1000000000.0            model: 0.876*n/an_1                                              
error: 1000000000.0            model: 1.641*an_5 - 6.089*sqrt(-an_1)                  
error: 1000000000.0            model: 0.075*n*exp(2.535*an_2) - 0.218*exp(1.955*n**2) + 2.914
error: 1000000000.0            model: 3.266*exp(2.608*n) - 1.954*exp(3.080*an_1*n**2) - 0.566
error: 1000000000.0            model: -0.188*log(2.361*an_1*n)                       
error: 1000000000.0            model: -1.711*sqrt(-n)*exp(1.546*an_1*n) - 1.731
error: 1000000000.0            model: 0.646*sqrt(-an_1) + 2.788 - 1.421*exp(-1.888*an_1**3*n**2)
error: 1000000000.0            model: 1.175*sqrt(-n)                                             
error: 1000000000.0            model: 0.977*log(-0.320*n)                           
error: 1000000000.0            model: 1.305*an_2*n/log(1.714*n) + 2.779*sqrt(-n**2)
error: 1000000000.0            model: 1.625*an_1 - 1.876*n**2 + 2.038*sqrt(-n)
error: 1000000000.0            model: 1.079*n + 0.941*sqrt(-n)                       
error: 1000000000.0            model: 3.464*n + 0.555*exp(2.824*an_1**4*n**3)
error: 1000000000.0            model: 1.204*an_1*n**2 - 2.172*log(-0.855*n)
error: 1.0726142810560238e+16  model: -4.440e-16*an_1*an_13 + 2.000*an_1 + 1.295 + 2.406*exp(-0.076*n)
error: 1.624140456807756e+23   model: 0.849*exp(0.673*n)                            
error: 1.797680523420668e+23   model: 0.582*an_1*n - 1.083*an_2*n - 1.643*exp(-0.272*n)
error: 1.797680523552546e+23   model: -0.955*an_1*n + 1.994*an_2*n                   
error: 1.797680523580894e+23   model: 0.041*an_1*n                                             
error: 7.832608179072566e+25   model: 2.309e-14*an_1**2                                          
error: 1.600935860532654e+26   model: 3.552e-15*an_1**2*an_39/n                                   
error: 8.992141933131228e+26   model: 4.0*an_7                                                              
error: 9.581637189904963e+26   model: 3.927*n - 0.769                                 
error: 9.581637189905048e+26   model: 3.899*n                                                    
error: 9.58163718993315e+26    model: 3.755                                                      
error: 9.581637189933723e+26   model: 0                                                                     

seq. 8 
A001097 aka. Twin primes    (quick checked, no disc.)
error: 128.21192135532627      model: 0.047*an_2*n/log(0.682*n) + 4.376*sqrt(n**2)
error: 137.06989163559825      model: 0.427*an_1 + 0.606*an_2 + 0.286*n + 4.0
error: 152.10646634079606      model: 0.499*an_1 + 0.578*an_2                       
error: 159.94795760609296      model: 0.539*an_1 + 5.579*sqrt(n) + 0.092*n**2
error: 183.24447375761366      model: 1.088*an_2 + 4.0                                           
error: 203.32028853756395      model: 0.975*an_1 + 0.147*n + 0.515*sqrt(n**2)
error: 203.52940538110502      model: 0.888*an_1 + 0.164*an_3 + 4.0                 
error: 207.4225854009715       model: 3.823e-5*an_1*an_13 + 1.029*an_1 + 4.0 - 2.546*exp(-0.448*n)
error: 351.30396070061425      model: 3.872*sqrt(an_1) + 1.017*an_5                    
error: 757.0176986283183       model: 4.0*n*exp(0.002*an_2) + 4.0 - 2.890*exp(-1.213*n**2)
error: 875.9449701219613       model: 1.402*an_7                                                 
error: 2478.262158662132       model: 0.015*an_1*n + 0.007*an_2*n + 4.0*exp(0.049*n)
error: 2925.0886921734786      model: 0.017*an_1*n + 0.007*an_2*n                
error: 2943.112983806168       model: 0.025*an_1*n                                             
error: 6672.091288384616       model: 0.002*an_1**2                                           
error: 7302.639620176488       model: -4.0*an_42 + 4.0*exp(0.107*n)                             
error: 8024.835631276538       model: 4.0*exp(0.105*n) + 4.0 - 2.666*exp(-0.536*an_1*n**2)
error: 8518.02366897226        model: 4.0*exp(0.106*n)                                          
error: 13452.007701574492      model: 8.0*sqrt(n) + 4.0*n                                                   
error: 15189.737427160167      model: 1.273e-6*an_1*an_3*n**2 + 3.845                 
error: 21570.95918367347       model: 4.0*n + 4.0                                                           
error: 22423.04081632653       model: 4.0*n                                                                 
error: 22423.04081632653       model: 4.0*n + 1.267*exp(-0.706*an_1**4*n**3)          
error: 22926.749799766836      model: 5.109e-10*an_1**2*n**4                                     
error: 23145.781072027716      model: 8.0*sqrt(an_1) + 4.0 - 0.196*exp(-2.367*an_1**3*n**2)
error: 35206.96009172894       model: 0.003*an_1**2*an_39/n                                   
error: 50404.46547618149       model: 8.0*sqrt(n)                                                           
error: 52302.45931980105       model: 4.0*log(4.0*an_1*n)                                                   
error: 60541.44327466876       model: 4.0*log(4.0*n)                                                        
error: 66729.30608370862       model: 4.0 + 1.011*exp(-1.334*an_2*n)                  
error: 66729.32648692287       model: 5.784*sqrt(n)*exp(-2.864*an_1*n) + 4.0          
error: 68168.1978256268        model: 4.0*n/an_1                                                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: -2.817*an_1/an_3 - 1.513                        
error: 1000000000.0            model: 0.837*an_1**2*an_3*n**2 - 0.718*n**2 + 3.444*log(-2.238*an_7)/log(2.774*n**2)
error: 1000000000.0            model: 1.658*an_2*an_4*n/log(-2.794*an_1*an_2)         
error: 1000000000.0            model: 2.733*an_1 + 1.017*log(-1.154*an_1) - 1.338*log(1.911*an_1**5*an_2*n**3)
error: 1000000000.0            model: 2.378*an_1*n**2 - 0.260*log(-3.781*n)


A001481     (quick checked, no disc.)
check fitting 44 44
error: 1.284178938772559       model: 2.129*n*exp(0.001*an_2) - 4.0 + 2.832*exp(-0.076*n**2)
error: 1.4784606228448307      model: -3.683*sqrt(n) + 2.863*n                        
error: 1.5307973905466563      model: 0.497*an_1 + 0.235*an_2 + 0.676*n - 0.153
error: 1.6708906902718925      model: 0.776*an_1 - 0.926*n + 1.485*sqrt(n**2)
error: 1.8300666237597498      model: 0.884*an_1 + 1.209*sqrt(n) + 0.003*n**2
error: 1.8339467790361816      model: 0.747*an_1 + 0.268*an_3 + 2.773    
error: 1.9882039881892024      model: 9.951e-5*an_1*an_13 + 0.991*an_1 + 2.872 - 1.702*exp(-0.102*n)
error: 2.24327446292265        model: 0.019*an_2*n/log(0.525*n) + 1.711*sqrt(n**2)
error: 2.4245309435817393      model: 2.763*sqrt(an_1) + 0.833*an_5                  
error: 2.9708814281110847      model: 1.020*an_2 + 3.665                              
error: 3.105140449146381       model: 1.149*an_1 - 0.119*an_2                        
error: 5.760049474335207       model: 2.356*n - 4.0                                              
error: 14.987330791814687      model: 2.230*n - 0.996*exp(-0.163*an_1**4*n**3)
error: 15.021645021645039      model: 2.235*n                                                    
error: 63.02487148504454       model: 1.277*an_7                                                 
error: 129.53908811714072      model: 0.098*an_1*n - 0.079*an_2*n + 4.0*exp(0.035*n)
error: 188.3198918336839       model: 8.0*sqrt(an_1) + 1.186 - 0.190*exp(-1.865*an_1**3*n**2)
error: 196.5069183684964       model: 0.000*an_1*n**2 + 4.0*log(3.980*n)          
error: 204.61268590397594      model: 0.124*an_1*n - 0.101*an_2*n                   
error: 229.64645553440775      model: 0.025*an_1*n                                             
error: 267.82816021167696      model: -4.0*an_42 + 4.0*exp(0.077*n)                            
error: 296.6406508254092       model: 4.0*exp(0.073*n) + 4.0 - 0.816*exp(-0.670*an_1*n**2)
error: 300.9166994328161       model: 0.011*an_1**2                                            
error: 375.64830321963336      model: 0.000*an_2*an_4*n/log(0.002*an_1*an_2)   
error: 383.07681753646966      model: 4.0*exp(0.074*n)                                         
error: 763.578361106657        model: 8.0*sqrt(n)                                                           
error: 845.6638312599815       model: 5.527e-6*an_1*an_3*n**2 + 3.985                 
error: 1525.4130969460539      model: 2.435e-9*an_1**2*n**4                                      
error: 2353.3396718901645      model: 4.0*log(4.0*n)                                                        
error: 2496.142391501679       model: 0.036*an_1**2*an_39/n                                    
error: 3719.6979002331864      model: -3.091*sqrt(n)*exp(-0.453*an_1*n) + 4.0         
error: 3719.7040816566764      model: 4.0 - 2.500*exp(-2.622*an_2*n)                  
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 0.586*an_1/an_3 - 0.289                       
error: 1000000000.0            model: -2.016*an_1**2*an_3*n**2 + 1.658*n**2 - 2.771*log(0.899*an_7)/log(-1.781*n**2)
error: 1000000000.0            model: -2.729*an_1 + 0.070*log(1.154*an_1) - 0.056*log(3.174*an_1**5*an_2*n**3)
error: 1000000000.0            model: -1.439*n/an_1                                              
error: 1000000000.0            model: 2.500*log(3.225*an_1*n)                         

seq. 10
A001615     (quick checked, no disc.)
check fitting 44 44
error: 39.32353285815786       model: -1.131*an_1 - 0.427*an_2 + 3.884*n + 0.181
error: 47.80110154288164       model: -0.805*an_1 + 0.413*n + 2.357*sqrt(n**2)
error: 64.03477223369887       model: -0.638*an_1 + 8.0*sqrt(n) + 0.030*n**2          
error: 108.32256851125811      model: 0.018*an_2*n/log(0.214*n) + 1.059*sqrt(n**2)
error: 110.2003398938188       model: 1.098*n*exp(0.004*an_2) + 4.0 - 2.414*exp(-0.049*n**2)
error: 110.36488078538909      model: -0.014*an_1*an_13 + 0.645*an_1 + 4.0*exp(0.065*n) + 2.694
error: 126.84272657620836      model: 0.947*an_2 + 4.0                                          
error: 127.60115785094058      model: 1.532*n + 1.015                                  
error: 127.66417088946133      model: 0.432*sqrt(n) + 1.489*n                        
error: 127.80892942974575      model: 1.563*n + 2.536*exp(-0.568*an_1**4*n**3)
error: 127.85106003811543      model: 1.563*n                                                    
error: 129.3267588402346       model: 0.151*an_1 + 0.886*an_2                       
error: 191.6808481169624       model: -2.336e-5*an_1*n + 0.016*an_2*n + 4.0*exp(0.041*n)
error: 217.40086977816827      model: 8.0*sqrt(n)                                                           
error: 242.9958715126111       model: 4.0*exp(0.064*n) + 4.0 - 0.057*exp(-2.825*an_1*n**2)
error: 256.8008919131254       model: -3.681*an_42 + 4.0*exp(0.070*n)               
error: 271.1689338975268       model: 0.004*an_1*n + 0.021*an_2*n                
error: 301.06694956811623      model: 4.0*exp(0.065*n)                                          
error: 303.9519210052252       model: -0.000*an_1 + 0.945*an_3 + 4.0             
error: 309.24205971454677      model: 5.035*sqrt(an_1) + 0.316*an_5                  
error: 324.8842105070651       model: 7.570*sqrt(an_1) - 4.0 - 2.821*exp(-3.445*an_1**3*n**2)
error: 341.17391313750227      model: 0.000*an_1*n**2 + 4.0*log(3.996*n)           
error: 355.82498564136233      model: 0.001*an_2*an_4*n/log(0.005*an_1*an_2)    
error: 462.2940150261052       model: 4.0*log(4.0*an_1*n)                                                   
error: 478.4614889256773       model: 1.105*an_7                                                 
error: 552.5609520157415       model: 0.023*an_1*n                                             
error: 864.0701478292011       model: 6.765e-6*an_1*an_3*n**2 + 3.987                 
error: 937.3736698024917       model: 0.011*an_1**2                                            
error: 954.6107998500675       model: 4.0*log(4.0*n)                                                        
error: 1336.1673260836142      model: 2.669e-9*an_1**2*n**4                                      
error: 1677.7624576265848      model: 0.034*an_1**2*an_39/n                                    
error: 1845.2244898054284      model: -5.129*sqrt(n)*exp(-1.635*an_1*n) + 4.0         
error: 1845.2244951201994      model: 4.0 - 1.000*exp(-2.062*an_2*n)                  
error: 1917.9502086097523      model: 4.0*n/an_1                                                            
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 1.984*an_1/an_3 + 2.068                         
error: 1000000000.0            model: -0.909*an_1**2*an_3*n**2 - 0.035*n**2 + 2.828*log(-2.599*an_7)/log(2.480*n**2)
error: 1000000000.0            model: 0.211*an_1 + 0.919*log(-2.001*an_1) + 1.760*log(1.068*an_1**5*an_2*n**3)


A002572  Number of partitions of 1 into n powers of 1/2   (quick checked, no disc.)
check fitting 44 44
error: 64.80324710689928       model: 2.325*an_1 - 1.708*an_3 - 0.098    
error: 107.28500870095584      model: 3.074*an_1 - 2.297*an_2 + 0.019*n + 0.070
error: 2459.1580161648585      model: 2.950*an_1 - 2.075*an_2                         
error: 1469264.885585356       model: 3.218*an_2 - 3.537                                
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 352571151.239505        model: 1.694*an_42 + 0.254*exp(0.584*n)    
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.585*an_2*an_4*n/log(-3.098*an_1*an_2)        
error: 1000000000.0            model: -3.807*an_1 - 1.906*log(-0.538*an_1) - 1.625*log(-1.328*an_1**5*an_2*n**3)
error: 1000000000.0            model: 0.714*exp(2.383*an_2*n) + 2.014     
error: 1000000000.0            model: -0.209*an_1 + 0.852*n - 3.350*sqrt(-n**2)
error: 1000000000.0            model: -1.358*an_5 + 1.094*sqrt(-an_1)                 
error: 1000000000.0            model: 1.096*n*exp(2.693*an_2) + 0.380*exp(2.269*n**2) - 0.253
error: 1000000000.0            model: 0.150*exp(2.051*an_1*n**2) - 2.450 - 1.228*exp(-3.731*n)
error: 1000000000.0            model: -3.745*log(-3.924*an_1*n)                       
error: 1000000000.0            model: 3.054*sqrt(-n)*exp(-1.888*an_1*n) + 1.673
error: 1000000000.0            model: -5.824*sqrt(-an_1) + 0.876 - 0.629*exp(-0.237*an_1**3*n**2)
error: 1000000000.0            model: -2.833*sqrt(-n)                                            
error: 1000000000.0            model: 2.368*log(-2.644*n)                             
error: 1000000000.0            model: 0.651*an_2*n/log(-1.958*n) - 2.001*sqrt(n**2)
error: 1000000000.0            model: 1.800*an_1 - 1.384*n**2 + 1.526*sqrt(-n)
error: 1000000000.0            model: 2.717*n - 1.231*sqrt(-n)                        
error: 1000000000.0            model: 1.045*n + 0.642*exp(2.268*an_1**4*n**3)
error: 1000000000.0            model: 0.123*an_1*n**2 + 1.618*log(-0.146*n)
error: 22233626897.178024      model: -2.353e-14*an_1*an_13 + 1.794*an_1 - 0.734*exp(0.200*n) + 2.160
error: 2600785677856.265       model: 0.254*exp(0.584*n)                            
error: 4.0157560104409667e+18  model: -2.176*an_1*n + 3.971*an_2*n                     
error: 4.015835518241337e+18   model: -0.983*an_1*n + 1.830*an_2*n + 2.402*exp(-3.675*n)
error: 4.0162699618312064e+18  model: 0.036*an_1*n                                             
error: 1.2893556623402119e+21  model: 5.029e-12*an_1**2                                          
error: 1.4388013673714148e+21  model: 7.105e-15*an_1*an_3*n**2 + 3.998                  
error: 2.5682134542921404e+21  model: 2.748e-12*an_1**2*an_39/n                                  
error: 1.2611441148546295e+22  model: 4.0*an_7                                                              
error: 1.4482880530800666e+22  model: 3.990*n + 1.661                                 
error: 1.4482880531188037e+22  model: 3.899*n                                                    
error: 1.4482880543195585e+22  model: -2.100*n/an_1                                              
error: 1.4482880543195585e+22  model: 0                                                                     


A005230  a Stern's sequence   (quick checked, no disc.)
[a(1) = 1, a(n+1) is the sum of the m preceding terms, where m*(m-1)/2 < n <= m*(m+1)/2 or equivalently m = ceiling((sqrt(8*n+1)-1)/2) ]
check fitting 44 44
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.585*an_2*an_4*n/log(-3.098*an_1*an_2)        
error: 1000000000.0            model: 0.515*an_1 + 2.046*log(-2.621*an_1) + 1.769*log(1.909*an_1**5*an_2*n**3)
error: 1000000000.0            model: 1.126*exp(3.504*an_2*n) + 3.842      
error: 1000000000.0            model: 0.858*an_1 + 2.886*n - 2.894*sqrt(-n**2)
error: 1000000000.0            model: -1.303*an_5 + 1.791*sqrt(-an_1)                 
error: 1000000000.0            model: 3.752*n*exp(-0.778*an_2) + 0.136*exp(1.654*n**2) + 0.573
error: 1000000000.0            model: 1.906*exp(1.145*an_1*n**2) - 2.746 - 0.753*exp(-2.942*n)
error: 1000000000.0            model: 1.116*log(-3.599*an_1*n)                        
error: 1000000000.0            model: 2.469*sqrt(n)*exp(3.299*an_1*n) - 0.014
error: 1000000000.0            model: -2.879*sqrt(-an_1) + 2.256 + 0.933*exp(-0.697*an_1**3*n**2)
error: 1000000000.0            model: -6.103*sqrt(-n)                                            
error: 1000000000.0            model: -1.585*log(-1.720*n)                            
error: 1000000000.0            model: 2.847*an_2*n/log(-2.076*n) - 6.385*sqrt(-n**2)
error: 1000000000.0            model: 0.268*an_1 + 1.497*n**2 + 3.333*sqrt(-n)
error: 1000000000.0            model: 1.192*n + 0.855*sqrt(-n)                       
error: 1000000000.0            model: -3.411*n - 1.345*exp(1.685*an_1**4*n**3)
error: 1000000000.0            model: 1.967*an_1*n**2 + 0.793*log(-3.888*n)
error: 3.9383810976239315e+17  model: 1.752*an_42 + 0.242*exp(0.692*n)    
error: 5.178875967813187e+17   model: 0.243*exp(0.692*n)                            
error: 1.6878189155618191e+18  model: 1.846*an_1 + 0.610*an_3 - 2.500     
error: 1.7133723934481446e+18  model: 1.730*an_1 + 0.536*an_2                        
error: 1.7135997978042929e+18  model: 1.724*an_1 + 0.548*an_2 + 3.583*n - 0.911
error: 1.7839261210783232e+18  model: -6.217e-15*an_1*an_13 + 1.999*an_1 - 3.329*exp(0.402*n) - 0.181
error: 7.199611302322945e+18   model: 3.996*an_2 + 2.676                              
error: 1.9337097307084997e+20  model: 0.123*an_1*n - 0.180*an_2*n + 2.643*exp(0.608*n)
error: 8.766566460508053e+22   model: 0.986*an_1*n - 1.889*an_2*n                     
error: 9.127413498687635e+22   model: 0.041*an_1*n                                             
error: 3.960620849140431e+25   model: 3.197e-14*an_1**2                                          
error: 7.526437187135352e+25   model: 5.329e-15*an_1**2*an_39/n                                  
error: 4.549405166677242e+26   model: 4.0*an_7                                                              
error: 4.849092890621115e+26   model: 3.899*n                                                    
error: 4.849092890621429e+26   model: 3.902*n - 3.036                                  
error: 4.849092890641091e+26   model: 3.930                                                      
error: 4.849092890641519e+26   model: -0.696*n/an_1                                             
error: 4.849092890641519e+26   model: 0                                                                     


A027642  Denominator of Bernoulli number B_n   (quick checked, no disc.)
[ no formula ]
check fitting 44 44
error: 100000000               model: 3.137*an_1**2*n**2 + 0.464*an_29*n + 2.708*an_34 - 4.134 - 0.150*exp(-4.708*an_2)
error: 100000000               model: -0.335*sqrt(an_1) - 3.925*an_35 + 0.809*n + 0.442 - 2.581*exp(-4.688*an_1**2*n**2)
error: 100000000               model: -0.670*log(0.831*an_1*n**3) - 1.511*log(-1.239*an_1*an_2*n) - 1.441*log(-2.689*n)/n
error: 100000000               model: 1.260*sqrt(an_1) + 4.788*sqrt(n) + 2.889*n + 4.484*log(-2.455*an_1) + 4.083
error: 100000000               model: -1.221*an_1 + 1.711*sqrt(-an_1*n**3) - 4.461 + 4.936*exp(-3.642*an_1*an_20)
error: 100000000               model: 3.065*an_1*an_2 + 1.716*an_1*an_3*n - 2.010*log(1.531*an_1**2) - 3.846*log(1.698*an_2) + 0.251*log(-1.770*n)
error: 100000000               model: 7.797*sqrt(an_1) - 3.353*an_1 - 3.272*an_2 + 2.423*sqrt(an_1*an_2*n**2)
error: 1000000000.0            model: 0.738*an_1/an_3 - 2.764                        
error: 1000000000.0            model: 1.942*an_1**2*an_3*n**2 + 2.953*n**2 + 0.384*log(2.632*an_7)/log(-2.281*n**2)
error: 1000000000.0            model: -2.789*an_2*an_4*n/log(-2.801*an_1*an_2)        
error: 1000000000.0            model: -2.714*an_1 + 1.504*log(-1.422*an_1) - 1.736*log(3.693*an_1**5*an_2*n**3)
error: 1000000000.0            model: -3.783*exp(2.441*an_2*n) - 0.674      
error: 1000000000.0            model: 3.340*an_1 + 1.097*n - 2.390*sqrt(-n**2)
error: 1000000000.0            model: -2.096*an_5 + 3.679*sqrt(-an_1)                 
error: 1000000000.0            model: 0.072*n*exp(3.591*an_2) + 3.397 - 0.945*exp(-3.247*n**2)
error: 1000000000.0            model: 2.557*exp(2.900*n) + 3.585*exp(0.870*an_1*n**2) + 2.679
error: 1000000000.0            model: 1.502*log(-1.268*an_1*n)                        
error: 1000000000.0            model: 3.155*sqrt(-n)*exp(-1.802*an_1*n) - 2.445
error: 1000000000.0            model: 0.168*sqrt(-an_1) - 2.782*exp(0.551*an_1**3*n**2) + 1.234
error: 1000000000.0            model: 5.496*sqrt(-n)                                             
error: 1000000000.0            model: -1.486*log(-2.641*n)                            
error: 1000000000.0            model: -3.262*an_2*n/log(-1.433*n) - 0.999*sqrt(-n**2)
error: 1000000000.0            model: -3.604*an_1 - 2.043*n**2 + 3.508*sqrt(-n)
error: 1000000000.0            model: 2.225*n - 0.286*sqrt(-n)                       
error: 1000000000.0            model: 1.670*n - 2.045*exp(1.909*an_1**4*n**3)
error: 1000000000.0            model: -0.040*an_1*n**2 - 2.496*log(-0.184*n)
error: 74974565867.38715       model: 4.0*exp(0.193*n)                                          
error: 74974659663.69812       model: 2.343*an_42 + 4.0*exp(0.193*n)                 
error: 75209328284.0           model: 4.0*n + 4.0                                                           
error: 75209648158.81642       model: 4.0*n/an_1                                                            
error: 75209654826.36734       model: 4.0*n                                                                 
error: 75209679921.26329       model: -7.777e-5*an_1 - 5.958e-5*an_2 + 4.0*n - 0.316
error: 75221369330.12505       model: -8.294e-7*an_1 - 4.542e-7*an_3 + 1.496
error: 75221491752.69647       model: 2.414e-8*an_1*n + 5.978e-7*an_2*n + 2.174*exp(-3.270*n)
error: 75221491752.70384       model: 2.414e-8*an_1*n + 5.978e-7*an_2*n               
error: 75221491753.8418        model: 1.072e-6*an_1 + 2.257e-5*an_2                   
error: 75221491792.1579        model: 1.065e-6*an_7                                              
error: 75221491792.15991       model: 2.415e-8*an_1*n                                            
error: 75221491792.2449        model: 0                                                                     
error: 75221616203.97824       model: 1.600e-5*an_2 - 1.520                           
error: 75221661700.60565       model: 7.746e-8*an_1*an_3*n**2 + 3.619                 
error: 75223460750.04163       model: -1.358e-8*an_1*an_13 + 0.004*an_1 - 2.648 - 2.411*exp(-0.335*n)
error: 75224695275.09773       model: -4.318e-6*an_1**2*an_39/n                                  
error: 75226694613.53413       model: -4.334e-9*an_1**2                                          


