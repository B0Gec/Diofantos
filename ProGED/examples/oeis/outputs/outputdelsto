0





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 0
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 55 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_2*an_26, p = 2.070108995246299e-07, parse trees = 1, valid = False
-> an_3*n, p = 0.0042622950819672135, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_37*n**3, p = 2.622950819672133e-06, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.505312955709952e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8*n + n, p = 6.499195614082239e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0016681967213114765, parse trees = 2, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_1*an_2*an_39*n + C1*an_1*n + C2*n + n, p = 8.58515602483087e-12, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_25 + C2*n + n, p = 1.3987567242693637e-08, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_20 + n, p = 3.934426389557317e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_1, p = 5.419126640555824e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*an_6 + n, p = 9.309690943294819e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + an_1, p = 1.0394062572869364e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_3**2*n, p = 9.74356857301539e-07, parse trees = 1, valid = False
-> an_1*an_21*an_38*an_39*n**3, p = 4.45112943170025e-14, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1*an_3 + n**4, p = 1.3080354743348581e-06, parse trees = 1, valid = False
-> an_14, p = 0.00032788714796885246, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + an_3*n, p = 7.848212846009146e-07, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_2*n**3, p = 0.0005560655737704924, parse trees = 2, valid = False
-> C0*n + an_1**3*an_2, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*n**3 + an_1*n, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1**2*an_5*n + C1*an_1 + C2*an_23 + an_1*n, p = 1.0580251561404264e-12, parse trees = 1, valid = False
-> an_27, p = 0.0003278688524619333, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_13 + C2*an_1*an_36 + C3*an_1 + C4*n**2 + C5*n + an_1, p = 1.122657194374947e-19, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + C2*n + n, p = 6.502951968666992e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_3 + an_1*an_2*n, p = 1.8705640625342994e-08, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_2*n**2, p = 1.2883705097196111e-06, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1*n**3, p = 3.390427949475954e-07, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*an_26 <class 'ProGED.model.Model'>
an_1**2*an_2*an_26 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_26, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37*n**3 <class 'ProGED.model.Model'>
an_37*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*n**3 <class 'ProGED.model.Model'>
an_1**3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_8*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_8*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_8*n)
<class 'tuple'> (n, C0*an_1, C1*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_39*n + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_39*n + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n, C0*an_1*an_2*an_39*n)
<class 'tuple'> (n, C2*n, C1*an_1*n, C0*an_1*an_2*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*n)
<class 'tuple'> (n**2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_25 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_25 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*an_25)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_2*an_25)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_20 + n <class 'ProGED.model.Model'>
C0*an_20 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_20)
<class 'tuple'> (n, C0*an_20)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6 + n <class 'ProGED.model.Model'>
C0*an_1*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_6)
<class 'tuple'> (n, C0*an_1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1, C2*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*an_3**2*n <class 'ProGED.model.Model'>
an_2*an_3**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_21*an_38*an_39*n**3 <class 'ProGED.model.Model'>
an_1*an_21*an_38*an_39*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_21, an_38, an_39, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n**4 <class 'ProGED.model.Model'>
C0*an_1*an_3 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1*an_3)
<class 'tuple'> (n**4, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14 <class 'ProGED.model.Model'>
an_14 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**3 + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**3, an_3*n)
<class 'tuple'> (C0*an_1, C1*n**3, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3*an_2 <class 'ProGED.model.Model'>
C0*n + an_1**3*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*an_2)
<class 'tuple'> (C0*n, an_1**3*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1*n <class 'ProGED.model.Model'>
C0*n**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*n)
<class 'tuple'> (C0*n**3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_5*n + C1*an_1 + C2*an_23 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_5*n + C1*an_1 + C2*an_23 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_23, an_1*n, C0*an_1**2*an_5*n)
<class 'tuple'> (C1*an_1, C2*an_23, an_1*n, C0*an_1**2*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_27 <class 'ProGED.model.Model'>
an_27 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_13 + C2*an_1*an_36 + C3*an_1 + C4*n**2 + C5*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_13 + C2*an_1*an_36 + C3*an_1 + C4*n**2 + C5*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C3*an_1, C4*n**2, C5*n, C0*an_1**2*n, C1*an_1*an_13, C2*an_1*an_36)
<class 'tuple'> (an_1, C3*an_1, C4*n**2, C5*n, C0*an_1**2*n, C1*an_1*an_13, C2*an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n**2, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_3 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_3 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, C0*an_1*an_2, an_1*an_2*n)
<class 'tuple'> (C1*an_3, C0*an_1*an_2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_2*n**2)
<class 'tuple'> (an_2*n**2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n**3, C0*an_1*n)
<class 'tuple'> (C1*n**2, an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5349133359995903


Equation discovery for all (chosen) OEIS sequences took 0.534923915998661 secconds, i.e. 0.008915398599977682 minutes or 0.0001485899766662947 hours.
1





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 1
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> an_1**3*an_2*n**4, p = 1.1625732116958468e-07, parse trees = 1, valid = False
-> C0*an_5*n**2 + C1*n + an_2**2, p = 5.399891699207331e-09, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.0019013260563659525, parse trees = 2, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 2.7095633202779127e-05, parse trees = 1, valid = False
-> C0*an_47 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + an_1*an_3, p = 2.64008160140551e-09, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*an_14*n**3, p = 4.288880211217417e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_17, p = 9.713602996855978e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0021190174684224683, parse trees = 2, valid = False
-> C0*an_1*an_2*an_3*n + an_2*an_4*n, p = 1.856352749618559e-10, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*an_3*n + C2*n + an_2, p = 7.021809711667218e-10, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**3 + C2*an_1 + an_1**2, p = 4.105854906505851e-10, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0018413114754098378, parse trees = 2, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_2*an_3**2 + an_3, p = 3.460830367464482e-08, parse trees = 1, valid = False
-> C0*an_1*an_46 + C1*an_2 + C2*n**2 + C3*n + n, p = 3.3570161379146317e-10, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + n, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n**3 + an_1, p = 1.3673630180864388e-08, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**3 + C2*n + n, p = 1.5908931147541013e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + C2*n**2 + C3*n + an_2*n**3, p = 5.4964565866096683e-11, parse trees = 1, valid = False
-> C0*an_1*an_4 + n, p = 5.2572964256920205e-05, parse trees = 1, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1**4, p = 0.00024060330029790198, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_22, p = 2.3158660941862878e-07, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n**2, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_27*n + C1*n**2 + an_1*n**2, p = 4.829669443740905e-09, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_12 + C1*n + an_2, p = 1.0945777229295356e-07, parse trees = 1, valid = False
an_1**3*an_2*n**4 <class 'ProGED.model.Model'>
an_1**3*an_2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_5*n**2 + C1*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_5*n**2 + C1*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C1*n, C0*an_5*n**2)
<class 'tuple'> (an_2**2, C1*n, C0*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_47 + an_1*n <class 'ProGED.model.Model'>
C0*an_47 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_47, an_1*n)
<class 'tuple'> (C0*an_47, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**2 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**2 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_3, C0*an_1**3*an_2*n**2)
<class 'tuple'> (an_1*an_3, C0*an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_14*n**3 <class 'ProGED.model.Model'>
an_1**2*an_14*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_17 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*an_1*an_2)
<class 'tuple'> (an_17, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3*n + an_2*an_4*n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3*n + an_2*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*an_4*n, C0*an_1*an_2*an_3*n)
<class 'tuple'> (an_2*an_4*n, C0*an_1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2*an_3*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2*an_3*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C0*an_1*n**2, C1*an_2*an_3*n)
<class 'tuple'> (an_2, C2*n, C0*an_1*n**2, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**3 + C2*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**3 + C2*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*an_1, C1*an_1*n**3, C0*an_1*an_2*n)
<class 'tuple'> (an_1**2, C2*an_1, C1*an_1*n**3, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3**2 + an_3 <class 'ProGED.model.Model'>
C0*an_2*an_3**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2*an_3**2)
<class 'tuple'> (an_3, C0*an_2*an_3**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_46 + C1*an_2 + C2*n**2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_46 + C1*an_2 + C2*n**2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n**2, C3*n, C0*an_1*an_46)
<class 'tuple'> (n, C1*an_2, C2*n**2, C3*n, C0*an_1*an_46)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**2*n)
<class 'tuple'> (n, C1*an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*an_3*n**3)
<class 'tuple'> (an_1, C0*an_1**3*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**3, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*n**3, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_2 + C2*n**2 + C3*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2 + C2*n**2 + C3*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C2*n**2, C3*n, an_2*n**3, C0*an_1*an_2)
<class 'tuple'> (C1*an_2, C2*n**2, C3*n, an_2*n**3, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4 + n <class 'ProGED.model.Model'>
C0*an_1*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_4)
<class 'tuple'> (n, C0*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4 <class 'ProGED.model.Model'>
an_1**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_22 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_22 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_22, C0*an_1, C1*n)
<class 'tuple'> (an_22, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*n)
<class 'tuple'> (n**2, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_35 <class 'ProGED.model.Model'>
an_35 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_27*n + C1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_27*n + C1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n**2, C0*an_27*n)
<class 'tuple'> (C1*n**2, an_1*n**2, C0*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_12 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_12 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_12, C1*n)
<class 'tuple'> (an_2, C0*an_12, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5087901070000953


Equation discovery for all (chosen) OEIS sequences took 0.508795829000519 secconds, i.e. 0.008479930483341983 minutes or 0.00014133217472236638 hours.
2





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 2
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 47 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + an_1**3*an_17, p = 1.645153249909825e-08, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1**2*an_2*an_37*n**2, p = 2.195548098153468e-13, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1 + n, p = 1.254427463091625e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + an_1*an_2, p = 1.2121255125222264e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*n**2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_2*an_44, p = 1.2660873719728871e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*n + an_3*n**9, p = 6.546885245901655e-10, parse trees = 1, valid = False
-> C0*an_3*n + an_2**2, p = 1.9067414192116273e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n**3, p = 3.1817862295082025e-07, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> an_1*an_21, p = 4.192421443262142e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_48 + an_2, p = 4.471435429599404e-08, parse trees = 1, valid = False
-> C0*an_26*an_3 + C1*n + n, p = 5.5898951896309675e-08, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n**3 + an_1, p = 3.3904279494759537e-07, parse trees = 1, valid = False
-> C0*n + an_12*an_3, p = 4.6611341712801224e-07, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_37*n + C1*n + an_1*an_2, p = 2.3312612068851603e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 1.2441600000000017e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2*an_28 + an_3*n, p = 1.798812659638411e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n**2, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2*an_3*n + C2*n**2 + an_1*n, p = 1.860117138713355e-11, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n**2)
<class 'tuple'> (C0*an_1, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**3*an_17 <class 'ProGED.model.Model'>
C0*n**2 + an_1**3*an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**3*an_17)
<class 'tuple'> (C0*n**2, an_1**3*an_17)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1**2*an_2*an_37*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1**2*an_2*an_37*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1**2*an_2*an_37*n**2)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1**2*an_2*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_3)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2, C1*an_2*n)
<class 'tuple'> (C0*an_1, an_1*an_2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1**2*n**2)
<class 'tuple'> (C0*an_2, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_44 <class 'ProGED.model.Model'>
an_2*an_44 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_44)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3*n**9 <class 'ProGED.model.Model'>
C0*n + an_3*n**9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n**9)
<class 'tuple'> (C0*n, an_3*n**9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_3*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_3*n)
<class 'tuple'> (an_2**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*n**3)
<class 'tuple'> (C0*n**2, C1*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_21 <class 'ProGED.model.Model'>
an_1*an_21 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_21)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_48 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_48 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_48)
<class 'tuple'> (an_2, C0*an_1, C1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_26*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_26*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_26*an_3)
<class 'tuple'> (n, C1*n, C0*an_26*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**3, C0*an_1*n**3)
<class 'tuple'> (an_1, C1*n**3, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_12*an_3 <class 'ProGED.model.Model'>
C0*n + an_12*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_12*an_3)
<class 'tuple'> (C0*n, an_12*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37*n + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_37*n + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_37*n)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
<class 'tuple'> (n, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_28 + an_3*n <class 'ProGED.model.Model'>
C0*an_2*an_28 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_2*an_28)
<class 'tuple'> (an_3*n, C0*an_2*an_28)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_2*an_3*n + C2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_2*an_3*n + C2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**2, an_1*n, C0*an_1*n**3, C1*an_2*an_3*n)
<class 'tuple'> (C2*n**2, an_1*n, C0*an_1*n**3, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.43340975499995693


Equation discovery for all (chosen) OEIS sequences took 0.43341909400078293 secconds, i.e. 0.0072236515666797155 minutes or 0.00012039419277799525 hours.
3





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 3
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 42 models
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595661503313089, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_5 + C1*n + n**2, p = 3.6212459016393457e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_18, p = 4.192423287033835e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_2 + n, p = 1.4826821275789621e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_45 + n, p = 2.96127138828187e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017929435235548364, parse trees = 2, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + C2*n + an_1, p = 3.55843710618951e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + an_6*n**2, p = 5.824524590163942e-07, parse trees = 1, valid = False
-> an_12*an_2, p = 1.2668723645017769e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2**2*n**2, p = 7.5835544886006e-09, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_21 + C1*an_1 + C2*n**2 + C3*n + an_1, p = 8.528461702330965e-11, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3*n**2 + C1*an_1**2*n + C2*n + an_1**2*n, p = 1.2431953403197877e-13, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n**2, p = 6.102770309056715e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_3 + C2*n**2 + C3*n + n**2, p = 1.0464283794678864e-09, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + n, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> C0*an_16*an_48*n + C1*n + an_4, p = 6.547815395142235e-12, parse trees = 1, valid = False
-> C0*an_6 + n, p = 7.28065573770492e-05, parse trees = 1, valid = False
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_5 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_5 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_5, C1*n)
<class 'tuple'> (n**2, C0*an_5, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_18 <class 'ProGED.model.Model'>
an_1*an_18 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*an_2, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C2*an_2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_45 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_45 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1, C2*an_45)
<class 'tuple'> (n, C0*an_1**2, C1*an_1, C2*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*an_2, C2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_6*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_6*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_6*n**2)
<class 'tuple'> (C0*n**2, an_6*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12*an_2 <class 'ProGED.model.Model'>
an_12*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_12, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2**2*n**2, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n, an_2**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_21 + C1*an_1 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_21 + C1*an_1 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**2, C3*n, C0*an_1*an_21)
<class 'tuple'> (an_1, C1*an_1, C2*n**2, C3*n, C0*an_1*an_21)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3*n**2 + C1*an_1**2*n + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3*n**2 + C1*an_1**2*n + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1**2*n, C1*an_1**2*n, C0*an_1**2*an_2*an_3*n**2)
<class 'tuple'> (C2*n, an_1**2*n, C1*an_1**2*n, C0*an_1**2*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + C1*an_3 + C2*n**2 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_3*n + C1*an_3 + C2*n**2 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C2*n**2, C3*n, C0*an_3*n)
<class 'tuple'> (n**2, C1*an_3, C2*n**2, C3*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n**2)
<class 'tuple'> (n, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_16*an_48*n + C1*n + an_4 <class 'ProGED.model.Model'>
C0*an_16*an_48*n + C1*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C1*n, C0*an_16*an_48*n)
<class 'tuple'> (an_4, C1*n, C0*an_16*an_48*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_6 + n <class 'ProGED.model.Model'>
C0*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_6)
<class 'tuple'> (n, C0*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4385539989998506


Equation discovery for all (chosen) OEIS sequences took 0.4385596349984553 secconds, i.e. 0.007309327249974255 minutes or 0.00012182212083290424 hours.
4





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 4
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_2*an_4*n + an_31*n, p = 1.4791548033971875e-10, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**3*an_2**2*an_3*an_4*n**2 + an_1, p = 3.8810997838452866e-13, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_1**2*n**2, p = 6.416088007944056e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n**2 + C2*n + an_1, p = 4.919183455596385e-13, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_4*n, p = 2.6461226074233342e-05, parse trees = 1, valid = False
-> C0*an_30 + C1*n**3 + C2*n + n, p = 2.2662295081972685e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2*an_2, p = 1.9265934561296684e-09, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_28, p = 0.0003278688524598914, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n**2 + C3*n + n, p = 2.8253566245632923e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + n**2, p = 1.695213974737977e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*an_4*n, p = 3.1151000159542526e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*n + an_1, p = 1.5948922242960218e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*n + n, p = 3.251475984333495e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n**2, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + n**2, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> C0*an_4 + C1*an_46*n**2 + n, p = 3.594732598763775e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2*an_3*n**2, p = 2.0646792010991797e-08, parse trees = 1, valid = False
-> an_1*an_18*n**3, p = 3.353938629627071e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + an_32*n, p = 1.5439107238051113e-08, parse trees = 1, valid = False
-> an_1*an_3**2, p = 1.613204042041698e-05, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099035e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 6.177842198245673e-05, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_4*n + an_31*n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_4*n + an_31*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_31*n, C0*an_1*an_2*an_4*n)
<class 'tuple'> (an_31*n, C0*an_1*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_2)
<class 'tuple'> (n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2**2*an_3*an_4*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*an_2**2*an_3*an_4*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*an_2**2*an_3*an_4*n**2)
<class 'tuple'> (an_1, C0*an_1**3*an_2**2*an_3*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_1**2*n**2, C0*an_1*n)
<class 'tuple'> (C1*an_3, an_1**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C2*n, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*n**2, C2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*an_4*n <class 'ProGED.model.Model'>
an_2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_30 + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_30 + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_30, C1*n**3, C2*n)
<class 'tuple'> (n, C0*an_30, C1*n**3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1)
<class 'tuple'> (n**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*an_2, C0*an_1*n)
<class 'tuple'> (C1*n, an_1**2*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
<class 'tuple'> (n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28 <class 'ProGED.model.Model'>
an_28 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n**2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n**2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3, C2*n**2, C3*n)
<class 'tuple'> (n, C0*an_1, C1*an_3, C2*n**2, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*n**2)
<class 'tuple'> (n**2, C1*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_2, an_1*an_4*n)
<class 'tuple'> (C1*n, C0*an_1*an_2, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n**2)
<class 'tuple'> (C0*an_1, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*n, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C2*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n**2)
<class 'tuple'> (C0*n, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (n**2, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + C1*an_46*n**2 + n <class 'ProGED.model.Model'>
C0*an_4 + C1*an_46*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4, C1*an_46*n**2)
<class 'tuple'> (n, C0*an_4, C1*an_46*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_2*an_3*n**2)
<class 'tuple'> (C0*an_1, an_1**2*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_18*n**3 <class 'ProGED.model.Model'>
an_1*an_18*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n**2 + an_32*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n**2 + an_32*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n**2, an_32*n)
<class 'tuple'> (C0*an_1**2, C1*n**2, an_32*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3**2 <class 'ProGED.model.Model'>
an_1*an_3**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46223555600045074


Equation discovery for all (chosen) OEIS sequences took 0.4622419090010226 secconds, i.e. 0.0077040318166837094 minutes or 0.00012840053027806183 hours.
5





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 5
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*an_6*n**4 + C1*an_1 + n**2, p = 2.922577442141657e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**4, p = 0.00024060330029790198, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_7 + C1*n**2 + an_1**2*an_3*n**2, p = 1.10128586163022e-12, parse trees = 1, valid = False
-> an_33*n, p = 6.557377049180372e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.00888120976462463, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + n, p = 2.554170220239162e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2, p = 0.00013547816601389555, parse trees = 1, valid = False
-> an_1**2*an_39, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_13*an_3*n**2 + an_1*an_2*an_48*n**3, p = 1.3409392718643128e-15, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n + n, p = 1.5904098919588144e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**3 + C4*n + n**2, p = 6.832199243883868e-12, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n**2, p = 1.0171283848427862e-06, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + an_1, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_28*n, p = 6.55737704919783e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n**4 + n, p = 0.00017280000000000024, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_2**2*an_3*n + C2*n**2 + C3*n + an_1, p = 6.378316803395648e-13, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_4*n + C1*n + n, p = 9.867540983606564e-06, parse trees = 1, valid = False
-> C0*an_1*an_20 + C1*an_1*n**3 + C2*n + an_1, p = 2.369017206995103e-10, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782576, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> C0*an_31 + n, p = 3.934426229508481e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_3*n + C2*an_2 + n, p = 7.432845123957049e-09, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + C1*an_1*an_2*n + C2*an_1*an_4 + C3*an_1*n + C4*an_3 + C5*n + an_1*n, p = 1.1143082419449509e-20, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0035316957807041147, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4, p = 3.361222304950635e-05, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*n + n, p = 2.6514885245901688e-06, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1**2*an_3*an_8, p = 6.832865883697497e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + n**2, p = 0.00011047868852459028, parse trees = 1, valid = False
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_6*n**4 + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_6*n**4 + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1**2*an_6*n**4)
<class 'tuple'> (n**2, C1*an_1, C0*an_1**2*an_6*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**4 <class 'ProGED.model.Model'>
an_1**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_7 + C1*n**2 + an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_7 + C1*n**2 + an_1**2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_7, C1*n**2, an_1**2*an_3*n**2)
<class 'tuple'> (C0*an_7, C1*n**2, an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_33*n <class 'ProGED.model.Model'>
an_33*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_33, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2)
<class 'tuple'> (an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**5 <class 'ProGED.model.Model'>
an_1*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*n**2, C4*n, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (n, C2*an_1, C3*n**2, C4*n, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_39 <class 'ProGED.model.Model'>
an_1**2*an_39 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_39, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1)
<class 'tuple'> (n**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_13*an_3*n**2 + an_1*an_2*an_48*n**3 <class 'ProGED.model.Model'>
C0*an_13*an_3*n**2 + an_1*an_2*an_48*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_13*an_3*n**2, an_1*an_2*an_48*n**3)
<class 'tuple'> (C0*an_13*an_3*n**2, an_1*an_2*an_48*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2**3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2**3*n)
<class 'tuple'> (n, C0*an_1*an_2**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**3 + C4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**3 + C4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*an_2, C3*n**3, C4*n, C0*an_1*n**2, C1*an_2*n)
<class 'tuple'> (n**2, C2*an_2, C3*n**3, C4*n, C0*an_1*n**2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*n)
<class 'tuple'> (n**2, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3, C1*n**2)
<class 'tuple'> (an_1, C0*an_3, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28*n <class 'ProGED.model.Model'>
an_28*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_28, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**4 + n <class 'ProGED.model.Model'>
C0*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**4)
<class 'tuple'> (n, C0*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_2**2*an_3*n + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_2**2*an_3*n + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n**2, C3*n, C0*an_1*an_3, C1*an_2**2*an_3*n)
<class 'tuple'> (an_1, C2*n**2, C3*n, C0*an_1*an_3, C1*an_2**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_4*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_4*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_4*n)
<class 'tuple'> (n, C1*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_20 + C1*an_1*n**3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_20 + C1*an_1*n**3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*an_20, C1*an_1*n**3)
<class 'tuple'> (an_1, C2*n, C0*an_1*an_20, C1*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_31 + n <class 'ProGED.model.Model'>
C0*an_31 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_31)
<class 'tuple'> (n, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_3*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_3*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*an_2, C1*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1**2, C2*an_2, C1*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3 + C1*an_1*an_2*n + C2*an_1*an_4 + C3*an_1*n + C4*an_3 + C5*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + C1*an_1*an_2*n + C2*an_1*an_4 + C3*an_1*n + C4*an_3 + C5*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C4*an_3, C5*n, an_1*n, C0*an_1**2*an_3, C2*an_1*an_4, C3*an_1*n, C1*an_1*an_2*n)
<class 'tuple'> (C4*an_3, C5*n, an_1*n, C0*an_1**2*an_3, C2*an_1*an_4, C3*an_1*n, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4)
<class 'tuple'> (C0*an_1, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**4 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**4)
<class 'tuple'> (n, C1*n, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3*an_8 <class 'ProGED.model.Model'>
an_1**2*an_3*an_8 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_8, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**2)
<class 'tuple'> (n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4926879510003346


Equation discovery for all (chosen) OEIS sequences took 0.4926933429997007 secconds, i.e. 0.008211555716661679 minutes or 0.0001368592619443613 hours.
6





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 6
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 45 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1**2, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1*an_2*n**4, p = 8.532416017199693e-07, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> C0*n + an_2*n**4, p = 9.60881311475412e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + an_1*n**2, p = 6.929375048579584e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2*n, p = 5.419126640555827e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1*an_5*n**3 + C1*an_3**2*n + an_1*an_2*n, p = 1.2820149340158448e-14, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n**2 + an_2*n, p = 0.0001668196721311477, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*n**2 + an_1**2*an_2*n**2, p = 1.642341962602342e-11, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + an_2*n, p = 4.942273758596541e-07, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_4 + C2*n + n, p = 7.00972856758936e-08, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_1*n**3 + n, p = 2.1676506562223315e-07, parse trees = 1, valid = False
-> C0*an_4*n + n**3, p = 3.2891803278688556e-06, parse trees = 1, valid = False
-> an_1**2*an_23*an_5, p = 7.489498118163847e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_3, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n)
<class 'tuple'> (an_1**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n**4 <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n**4)
<class 'tuple'> (C0*n, an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**4 <class 'ProGED.model.Model'>
C0*n + an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**4)
<class 'tuple'> (C0*n, an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (C1*an_1, an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_5*n**3 + C1*an_3**2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_5*n**3 + C1*an_3**2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3**2*n, an_1*an_2*n, C0*an_1*an_5*n**3)
<class 'tuple'> (C1*an_3**2*n, an_1*an_2*n, C0*an_1*an_5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_2*n)
<class 'tuple'> (C0*n**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n + C2*n**2 + an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*n**2 + an_1**2*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**2, C0*an_1**2*n, C1*an_1*n, an_1**2*an_2*n**2)
<class 'tuple'> (C2*n**2, C0*an_1**2*n, C1*an_1*n, an_1**2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (C1*n, an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*an_4 + C2*n + n <class 'ProGED.model.Model'>
C0*an_3*n + C1*an_4 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_4, C2*n, C0*an_3*n)
<class 'tuple'> (n, C1*an_4, C2*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n, C1*an_1*n**3)
<class 'tuple'> (n, C0*an_1**2*n, C1*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + n**3 <class 'ProGED.model.Model'>
C0*an_4*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_4*n)
<class 'tuple'> (n**3, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_23*an_5 <class 'ProGED.model.Model'>
an_1**2*an_23*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_23, an_5, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.42369211799996265


Equation discovery for all (chosen) OEIS sequences took 0.4236980349996884 secconds, i.e. 0.007061633916661473 minutes or 0.00011769389861102455 hours.
7





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 7
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*n + an_25, p = 3.9344262298971166e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2 + C1*an_4 + an_3, p = 5.639277687951366e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_11*an_3*n, p = 7.779788763474575e-07, parse trees = 1, valid = False
-> C0*an_1**3*n + n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_2 + an_1**2*an_3*n**3, p = 5.866848003123356e-12, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_4 + C3*an_5 + C4*n + an_1*an_3*n**2, p = 9.425096216643282e-15, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n**4, p = 3.34513990157767e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n**3 + an_11, p = 1.5770230268852472e-06, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_4 + an_2, p = 1.99162132167567e-08, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_2*n + an_1*an_4, p = 2.030139967662493e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + an_3, p = 5.017709852366504e-07, parse trees = 1, valid = False
-> an_34, p = 0.000327868852459017, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*an_7*n**2 + C2*an_2 + n, p = 2.71182291064588e-11, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_3**2, p = 1.613204042041698e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*an_2*n, p = 2.4711368792982695e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_1**2*n**3, p = 2.1840636927169738e-11, parse trees = 1, valid = False
-> C0*an_6*n**2 + n, p = 2.9122622950819697e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + C1*n + an_1, p = 5.017709852366503e-07, parse trees = 1, valid = False
-> C0*an_2**2*n**3 + C1*n**3 + C2*n + an_1, p = 4.744582808252684e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*an_38*n**3 + C1*an_1*n + C2*n + an_1, p = 1.82962341512789e-12, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1**2*n, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*an_21*n + C1*an_1 + C2*n + n, p = 7.107051418609135e-10, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n**2 + n, p = 2.6514885245901683e-06, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n**2, p = 1.3257442622950836e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_3*n, p = 2.508854926183251e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.5551733404998704e-05, parse trees = 1, valid = False
C0*n + an_25 <class 'ProGED.model.Model'>
C0*n + an_25 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_25, C0*n)
<class 'tuple'> (an_25, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*an_4 + an_3 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_4 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2, C1*an_4)
<class 'tuple'> (an_3, C0*an_2, C1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_11*an_3*n <class 'ProGED.model.Model'>
an_11*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*n + n <class 'ProGED.model.Model'>
C0*an_1**3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*n)
<class 'tuple'> (n, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_2 + an_1**2*an_3*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_2 + an_1**2*an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1**2*an_3*n**3, C0*an_1*an_3*n)
<class 'tuple'> (C1*an_2, an_1**2*an_3*n**3, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_4 + C3*an_5 + C4*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_4 + C3*an_5 + C4*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, C2*an_4, C3*an_5, C4*n, an_1*an_3*n**2)
<class 'tuple'> (C0*an_1**2, C1*an_1, C2*an_4, C3*an_5, C4*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n)
<class 'tuple'> (an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*an_3*n**4 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_3*n**4)
<class 'tuple'> (C0*n, an_1**2*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_11 <class 'ProGED.model.Model'>
C0*n**3 + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*n**3)
<class 'tuple'> (an_11, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_4 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_4 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n, C1*an_1*an_4)
<class 'tuple'> (an_2, C0*an_1**2*n, C1*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_1*an_4 <class 'ProGED.model.Model'>
C0*an_2*n + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_4, C0*an_2*n)
<class 'tuple'> (an_1*an_4, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_34 <class 'ProGED.model.Model'>
an_34 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*an_7*n**2 + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*an_7*n**2 + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_2, C0*an_1*n, C1*an_2*an_7*n**2)
<class 'tuple'> (n, C2*an_2, C0*an_1*n, C1*an_2*an_7*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3**2 <class 'ProGED.model.Model'>
an_1*an_3**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_2*n)
<class 'tuple'> (C0*an_2, C1*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + C2*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + C2*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n**2, C2*n, an_1**2*n**3)
<class 'tuple'> (C0*an_2, C1*n**2, C2*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_6*n**2 + n <class 'ProGED.model.Model'>
C0*an_6*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_6*n**2)
<class 'tuple'> (n, C0*an_6*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
<class 'tuple'> (C0*an_2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_3*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n**3 + C1*n**3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2**2*n**3 + C1*n**3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**3, C2*n, C0*an_2**2*n**3)
<class 'tuple'> (an_1, C1*n**3, C2*n, C0*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_38*n**3 + C1*an_1*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_38*n**3 + C1*an_1*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C1*an_1*n, C0*an_1*an_2*an_38*n**3)
<class 'tuple'> (an_1, C2*n, C1*an_1*n, C0*an_1*an_2*an_38*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_2, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_21*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_21*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*an_21*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*an_21*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1*n**3)
<class 'tuple'> (n, C1*n**2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n**2)
<class 'tuple'> (n**2, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n**2)
<class 'tuple'> (an_1*an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48415551299876824


Equation discovery for all (chosen) OEIS sequences took 0.48416608099978475 secconds, i.e. 0.008069434683329746 minutes or 0.00013449057805549577 hours.
8





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 8
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 49 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_33*n**4, p = 1.1591206664875131e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1*n**2 + an_3, p = 3.2080440039720275e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*n + an_2*n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1, p = 4.894488924396976e-10, parse trees = 1, valid = False
-> C0*an_1**4*an_3 + C1*an_2*n**2 + C2*an_2 + C3*n**2 + C4*n + n, p = 2.1140042263005248e-14, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + an_1*an_12*n, p = 3.048464423334404e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_4*n**3 + C4*an_7*n + C5*n**3 + C6*n + n, p = 4.35078384853393e-20, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**3, p = 8.524590163934434e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> C0*an_1**3*an_26*an_3*n**2 + n, p = 3.895621134264921e-11, parse trees = 1, valid = False
-> an_1**2*n**4, p = 2.3544638538027446e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**4 + n, p = 1.5696425692018298e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 8.66171881072447e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + n, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*an_38*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*an_1*an_49 + C1*n + n, p = 6.037086804622418e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 7.67917441547972e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_46, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> an_1**2*an_2**3*n**2, p = 3.389398130404033e-08, parse trees = 1, valid = False
-> C0*an_2**2*n + an_1, p = 2.059280732748558e-05, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_33*n**4 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_33*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_33*n**4, C0*an_1*n)
<class 'tuple'> (C1*n, an_33*n**4, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**2 + an_3 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1**2, C1*an_1*n**2)
<class 'tuple'> (an_3, C0*an_1**2, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**2)
<class 'tuple'> (C0*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (an_1, C2*an_1, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4*an_3 + C1*an_2*n**2 + C2*an_2 + C3*n**2 + C4*n + n <class 'ProGED.model.Model'>
C0*an_1**4*an_3 + C1*an_2*n**2 + C2*an_2 + C3*n**2 + C4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_2, C3*n**2, C4*n, C0*an_1**4*an_3, C1*an_2*n**2)
<class 'tuple'> (n, C2*an_2, C3*n**2, C4*n, C0*an_1**4*an_3, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + an_1*an_12*n <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + an_1*an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_12*n, C0*an_1*an_3*n**2)
<class 'tuple'> (an_1*an_12*n, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_4*n**3 + C4*an_7*n + C5*n**3 + C6*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_4*n**3 + C4*an_7*n + C5*n**3 + C6*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C5*n**3, C6*n, C0*an_1*n, C2*an_2*n, C3*an_4*n**3, C4*an_7*n)
<class 'tuple'> (n, C1*an_1, C5*n**3, C6*n, C0*an_1*n, C2*an_2*n, C3*an_4*n**3, C4*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**4 <class 'ProGED.model.Model'>
C0*an_2 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_2)
<class 'tuple'> (n**4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_26*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_26*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*an_26*an_3*n**2)
<class 'tuple'> (n, C0*an_1**3*an_26*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**4 <class 'ProGED.model.Model'>
an_1**2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
<class 'tuple'> (n, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_3)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**4 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3*n**4)
<class 'tuple'> (n, C0*an_1, C1*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**3)
<class 'tuple'> (n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_38*n <class 'ProGED.model.Model'>
an_1*an_38*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_38, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_49 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_49 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_49)
<class 'tuple'> (n, C1*n, C0*an_1*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_46 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_46 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_46)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_46)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2**3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2**3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_2**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2**2*n)
<class 'tuple'> (an_1, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4760842089999642


Equation discovery for all (chosen) OEIS sequences took 0.4760899060001975 secconds, i.e. 0.007934831766669958 minutes or 0.00013224719611116599 hours.
9





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 9
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*n + n**4, p = 0.00017280000000000022, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_31, p = 0.00032786885245904, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1**2*n, p = 0.008829239451760288, parse trees = 3, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*an_2, p = 8.719299087718842e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_3*n**2, p = 5.232141897339435e-08, parse trees = 1, valid = False
-> C0*an_3 + an_2, p = 0.00024688703753471296, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**4, p = 8.418443247085303e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*n + an_1**3, p = 7.920244804216526e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3 + an_2*n, p = 4.4852361562339704e-08, parse trees = 1, valid = False
-> an_1*an_38, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1 + n, p = 2.5088549261832513e-06, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*an_12 + an_2, p = 9.71961092765298e-07, parse trees = 1, valid = False
-> C0*an_2*an_4*n + an_1, p = 2.030139967662493e-06, parse trees = 1, valid = False
-> C0*an_2*an_24*n + an_1*n, p = 3.8854353460888555e-08, parse trees = 1, valid = False
-> C0*n + an_1*an_28*n**2, p = 2.0123622682128438e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130316e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + an_1, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> an_33, p = 0.0003278688524590185, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*an_42*n, p = 1.645150771267707e-08, parse trees = 1, valid = False
-> C0*an_36 + C1*n + an_1**4*n**2, p = 2.524362494928811e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2*n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_28*n, p = 6.55737704919783e-05, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_43*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_1**3*an_4, p = 7.163260649894799e-06, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 2.7095633202779127e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_2*n, p = 3.686003719430268e-08, parse trees = 1, valid = False
C0*n + n**4 <class 'ProGED.model.Model'>
C0*n + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*n)
<class 'tuple'> (n**4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_31 <class 'ProGED.model.Model'>
an_31 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_2, C0*an_1*n)
<class 'tuple'> (an_1**2*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n**2, C0*an_1*n**4)
<class 'tuple'> (an_3*n**2, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_3)
<class 'tuple'> (an_2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n**4 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C1*n, C0*an_1*an_2*an_3)
<class 'tuple'> (an_1**3, C1*n, C0*an_1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_2*n, C0*an_1*an_3)
<class 'tuple'> (C1*an_3, an_2*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_38 <class 'ProGED.model.Model'>
an_1*an_38 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_38)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_3*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n)
<class 'tuple'> (C0*n, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_12 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_12 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_12)
<class 'tuple'> (an_2, C0*an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_4*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_4*n)
<class 'tuple'> (an_1, C0*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_24*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*an_24*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*an_24*n)
<class 'tuple'> (an_1*n, C0*an_2*an_24*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_28*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_28*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_28*n**2)
<class 'tuple'> (C0*n, an_1*an_28*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_33 <class 'ProGED.model.Model'>
an_33 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*an_42*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*an_42*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2*n, an_1*an_42*n)
<class 'tuple'> (C0*an_1**2*n, an_1*an_42*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_36 + C1*n + an_1**4*n**2 <class 'ProGED.model.Model'>
C0*an_36 + C1*n + an_1**4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_36, C1*n, an_1**4*n**2)
<class 'tuple'> (C0*an_36, C1*n, an_1**4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28*n <class 'ProGED.model.Model'>
an_28*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_28, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_43*n <class 'ProGED.model.Model'>
an_43*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_43, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_4 <class 'ProGED.model.Model'>
an_1**3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n, C0*an_1*n**2)
<class 'tuple'> (C1*n, an_2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.43252602299980936


Equation discovery for all (chosen) OEIS sequences took 0.43253414999890083 secconds, i.e. 0.007208902499981681 minutes or 0.00012014837499969467 hours.
10





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 10
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 55 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n**2 + C2*n + an_1, p = 6.021251822839806e-08, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n, p = 1.8208265512267567e-05, parse trees = 2, valid = False
-> C0*an_3 + C1*n + an_1*n, p = 3.390427949475952e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.014008697704918038, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1*an_2*n + C2*an_12*n + an_1*n, p = 5.852422501542422e-12, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + n**2, p = 3.013389764715634e-09, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1, p = 2.0907124384860418e-05, parse trees = 1, valid = False
-> C0*n + an_10, p = 3.96153068852459e-05, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649262, parse trees = 1, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n, p = 0.00013637878060278186, parse trees = 2, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_30 + an_1, p = 1.48063569414129e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1**2*n, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + C2*an_2*n**2 + C3*n + an_1, p = 1.3963685904256059e-11, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.004838400000000003, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*an_7*n + C3*n + n, p = 3.568166191681915e-11, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_2 + C2*an_46 + an_1**3*an_13*an_2*n**2, p = 1.3455441803338883e-18, parse trees = 1, valid = False
-> C0*an_1**2 + an_47*n**2, p = 1.2865922698375647e-07, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_1 + an_1*n, p = 2.0393703851654053e-08, parse trees = 1, valid = False
-> C0*an_44 + an_1*an_3, p = 2.9782228468462124e-07, parse trees = 1, valid = False
-> C0*an_1*an_48 + an_3*n**2, p = 1.1912891387384858e-08, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1*an_4*n**2, p = 2.076733343969504e-09, parse trees = 1, valid = False
-> an_2*an_5*n, p = 9.710890143032045e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n + n, p = 6.102770309056715e-07, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + an_3*n, p = 1.5696425692018295e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1*n**2 + C2*n + an_1**2*an_17*n, p = 3.098763088703038e-14, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**2, p = 2.104610811771325e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1*an_41*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*n, C1*an_3*n**2)
<class 'tuple'> (an_1, C2*n, C0*an_1*n, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**4)
<class 'tuple'> (an_1, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1, C2*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, C1*n, an_1*n)
<class 'tuple'> (C0*an_3, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2*n + C2*an_12*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2*n + C2*an_12*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n, C2*an_12*n, C1*an_1*an_2*n)
<class 'tuple'> (C0*an_1**2, an_1*n, C2*an_12*n, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*an_1, C3*n**2, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (n**2, C2*an_1, C3*n**2, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3*n)
<class 'tuple'> (an_1, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_10 <class 'ProGED.model.Model'>
C0*n + an_10 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_10, C0*n)
<class 'tuple'> (an_10, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_22 <class 'ProGED.model.Model'>
an_22 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n)
<class 'tuple'> (C0*an_1, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_30 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_30 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_30)
<class 'tuple'> (an_1, C0*an_1, C1*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*an_2)
<class 'tuple'> (an_1**2*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**3 + C2*an_2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**3 + C2*an_2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C3*n, C1*an_2*n**3, C2*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1, C3*n, C1*an_2*n**3, C2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n**2)
<class 'tuple'> (C0*an_1, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n + C2*an_7*n + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*an_7*n + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C3*n, C0*an_1**2*n, C1*an_1*n, C2*an_7*n)
<class 'tuple'> (n, C3*n, C0*an_1**2*n, C1*an_1*n, C2*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**4 <class 'ProGED.model.Model'>
C0*an_2 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_2)
<class 'tuple'> (n**4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_2 + C2*an_46 + an_1**3*an_13*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_2 + C2*an_46 + an_1**3*an_13*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_46, C0*an_1**2*n, C1*an_1*an_2, an_1**3*an_13*an_2*n**2)
<class 'tuple'> (C2*an_46, C0*an_1**2*n, C1*an_1*an_2, an_1**3*an_13*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_47*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + an_47*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_47*n**2)
<class 'tuple'> (C0*an_1**2, an_47*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*an_1, an_1*n, C1*an_1*n)
<class 'tuple'> (C0*an_1**2, C2*an_1, an_1*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_44 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_44 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_44, an_1*an_3)
<class 'tuple'> (C0*an_44, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_48 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_48 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n**2, C0*an_1*an_48)
<class 'tuple'> (an_3*n**2, C0*an_1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1*an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_4*n**2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1*an_4*n**2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_5*n <class 'ProGED.model.Model'>
an_2*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C0*an_1*n)
<class 'tuple'> (n, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_3*n, C0*an_1*n**3)
<class 'tuple'> (C1*n, an_3*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1*n**2 + C2*n + an_1**2*an_17*n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1*n**2 + C2*n + an_1**2*an_17*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, C0*an_1**2*n**3, C1*an_1*n**2, an_1**2*an_17*n)
<class 'tuple'> (C2*n, C0*an_1**2*n**3, C1*an_1*n**2, an_1**2*an_17*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_41*n <class 'ProGED.model.Model'>
an_1*an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5179697100011253


Equation discovery for all (chosen) OEIS sequences took 0.5179759689999628 secconds, i.e. 0.008632932816666047 minutes or 0.00014388221361110077 hours.
11





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 11
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> C0*n + an_1**3*an_2*n**2, p = 4.1852635621050477e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + an_1, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + C2*n + n, p = 4.266208008599842e-07, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_38, p = 6.037086804622418e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2*an_4*n, p = 1.0383666719847516e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1 + C2*an_2 + an_1, p = 1.2121255125222267e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**2 + an_1**2, p = 0.0003531695780704115, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2*n**2 + an_1*an_2*n, p = 8.237122930994234e-07, parse trees = 1, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_4, p = 0.0002628648212846009, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_1**3*an_2*n, p = 1.4532165146198072e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1**2*n, p = 1.6040220019860132e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1*n**2, p = 2.3566253288160733e-08, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_21 + C1*an_3 + an_33, p = 5.090979287507186e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n + an_3, p = 1.5153197844753548e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + C2*n + n**2, p = 1.5908931147541004e-06, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n**2, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_3*an_4, p = 4.056555884021618e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_1, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*an_2*an_3 + n**2, p = 9.87548150138852e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
<class 'tuple'> (C0*an_1, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_35 <class 'ProGED.model.Model'>
an_35 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3*an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**3*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*an_2*n**2)
<class 'tuple'> (C0*n, an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2**2)
<class 'tuple'> (an_1, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + C1*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*an_3, C2*n)
<class 'tuple'> (n, C0*an_2, C1*an_3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_38 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_38 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_38, C1*n, C0*an_1*n)
<class 'tuple'> (an_38, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*an_2*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_2*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n**2, an_1*an_2*an_4*n)
<class 'tuple'> (C0*an_1*n**2, an_1*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1 + C2*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1 + C2*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_2, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n**2)
<class 'tuple'> (an_1**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n**2, an_1*an_2*n)
<class 'tuple'> (C0*an_2*n**2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_4 <class 'ProGED.model.Model'>
C0*an_1 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1)
<class 'tuple'> (an_4, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2*n <class 'ProGED.model.Model'>
an_1**3*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*an_3, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*n, an_1*n**2, C1*an_2*n)
<class 'tuple'> (C0*an_1, C2*n, an_1*n**2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_21 + C1*an_3 + an_33 <class 'ProGED.model.Model'>
C0*an_21 + C1*an_3 + an_33 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_33, C0*an_21, C1*an_3)
<class 'tuple'> (an_33, C0*an_21, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_3, C1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**3 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n**3, C2*n)
<class 'tuple'> (n**2, C0*an_1, C1*n**3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_3)
<class 'tuple'> (n**2, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*an_4 <class 'ProGED.model.Model'>
an_3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2)
<class 'tuple'> (an_1, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_2*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2*an_3)
<class 'tuple'> (n**2, C0*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4517647329994361


Equation discovery for all (chosen) OEIS sequences took 0.4517707420000079 secconds, i.e. 0.007529512366666798 minutes or 0.00012549187277777996 hours.
12





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 12
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*an_4, p = 5.602037174917727e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3 + an_3, p = 7.569649735734121e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + C2*an_3*n + an_2, p = 2.2446768750411597e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_2**2, p = 4.55013269316036e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_49 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_3*n**2 + n, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1**3*n**3, p = 6.421978187098895e-10, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00022729796767130317, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n**2, p = 2.6514885245901683e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_10, p = 0.00033012755737704913, parse trees = 1, valid = False
-> C0*an_1*an_5*n + n**3, p = 1.543481859715132e-07, parse trees = 1, valid = False
-> C0*an_2 + an_3, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2 + an_2, p = 5.084097195606045e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 3.2514759843334958e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_2 + an_1, p = 2.0926317810525234e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n**2 + an_4*n, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> an_18*n, p = 6.557380013052922e-05, parse trees = 1, valid = False
-> an_26, p = 0.00032786885246873936, parse trees = 1, valid = False
-> C0*an_9 + C1*n + an_1, p = 3.7054316684762177e-07, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_37, p = 3.03860969273493e-07, parse trees = 1, valid = False
-> C0*an_2 + an_26, p = 7.596524232062596e-06, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_3 + C1*an_4 + C2*n + an_1, p = 2.688977843960509e-08, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*n + C2*n**2 + C3*n + n**2, p = 3.695666692575781e-11, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2**2, p = 1.316589320937603e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_2*n, p = 3.220926274299027e-05, parse trees = 1, valid = False
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_4 <class 'ProGED.model.Model'>
an_1**2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_3 <class 'ProGED.model.Model'>
C0*an_3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_3)
<class 'tuple'> (an_3, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2*n + C2*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n + C2*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_2*n, C2*an_3*n)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_2*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C1*n, C0*an_1**2*n)
<class 'tuple'> (an_2**2, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_49 + n <class 'ProGED.model.Model'>
C0*an_49 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_49)
<class 'tuple'> (n, C0*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n**2)
<class 'tuple'> (n, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1**3*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1**3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*n, an_1**3*n**3, C1*an_2*n)
<class 'tuple'> (C0*an_1, C2*n, an_1**3*n**3, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n**3)
<class 'tuple'> (n**2, C1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_10 <class 'ProGED.model.Model'>
an_10 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_5*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_5*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_5*n)
<class 'tuple'> (n**3, C0*an_1*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2)
<class 'tuple'> (an_3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_2**2)
<class 'tuple'> (an_2, C0*an_1**2*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1**2*n**3)
<class 'tuple'> (an_1, C1*an_2, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_4*n <class 'ProGED.model.Model'>
C0*n**2 + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_4*n)
<class 'tuple'> (C0*n**2, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_18*n <class 'ProGED.model.Model'>
an_18*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_18, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_26 <class 'ProGED.model.Model'>
an_26 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_9 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_9 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_9, C1*n)
<class 'tuple'> (an_1, C0*an_9, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_37 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_37, C0*an_2*n**2)
<class 'tuple'> (an_37, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_26 <class 'ProGED.model.Model'>
C0*an_2 + an_26 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_26, C0*an_2)
<class 'tuple'> (an_26, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*an_4 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_3 + C1*an_4 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3, C1*an_4, C2*n)
<class 'tuple'> (an_1, C0*an_3, C1*an_4, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*an_1*n + C2*n**2 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*an_1*n + C2*n**2 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*n**2, C3*n, C1*an_1*n, C0*an_1**2*an_3*n)
<class 'tuple'> (n**2, C2*n**2, C3*n, C1*an_1*n, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20 <class 'ProGED.model.Model'>
an_20 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2**2)
<class 'tuple'> (C0*an_1, an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_2*n)
<class 'tuple'> (an_2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.44514764300038223


Equation discovery for all (chosen) OEIS sequences took 0.4451533589999599 secconds, i.e. 0.007419222649999332 minutes or 0.00012365371083332218 hours.
13





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 13
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0018413114754098378, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + an_3*n, p = 4.181424876972086e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 3.0513851545283566e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n**2 + n, p = 3.2730907344667685e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.0007063391561408231, parse trees = 2, valid = False
-> an_1**3*n**5, p = 6.02125182283981e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2**2, p = 3.976024729897034e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n**2, p = 7.954465573770502e-06, parse trees = 1, valid = False
-> an_1*an_3*an_5, p = 1.9035807696092038e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*an_13*n**5 + C1*an_2**2 + an_2, p = 2.781561906215525e-13, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_2*n, p = 4.003672131147547e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> C0*an_1**2*n + C1*n**2 + n, p = 8.476069873689882e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n, p = 4.181424876972086e-06, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*an_43, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + C2*n + an_2, p = 1.1783126644080357e-07, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_46, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_11*an_4*n**2 + C1*an_2*n + an_1, p = 1.7786541537799008e-11, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1**3*n, p = 4.459707074374232e-08, parse trees = 1, valid = False
-> C0*n + an_49, p = 4.721311475409837e-06, parse trees = 1, valid = False
-> an_1**2*an_4, p = 5.602037174917727e-05, parse trees = 1, valid = False
-> an_1**3*n**4, p = 3.010625911419904e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_1, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**4*n**2, p = 7.383760297666767e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_12, p = 3.218474939251128e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1, p = 0.0001635044342918571, parse trees = 1, valid = False
-> an_1*an_14*an_3*n**3, p = 3.971185380756867e-09, parse trees = 1, valid = False
-> C0*n + an_4*n, p = 8.222950819672135e-05, parse trees = 1, valid = False
-> C0*n + an_3*n**2, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1 + an_1**2*n, p = 8.553864388553853e-08, parse trees = 1, valid = False
-> an_49*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499343, parse trees = 1, valid = False
-> C0*n + an_2*an_6*n, p = 5.622947236405988e-07, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_1**2*n)
<class 'tuple'> (an_3*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1)
<class 'tuple'> (n**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1**2*an_2*n)
<class 'tuple'> (n, C1*n**2, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**5 <class 'ProGED.model.Model'>
an_1**3*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_2**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1*an_2)
<class 'tuple'> (an_2**2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (n**2, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*an_5 <class 'ProGED.model.Model'>
an_1*an_3*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n)
<class 'tuple'> (an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_13*n**5 + C1*an_2**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_13*n**5 + C1*an_2**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_2**2, C0*an_1*an_13*n**5)
<class 'tuple'> (an_2, C1*an_2**2, C0*an_1*an_13*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n**2 <class 'ProGED.model.Model'>
C0*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**3)
<class 'tuple'> (n**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, C1*n, an_2*n)
<class 'tuple'> (C0*n**3, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1**2*n)
<class 'tuple'> (n, C1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*n + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_3*n)
<class 'tuple'> (C0*n, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_43 <class 'ProGED.model.Model'>
an_1*an_43 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_43)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*n**2, C2*n)
<class 'tuple'> (an_2, C0*an_1**2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_46 <class 'ProGED.model.Model'>
an_1*an_46 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_46)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_11*an_4*n**2 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_11*an_4*n**2 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2*n, C0*an_11*an_4*n**2)
<class 'tuple'> (an_1, C1*an_2*n, C0*an_11*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1**3*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_49 <class 'ProGED.model.Model'>
C0*n + an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_49, C0*n)
<class 'tuple'> (an_49, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4 <class 'ProGED.model.Model'>
an_1**2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*n**4 <class 'ProGED.model.Model'>
an_1**3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**4*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**4*n**2)
<class 'tuple'> (C0*an_1, an_1**4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_12 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_12)
<class 'tuple'> (C0*an_1, an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n)
<class 'tuple'> (an_1, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_14*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_14*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_14, an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n**2)
<class 'tuple'> (C0*n, an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**2*n, C0*an_1**2*an_2)
<class 'tuple'> (C1*an_1, an_1**2*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_49*n <class 'ProGED.model.Model'>
an_49*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_49, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*an_6*n <class 'ProGED.model.Model'>
C0*n + an_2*an_6*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_6*n)
<class 'tuple'> (C0*n, an_2*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.483423663999929


Equation discovery for all (chosen) OEIS sequences took 0.48343029399984516 secconds, i.e. 0.008057171566664086 minutes or 0.00013428619277773476 hours.
14





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 14
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 48 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*n + n, p = 5.085641924213929e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*an_5*n, p = 9.710890143032045e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_45, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1*an_3*n**2 + C2*n + an_1**2*an_2*n**4, p = 4.697787169556725e-16, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8 + C2*n + n**3, p = 1.5598069473797382e-08, parse trees = 1, valid = False
-> an_32*an_46*n, p = 2.3888440980621025e-08, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> an_43, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_48 + an_1, p = 2.515452835259339e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + an_2*an_45, p = 1.1190053793048777e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + C2*an_2*an_4*n + C3*n + n**3, p = 1.3857599021792587e-13, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_1*n, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_3 + n**2, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n**2, p = 6.399312012899763e-05, parse trees = 1, valid = False
-> an_1*an_6*n**3, p = 6.206460628863215e-07, parse trees = 1, valid = False
-> C0*an_4 + an_1, p = 0.0002628648212846009, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_11, p = 0.00032854646393442623, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.5551733404998704e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + n**4 <class 'ProGED.model.Model'>
C0*an_2 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_2)
<class 'tuple'> (n**4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*an_5*n <class 'ProGED.model.Model'>
an_2*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_45 <class 'ProGED.model.Model'>
an_45 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_1*an_3*n**2 + C2*n + an_1**2*an_2*n**4 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_1*an_3*n**2 + C2*n + an_1**2*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1**2*an_2*n**4, C0*an_1*an_2*n**2, C1*an_1*an_3*n**2)
<class 'tuple'> (C2*n, an_1**2*an_2*n**4, C0*an_1*an_2*n**2, C1*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_8 + C2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_8 + C2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*an_8, C2*n)
<class 'tuple'> (n**3, C0*an_1, C1*an_8, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_32*an_46*n <class 'ProGED.model.Model'>
an_32*an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_43 <class 'ProGED.model.Model'>
an_43 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_48 + an_1 <class 'ProGED.model.Model'>
C0*an_48 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_48)
<class 'tuple'> (an_1, C0*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + an_2*an_45 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + an_2*an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*an_45, C0*an_1*n**3)
<class 'tuple'> (C1*n, an_2*an_45, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n + C2*an_2*an_4*n + C3*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n + C2*an_2*an_4*n + C3*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C3*n, C1*an_1*n, C0*an_1*an_2*n, C2*an_2*an_4*n)
<class 'tuple'> (n**3, C3*n, C1*an_1*n, C0*an_1*an_2*n, C2*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, C1*n, an_1*n)
<class 'tuple'> (C0*an_3, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*n)
<class 'tuple'> (C0*n**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_3)
<class 'tuple'> (n**2, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2)
<class 'tuple'> (n**2, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_6*n**3 <class 'ProGED.model.Model'>
an_1*an_6*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_6, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + an_1 <class 'ProGED.model.Model'>
C0*an_4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_4)
<class 'tuple'> (an_1, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_11 <class 'ProGED.model.Model'>
an_11 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.41399322300094354


Equation discovery for all (chosen) OEIS sequences took 0.41400041800079634 secconds, i.e. 0.006900006966679939 minutes or 0.00011500011611133232 hours.
15





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 15
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 64 models
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_3*n**2, p = 6.9690414616201425e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + an_1, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_1*an_18 + C1*an_1*an_2*n + C2*an_3 + an_1*an_3, p = 1.6029646598041878e-13, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + an_1, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_16 + C1*an_2*n + an_2, p = 4.501182676936089e-09, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_2 + an_3*n, p = 4.93774075069426e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + n, p = 4.607504649287831e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_4*n**2 + an_1*n, p = 1.910202839971948e-09, parse trees = 1, valid = False
-> C0*an_3*an_40*n + n, p = 9.316491982442e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_2*n**2 + n**3, p = 6.672786885245911e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_3**2*n**2, p = 3.871689700900078e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_2 + an_1, p = 3.1598143702502477e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + n, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + C2*n + an_4*n, p = 9.144999731255053e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 2.9934900209863806e-08, parse trees = 1, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1**4*n**3, p = 1.924826402383217e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 8.182726836166917e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1*an_41 + C1*an_9 + an_1, p = 7.192005089759448e-10, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2*an_4*n + an_2*n**3, p = 4.904725619879759e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1**2*n, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 1.0394062572869364e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + an_1*n, p = 6.277895343157568e-07, parse trees = 1, valid = False
-> C0*an_4*n + an_1, p = 5.257296425692019e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_2*n**2 + an_1, p = 2.092631781052523e-07, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> an_43*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_19, p = 0.0003278688969171053, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1**4*n + C1*an_1 + C2*an_2*n**2 + n, p = 4.1058549065058525e-10, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_3**2, p = 0.000126160828928902, parse trees = 1, valid = False
-> an_1*an_3*an_4, p = 5.187071458257153e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000007e-05, parse trees = 1, valid = False
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_18 + C1*an_1*an_2*n + C2*an_3 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1*an_18 + C1*an_1*an_2*n + C2*an_3 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_3, an_1*an_3, C0*an_1*an_18, C1*an_1*an_2*n)
<class 'tuple'> (C2*an_3, an_1*an_3, C0*an_1*an_18, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_16 + C1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_16 + C1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_16, C1*an_2*n)
<class 'tuple'> (an_2, C0*an_1*an_16, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n)
<class 'tuple'> (an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_4*n)
<class 'tuple'> (an_1*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_3*n <class 'ProGED.model.Model'>
C0*an_2 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_3*n)
<class 'tuple'> (C0*an_2, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_2, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_4*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_4*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_3, C1*an_4*n**2)
<class 'tuple'> (an_1*n, C0*an_1*an_3, C1*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*an_40*n + n <class 'ProGED.model.Model'>
C0*an_3*an_40*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*an_40*n)
<class 'tuple'> (n, C0*an_3*an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n**2 + n**3 <class 'ProGED.model.Model'>
C0*an_2*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_2*n**2)
<class 'tuple'> (n**3, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_3**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_3**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_3**2*n**2)
<class 'tuple'> (C0*an_1, an_3**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*n)
<class 'tuple'> (an_3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C1*an_2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**3 + C2*n + an_4*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + C2*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n**3, C2*n, an_4*n)
<class 'tuple'> (C0*an_2, C1*n**3, C2*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n)
<class 'tuple'> (an_1, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4*n**3 <class 'ProGED.model.Model'>
an_1**4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**4, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_41 + C1*an_9 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_41 + C1*an_9 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_9, C0*an_1*an_41)
<class 'tuple'> (an_1, C1*an_9, C0*an_1*an_41)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_4*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_2*an_4*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**3, C0*an_2*an_4*n)
<class 'tuple'> (an_2*n**3, C0*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n**2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1)
<class 'tuple'> (n, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_2, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*an_2, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + an_1 <class 'ProGED.model.Model'>
C0*an_4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_4*n)
<class 'tuple'> (an_1, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n, C1*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_43*n <class 'ProGED.model.Model'>
an_43*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_43, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_19 <class 'ProGED.model.Model'>
an_19 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4*n + C1*an_1 + C2*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**4*n + C1*an_1 + C2*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**4*n, C2*an_2*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1**4*n, C2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3**2 <class 'ProGED.model.Model'>
an_3**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_3, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_3*an_4 <class 'ProGED.model.Model'>
an_1*an_3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5101031670001248


Equation discovery for all (chosen) OEIS sequences took 0.5101111469994066 secconds, i.e. 0.00850185244999011 minutes or 0.00014169754083316851 hours.
16





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 16
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 62 models
-> C0*n + an_1*an_3*n**2, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*an_13*an_2, p = 1.906212221918712e-09, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_2*n + n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_36*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00035551733404998696, parse trees = 2, valid = False
-> C0*an_1 + C1*an_3 + n, p = 7.526564778549751e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + an_1**4*an_2*n**2, p = 2.1000438210325035e-12, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_2, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_1**2*an_44 + C1*an_2*n + an_11*n**3, p = 4.352812738091847e-14, parse trees = 1, valid = False
-> C0*an_1**3*n + n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_4*n**2, p = 0.0001370491803278689, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2 + n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + C2*n**3 + C3*n + n, p = 3.3935404734951456e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2**3 + C1*n + n**2, p = 1.791046216790542e-08, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1*n, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1*an_38 + C1*an_34 + an_1, p = 7.030558851571401e-10, parse trees = 1, valid = False
-> an_45, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + an_1*an_4*an_47*n**2, p = 3.203350099818587e-13, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 1.2441600000000013e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*an_21*n**2, p = 3.885435392225463e-08, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_3 + an_1**2, p = 0.00010453562192430208, parse trees = 1, valid = False
-> C0*an_1*an_19 + n, p = 5.030906352695258e-06, parse trees = 1, valid = False
-> C0*an_44 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_41 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n**2 + an_2*n, p = 4.942273758596542e-07, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_1, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 0.0003199656006449881, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.272979676713032e-05, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*an_14*an_16*n**2 + an_2*an_4, p = 5.388869839960205e-14, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1*an_41*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*n**3 + an_1*n**2, p = 2.2095737704918068e-05, parse trees = 1, valid = False
C0*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n**2)
<class 'tuple'> (C0*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*an_13*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*an_13*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*an_13*an_2)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*an_13*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2*n)
<class 'tuple'> (n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_36*n <class 'ProGED.model.Model'>
an_1*an_36*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_36, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*n + an_1**4*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*n + an_1**4*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, C0*an_1*n**3, an_1**4*an_2*n**2)
<class 'tuple'> (C1*an_1, C2*n, C0*an_1*n**3, an_1**4*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
<class 'tuple'> (n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_44 + C1*an_2*n + an_11*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*an_44 + C1*an_2*n + an_11*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11*n**3, C0*an_1**2*an_44, C1*an_2*n)
<class 'tuple'> (an_11*n**3, C0*an_1**2*an_44, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**3*n)
<class 'tuple'> (n**2, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n**2 <class 'ProGED.model.Model'>
an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + C2*n**3 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + C2*n**3 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_2, C2*n**3, C3*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_2, C2*n**3, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**3 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2**3 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2**3, C1*n)
<class 'tuple'> (n**2, C0*an_2**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_38 + C1*an_34 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_38 + C1*an_34 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_34, C0*an_1*an_38)
<class 'tuple'> (an_1, C1*an_34, C0*an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_45 <class 'ProGED.model.Model'>
an_45 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + an_1*an_4*an_47*n**2 <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + an_1*an_4*an_47*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3*n**2, an_1*an_4*an_47*n**2)
<class 'tuple'> (C0*an_1**3*n**2, an_1*an_4*an_47*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*an_21*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2*an_21*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*an_21*n**2)
<class 'tuple'> (C0*an_1, an_2*an_21*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_3)
<class 'tuple'> (an_1**2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_19 + n <class 'ProGED.model.Model'>
C0*an_1*an_19 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_19)
<class 'tuple'> (n, C0*an_1*an_19)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_44 + an_1*n <class 'ProGED.model.Model'>
C0*an_44 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_44, an_1*n)
<class 'tuple'> (C0*an_44, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_41 + an_1*n <class 'ProGED.model.Model'>
C0*an_41 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_41, an_1*n)
<class 'tuple'> (C0*an_41, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_2*n, C0*an_1*an_2)
<class 'tuple'> (C1*n**2, an_2*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3, C1*n)
<class 'tuple'> (an_1, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_14*an_16*n**2 + an_2*an_4 <class 'ProGED.model.Model'>
C0*an_1*an_14*an_16*n**2 + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*an_4, C0*an_1*an_14*an_16*n**2)
<class 'tuple'> (an_2*an_4, C0*an_1*an_14*an_16*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_41*n <class 'ProGED.model.Model'>
an_1*an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*n**2)
<class 'tuple'> (C0*n**3, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5032639290002408


Equation discovery for all (chosen) OEIS sequences took 0.503269431001172 secconds, i.e. 0.008387823850019535 minutes or 0.00013979706416699224 hours.
17





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 17
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> C0*an_2**2*n + an_1**2, p = 2.633178641875206e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n**2 + n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*an_1*n + n, p = 8.066933531881532e-07, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_4*n, p = 0.0013704918032786885, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**2 + an_1, p = 5.266357283750414e-07, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_12, p = 3.936865630819672e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1*n, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_31, p = 0.00032786885245904, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + C1*n + n, p = 8.066933531881529e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n + n, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> an_1*an_4*n, p = 8.7621607094867e-05, parse trees = 1, valid = False
-> C0*an_3*an_37 + an_1*n**2, p = 1.1912891387384858e-08, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099035e-05, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_47*n + an_2*n, p = 3.03860969273493e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_3*n + C2*n**2 + C3*n + an_1*an_11, p = 5.092790903567458e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*n + n**3, p = 0.00011047868852459031, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*an_7, p = 5.262117710292933e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1 + C2*n + an_1**2*an_3, p = 6.076515685857927e-10, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_28 + n, p = 1.1656306034456906e-07, parse trees = 1, valid = False
-> C0*n + an_29, p = 3.934426229511348e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_2 + an_1, p = 2.006868183468402e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_2*an_47, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n**2 + C2*n + an_1**2*n, p = 1.8993303411844372e-10, parse trees = 1, valid = False
C0*an_2**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2**2*n)
<class 'tuple'> (an_1**2, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n, C1*an_2*n**2)
<class 'tuple'> (n, C0*an_1*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_4 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_4, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*an_4, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2**2*n**2)
<class 'tuple'> (an_1, C0*an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_24 <class 'ProGED.model.Model'>
an_1*an_24 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_12 <class 'ProGED.model.Model'>
C0*n + an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_12, C0*n)
<class 'tuple'> (an_12, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_31 <class 'ProGED.model.Model'>
an_31 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_4 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_4)
<class 'tuple'> (n, C1*n, C0*an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_2)
<class 'tuple'> (n, C1*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4*n <class 'ProGED.model.Model'>
an_1*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*an_37 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_3*an_37 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_3*an_37)
<class 'tuple'> (an_1*n**2, C0*an_3*an_37)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_47*n + an_2*n <class 'ProGED.model.Model'>
C0*an_47*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_47*n)
<class 'tuple'> (an_2*n, C0*an_47*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_3*n + C2*n**2 + C3*n + an_1*an_11 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_3*n + C2*n**2 + C3*n + an_1*an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**2, C3*n, an_1*an_11, C0*an_1*an_2, C1*an_3*n)
<class 'tuple'> (C2*n**2, C3*n, an_1*an_11, C0*an_1*an_2, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*n)
<class 'tuple'> (n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_7 <class 'ProGED.model.Model'>
an_1*an_7 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_7)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_1 + C2*n + an_1**2*an_3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1 + C2*n + an_1**2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1**2*an_3, C0*an_1**2*an_2)
<class 'tuple'> (C1*an_1, C2*n, an_1**2*an_3, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_28 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_28 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_28, C0*an_1*an_2)
<class 'tuple'> (n, C1*an_28, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_29 <class 'ProGED.model.Model'>
C0*n + an_29 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_29, C0*n)
<class 'tuple'> (an_29, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1, C2*an_2)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1, C2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_47 <class 'ProGED.model.Model'>
an_2*an_47 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_47)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n**2 + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n**2 + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*n, an_1**2*n, C1*an_4*n**2)
<class 'tuple'> (C0*an_1, C2*n, an_1**2*n, C1*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4344762759992591


Equation discovery for all (chosen) OEIS sequences took 0.43448216000069806 secconds, i.e. 0.007241369333344968 minutes or 0.00012068948888908279 hours.
18





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 18
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_36, p = 0.00032786885245901645, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1**3*n + n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*an_37*n**2, p = 1.0967671808451372e-10, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**5*n**3 + C1*n**2 + C2*n + an_1, p = 5.4383210271077526e-11, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_16*an_3 + n, p = 4.658269385479478e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n**3 + an_46*n, p = 3.147540983606561e-07, parse trees = 1, valid = False
-> an_1*an_18*n, p = 8.384846574067673e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_15*n + an_11, p = 1.4362927384955564e-08, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + C1*an_1 + C2*n + an_1*n**3, p = 3.1655505686407274e-10, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1*an_48 + C2*an_1 + C3*an_3 + C4*n + an_1, p = 7.478788536440527e-14, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1 + an_39*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_42 + an_1*n**3, p = 9.325044827540645e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + C2*n + n, p = 1.0171283848427853e-05, parse trees = 2, valid = False
-> C0*n + an_3*n**2, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1*n, p = 3.270088685837143e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 6.277895343157569e-07, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1**2*an_19*an_5, p = 7.48949912549261e-09, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n**2 + an_9, p = 3.049410158058008e-09, parse trees = 1, valid = False
-> C0*an_1 + an_20, p = 2.5154529375858257e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2*n**2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_2*n**4, p = 3.0825495298074725e-12, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_29*n, p = 6.55737704918558e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_36 <class 'ProGED.model.Model'>
an_36 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + n <class 'ProGED.model.Model'>
C0*an_1**3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*n)
<class 'tuple'> (n, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3*an_37*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3*an_37*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_3*an_37*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_3*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**5*n**3 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**5*n**3 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C2*n, C0*an_1**5*n**3)
<class 'tuple'> (an_1, C1*n**2, C2*n, C0*an_1**5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_16*an_3 + n <class 'ProGED.model.Model'>
C0*an_16*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_16*an_3)
<class 'tuple'> (n, C0*an_16*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_46*n <class 'ProGED.model.Model'>
C0*n**3 + an_46*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_46*n)
<class 'tuple'> (C0*n**3, an_46*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_18*n <class 'ProGED.model.Model'>
an_1*an_18*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_15*n + an_11 <class 'ProGED.model.Model'>
C0*an_15*n + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*an_15*n)
<class 'tuple'> (an_11, C0*an_15*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_4 + C1*an_1 + C2*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + C1*an_1 + C2*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n**3, C0*an_1**2*an_4)
<class 'tuple'> (C1*an_1, C2*n, an_1*n**3, C0*an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*an_48 + C2*an_1 + C3*an_3 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*an_48 + C2*an_1 + C3*an_3 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C3*an_3, C4*n, C0*an_1*an_2, C1*an_1*an_48)
<class 'tuple'> (an_1, C2*an_1, C3*an_3, C4*n, C0*an_1*an_2, C1*an_1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_39*n <class 'ProGED.model.Model'>
C0*an_1 + an_39*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_39*n)
<class 'tuple'> (C0*an_1, an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_2*n)
<class 'tuple'> (n**3, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_42 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_42 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_42, an_1*n**3, C0*an_2*n)
<class 'tuple'> (C1*an_42, an_1*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_1**2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n**2)
<class 'tuple'> (C0*n, an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_3*n)
<class 'tuple'> (an_1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_19*an_5 <class 'ProGED.model.Model'>
an_1**2*an_19*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_19, an_5, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*n**2 + an_9 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n**2 + an_9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_9, C1*n**2, C0*an_1**2*an_2)
<class 'tuple'> (an_9, C1*n**2, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_20 <class 'ProGED.model.Model'>
C0*an_1 + an_20 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_20, C0*an_1)
<class 'tuple'> (an_20, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n)
<class 'tuple'> (an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1*n, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_2*n**4 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n**4, C0*an_1**2*n)
<class 'tuple'> (C1*n, an_2*n**4, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29*n <class 'ProGED.model.Model'>
an_29*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_29, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4518220879999717


Equation discovery for all (chosen) OEIS sequences took 0.45182841299902066 secconds, i.e. 0.007530473549983678 minutes or 0.00012550789249972795 hours.
19





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 19
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*n + an_1**2*an_31*n, p = 1.2865922698376576e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_3**2, p = 0.000126160828928902, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_31*n**2 + C1*an_2 + an_21, p = 4.193502223034491e-14, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*an_1**2*n**4 + C1*an_1 + n**3, p = 8.670602624889328e-09, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**2, p = 2.3190669174952992e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_28*n + n**3, p = 4.024724536425689e-08, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0008762160709486698, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n**3 + C2*n + n, p = 3.927708881360121e-08, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*an_8, p = 2.674278585865607e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*n**5 + n, p = 1.7064832034399387e-07, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1**2*an_34, p = 9.870904627606255e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_28, p = 0.0003278688524598914, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*an_3*n**2 + an_1*n**3, p = 2.6160709486697164e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_22 + an_2, p = 9.713588397584145e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n**4 + C2*n + an_1, p = 7.803542362400393e-08, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2, p = 1.1450951222103467e-08, parse trees = 1, valid = False
-> C0*an_25 + C1*n + an_1*an_2*n, p = 2.331261207115607e-08, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1*n + n, p = 1.0838253281111653e-06, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_30 + C1*n + an_46, p = 8.59983875302545e-09, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_43, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0011866497823165823, parse trees = 2, valid = False
-> an_1*an_2*n**3, p = 3.5551733404998704e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_19 + C2*n + n, p = 7.244505147881175e-08, parse trees = 1, valid = False
-> C0*an_2*an_3*n**3 + C1*an_40 + C2*n + an_1*n**2, p = 2.6497395138366883e-13, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*n + an_1, p = 3.2080440039720264e-07, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 3.865111529158833e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_37*n + C1*n + an_2*n, p = 3.646331631281917e-08, parse trees = 1, valid = False
C0*n + an_1**2*an_31*n <class 'ProGED.model.Model'>
C0*n + an_1**2*an_31*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_31*n)
<class 'tuple'> (C0*n, an_1**2*an_31*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3**2 <class 'ProGED.model.Model'>
an_3**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_3, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_31*n**2 + C1*an_2 + an_21 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_31*n**2 + C1*an_2 + an_21 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_21, C1*an_2, C0*an_1**2*an_2*an_31*n**2)
<class 'tuple'> (an_21, C1*an_2, C0*an_1**2*an_2*an_31*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*an_1, C0*an_1**2*n**4)
<class 'tuple'> (n**3, C1*an_1, C0*an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n**3)
<class 'tuple'> (C0*an_2, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*n)
<class 'tuple'> (n**2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_28*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_28*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_28*n)
<class 'tuple'> (n**3, C0*an_1*an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*n, C1*an_2*n**3)
<class 'tuple'> (n, C0*an_1**2, C2*n, C1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2*an_8 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*an_8, C0*an_1**2*n)
<class 'tuple'> (an_2*an_8, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**5 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**5)
<class 'tuple'> (n, C0*an_1*an_2*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1**2*an_34 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1**2*an_34 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1**2*an_34)
<class 'tuple'> (C0*an_1, C1*n**2, an_1**2*an_34)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28 <class 'ProGED.model.Model'>
an_28 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_3*n**2)
<class 'tuple'> (an_1*n**3, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_22 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_22 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_22)
<class 'tuple'> (an_2, C0*an_1*an_22)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**4 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**4 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**4, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**4, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_25 + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_25 + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_25, C1*n, an_1*an_2*n)
<class 'tuple'> (C0*an_25, C1*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_30 + C1*n + an_46 <class 'ProGED.model.Model'>
C0*an_30 + C1*n + an_46 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_46, C0*an_30, C1*n)
<class 'tuple'> (an_46, C0*an_30, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_43 <class 'ProGED.model.Model'>
an_43 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_19 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_19 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_19, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_19, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n**3 + C1*an_40 + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2*an_3*n**3 + C1*an_40 + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_40, C2*n, an_1*n**2, C0*an_2*an_3*n**3)
<class 'tuple'> (C1*an_40, C2*n, an_1*n**2, C0*an_2*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*an_3*n)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37*n + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_37*n + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n, C0*an_37*n)
<class 'tuple'> (C1*n, an_2*n, C0*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4870075609997002


Equation discovery for all (chosen) OEIS sequences took 0.4870134560005681 secconds, i.e. 0.008116890933342802 minutes or 0.00013528151555571336 hours.
20





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 20
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 62 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.0006818939030139091, parse trees = 2, valid = False
-> C0*n + an_1*an_4, p = 6.308755710830424e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.0463158905262614e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_9*n + C1*n + n, p = 9.659458622950824e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_19*an_2, p = 1.4904786786378e-08, parse trees = 1, valid = False
-> C0*an_1**2*an_17 + C1*an_1*n + an_2, p = 1.905860595523951e-09, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> an_1*an_6*n**4, p = 1.2412921257726435e-07, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_32, p = 9.713588362021706e-07, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + C1*n + n, p = 4.185263562105048e-08, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + an_1*n**3, p = 9.884547517193087e-08, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*an_3*n + an_2**2, p = 5.7404851230560846e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**3, p = 1.7323437621448946e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*an_28 + an_2, p = 5.828153017228452e-07, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_3, p = 4.181424876972087e-06, parse trees = 1, valid = False
-> C0*an_1**4 + C1*an_1 + C2*an_3 + C3*n + an_1*n, p = 2.414555100833358e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + n, p = 4.607504649287831e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_2 + n**3, p = 0.0001668196721311477, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1*an_3*an_49*n**2, p = 1.985481897897476e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*an_2, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_46 + C2*n + an_1, p = 8.528461598251794e-11, parse trees = 1, valid = False
-> C0*an_2*n**3 + an_1, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> C0*an_1*an_8*n + C1*an_4 + an_2*n, p = 9.554260246938661e-11, parse trees = 1, valid = False
-> an_1**2*an_2**2*n**2, p = 8.777262139584025e-07, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + n, p = 3.068852459016395e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + an_1, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_1*an_2, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n**2 + an_1, p = 2.5088549261832513e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + C2*n + n, p = 7.954465573770504e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1*n + C2*an_1 + C3*n + n**2, p = 4.623824294711204e-11, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_5*n**2 + C3*n**2 + an_5, p = 3.597259866589547e-13, parse trees = 1, valid = False
-> an_36, p = 0.00032786885245901645, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n**3, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**2 + C2*an_47*n + an_1*an_2**3*n**5, p = 2.0209472324616386e-18, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 2.4945750174886495e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 7.32332437086806e-08, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_4 <class 'ProGED.model.Model'>
C0*n + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_4)
<class 'tuple'> (C0*n, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_9*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_9*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_9*n)
<class 'tuple'> (n, C1*n, C0*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_19*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_19*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_19*an_2)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_19*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_17 + C1*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_17 + C1*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_17, C1*an_1*n)
<class 'tuple'> (an_2, C0*an_1**2*an_17, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_6*n**4 <class 'ProGED.model.Model'>
an_1*an_6*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_6, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*an_32 <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_32)
<class 'tuple'> (C0*an_2, an_1*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**3*an_2*n**2)
<class 'tuple'> (n, C1*n, C0*an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*n**3, C0*an_2*n)
<class 'tuple'> (C1*an_2, an_1*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n + C2*an_3*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*an_3*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1**2*n, C1*an_1*n, C2*an_3*n)
<class 'tuple'> (an_2**2, C0*an_1**2*n, C1*an_1*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*n)
<class 'tuple'> (an_1**3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_28 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_28 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_28)
<class 'tuple'> (an_2, C0*an_1, C1*an_28)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1**2*n**2)
<class 'tuple'> (an_3, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4 + C1*an_1 + C2*an_3 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**4 + C1*an_1 + C2*an_3 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**4, C1*an_1, C2*an_3, C3*n, an_1*n)
<class 'tuple'> (C0*an_1**4, C1*an_1, C2*an_3, C3*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**3 <class 'ProGED.model.Model'>
C0*an_2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_2)
<class 'tuple'> (n**3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*an_49*n**2 <class 'ProGED.model.Model'>
an_1*an_3*an_49*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_49, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*an_2)
<class 'tuple'> (an_1*an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_46 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_46 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_46, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_46, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n**3)
<class 'tuple'> (an_1, C0*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n**2)
<class 'tuple'> (an_1*an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_8*n + C1*an_4 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_8*n + C1*an_4 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_4, an_2*n, C0*an_1*an_8*n)
<class 'tuple'> (C1*an_4, an_2*n, C0*an_1*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2**2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n**2)
<class 'tuple'> (n, C0*an_3, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n)
<class 'tuple'> (an_1, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_2*n)
<class 'tuple'> (an_1*an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*an_3)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_1*n + C2*an_1 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_1*n + C2*an_1 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*an_1, C3*n, C1*an_1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (n**2, C2*an_1, C3*n, C1*an_1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_5*n**2 + C3*n**2 + an_5 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_5*n**2 + C3*n**2 + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*an_1, C3*n**2, C1*an_2*n, C2*an_5*n**2)
<class 'tuple'> (an_5, C0*an_1, C3*n**2, C1*an_2*n, C2*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_36 <class 'ProGED.model.Model'>
an_36 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*an_2)
<class 'tuple'> (an_1*n**3, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**2 + C2*an_47*n + an_1*an_2**3*n**5 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**2 + C2*an_47*n + an_1*an_2**3*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3*n**2, C2*an_47*n, an_1*an_2**3*n**5)
<class 'tuple'> (C0*an_1, C1*an_3*n**2, C2*an_47*n, an_1*an_2**3*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5490449999997509


Equation discovery for all (chosen) OEIS sequences took 0.5490512439992017 secconds, i.e. 0.009150854066653362 minutes or 0.00015251423444422269 hours.
21





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 21
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 61 models
-> C0*an_1*an_2 + C1*n + an_1*an_2*n**2, p = 6.319628740500497e-08, parse trees = 1, valid = False
-> C0*an_1**3*n + an_1, p = 2.8872396035748254e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1**2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**3*an_3 + an_1*an_2*n, p = 1.3200408007027546e-08, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n**2, p = 4.682125417440233e-08, parse trees = 1, valid = False
-> an_8, p = 0.0003529655737704918, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_1**2*n**3, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_2*an_3*an_4, p = 1.566466024430935e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1 + n, p = 1.254427463091625e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_4 + n**2, p = 1.1682880945982269e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_26, p = 2.5154528353339355e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + C2*n + an_1, p = 2.9653642551579244e-07, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1*an_15 + C1*an_2*n + an_1, p = 1.4905034277263547e-08, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_3*an_44*n, p = 2.2359580757860817e-09, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_34*n, p = 6.55737704918034e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_22*n, p = 2.573184549095877e-08, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1 + an_26*n**2, p = 1.0061811341335745e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_34*n**2 + C3*n + an_2, p = 2.744435122691839e-11, parse trees = 1, valid = False
-> an_1**2*an_2*an_4*n, p = 4.326527799936461e-07, parse trees = 1, valid = False
-> C0*an_2*an_6*n + C1*an_4*n**2 + C2*n + an_1*an_2*n**2, p = 6.088197291032089e-15, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_43, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*an_43*n**4 + C1*an_1 + n, p = 6.175642895220314e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2**2 + an_1*n, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> an_45*n**2, p = 1.3114754098360662e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_3 + C2*an_42 + C3*n + n**2, p = 3.1083482758468804e-11, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_23, p = 0.0003278688528191269, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + an_36, p = 4.935452313803119e-08, parse trees = 1, valid = False
-> an_1**2*an_15*n**2, p = 2.1443563464931052e-07, parse trees = 1, valid = False
-> an_2**3*an_35*n**4, p = 3.020721542181986e-11, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1*n, p = 2.8898901841945013e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1, p = 0.00020456817090417276, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n**2, p = 1.5358348830959445e-06, parse trees = 1, valid = False
C0*an_1*an_2 + C1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_2, an_1*an_2*n**2)
<class 'tuple'> (C1*n, C0*an_1*an_2, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*n)
<class 'tuple'> (an_1, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2)
<class 'tuple'> (an_1**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_3 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1**3*an_3 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3*an_3, an_1*an_2*n)
<class 'tuple'> (C0*an_1**3*an_3, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
<class 'tuple'> (n, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*an_1, C2*n)
<class 'tuple'> (n**2, C0*an_1**2, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8 <class 'ProGED.model.Model'>
an_8 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**3)
<class 'tuple'> (C0*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_3*an_4 <class 'ProGED.model.Model'>
an_2*an_3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_3)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*an_4 + n**2 <class 'ProGED.model.Model'>
C0*an_3*n + C1*an_4 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_4, C0*an_3*n)
<class 'tuple'> (n**2, C1*an_4, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_26 <class 'ProGED.model.Model'>
C0*an_1 + an_26 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_26, C0*an_1)
<class 'tuple'> (an_26, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*an_2, C2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_15 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_15 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_15, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_15, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + C1*n + an_3*an_44*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_3*an_44*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_3*an_44*n)
<class 'tuple'> (C0*n**2, C1*n, an_3*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_34*n <class 'ProGED.model.Model'>
an_34*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*an_22*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_22*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_22*n)
<class 'tuple'> (C0*n**2, an_1**2*an_22*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_26*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_26*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_26*n**2)
<class 'tuple'> (C0*an_1, an_26*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_34*n**2 + C3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_34*n**2 + C3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_1, C3*n, C2*an_34*n**2)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_1, C3*n, C2*an_34*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*an_4*n <class 'ProGED.model.Model'>
an_1**2*an_2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_6*n + C1*an_4*n**2 + C2*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2*an_6*n + C1*an_4*n**2 + C2*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, C1*an_4*n**2, an_1*an_2*n**2, C0*an_2*an_6*n)
<class 'tuple'> (C2*n, C1*an_4*n**2, an_1*an_2*n**2, C0*an_2*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_43 <class 'ProGED.model.Model'>
an_43 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_43*n**4 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_43*n**4 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_43*n**4)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_43*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2**2, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_45*n**2 <class 'ProGED.model.Model'>
an_45*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_45, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_3 + C2*an_42 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_3 + C2*an_42 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C2*an_42, C3*n, C0*an_2*n)
<class 'tuple'> (n**2, C1*an_3, C2*an_42, C3*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n**3)
<class 'tuple'> (C0*an_2, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_23 <class 'ProGED.model.Model'>
an_23 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + an_36 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + an_36 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_36, C1*an_1, C0*an_1**2*n)
<class 'tuple'> (an_36, C1*an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_15*n**2 <class 'ProGED.model.Model'>
an_1**2*an_15*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**3*an_35*n**4 <class 'ProGED.model.Model'>
an_2**3*an_35*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_35, an_2**3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2)
<class 'tuple'> (an_1, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_2, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5003143810008623


Equation discovery for all (chosen) OEIS sequences took 0.5003205930006516 secconds, i.e. 0.00833867655001086 minutes or 0.000138977942500181 hours.
22





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 22
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 45 models
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_49, p = 4.1924213920988996e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1**3*an_25*n**2 + an_3, p = 1.94781056726724e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n**2 + an_40*an_7*n, p = 7.196058407238201e-10, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n**2 + C3*n + n, p = 2.993490020986379e-08, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*n + an_1*an_3, p = 1.5398611219065739e-09, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_18 + C1*an_2*n + n, p = 1.8231666396947148e-07, parse trees = 1, valid = False
-> C0*an_1 + an_3*n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_30 + n, p = 3.934426229509143e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_3*n + C1*n**2 + an_1**2*an_2, p = 1.9376220194930768e-08, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1**2, p = 5.7744792071496496e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*an_45 + n**2, p = 4.662522413770321e-09, parse trees = 1, valid = False
-> C0*an_1*an_9 + C1*an_2*n + C2*an_9 + C3*n + n, p = 6.398841616866816e-13, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*n + an_1*an_43*n**2, p = 5.048724989857621e-11, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + n, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0027250739048642844, parse trees = 2, valid = False
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_49 <class 'ProGED.model.Model'>
an_1*an_49 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_49)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_25*n**2 + an_3 <class 'ProGED.model.Model'>
C0*an_1**3*an_25*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1**3*an_25*n**2)
<class 'tuple'> (an_3, C0*an_1**3*an_25*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_40*an_7*n <class 'ProGED.model.Model'>
C0*n**2 + an_40*an_7*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_40*an_7*n)
<class 'tuple'> (C0*n**2, an_40*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n**2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n**2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1, C2*n**2, C3*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_1, C2*n**2, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_3, C0*an_1**2*n**3)
<class 'tuple'> (C1*n, an_1*an_3, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_18 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_18 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_18, C1*an_2*n)
<class 'tuple'> (n, C0*an_18, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_3*n)
<class 'tuple'> (C0*an_1, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_30 + n <class 'ProGED.model.Model'>
C0*an_30 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_30)
<class 'tuple'> (n, C0*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*n**2 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_3*n + C1*n**2 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1**2*an_2, C0*an_3*n)
<class 'tuple'> (C1*n**2, an_1**2*an_2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n**2)
<class 'tuple'> (an_1**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*an_45 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*an_45 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n, C1*an_2*an_45)
<class 'tuple'> (n**2, C0*an_1*n, C1*an_2*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_9 + C1*an_2*n + C2*an_9 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_9 + C1*an_2*n + C2*an_9 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_9, C3*n, C0*an_1*an_9, C1*an_2*n)
<class 'tuple'> (n, C2*an_9, C3*n, C0*an_1*an_9, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*n + an_1*an_43*n**2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*n + an_1*an_43*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1**3*n, an_1*an_43*n**2)
<class 'tuple'> (C1*n, C0*an_1**3*n, an_1*an_43*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**3)
<class 'tuple'> (n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.43535558999974455


Equation discovery for all (chosen) OEIS sequences took 0.43536512900027446 secconds, i.e. 0.007256085483337908 minutes or 0.0001209347580556318 hours.
23





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 23
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 58 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004838400000000003, parse trees = 2, valid = False
-> an_1*an_3*n**2, p = 5.450147809728571e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**3*an_9*n + an_1*an_2*n, p = 8.309868046951956e-11, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_6 + n, p = 7.28065573770492e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_3 + an_1, p = 5.017709852366504e-07, parse trees = 1, valid = False
-> C0*an_1*an_9*n + C1*an_1*n**2 + C2*an_1 + C3*an_39 + an_1, p = 3.386663204040796e-14, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**2 + an_2*n**2, p = 4.185263562105047e-08, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**2 + C1*n**2 + n, p = 8.370527124210095e-09, parse trees = 1, valid = False
-> C0*an_1**2*an_26*n + n**2, p = 2.5731845397514377e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**4, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1 + an_45, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + an_2*an_27, p = 1.519304846380981e-06, parse trees = 1, valid = False
-> C0*an_14 + C1*n + an_1*n**2, p = 1.2074847363889034e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 4.45450072131148e-05, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + C2*n**2 + an_1*n**2, p = 1.9638544406800602e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + n, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + n, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + n**2, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_1**3*n**2, p = 7.526564778549754e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0005332760010749804, parse trees = 3, valid = False
-> C0*an_1**2*an_41*n + C1*an_1*n**2 + C2*an_1 + an_1*an_2*an_5*n**4, p = 1.6717612553588029e-18, parse trees = 1, valid = False
-> C0*an_12 + C1*n + an_3*n, p = 5.593361005536148e-08, parse trees = 1, valid = False
-> an_1**2*n**6, p = 9.417855415210987e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4 + an_1**2*n, p = 5.157547667924257e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 1.2798624025799528e-05, parse trees = 1, valid = False
-> an_8*n**4, p = 5.647449180327873e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n + an_1, p = 1.1783126644080364e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3*n**2 + an_2*n, p = 4.576179406107908e-08, parse trees = 1, valid = False
-> an_25, p = 0.00032786885249142634, parse trees = 1, valid = False
-> an_1**2*an_33*n, p = 1.072160224864644e-06, parse trees = 1, valid = False
-> C0*an_1*an_40 + an_2*n, p = 1.9427176724042994e-07, parse trees = 1, valid = False
-> C0*an_2 + an_1**2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_9 + n**3, p = 1.6099097704918044e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_3*an_6*n**2, p = 3.132048870607912e-11, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_2, p = 3.788299461188385e-06, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1*n**2, p = 8.362849753944173e-07, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_9*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1**3*an_9*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2*n, C0*an_1**3*an_9*n)
<class 'tuple'> (an_1*an_2*n, C0*an_1**3*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_6 + n <class 'ProGED.model.Model'>
C0*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_6)
<class 'tuple'> (n, C0*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_3, C0*an_1*n**3)
<class 'tuple'> (an_1, C1*an_3, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_9*n + C1*an_1*n**2 + C2*an_1 + C3*an_39 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_9*n + C1*an_1*n**2 + C2*an_1 + C3*an_39 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C3*an_39, C1*an_1*n**2, C0*an_1*an_9*n)
<class 'tuple'> (an_1, C2*an_1, C3*an_39, C1*an_1*n**2, C0*an_1*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*n**2, C1*an_1*n**2)
<class 'tuple'> (C0*an_1**2, an_2*n**2, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1**3*an_2*n**2)
<class 'tuple'> (n, C1*n**2, C0*an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_26*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_26*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*an_26*n)
<class 'tuple'> (n**2, C0*an_1**2*an_26*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**4)
<class 'tuple'> (C0*an_1, an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_45 <class 'ProGED.model.Model'>
C0*an_1 + an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_45, C0*an_1)
<class 'tuple'> (an_45, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_27 <class 'ProGED.model.Model'>
C0*n + an_2*an_27 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_27)
<class 'tuple'> (C0*n, an_2*an_27)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_14 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_14, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_14, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n**2, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1, C2*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n**3)
<class 'tuple'> (n, C0*an_1, C1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2)
<class 'tuple'> (n, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_3)
<class 'tuple'> (n**2, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**2 <class 'ProGED.model.Model'>
an_1**3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_41*n + C1*an_1*n**2 + C2*an_1 + an_1*an_2*an_5*n**4 <class 'ProGED.model.Model'>
C0*an_1**2*an_41*n + C1*an_1*n**2 + C2*an_1 + an_1*an_2*an_5*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C1*an_1*n**2, C0*an_1**2*an_41*n, an_1*an_2*an_5*n**4)
<class 'tuple'> (C2*an_1, C1*an_1*n**2, C0*an_1**2*an_41*n, an_1*an_2*an_5*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_12 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_12 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_12, C1*n, an_3*n)
<class 'tuple'> (C0*an_12, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**6 <class 'ProGED.model.Model'>
an_1**2*n**6 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**6)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_4, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*an_4, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8*n**4 <class 'ProGED.model.Model'>
an_8*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_8, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (an_1, C2*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n, C1*an_3*n**2)
<class 'tuple'> (C0*an_2, an_2*n, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_25 <class 'ProGED.model.Model'>
an_25 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_33*n <class 'ProGED.model.Model'>
an_1**2*an_33*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_33, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_40 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_40 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*an_40)
<class 'tuple'> (an_2*n, C0*an_1*an_40)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2)
<class 'tuple'> (an_1**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_9 + n**3 <class 'ProGED.model.Model'>
C0*an_9 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_9)
<class 'tuple'> (n**3, C0*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + an_3*an_6*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + an_3*an_6*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, C0*an_1*n, an_3*an_6*n**2)
<class 'tuple'> (C1*an_3, C0*an_1*n, an_3*an_6*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_3, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*an_3*n)
<class 'tuple'> (an_1*n**2, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5201369959995645


Equation discovery for all (chosen) OEIS sequences took 0.5201428909986134 secconds, i.e. 0.008669048183310223 minutes or 0.00014448413638850374 hours.
24





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 24
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1**4*an_2*n, p = 2.2298535371871152e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_3**2*n + an_1*n, p = 4.950685191314856e-08, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n**2 + n, p = 1.6952139747379761e-06, parse trees = 1, valid = False
-> C0*an_1*an_21*an_39*n + n, p = 3.665505087005154e-10, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> C0*n**2 + an_44*n, p = 1.57377049180328e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_30*n**2 + C3*an_42 + C4*n**4 + an_2*n**2, p = 6.956516882853079e-20, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1 + an_35, p = 1.9298884047563473e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_3*n**2, p = 1.3080354743348581e-06, parse trees = 1, valid = False
-> an_1**2*an_3**2, p = 2.062785496381188e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**3, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_1*an_2*n**4, p = 7.1103466809997406e-06, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*an_10*n, p = 1.0795463902617407e-06, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1 + C1*an_22 + n, p = 3.018543413362469e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n**3, p = 1.3257442622950836e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3*an_42, p = 3.808219377934502e-08, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 8.128689960833731e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_2*n, p = 1.235568439649135e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_1, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> an_1*an_49*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1**2, p = 0.0003531695780704115, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + C1*an_41 + an_1*n, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000003, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**4*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1**4*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**4*an_2*n)
<class 'tuple'> (C0*n, an_1**4*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n)
<class 'tuple'> (an_1, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3**2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_3**2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_3**2*n)
<class 'tuple'> (an_1*n, C0*an_1*an_3**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n**2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*n**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_21*an_39*n + n <class 'ProGED.model.Model'>
C0*an_1*an_21*an_39*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_21*an_39*n)
<class 'tuple'> (n, C0*an_1*an_21*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_44*n <class 'ProGED.model.Model'>
C0*n**2 + an_44*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_44*n)
<class 'tuple'> (C0*n**2, an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_30*n**2 + C3*an_42 + C4*n**4 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_30*n**2 + C3*an_42 + C4*n**4 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C3*an_42, C4*n**4, an_2*n**2, C1*an_2*n, C2*an_30*n**2)
<class 'tuple'> (C0*an_1, C3*an_42, C4*n**4, an_2*n**2, C1*an_2*n, C2*an_30*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n**2)
<class 'tuple'> (C0*an_1, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_35 <class 'ProGED.model.Model'>
C0*an_1 + an_35 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_35, C0*an_1)
<class 'tuple'> (an_35, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_3*n**2)
<class 'tuple'> (C0*n**2, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3**2 <class 'ProGED.model.Model'>
an_1**2*an_3**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_2, C1*n)
<class 'tuple'> (n**3, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n**4 <class 'ProGED.model.Model'>
an_1*an_2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_10*n <class 'ProGED.model.Model'>
an_1**2*an_10*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_10, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_22 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_22 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_22)
<class 'tuple'> (n, C0*an_1, C1*an_22)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*n**2)
<class 'tuple'> (n**3, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_3*an_42 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_3*an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_3*an_42)
<class 'tuple'> (C0*an_1, an_1*an_3*an_42)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_2*n)
<class 'tuple'> (C0*an_1, C1*an_2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_3, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_49*n <class 'ProGED.model.Model'>
an_1*an_49*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_49, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n**2)
<class 'tuple'> (an_1**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_41 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_41 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_41, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_41, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_22 <class 'ProGED.model.Model'>
an_22 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4537696280003729


Equation discovery for all (chosen) OEIS sequences took 0.45377549799923145 secconds, i.e. 0.007562924966653857 minutes or 0.00012604874944423095 hours.
25





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 25
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 45 models
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n**4 + C1*n + an_1*an_5*n, p = 1.829115186401466e-11, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n**3 + C2*n + an_36, p = 8.58515602483087e-12, parse trees = 1, valid = False
-> an_1*an_2**2*n, p = 3.4321345545809304e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + C2*n + n, p = 2.4022032786885275e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> an_1**2*an_45, p = 5.360801124323184e-06, parse trees = 1, valid = False
-> C0*an_1 + n**4, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_4 + C1*n**2 + n, p = 9.867540983606564e-06, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*n + an_5, p = 1.8106229508196725e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**3*an_4 + C1*an_1*an_3 + an_1*an_2, p = 1.9277349398061724e-11, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_2*n**3, p = 4.942273758596541e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_11, p = 0.00032854646393442623, parse trees = 1, valid = False
-> C0*an_1*an_38 + an_1*an_21, p = 1.1717598228950899e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1, p = 2.9457816610200888e-06, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_6*n, p = 0.000121344262295082, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_1, p = 0.00010453562192430208, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*n**2 + C3*n + n, p = 1.5607084724800795e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_31, p = 7.244504165547422e-08, parse trees = 1, valid = False
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**4 + C1*n + an_1*an_5*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**4 + C1*n + an_1*an_5*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_5*n, C0*an_1*an_2*n**4)
<class 'tuple'> (C1*n, an_1*an_5*n, C0*an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*n**3 + C2*n + an_36 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n**3 + C2*n + an_36 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_36, C1*n**3, C2*n, C0*an_1**2*an_2)
<class 'tuple'> (an_36, C1*n**3, C2*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2*n <class 'ProGED.model.Model'>
an_1*an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_2*n)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_45 <class 'ProGED.model.Model'>
an_1**2*an_45 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_45, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**4 <class 'ProGED.model.Model'>
C0*an_1 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1)
<class 'tuple'> (n**4, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_4 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4, C1*n**2)
<class 'tuple'> (n, C0*an_4, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_5 <class 'ProGED.model.Model'>
C0*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*n)
<class 'tuple'> (an_5, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_4 + C1*an_1*an_3 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**3*an_4 + C1*an_1*an_3 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1**3*an_4, C1*an_1*an_3)
<class 'tuple'> (an_1*an_2, C0*an_1**3*an_4, C1*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_2*n**3)
<class 'tuple'> (C0*an_1, C1*an_2, an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n)
<class 'tuple'> (C0*n, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_11 <class 'ProGED.model.Model'>
an_11 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_38 + an_1*an_21 <class 'ProGED.model.Model'>
C0*an_1*an_38 + an_1*an_21 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_21, C0*an_1*an_38)
<class 'tuple'> (an_1*an_21, C0*an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
<class 'tuple'> (n, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n**2)
<class 'tuple'> (an_2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_6*n <class 'ProGED.model.Model'>
an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3)
<class 'tuple'> (an_1, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2)
<class 'tuple'> (an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n + C2*n**2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*n**2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n**2, C3*n, C0*an_1**2*n, C1*an_1*n)
<class 'tuple'> (n, C2*n**2, C3*n, C0*an_1**2*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_31 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_31 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_31, C1*n, C0*an_1*n)
<class 'tuple'> (an_31, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4076911829997698


Equation discovery for all (chosen) OEIS sequences took 0.4076989390014205 secconds, i.e. 0.006794982316690342 minutes or 0.00011324970527817237 hours.
26





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 26
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 48 models
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_45 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*n + n, p = 6.308755710830425e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4*n, p = 6.7224446099012716e-06, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**3*an_2*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_2*n, p = 0.0001668196721311477, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_34, p = 0.000327868852459017, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*n + n, p = 3.901771181200195e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> C0*an_1**2*an_3**2*an_31*n + an_1, p = 1.1530754723120621e-11, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + an_2*an_37, p = 1.9058577240915505e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> an_47, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*n + an_22*n, p = 7.868852487825238e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_2*n, p = 3.220926274299027e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1**2*an_4, p = 5.602037174917727e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n**3, p = 2.001836065573773e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + an_2, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2*an_3, p = 1.1850577801666229e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_23*n**2 + n, p = 2.0123622704177256e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1, p = 0.00020456817090417276, parse trees = 1, valid = False
-> C0*an_2 + an_36*n, p = 1.5193048463674651e-06, parse trees = 1, valid = False
-> C0*an_33 + an_1*n**2, p = 1.0061811341037429e-06, parse trees = 1, valid = False
-> C0*an_1**3*an_4*n**2 + C1*an_2 + an_1*n, p = 1.0186653317423107e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 1.6257379921667474e-05, parse trees = 1, valid = False
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_45 + n <class 'ProGED.model.Model'>
C0*an_45 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_45)
<class 'tuple'> (n, C0*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_4 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_4)
<class 'tuple'> (n, C1*n, C0*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4*n)
<class 'tuple'> (C0*an_1, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1**3*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*an_2*n)
<class 'tuple'> (C0*n, an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_2*n)
<class 'tuple'> (C0*n**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_34 <class 'ProGED.model.Model'>
an_34 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*n, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C2*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_3**2*an_31*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_3**2*an_31*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_3**2*an_31*n)
<class 'tuple'> (an_1, C0*an_1**2*an_3**2*an_31*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + an_2*an_37 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + an_2*an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*an_37, C1*an_1*n)
<class 'tuple'> (C0*an_1**2, an_2*an_37, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_47 <class 'ProGED.model.Model'>
an_47 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_22*n <class 'ProGED.model.Model'>
C0*n + an_22*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_22*n)
<class 'tuple'> (C0*n, an_22*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_2*n)
<class 'tuple'> (an_2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4 <class 'ProGED.model.Model'>
an_1**2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*n)
<class 'tuple'> (n**2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_2, C1*n)
<class 'tuple'> (n**3, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_2*n)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2*an_3 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_2*an_3)
<class 'tuple'> (C0*n**2, C1*n, an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_23*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_23*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_23*n**2)
<class 'tuple'> (n, C0*an_1*an_23*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2)
<class 'tuple'> (an_1, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_36*n <class 'ProGED.model.Model'>
C0*an_2 + an_36*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_36*n)
<class 'tuple'> (C0*an_2, an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_33 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_33 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_33, an_1*n**2)
<class 'tuple'> (C0*an_33, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_4*n**2 + C1*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_4*n**2 + C1*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*n, C0*an_1**3*an_4*n**2)
<class 'tuple'> (C1*an_2, an_1*n, C0*an_1**3*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4181946970002173


Equation discovery for all (chosen) OEIS sequences took 0.418200001000514 secconds, i.e. 0.006970000016675234 minutes or 0.00011616666694458723 hours.
27





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 27
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 45 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1*n**3, p = 1.6365453672333833e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 3.6616621854340286e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_2**2*an_3 + C1*n + an_1, p = 1.462877023264003e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**2 + C2*n + an_33, p = 5.595026896524424e-10, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*an_18*n + C1*an_1 + C2*an_4 + C3*n + an_1*n, p = 3.246719999425368e-13, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**3*an_26*n + C1*an_1 + an_44, p = 2.2990550956317562e-12, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.002728158427357357, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.003531695780704114, parse trees = 2, valid = False
-> C0*an_2*n**3 + an_1, p = 2.1331040042999217e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**3 + C2*n + n, p = 4.804406557377057e-07, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n**2, p = 2.1331040042999223e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1**2*an_2**2, p = 2.194315534896004e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**2 + C1*an_1 + an_1*n, p = 2.6758242446245383e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_37*n + an_1*an_2*n, p = 3.8854353448086e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> an_8, p = 0.0003529655737704918, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + an_1*n, p = 5.455151224111279e-07, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n**2, p = 0.00010368000000000012, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_2)
<class 'tuple'> (C0*an_2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_1*n**3)
<class 'tuple'> (C0*an_1, C1*an_2, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*an_3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2**2*an_3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2**2*an_3)
<class 'tuple'> (an_1, C1*n, C0*an_2**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n**2 + C2*n + an_33 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n**2 + C2*n + an_33 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_33, C1*n**2, C2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_33, C1*n**2, C2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_18*n + C1*an_1 + C2*an_4 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_18*n + C1*an_1 + C2*an_4 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_4, C3*n, an_1*n, C0*an_1*an_18*n)
<class 'tuple'> (C1*an_1, C2*an_4, C3*n, an_1*n, C0*an_1*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_26*n + C1*an_1 + an_44 <class 'ProGED.model.Model'>
C0*an_1**3*an_26*n + C1*an_1 + an_44 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_44, C1*an_1, C0*an_1**3*an_26*n)
<class 'tuple'> (an_44, C1*an_1, C0*an_1**3*an_26*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n**3)
<class 'tuple'> (an_1, C0*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**3, C2*n, C0*an_2*n)
<class 'tuple'> (n, C1*n**3, C2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_2*n)
<class 'tuple'> (an_1*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2**2 <class 'ProGED.model.Model'>
an_1**2*an_2**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n**2 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**2 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1**2*an_2*n**2)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1**2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
<class 'tuple'> (C0*n**2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_37*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_37*n, an_1*an_2*n)
<class 'tuple'> (C0*an_37*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2)
<class 'tuple'> (n, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8 <class 'ProGED.model.Model'>
an_8 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2*n**3)
<class 'tuple'> (an_1*n, C0*an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**5 <class 'ProGED.model.Model'>
an_1*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2, C1*n)
<class 'tuple'> (n**2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.42595144900042214


Equation discovery for all (chosen) OEIS sequences took 0.4259573769995768 secconds, i.e. 0.007099289616659613 minutes or 0.00011832149361099356 hours.
28





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 28
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499343, parse trees = 1, valid = False
-> an_1*an_4*n, p = 8.7621607094867e-05, parse trees = 1, valid = False
-> C0*an_37*n + an_1**2, p = 6.432961349187821e-07, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + n, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_2**2*n + C3*n**2 + an_1**2, p = 1.43643876915292e-11, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_2 + C2*n + an_1*n, p = 4.848502050088908e-09, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_25*n, p = 6.557377049828528e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + an_2, p = 1.6146850162442305e-07, parse trees = 1, valid = False
-> C0*an_41*n**2 + an_6*n**2, p = 2.1218668816626381e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_2, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + an_2, p = 3.976024729897034e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_16*n, p = 2.0123723745271357e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*an_9*n**3, p = 1.219764063223204e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0001271410481053481, parse trees = 1, valid = False
-> an_8, p = 0.0003529655737704918, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*an_1**2*an_42*n**2 + n, p = 2.5731845396751306e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_44, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + an_1*an_2*n, p = 6.319628740500497e-08, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.014008697704918038, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1**2*n**4, p = 2.3544638538027446e-05, parse trees = 1, valid = False
-> C0*an_1*an_5*n + an_1, p = 2.4670406774135294e-06, parse trees = 1, valid = False
-> an_2*an_30*n, p = 2.5321747439463836e-06, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**2*an_16*n**2, p = 2.1443312187584235e-07, parse trees = 1, valid = False
-> C0*an_1*n + an_18*an_39*n, p = 3.6655066990459793e-10, parse trees = 1, valid = False
-> C0*n + an_1*an_32, p = 5.030905670518789e-06, parse trees = 1, valid = False
-> an_39*n**2, p = 1.3114754098360662e-05, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_31, p = 4.721311475410178e-06, parse trees = 1, valid = False
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_4*n <class 'ProGED.model.Model'>
an_1*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_37*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_37*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_37*n)
<class 'tuple'> (an_1**2, C0*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_2, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_2**2*n + C3*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_2**2*n + C3*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C3*n**2, C0*an_1*an_2, C2*an_2**2*n)
<class 'tuple'> (an_1**2, C1*an_1, C3*n**2, C0*an_1*an_2, C2*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*an_2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*an_2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C1*an_1*an_2, C0*an_1*an_2*n)
<class 'tuple'> (C2*n, an_1*n, C1*an_1*an_2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*n)
<class 'tuple'> (C0*n**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_25*n <class 'ProGED.model.Model'>
an_25*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_25, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_3*n**2)
<class 'tuple'> (an_2, C0*an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_41*n**2 + an_6*n**2 <class 'ProGED.model.Model'>
C0*an_41*n**2 + an_6*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_6*n**2, C0*an_41*n**2)
<class 'tuple'> (an_6*n**2, C0*an_41*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C0*an_1*n)
<class 'tuple'> (an_2, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n**2)
<class 'tuple'> (an_1, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2**2)
<class 'tuple'> (an_2, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_16*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_16*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_16*n)
<class 'tuple'> (C0*n**2, an_1*an_16*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*an_9*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*an_9*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_2, an_1*an_9*n**3)
<class 'tuple'> (C1*n, C0*an_1*an_2, an_1*an_9*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8 <class 'ProGED.model.Model'>
an_8 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_42*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_42*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_42*n**2)
<class 'tuple'> (n, C0*an_1**2*an_42*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2)
<class 'tuple'> (n, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_44 <class 'ProGED.model.Model'>
an_44 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (C1*n, an_1*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**4 <class 'ProGED.model.Model'>
an_1**2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_5*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_5*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_5*n)
<class 'tuple'> (an_1, C0*an_1*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_30*n <class 'ProGED.model.Model'>
an_2*an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_16*n**2 <class 'ProGED.model.Model'>
an_1**2*an_16*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_16, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_18*an_39*n <class 'ProGED.model.Model'>
C0*an_1*n + an_18*an_39*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_18*an_39*n)
<class 'tuple'> (C0*an_1*n, an_18*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_32 <class 'ProGED.model.Model'>
C0*n + an_1*an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_32)
<class 'tuple'> (C0*n, an_1*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_39*n**2 <class 'ProGED.model.Model'>
an_39*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_39, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_31 <class 'ProGED.model.Model'>
C0*n + an_31 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_31, C0*n)
<class 'tuple'> (an_31, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4627542109992646


Equation discovery for all (chosen) OEIS sequences took 0.46276273599869455 secconds, i.e. 0.007712712266644909 minutes or 0.00012854520444408182 hours.
29





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 29
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 55 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3*n, p = 0.0042622950819672135, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*an_7*n, p = 3.030979801128732e-08, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_49, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_2 + C2*an_3 + an_1, p = 1.4865690247914101e-09, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*an_1*an_28*n + C2*n**4 + n, p = 3.3881915095051364e-14, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_34 + an_3, p = 8.966314872697976e-12, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2*n**4, p = 1.706483203439939e-07, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + an_2*n**2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> an_3*an_6*n, p = 1.4366807011257432e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**2 + an_1, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*n + an_2*an_28*n, p = 3.03860969274304e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165044e-05, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_1*an_2, p = 2.0926317810525234e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_1, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*an_2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_46 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_40, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_3 + an_4, p = 2.433933530412971e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_2*n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*an_15*an_3*an_30*an_4*an_7*n + C1*an_1*an_2 + an_1*an_2, p = 5.525698058112138e-22, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*an_3*n**2, p = 1.6459135835647536e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_4 + n, p = 1.557550007977126e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n**2 + C2*an_2 + C3*an_5 + an_1*an_3*n, p = 1.5052827656013733e-14, parse trees = 1, valid = False
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*an_7*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*an_7*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*an_7*n)
<class 'tuple'> (C0*n**2, C1*n, an_1*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_49 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_49)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n)
<class 'tuple'> (an_2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_2 + C2*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_2 + C2*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*an_3, C0*an_1**2*n**3)
<class 'tuple'> (an_1, C1*an_2, C2*an_3, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3 + C1*an_1*an_28*n + C2*n**4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3 + C1*an_1*an_28*n + C2*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n**4, C0*an_1*an_2*an_3, C1*an_1*an_28*n)
<class 'tuple'> (n, C2*n**4, C0*an_1*an_2*an_3, C1*an_1*an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_34 + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_34 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_34, C0*an_1**2*n)
<class 'tuple'> (an_3, C1*an_34, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_2*n**4 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2*n**4)
<class 'tuple'> (C0*n**2, an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n**2)
<class 'tuple'> (C0*an_1, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_3 <class 'ProGED.model.Model'>
C0*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2)
<class 'tuple'> (an_3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*n)
<class 'tuple'> (n**2, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*an_6*n <class 'ProGED.model.Model'>
an_3*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_6, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_28*n <class 'ProGED.model.Model'>
C0*n + an_2*an_28*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_28*n)
<class 'tuple'> (C0*n, an_2*an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n**2 <class 'ProGED.model.Model'>
an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1**2*n**2)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n**2)
<class 'tuple'> (an_1, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*n**3 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1**2*an_2)
<class 'tuple'> (C0*n**3, an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_46 + n <class 'ProGED.model.Model'>
C0*an_46 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_46)
<class 'tuple'> (n, C0*an_46)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_40 <class 'ProGED.model.Model'>
an_40 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_4 <class 'ProGED.model.Model'>
C0*an_3 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_3)
<class 'tuple'> (an_4, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_2*n)
<class 'tuple'> (C0*an_1, C1*n**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_15*an_3*an_30*an_4*an_7*n + C1*an_1*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_15*an_3*an_30*an_4*an_7*n + C1*an_1*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C1*an_1*an_2, C0*an_1*an_15*an_3*an_30*an_4*an_7*n)
<class 'tuple'> (an_1*an_2, C1*an_1*an_2, C0*an_1*an_15*an_3*an_30*an_4*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_4 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_4, C0*an_1**2*an_2)
<class 'tuple'> (n, C1*an_4, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2*n**2 + C2*an_2 + C3*an_5 + an_1*an_3*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2*n**2 + C2*an_2 + C3*an_5 + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_2, C3*an_5, C0*an_1*n**2, C1*an_2*n**2, an_1*an_3*n)
<class 'tuple'> (C2*an_2, C3*an_5, C0*an_1*n**2, C1*an_2*n**2, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48994056199990155


Equation discovery for all (chosen) OEIS sequences took 0.4899469580013829 secconds, i.e. 0.008165782633356381 minutes or 0.00013609637722260636 hours.
30





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 30
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 63 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1*n, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_3*an_38*an_42, p = 1.8082713095605418e-10, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.0900295619457144e-05, parse trees = 1, valid = False
-> C0*an_1*an_37 + C1*an_31 + C2*n + an_1, p = 1.0124004746263533e-11, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.001777586670249934, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + an_1**3*n**2, p = 1.8063755468519417e-06, parse trees = 1, valid = False
-> C0*an_1*an_32*n + C1*an_2 + an_1*an_2*n**3, p = 4.604465384699919e-12, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2 + C2*n + an_1**2, p = 1.255579068631514e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*n, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*an_19 + C1*an_1*n + C2*n + n, p = 9.26346559893003e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_3*an_6*n, p = 4.408961102471137e-09, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_3*an_44*an_6*n + C1*n + n, p = 7.536685645249804e-12, parse trees = 1, valid = False
-> C0*an_1*an_3 + n**4, p = 1.3080354743348581e-06, parse trees = 1, valid = False
-> an_1*an_20*n, p = 8.384843125286089e-06, parse trees = 1, valid = False
-> an_32*n**3, p = 2.62295081967219e-06, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n + an_2, p = 3.7882994611883842e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + an_23, p = 2.515452838022154e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.484520730810071e-05, parse trees = 1, valid = False
-> an_20*n, p = 6.557377315928862e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**3*an_2*n, p = 1.4532165146198072e-05, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_6*n**2, p = 2.4268852459016403e-05, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_2*n**3 + C1*an_2 + n, p = 7.730223058317668e-07, parse trees = 1, valid = False
-> C0*an_3 + an_2, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> an_11*n, p = 6.570929278688526e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + an_1, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*an_5*n + C1*an_1*n + C2*an_2 + C3*n + an_1, p = 4.064263467123707e-12, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*an_38*an_42 <class 'ProGED.model.Model'>
an_1*an_3*an_38*an_42 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_38, an_42)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_37 + C1*an_31 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_37 + C1*an_31 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_31, C2*n, C0*an_1*an_37)
<class 'tuple'> (an_1, C1*an_31, C2*n, C0*an_1*an_37)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1**3*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**3*n**2)
<class 'tuple'> (C0*n**2, an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_32*n + C1*an_2 + an_1*an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_32*n + C1*an_2 + an_1*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*an_2*n**3, C0*an_1*an_32*n)
<class 'tuple'> (C1*an_2, an_1*an_2*n**3, C0*an_1*an_32*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2 + C2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2 + C2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_2, C2*n, C0*an_1*n**2)
<class 'tuple'> (an_1**2, C1*an_2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n)
<class 'tuple'> (C0*n, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*n)
<class 'tuple'> (C0*an_1**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
<class 'tuple'> (C0*an_1, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_19 + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_19 + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*an_19, C1*an_1*n)
<class 'tuple'> (n, C2*n, C0*an_1*an_19, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_3*an_6*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_3*an_6*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n**2, an_3*an_6*n)
<class 'tuple'> (C0*an_1*n**2, an_3*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3*an_44*an_6*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_3*an_44*an_6*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_3*an_44*an_6*n)
<class 'tuple'> (n, C1*n, C0*an_3*an_44*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n**4 <class 'ProGED.model.Model'>
C0*an_1*an_3 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1*an_3)
<class 'tuple'> (n**4, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_20*n <class 'ProGED.model.Model'>
an_1*an_20*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_20, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_32*n**3 <class 'ProGED.model.Model'>
an_32*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2)
<class 'tuple'> (n, C0*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_3)
<class 'tuple'> (an_2, C1*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_23 <class 'ProGED.model.Model'>
C0*an_1 + an_23 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_23, C0*an_1)
<class 'tuple'> (an_23, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_20*n <class 'ProGED.model.Model'>
an_20*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_2*n <class 'ProGED.model.Model'>
an_1**3*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6*n**2 <class 'ProGED.model.Model'>
an_6*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**3 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**3)
<class 'tuple'> (n, C1*an_2, C0*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_3)
<class 'tuple'> (an_2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*n)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_11*n <class 'ProGED.model.Model'>
an_11*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1**2*n)
<class 'tuple'> (C0*an_2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n)
<class 'tuple'> (an_1, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_5*n + C1*an_1*n + C2*an_2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_5*n + C1*an_1*n + C2*an_2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_2, C3*n, C1*an_1*n, C0*an_1*an_2*an_5*n)
<class 'tuple'> (an_1, C2*an_2, C3*n, C1*an_1*n, C0*an_1*an_2*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48092369599908125


Equation discovery for all (chosen) OEIS sequences took 0.48092984599861666 secconds, i.e. 0.008015497433310278 minutes or 0.00013359162388850462 hours.
31





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 31
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*n + an_2, p = 1.2555790686315142e-07, parse trees = 1, valid = False
-> C0*an_10*an_2**2*an_34*n**3 + an_1, p = 1.1007088739217217e-13, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_28, p = 9.442622950844879e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**2, p = 2.104610811771325e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*an_4*n + n, p = 7.469382899890303e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_4*n**2 + n, p = 1.644590163934427e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*n + an_1*an_3*an_9*n, p = 1.4623743682510883e-09, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*an_5 + C1*an_1*n**2 + C2*an_1*n + C3*an_2 + C4*n + n, p = 4.651112438089829e-15, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1*an_3*n + C2*an_1*an_4 + C3*n + an_1**2, p = 3.6768088602854074e-14, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_47, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*an_2*an_30, p = 1.6189313936706387e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1**2 + C1*n + n**4, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> an_28, p = 0.0003278688524598914, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*an_2, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_27 + C1*n + n, p = 4.721311475451841e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1*n + C2*an_1 + n, p = 3.849652804766433e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_46 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1*n, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> an_1*an_2*an_33*n**2, p = 6.475725574681043e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + n, p = 2.1331040042999217e-05, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1*an_12, p = 7.72433985420271e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_2**2, p = 2.0592807327485583e-05, parse trees = 1, valid = False
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n**2 <class 'ProGED.model.Model'>
C0*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**3)
<class 'tuple'> (n**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**3*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1**3*n)
<class 'tuple'> (an_2, C1*n, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_10*an_2**2*an_34*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_10*an_2**2*an_34*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_10*an_2**2*an_34*n**3)
<class 'tuple'> (an_1, C0*an_10*an_2**2*an_34*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_28 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_28 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_28, C0*n**2, C1*n)
<class 'tuple'> (an_28, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*an_4*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3*an_4*n)
<class 'tuple'> (n, C0*an_1, C1*an_3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + n <class 'ProGED.model.Model'>
C0*an_4*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n**2)
<class 'tuple'> (n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3*an_9*n <class 'ProGED.model.Model'>
C0*n + an_1*an_3*an_9*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*an_9*n)
<class 'tuple'> (C0*n, an_1*an_3*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*n)
<class 'tuple'> (an_1**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_5 + C1*an_1*n**2 + C2*an_1*n + C3*an_2 + C4*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_5 + C1*an_1*n**2 + C2*an_1*n + C3*an_2 + C4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C3*an_2, C4*n, C0*an_1**2*an_5, C1*an_1*n**2, C2*an_1*n)
<class 'tuple'> (n, C3*an_2, C4*n, C0*an_1**2*an_5, C1*an_1*n**2, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1*an_3*n + C2*an_1*an_4 + C3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1*an_3*n + C2*an_1*an_4 + C3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C3*n, C0*an_1**2*n**2, C2*an_1*an_4, C1*an_1*an_3*n)
<class 'tuple'> (an_1**2, C3*n, C0*an_1**2*n**2, C2*an_1*an_4, C1*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_47 <class 'ProGED.model.Model'>
an_47 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*an_30 <class 'ProGED.model.Model'>
an_1*an_2*an_30 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_30)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n**4 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1**2, C1*n)
<class 'tuple'> (n**4, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_28 <class 'ProGED.model.Model'>
an_28 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*an_2)
<class 'tuple'> (an_1*an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_27 + C1*n + n <class 'ProGED.model.Model'>
C0*an_27 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_27, C1*n)
<class 'tuple'> (n, C0*an_27, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_1*n + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_1*n + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C1*an_1*n, C0*an_1*an_3*n)
<class 'tuple'> (n, C2*an_1, C1*an_1*n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_46 + n <class 'ProGED.model.Model'>
C0*an_46 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_46)
<class 'tuple'> (n, C0*an_46)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_33*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_33*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_33, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
<class 'tuple'> (n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1*an_12 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1*an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1*an_12)
<class 'tuple'> (C0*an_1, C1*n**2, an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1*n)
<class 'tuple'> (an_2**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4718863110010716


Equation discovery for all (chosen) OEIS sequences took 0.4718920300001628 secconds, i.e. 0.007864867166669379 minutes or 0.00013108111944448966 hours.
32





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 32
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 58 models
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + n, p = 9.031877734259707e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**3 + an_1, p = 5.419126640555824e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_5*n + an_1, p = 3.154576603905825e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1**2*n**2 + C2*an_1 + n, p = 1.2588706081267939e-10, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*an_1*n + C2*n**2 + an_2*n, p = 2.928439984669086e-10, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_2, p = 3.344780305780671e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_2*an_3 + C1*an_28*an_3*an_5 + C2*n + an_1*an_2*an_45, p = 1.9268078331463025e-19, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_33 + an_1*n**2, p = 5.922542776563781e-09, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2 + an_1**2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_2**2*an_3, p = 1.588951182676356e-05, parse trees = 1, valid = False
-> an_3*n**4, p = 1.7049180327868867e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*an_3*n, p = 7.576598922376768e-07, parse trees = 1, valid = False
-> an_49*n**5, p = 1.0491803278688537e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*an_4*n**2 + C2*an_1 + C3*an_3 + n, p = 2.6624565583738096e-14, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2 + n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_2 + C3*n + an_1, p = 1.3650398079481078e-08, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_2*an_47, p = 1.519304846367465e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1**2*an_2*n, p = 6.319628740500498e-08, parse trees = 1, valid = False
-> C0*an_1**2 + an_1**4*n, p = 4.720764780475474e-07, parse trees = 1, valid = False
-> C0*n + an_2*an_37*n**2, p = 6.077219385469862e-08, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*an_3**2, p = 1.613204042041698e-05, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**4*an_4, p = 9.159579191668761e-07, parse trees = 1, valid = False
-> C0*n + an_10, p = 3.96153068852459e-05, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*n**2)
<class 'tuple'> (n, C0*an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*n**3)
<class 'tuple'> (an_1, C0*an_1**2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_5*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_5*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_5*n)
<class 'tuple'> (an_1, C0*an_1**2*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*an_1**2*n**2 + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*an_1**2*n**2 + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C1*an_1**2*n**2, C0*an_1**2*an_3*n)
<class 'tuple'> (n, C2*an_1, C1*an_1**2*n**2, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + C1*an_1*n + C2*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + C1*an_1*n + C2*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**2, an_2*n, C0*an_1*an_2**2, C1*an_1*n)
<class 'tuple'> (C2*n**2, an_2*n, C0*an_1*an_2**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n**2)
<class 'tuple'> (an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3 + C1*an_28*an_3*an_5 + C2*n + an_1*an_2*an_45 <class 'ProGED.model.Model'>
C0*an_2*an_3 + C1*an_28*an_3*an_5 + C2*n + an_1*an_2*an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, C0*an_2*an_3, an_1*an_2*an_45, C1*an_28*an_3*an_5)
<class 'tuple'> (C2*n, C0*an_2*an_3, an_1*an_2*an_45, C1*an_28*an_3*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_33 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_33 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_33, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*an_33, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2)
<class 'tuple'> (an_1**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*an_3 <class 'ProGED.model.Model'>
an_2**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**4 <class 'ProGED.model.Model'>
an_3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_49*n**5 <class 'ProGED.model.Model'>
an_49*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_49, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*an_1*an_4*n**2 + C2*an_1 + C3*an_3 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*an_1*an_4*n**2 + C2*an_1 + C3*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*an_3, C0*an_1**2*an_3*n, C1*an_1*an_4*n**2)
<class 'tuple'> (n, C2*an_1, C3*an_3, C0*an_1**2*an_3*n, C1*an_1*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*an_2, C3*n, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C2*an_2, C3*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_47 <class 'ProGED.model.Model'>
C0*n + an_2*an_47 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_47)
<class 'tuple'> (C0*n, an_2*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_2*n, an_1**2*an_2*n)
<class 'tuple'> (C1*n, C0*an_2*n, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1**4*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1**4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1**4*n)
<class 'tuple'> (C0*an_1**2, an_1**4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_37*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*an_37*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_37*n**2)
<class 'tuple'> (C0*n, an_2*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3**2 <class 'ProGED.model.Model'>
an_1*an_3**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4*an_4 <class 'ProGED.model.Model'>
an_1**4*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_10 <class 'ProGED.model.Model'>
C0*n + an_10 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_10, C0*n)
<class 'tuple'> (an_10, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.49579399499998544


Equation discovery for all (chosen) OEIS sequences took 0.49579966900091677 secconds, i.e. 0.008263327816681947 minutes or 0.00013772213027803243 hours.
33





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 33
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 63 models
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2*an_17*n + C1*n**2 + C2*n + n, p = 4.446469583756282e-11, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**2 + C1*an_19 + n, p = 1.8004642727704491e-10, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_10*an_2 + an_1, p = 1.2506220477349128e-07, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 5.1970312864346815e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3 + C1*an_1*n**2 + C2*an_1 + C3*n**2 + n, p = 1.094894641734894e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_2*an_4, p = 2.1652498471550865e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> C0*an_16*n + C1*an_34 + an_3*an_32, p = 3.709293109562015e-14, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1, p = 2.0788125145738735e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3, p = 0.00010453562192430208, parse trees = 1, valid = False
-> C0*an_2 + an_11, p = 7.612224082415124e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*an_10 + C1*n + an_1**2*an_2**2*n**3, p = 5.928237550864692e-13, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_2, p = 2.3190669174952997e-06, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + n, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_30 + C1*n + an_1, p = 3.0185434023119327e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n + an_1*n, p = 4.619583365719721e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + n**2, p = 3.1817862295082025e-07, parse trees = 1, valid = False
-> an_39, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_3 + an_2, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*an_48*n + C1*an_4*n + C2*n + an_21*n, p = 6.0683274726084485e-15, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_5 + C2*n + an_1*n, p = 2.271295154812195e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2**2*n + an_1*an_2*n, p = 3.744562603347356e-11, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**2 + an_2*n, p = 1.5153197844753543e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_2, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_35 + C2*n + n, p = 2.0864171996775105e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*an_36 + an_1, p = 1.9298884047563464e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1**3*n**3, p = 1.7721024714400248e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n**2 + an_1, p = 2.078812514573874e-06, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + C2*n + n, p = 3.682622950819675e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_44*n + C2*n + an_1, p = 5.5580786056982804e-09, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_42*n + n, p = 9.26346434283047e-09, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_49*n**2 + C1*an_1*an_2*n + an_2, p = 1.1367828182596706e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 3.901771181200195e-07, parse trees = 1, valid = False
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_17*n + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_17*n + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_1**2*an_17*n)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_1**2*an_17*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n**2 + C1*an_19 + n <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n**2 + C1*an_19 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_19, C0*an_1*an_2**2*n**2)
<class 'tuple'> (n, C1*an_19, C0*an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_10*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_10*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_10*an_2)
<class 'tuple'> (an_1, C0*an_1*an_10*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3 + C1*an_1*n**2 + C2*an_1 + C3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3 + C1*an_1*n**2 + C2*an_1 + C3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*n**2, C1*an_1*n**2, C0*an_1**2*an_2*an_3)
<class 'tuple'> (n, C2*an_1, C3*n**2, C1*an_1*n**2, C0*an_1**2*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_2*an_4)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_16*n + C1*an_34 + an_3*an_32 <class 'ProGED.model.Model'>
C0*an_16*n + C1*an_34 + an_3*an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_34, an_3*an_32, C0*an_16*n)
<class 'tuple'> (C1*an_34, an_3*an_32, C0*an_16*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_3)
<class 'tuple'> (C0*an_1, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_11 <class 'ProGED.model.Model'>
C0*an_2 + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*an_2)
<class 'tuple'> (an_11, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_10 + C1*n + an_1**2*an_2**2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_10 + C1*n + an_1**2*an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_10, an_1**2*an_2**2*n**3)
<class 'tuple'> (C1*n, C0*an_1*an_10, an_1**2*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*n**2, C2*n)
<class 'tuple'> (an_2, C0*an_2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_2*n)
<class 'tuple'> (n, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_30 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_30 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_30, C1*n)
<class 'tuple'> (an_1, C0*an_30, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C3*n, an_1*n, C0*an_1*n, C2*an_3*n)
<class 'tuple'> (C1*an_1, C3*n, an_1*n, C0*an_1*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n**2, C0*an_1*n)
<class 'tuple'> (n**2, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_39 <class 'ProGED.model.Model'>
an_39 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_3)
<class 'tuple'> (an_2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_48*n + C1*an_4*n + C2*n + an_21*n <class 'ProGED.model.Model'>
C0*an_2*an_48*n + C1*an_4*n + C2*n + an_21*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_21*n, C1*an_4*n, C0*an_2*an_48*n)
<class 'tuple'> (C2*n, an_21*n, C1*an_4*n, C0*an_2*an_48*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_5 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_5 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_5, C2*n, an_1*n)
<class 'tuple'> (C0*an_1**2, C1*an_5, C2*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2**2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2**2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, C1*an_2**2*n, an_1*an_2*n)
<class 'tuple'> (C0*an_1*n, C1*an_2**2*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n, C1*an_3*n**2)
<class 'tuple'> (C0*an_1, an_2*n, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_35 <class 'ProGED.model.Model'>
an_35 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_35 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_35 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_35, C2*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_35, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_36 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_36 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_36)
<class 'tuple'> (an_1, C0*an_1, C1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1**3*n**3 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1**3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1**3*n**3)
<class 'tuple'> (C0*an_1**2, C1*n, an_1**3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1, C2*n**2)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1, C2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_3, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_44*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_44*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_44*n)
<class 'tuple'> (an_1, C0*an_1, C2*n, C1*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
<class 'tuple'> (n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_42*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_42*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n, C2*an_42*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n, C2*an_42*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_49*n**2 + C1*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_49*n**2 + C1*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1*an_2*n, C0*an_1**2*an_2*an_49*n**2)
<class 'tuple'> (an_2, C1*an_1*an_2*n, C0*an_1**2*an_2*an_49*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5522910500003491


Equation discovery for all (chosen) OEIS sequences took 0.5522973930001172 secconds, i.e. 0.009204956550001952 minutes or 0.00015341594250003254 hours.
34





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 34
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_2**2*an_3 + n, p = 1.9067414192116277e-06, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n, p = 1.0514592851384044e-05, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_18 + an_1, p = 2.5154539722203013e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1**2*n**4, p = 1.396368590425607e-11, parse trees = 1, valid = False
-> an_1**2*an_9*n**2, p = 2.1935615523766329e-07, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_11, p = 0.00032854646393442623, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*an_36*n**2, p = 3.3539371136791223e-06, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n + an_41, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*an_1*an_36 + C1*an_1 + C2*n + an_1, p = 2.96127138828187e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*an_2*an_4, p = 1.6917833063854103e-05, parse trees = 1, valid = False
-> C0*an_3 + n**3, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_2*an_40*n + C1*n + n, p = 5.250717549045963e-10, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n, p = 1.2011016393442638e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2*n, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*n + an_2*n, p = 1.5066948823578173e-08, parse trees = 1, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*an_2*n**4 + C1*an_1 + C2*an_2 + C3*n + n, p = 1.3963685904256057e-11, parse trees = 1, valid = False
-> an_1*an_11*an_2*n, p = 3.2445545269310377e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n + an_1*n**2, p = 6.787080946990297e-11, parse trees = 1, valid = False
-> C0*an_1*n**5 + C1*n + an_2, p = 1.2286679064767563e-08, parse trees = 1, valid = False
-> an_1*an_39, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1*an_4*n, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2*an_3 + n <class 'ProGED.model.Model'>
C0*an_2**2*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2*an_3)
<class 'tuple'> (n, C0*an_2**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_4*n)
<class 'tuple'> (an_1*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_18 + an_1 <class 'ProGED.model.Model'>
C0*an_18 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_18)
<class 'tuple'> (an_1, C0*an_18)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1**2*n**4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1**2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_1**2*n**4)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_9*n**2 <class 'ProGED.model.Model'>
an_1**2*an_9*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_9, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_11 <class 'ProGED.model.Model'>
an_11 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_36*n**2 <class 'ProGED.model.Model'>
an_1*an_36*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_36, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_41 <class 'ProGED.model.Model'>
C0*an_1*n + an_41 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_41, C0*an_1*n)
<class 'tuple'> (an_41, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_36 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_36 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*an_36)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_4 <class 'ProGED.model.Model'>
an_1*an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n**3 <class 'ProGED.model.Model'>
C0*an_3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_3)
<class 'tuple'> (n**3, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_40*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*an_40*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*an_40*n)
<class 'tuple'> (n, C1*n, C0*an_2*an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_2*n)
<class 'tuple'> (C0*an_2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_1, C2*n, an_2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n)
<class 'tuple'> (an_1, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**4 + C1*an_1 + C2*an_2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**4 + C1*an_1 + C2*an_2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_2, C3*n, C0*an_1*an_2*n**4)
<class 'tuple'> (n, C1*an_1, C2*an_2, C3*n, C0*an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_11*an_2*n <class 'ProGED.model.Model'>
an_1*an_11*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_11, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n**2, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (C2*n, an_1*n**2, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**5 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**5 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n**5)
<class 'tuple'> (an_2, C1*n, C0*an_1*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_39 <class 'ProGED.model.Model'>
an_1*an_39 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_39)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_4*n)
<class 'tuple'> (C0*n, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.45078261399976327


Equation discovery for all (chosen) OEIS sequences took 0.4507891320008639 secconds, i.e. 0.007513152200014399 minutes or 0.0001252192033335733 hours.
35





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 35
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 58 models
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2 + n, p = 9.662778822897076e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_39*n + an_1, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**2 + n, p = 9.819272203400294e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_27, p = 3.0185434023380624e-06, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n + C2*an_21 + an_1**2, p = 4.483157491060288e-11, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1**2*an_5, p = 2.0558672311779404e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_39 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + C2*n + an_1, p = 2.27297967671303e-06, parse trees = 1, valid = False
-> C0*an_37*an_40 + an_1, p = 9.163762605680655e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_8, p = 5.4159963450685335e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_2, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_7 + n, p = 4.938295081967214e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1 + C2*n**2 + n, p = 6.021251822839804e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n**4, p = 5.455151224111279e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_31, p = 2.4677261569017355e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_2, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + n, p = 2.128475183532635e-12, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n**2 + C2*an_49 + C3*n**2 + C4*n + an_1, p = 7.5808547540016e-15, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_49, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_21*an_5, p = 4.5806086139345613e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_32 + C1*n + n, p = 4.7213114754099405e-06, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1**2*an_14*n**3, p = 4.288880211217417e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + C2*n + an_2*an_43, p = 1.6560871961479281e-10, parse trees = 1, valid = False
-> an_1*an_6*n, p = 1.551615157215803e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n + C2*n + an_1, p = 1.5053129557099503e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_42*n**2, p = 1.5737704918032795e-06, parse trees = 1, valid = False
-> C0*an_1**2 + an_1**2*an_2, p = 5.468864117272134e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n**2, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> C0*an_3*n**2 + n, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_43*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + an_1, p = 3.138947671578783e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_37*n <class 'ProGED.model.Model'>
an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_39*n + an_1 <class 'ProGED.model.Model'>
C0*an_39*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_39*n)
<class 'tuple'> (an_1, C0*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n**2)
<class 'tuple'> (n, C0*an_1, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_27 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_27 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_27, C0*an_1, C1*n)
<class 'tuple'> (an_27, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n + C2*an_21 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n + C2*an_21 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*an_21, C0*an_1*an_3, C1*an_1*n)
<class 'tuple'> (an_1**2, C2*an_21, C0*an_1*an_3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_5 <class 'ProGED.model.Model'>
an_1**2*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_39 + n <class 'ProGED.model.Model'>
C0*an_39 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_39)
<class 'tuple'> (n, C0*an_39)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*an_3, C2*n)
<class 'tuple'> (an_1, C0*an_2, C1*an_3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37*an_40 + an_1 <class 'ProGED.model.Model'>
C0*an_37*an_40 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_37*an_40)
<class 'tuple'> (an_1, C0*an_37*an_40)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_8 <class 'ProGED.model.Model'>
C0*an_1*n + an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_8, C0*an_1*n)
<class 'tuple'> (an_8, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_7 + n <class 'ProGED.model.Model'>
C0*an_7 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_7)
<class 'tuple'> (n, C0*an_7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_1 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_1 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n**2, C0*an_1*an_3*n)
<class 'tuple'> (n, C1*an_1, C2*n**2, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**4, C0*an_1*an_2)
<class 'tuple'> (an_1*n**4, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_31 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_31 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_31, C0*an_1**2, C1*an_1)
<class 'tuple'> (an_31, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_3)
<class 'tuple'> (an_2, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C3*an_1, C4*n**2, C5*n, C1*an_1*an_2, C2*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C3*an_1, C4*n**2, C5*n, C1*an_1*an_2, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n**2 + C2*an_49 + C3*n**2 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n**2 + C2*an_49 + C3*n**2 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_49, C3*n**2, C4*n, C0*an_1*n, C1*an_3*n**2)
<class 'tuple'> (an_1, C2*an_49, C3*n**2, C4*n, C0*an_1*n, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_49 <class 'ProGED.model.Model'>
an_49 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_21*an_5 <class 'ProGED.model.Model'>
an_21*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_21, an_5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_32 + C1*n + n <class 'ProGED.model.Model'>
C0*an_32 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_32, C1*n)
<class 'tuple'> (n, C0*an_32, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_14*n**3 <class 'ProGED.model.Model'>
an_1**2*an_14*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + C2*n + an_2*an_43 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + C2*n + an_2*an_43 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, C2*n, an_2*an_43, C0*an_1*n)
<class 'tuple'> (C1*an_3, C2*n, an_2*an_43, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_6*n <class 'ProGED.model.Model'>
an_1*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_6, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_3*n)
<class 'tuple'> (an_1, C0*an_1, C2*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_42*n**2 <class 'ProGED.model.Model'>
C0*n + an_42*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_42*n**2)
<class 'tuple'> (C0*n, an_42*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1**2*an_2)
<class 'tuple'> (C0*an_1**2, an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n**2, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n**2)
<class 'tuple'> (n, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_43*n <class 'ProGED.model.Model'>
an_43*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_43, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46775481199983915


Equation discovery for all (chosen) OEIS sequences took 0.4677631640006439 secconds, i.e. 0.007796052733344065 minutes or 0.0001299342122224011 hours.
36





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 36
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*an_4*n, p = 2.6461226074233342e-05, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00023544638538027445, parse trees = 2, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + n, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_2*an_42, p = 1.2660873719728871e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_4*n, p = 1.9052082773448003e-06, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> C0*an_3**2 + an_2, p = 2.9230705719046156e-06, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1*an_44 + C1*n + an_1, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1*n, p = 3.270088685837143e-05, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 4.7726793442623e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*an_2**2*n + C2*an_1 + an_1*n, p = 9.38594772606107e-13, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_41*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*an_23*n**2, p = 2.1443204520844615e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + an_1, p = 4.909636101700148e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_24*n**2 + an_1, p = 1.2621812478802943e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1**2 + an_1*n, p = 4.430256178600062e-07, parse trees = 1, valid = False
-> C0*an_11*n + C1*n**2 + an_1**3*n, p = 3.9565219897054747e-10, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_4*n + n, p = 8.066933531881529e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1*an_31*n**2, p = 1.6769685568396816e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*an_27 + n, p = 9.115829078285886e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*n, p = 1.3290768535800178e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1**2, p = 5.231579452631305e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n**2, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1**2*an_3, p = 5.346740006620045e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_11 + C2*n**4 + n, p = 2.903790596389362e-09, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n**3, p = 1.5908931147541008e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_4*n <class 'ProGED.model.Model'>
an_2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_42 <class 'ProGED.model.Model'>
an_2*an_42 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_42)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_4*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_4*n)
<class 'tuple'> (C0*an_2, C1*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3**2 + an_2 <class 'ProGED.model.Model'>
C0*an_3**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_3**2)
<class 'tuple'> (an_2, C0*an_3**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_44 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_44 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_44)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_44)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_3*n)
<class 'tuple'> (an_1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*an_1*an_2**2*n + C2*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*an_1*an_2**2*n + C2*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, an_1*n, C0*an_1**2*an_3*n, C1*an_1*an_2**2*n)
<class 'tuple'> (C2*an_1, an_1*n, C0*an_1**2*an_3*n, C1*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_41*n <class 'ProGED.model.Model'>
an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_23*n**2 <class 'ProGED.model.Model'>
an_1**2*an_23*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_23, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n)
<class 'tuple'> (C0*n**2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_24*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_24*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1*an_24*n**2)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1*an_24*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, an_1*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_1**2, an_1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_11*n + C1*n**2 + an_1**3*n <class 'ProGED.model.Model'>
C0*an_11*n + C1*n**2 + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1**3*n, C0*an_11*n)
<class 'tuple'> (C1*n**2, an_1**3*n, C0*an_11*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_4*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_4*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_31*n**2 <class 'ProGED.model.Model'>
an_1*an_31*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_31, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_3)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_27 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_27 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*an_27)
<class 'tuple'> (n, C0*an_2, C1*an_27)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*n)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2, C1*n)
<class 'tuple'> (n**2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1**2*an_3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1**2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_3, C0*an_1*n**2)
<class 'tuple'> (an_1**2*an_3, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_11 + C2*n**4 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_11 + C2*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_11, C2*n**4)
<class 'tuple'> (n, C0*an_1, C1*an_11, C2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (n**3, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4868853719999606


Equation discovery for all (chosen) OEIS sequences took 0.4868921090001095 secconds, i.e. 0.008114868483335157 minutes or 0.00013524780805558597 hours.
37





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 37
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 69 models
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_9 + an_1, p = 2.5732164364418167e-05, parse trees = 1, valid = False
-> C0*an_17*n**3 + an_3, p = 1.863301203799418e-08, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_22 + an_3, p = 2.3291230041377067e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_16, p = 0.0003278704990549016, parse trees = 1, valid = False
-> C0*an_1*an_20 + n, p = 5.030905875171652e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n + n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + C2*an_28 + C3*n + an_1, p = 1.3722175613495788e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_4*n**2, p = 2.4897942999634357e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n + an_1, p = 1.2472875087443242e-06, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_4, p = 2.9207202364955655e-06, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n**3, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n**3, p = 4.147200000000007e-06, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_1**2*n**5, p = 5.650713249126589e-07, parse trees = 1, valid = False
-> C0*an_2**2*n**3 + C1*n**3 + n**2, p = 1.236835689330828e-09, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099032e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1**2*an_44, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_3*n, p = 2.673370003310022e-06, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> an_44, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*an_2*an_5*n**2 + n, p = 2.9801289094681964e-08, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*an_4*n + an_1*n, p = 5.191833359923756e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n + C1*n**3 + an_2, p = 4.955230082638036e-10, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.270088685837143e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_23, p = 0.0003278688528191269, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1**2*an_43 + an_2, p = 1.2420653971109455e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_2*n**2, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_49 + n, p = 3.573867416215456e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2*n**4, p = 1.0910302448222563e-07, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1, p = 1.8833686029472698e-06, parse trees = 1, valid = False
-> C0*an_1*an_20*n + an_1*n, p = 1.2865923221750465e-07, parse trees = 1, valid = False
-> C0*an_3*n + an_45, p = 4.658245991220999e-07, parse trees = 1, valid = False
-> C0*an_19 + an_1, p = 2.515453176347628e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*an_8 + an_1*n**2, p = 9.597700508406089e-13, parse trees = 1, valid = False
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_9 + an_1 <class 'ProGED.model.Model'>
C0*an_9 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_9)
<class 'tuple'> (an_1, C0*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_17*n**3 + an_3 <class 'ProGED.model.Model'>
C0*an_17*n**3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_17*n**3)
<class 'tuple'> (an_3, C0*an_17*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_22 + an_3 <class 'ProGED.model.Model'>
C0*an_22 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_22)
<class 'tuple'> (an_3, C0*an_22)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_16 <class 'ProGED.model.Model'>
an_16 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_20 + n <class 'ProGED.model.Model'>
C0*an_1*an_20 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_20)
<class 'tuple'> (n, C0*an_1*an_20)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3*n)
<class 'tuple'> (n, C0*an_1, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2*n + C2*an_28 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n + C2*an_28 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C2*an_28, C3*n, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1**2, C2*an_28, C3*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4*n**2, C0*an_1*an_3*n)
<class 'tuple'> (an_4*n**2, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1, C2*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_4 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_3, C1*n)
<class 'tuple'> (an_4, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2 <class 'ProGED.model.Model'>
an_1*an_2**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n**3)
<class 'tuple'> (C0*an_1, C1*n, an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**3, C1*n)
<class 'tuple'> (n**3, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n**5 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**5)
<class 'tuple'> (C0*n, an_1**2*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n**3 + C1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_2**2*n**3 + C1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n**3, C0*an_2**2*n**3)
<class 'tuple'> (n**2, C1*n**3, C0*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_44 <class 'ProGED.model.Model'>
an_1**2*an_44 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_44, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*n)
<class 'tuple'> (n**2, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_3*n)
<class 'tuple'> (C0*an_1, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**4 <class 'ProGED.model.Model'>
C0*an_2 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_2)
<class 'tuple'> (n**4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_44 <class 'ProGED.model.Model'>
an_44 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_5*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_5*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*an_5*n**2)
<class 'tuple'> (n, C0*an_1*an_2*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2*an_4*n)
<class 'tuple'> (an_1*n, C0*an_1*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n)
<class 'tuple'> (an_1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n + C1*n**3 + an_2 <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n + C1*n**3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**3, C0*an_1**3*an_3*n)
<class 'tuple'> (an_2, C1*n**3, C0*an_1**3*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*n)
<class 'tuple'> (an_3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_23 <class 'ProGED.model.Model'>
an_23 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_43 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_43 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_43)
<class 'tuple'> (an_2, C0*an_1**2*an_43)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_2*n**2, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, an_2*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_49 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_49 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_49, C0*an_1*an_3)
<class 'tuple'> (n, C1*an_49, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3)
<class 'tuple'> (an_1, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**2*n**4 <class 'ProGED.model.Model'>
C0*an_2*n + an_1**2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n**4, C0*an_2*n)
<class 'tuple'> (an_1**2*n**4, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_20*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_20*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_20*n)
<class 'tuple'> (an_1*n, C0*an_1*an_20*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_45 <class 'ProGED.model.Model'>
C0*an_3*n + an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_45, C0*an_3*n)
<class 'tuple'> (an_45, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_19 + an_1 <class 'ProGED.model.Model'>
C0*an_19 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_19)
<class 'tuple'> (an_1, C0*an_19)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*an_8 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*an_8 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_8, an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (C1*an_1, C2*an_8, an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5326136809999298


Equation discovery for all (chosen) OEIS sequences took 0.5326190600007976 secconds, i.e. 0.008876984333346627 minutes or 0.00014794973888911046 hours.
38





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 38
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> C0*an_1**3*an_2*n**2 + an_1, p = 2.2298535371871152e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*n, p = 1.4126783122816472e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0016681967213114765, parse trees = 2, valid = False
-> C0*an_1*n + an_1**2*n**2, p = 9.03187773425971e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.5551733404998704e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.70892770760549e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3, p = 0.00010453562192430208, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**4 + n, p = 4.213085827000335e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_30*n + C1*an_1 + an_1*an_2*n, p = 3.811715448184018e-10, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1**2*n**2, p = 1.3858750097159167e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_1**4*n**3, p = 1.9248264023832176e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 2.5428209621069635e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*an_2*n + n**2, p = 2.511158137263029e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_26, p = 8.392540345035457e-09, parse trees = 1, valid = False
-> an_1*an_44*n**3, p = 3.353937113679121e-07, parse trees = 1, valid = False
-> an_32*an_7, p = 1.4991788348413235e-07, parse trees = 1, valid = False
-> an_1*an_48*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1*an_9*n**2 + C2*an_1 + C3*n + an_1**2, p = 1.5200010688562125e-12, parse trees = 1, valid = False
-> an_2*an_3*n**4, p = 6.583654334259017e-07, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n + C2*n + n, p = 7.570506852996511e-07, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_1*n, p = 6.540177371674288e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_16*an_48, p = 1.1944280475588402e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_25 + n**2, p = 7.719553619788467e-08, parse trees = 1, valid = False
-> an_1*an_21, p = 4.192421443262142e-05, parse trees = 1, valid = False
-> C0*an_2*n**3 + C1*n + n**2, p = 8.007344262295095e-07, parse trees = 1, valid = False
C0*an_1**3*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_22 <class 'ProGED.model.Model'>
an_22 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1**2*n <class 'ProGED.model.Model'>
C0*n**3 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1**2*n)
<class 'tuple'> (C0*n**3, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n**2, C0*an_1*n)
<class 'tuple'> (an_1**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**2)
<class 'tuple'> (an_2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**5 <class 'ProGED.model.Model'>
an_1**2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_3)
<class 'tuple'> (C0*an_1, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2**2*n**4 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_2**2*n**4)
<class 'tuple'> (n, C0*an_1**2*an_2**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2*n)
<class 'tuple'> (n**2, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_30*n + C1*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_30*n + C1*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_2*n, C0*an_1*an_30*n)
<class 'tuple'> (C1*an_1, an_1*an_2*n, C0*an_1*an_30*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20 <class 'ProGED.model.Model'>
an_20 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**2*n**2, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, an_1**2*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C2*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2)
<class 'tuple'> (an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4*n**3 <class 'ProGED.model.Model'>
an_1**4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**4, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*an_2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*an_2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1**2*n, C2*an_2*n)
<class 'tuple'> (n**2, C1*an_1, C0*an_1**2*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_26 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_26 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_26, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_26, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_44*n**3 <class 'ProGED.model.Model'>
an_1*an_44*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_44, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_32*an_7 <class 'ProGED.model.Model'>
an_32*an_7 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, an_7)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_48*n <class 'ProGED.model.Model'>
an_1*an_48*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_48, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_9*n**2 + C2*an_1 + C3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_9*n**2 + C2*an_1 + C3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2, C2*an_1, C3*n, C1*an_1*an_9*n**2)
<class 'tuple'> (an_1**2, C0*an_1**2, C2*an_1, C3*n, C1*an_1*an_9*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n**4 <class 'ProGED.model.Model'>
an_2*an_3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_4*n)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_3*n**2)
<class 'tuple'> (an_1*n, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_16*an_48 <class 'ProGED.model.Model'>
an_16*an_48 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_16, an_48)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_25 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_25 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*an_25)
<class 'tuple'> (n**2, C0*an_1**2, C1*an_25)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_21 <class 'ProGED.model.Model'>
an_1*an_21 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_21)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**3 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_2*n**3)
<class 'tuple'> (n**2, C1*n, C0*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4543050560005213


Equation discovery for all (chosen) OEIS sequences took 0.45431150600052206 secconds, i.e. 0.007571858433342034 minutes or 0.00012619764055570056 hours.
39





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 39
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_23*n + C2*an_4*n**2 + C3*n + an_1, p = 1.2620764150284965e-15, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1*an_32*n, p = 8.384842784197981e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_41 + n, p = 6.037086804622417e-07, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0011772319269013718, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_3*n, p = 0.0042622950819672135, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 1.0394062572869367e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_2 + an_2*n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_3*an_4*n, p = 8.113111768043239e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1**2 + C2*an_49 + an_3*n, p = 8.966314872697957e-12, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_38*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> an_1*an_16*an_2*an_3, p = 1.9167772143661275e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 1.3379121223122696e-07, parse trees = 1, valid = False
-> an_1*an_18, p = 4.192423287033835e-05, parse trees = 1, valid = False
-> C0*an_1**3 + an_1**2*n, p = 3.6918801488333836e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 2.5088549261832518e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_32*n + an_1, p = 2.3312612068852106e-08, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 3.97723278688525e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + n, p = 8.362849753944176e-07, parse trees = 1, valid = False
-> C0*n + an_28*n, p = 7.868852459037399e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2**2*n, p = 2.6331786418752065e-06, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_23*n + C2*an_4*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_23*n + C2*an_4*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C3*n, C1*an_23*n, C2*an_4*n**2, C0*an_1*an_2**2*n)
<class 'tuple'> (an_1, C3*n, C1*an_23*n, C2*an_4*n**2, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_32*n <class 'ProGED.model.Model'>
an_1*an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_32, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_41 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_41 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_41, C0*an_1*n)
<class 'tuple'> (n, C1*an_41, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_2*n <class 'ProGED.model.Model'>
C0*an_2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n)
<class 'tuple'> (C0*an_2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*an_4*n <class 'ProGED.model.Model'>
an_3*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1**2 + C2*an_49 + an_3*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1**2 + C2*an_49 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, C2*an_49, an_3*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_1**2, C2*an_49, an_3*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_38*n <class 'ProGED.model.Model'>
an_38*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_38, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_16*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_16*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_16, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n)
<class 'tuple'> (an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_18 <class 'ProGED.model.Model'>
an_1*an_18 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**3 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1**2*n)
<class 'tuple'> (C0*an_1**3, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_32*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_32*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n, C1*an_32*n)
<class 'tuple'> (an_1, C0*an_2*n, C1*an_32*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_3*n**2)
<class 'tuple'> (n, C0*an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_28*n <class 'ProGED.model.Model'>
C0*n + an_28*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_28*n)
<class 'tuple'> (C0*n, an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2**2*n)
<class 'tuple'> (C0*an_1, an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4221683899995696


Equation discovery for all (chosen) OEIS sequences took 0.4221741880010086 secconds, i.e. 0.007036236466683476 minutes or 0.00011727060777805794 hours.
40





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 40
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 47 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_5, p = 0.00016077936038699274, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_3*n + n**2, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2 + C1*an_3 + an_12*n, p = 1.07995676973922e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*an_3 + C3*n**2 + n, p = 1.0910302448222555e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1 + an_1*an_2, p = 1.2916091526876182e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**2*an_34*n**5 + n, p = 2.400618704843499e-12, parse trees = 1, valid = False
-> C0*an_44*n + an_2, p = 1.5193048463674647e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*n**2 + n, p = 2.0926317810525234e-07, parse trees = 1, valid = False
-> C0*an_1**2 + an_8, p = 3.462686187830701e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**4 + n, p = 0.00017280000000000024, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*n**2 + an_29, p = 7.868852459022698e-06, parse trees = 1, valid = False
-> an_43*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*an_1 + C3*n**2 + n, p = 9.632967280648337e-09, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n + an_4*n, p = 1.3444889219802553e-06, parse trees = 1, valid = False
-> C0*an_18*an_2**2 + C1*n + n, p = 7.04027919153515e-09, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_4 + C2*an_1 + C3*an_2*an_9*n + an_4, p = 7.855874030910371e-17, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1, p = 4.238034936844939e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_1*an_2**2*n**2, p = 6.864269109161864e-06, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_2*n**2 + C2*an_6*n + n, p = 1.2258357425886968e-11, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**4 + an_1*n**2, p = 7.383760297666768e-07, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1**3*an_3 + C1*an_4*n + n, p = 1.2212772255558357e-09, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 8.47606987368988e-06, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_5 <class 'ProGED.model.Model'>
an_1*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + n**2 <class 'ProGED.model.Model'>
C0*an_3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_3*n)
<class 'tuple'> (n**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3 + an_12*n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3 + an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*an_3, an_12*n)
<class 'tuple'> (C0*an_2, C1*an_3, an_12*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*an_3, C3*n**2, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*an_3, C3*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_2, C0*an_1**2*an_2)
<class 'tuple'> (C1*an_1, an_1*an_2, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*an_34*n**5 + n <class 'ProGED.model.Model'>
C0*an_1*an_2**2*an_34*n**5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2**2*an_34*n**5)
<class 'tuple'> (n, C0*an_1*an_2**2*an_34*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_44*n + an_2 <class 'ProGED.model.Model'>
C0*an_44*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_44*n)
<class 'tuple'> (an_2, C0*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_2, C1*an_1*n**2)
<class 'tuple'> (n, C0*an_1**2*an_2, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_8 <class 'ProGED.model.Model'>
C0*an_1**2 + an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_8, C0*an_1**2)
<class 'tuple'> (an_8, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**4 + n <class 'ProGED.model.Model'>
C0*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**4)
<class 'tuple'> (n, C0*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_29 <class 'ProGED.model.Model'>
C0*n**2 + an_29 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_29, C0*n**2)
<class 'tuple'> (an_29, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_43*n <class 'ProGED.model.Model'>
an_43*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_43, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2 + C2*an_1 + C3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2 + C2*an_1 + C3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*an_1, C3*n**2, C1*an_1*an_2)
<class 'tuple'> (n, C0*an_1**2, C2*an_1, C3*n**2, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_4*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4*n, C0*an_1**2*n)
<class 'tuple'> (an_4*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*an_2**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_18*an_2**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_18*an_2**2)
<class 'tuple'> (n, C1*n, C0*an_18*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*an_4 + C2*an_1 + C3*an_2*an_9*n + an_4 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*an_4 + C2*an_1 + C3*an_2*an_9*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C2*an_1, C1*an_1*an_4, C0*an_1*an_2*n, C3*an_2*an_9*n)
<class 'tuple'> (an_4, C2*an_1, C1*an_1*an_4, C0*an_1*an_2*n, C3*an_2*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
an_1*an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_2*n**2 + C2*an_6*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_2*n**2 + C2*an_6*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3, C1*an_2*n**2, C2*an_6*n)
<class 'tuple'> (n, C0*an_1*an_3, C1*an_2*n**2, C2*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**4 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**4, an_1*n**2)
<class 'tuple'> (C0*an_1**4, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_3 + C1*an_4*n + n <class 'ProGED.model.Model'>
C0*an_1**3*an_3 + C1*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*an_3, C1*an_4*n)
<class 'tuple'> (n, C0*an_1**3*an_3, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46309510999890335


Equation discovery for all (chosen) OEIS sequences took 0.4631042279997928 secconds, i.e. 0.007718403799996546 minutes or 0.00012864006333327579 hours.
41





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 41
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> C0*an_1*n**2 + C1*n + an_1*n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_2*an_49*n + n, p = 3.885435344808601e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + n, p = 1.235568439649135e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2 + an_2, p = 4.942273758596542e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + n, p = 4.0913634180834555e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**3*n**2, p = 2.6011807874667982e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_14*n**2 + C1*an_2*n + n, p = 9.325565177211207e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2*n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_2, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2**2*an_3*an_43, p = 5.78852889863882e-09, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_19 + an_1, p = 2.4677264915182436e-07, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1*an_2*n, p = 1.61468501624423e-07, parse trees = 1, valid = False
-> an_21*n, p = 6.557377129204888e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*an_47 + n, p = 3.018543402311208e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_3 + n**4, p = 1.0229508196721323e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + an_1*an_29*an_3, p = 2.7601453269154234e-10, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_14, p = 0.00032788714796885246, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_4*n, p = 1.261751142166085e-06, parse trees = 1, valid = False
-> C0*an_1*n**6 + an_1*n, p = 1.1301426498253184e-07, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_25, p = 9.442622951753084e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_14*n, p = 6.557742959377051e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
C0*an_1*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_49*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_49*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*an_49*n)
<class 'tuple'> (n, C0*an_1*an_2*an_49*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_1*an_2)
<class 'tuple'> (n, C1*an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_2, C0*an_1*n**3)
<class 'tuple'> (an_2, C1*an_2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_2)
<class 'tuple'> (n, C0*an_1**2, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**3*n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1**3*n**2)
<class 'tuple'> (C0*n**2, C1*n, an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_14*n**2 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_14*n**2 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2*n, C0*an_1*an_14*n**2)
<class 'tuple'> (n, C1*an_2*n, C0*an_1*an_14*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_2*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n**2)
<class 'tuple'> (an_2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
<class 'tuple'> (n, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*an_3*an_43 <class 'ProGED.model.Model'>
an_2**2*an_3*an_43 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_43, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n)
<class 'tuple'> (an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2)
<class 'tuple'> (n, C0*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_19 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_19 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_19)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_19)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2*n, C0*an_1*an_3*n)
<class 'tuple'> (an_1*an_2*n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_21*n <class 'ProGED.model.Model'>
an_21*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_21, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_47 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_47 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_47)
<class 'tuple'> (n, C0*an_1, C1*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n**4 <class 'ProGED.model.Model'>
C0*an_3 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_3)
<class 'tuple'> (n**4, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + an_1*an_29*an_3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + an_1*an_29*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n**2, an_1*an_29*an_3)
<class 'tuple'> (C0*an_2, C1*n**2, an_1*an_29*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_14 <class 'ProGED.model.Model'>
an_14 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_4*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_4*n)
<class 'tuple'> (C0*an_1, C1*n**2, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**6 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**6 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**6)
<class 'tuple'> (an_1*n, C0*an_1*n**6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_25 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_25 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_25, C0*n**2, C1*n)
<class 'tuple'> (an_25, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n**2)
<class 'tuple'> (an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n)
<class 'tuple'> (an_1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14*n <class 'ProGED.model.Model'>
an_14*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n)
<class 'tuple'> (an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.45486369999889575


Equation discovery for all (chosen) OEIS sequences took 0.4548701229996368 secconds, i.e. 0.007581168716660614 minutes or 0.00012635281194434356 hours.
42





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 42
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 62 models
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*an_1*an_12*n + an_1*n, p = 1.287389975700452e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n, p = 9.788977848793952e-11, parse trees = 1, valid = False
-> C0*an_1**3*an_2 + C1*an_1 + an_2, p = 1.291609152687618e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + n**3, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_10, p = 1.0131127662456337e-06, parse trees = 1, valid = False
-> an_39*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> an_1**2*an_4*n, p = 1.1204074349835457e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*n + an_1*n**3, p = 5.35164848924908e-09, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n, p = 7.533474411789082e-08, parse trees = 1, valid = False
-> C0*an_4*n**2 + n, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.014008697704918038, parse trees = 2, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_42 + C1*an_9*n + C2*n + an_8, p = 4.1402020099115503e-13, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.5876735644540003e-05, parse trees = 1, valid = False
-> an_1*an_36*n, p = 8.384842784197803e-06, parse trees = 1, valid = False
-> C0*an_1*an_46*an_49 + n, p = 1.8327525211361309e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1**3, p = 0.00014436198017874117, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n**2 + C3*n + an_2, p = 1.7792185530947548e-07, parse trees = 1, valid = False
-> C0*an_1**4*n**4 + C1*an_1*n**2 + C2*an_1 + C3*n + an_1*n, p = 1.6689404856960204e-13, parse trees = 1, valid = False
-> an_1**6*n**3, p = 3.1471765203169846e-08, parse trees = 1, valid = False
-> C0*an_1*an_16*an_30*n**4 + C1*an_3 + C2*n + an_1*n, p = 3.1964231371628397e-16, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n + n, p = 1.6365453672333833e-06, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_1*an_4*n**2 + an_1, p = 1.344488921980255e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_1*an_2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n**2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n + an_1*n, p = 8.066933531881529e-07, parse trees = 1, valid = False
-> C0*an_2**2*n + C1*n**3 + an_1*n, p = 1.9769095034386183e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 6.005508196721317e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1*an_32*n, p = 9.870904627606452e-09, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + an_1, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_3*n, p = 0.0042622950819672135, parse trees = 2, valid = False
-> C0*an_2*n + an_1*an_2, p = 2.0592807327485583e-05, parse trees = 1, valid = False
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_12*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_12*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_12*n)
<class 'tuple'> (an_1*n, C0*an_1*an_12*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*an_1, C3*n, an_1*n, C1*an_1*n**3)
<class 'tuple'> (C0*an_1**2, C2*an_1, C3*n, an_1*n, C1*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1**3*an_2 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1**3*an_2)
<class 'tuple'> (an_2, C1*an_1, C0*an_1**3*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*n)
<class 'tuple'> (n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_10 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_10 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_10, C0*an_1*n**2)
<class 'tuple'> (an_10, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_39*n <class 'ProGED.model.Model'>
an_39*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_39, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4*n <class 'ProGED.model.Model'>
an_1**2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1**2*an_2, C1*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1**2*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_1, C2*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + n <class 'ProGED.model.Model'>
C0*an_4*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n**2)
<class 'tuple'> (n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_42 + C1*an_9*n + C2*n + an_8 <class 'ProGED.model.Model'>
C0*an_42 + C1*an_9*n + C2*n + an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_8, C0*an_42, C2*n, C1*an_9*n)
<class 'tuple'> (an_8, C0*an_42, C2*n, C1*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4)
<class 'tuple'> (C0*n, an_2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_36*n <class 'ProGED.model.Model'>
an_1*an_36*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_36, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_46*an_49 + n <class 'ProGED.model.Model'>
C0*an_1*an_46*an_49 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_46*an_49)
<class 'tuple'> (n, C0*an_1*an_46*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1)
<class 'tuple'> (an_1**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**2 + C3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**2 + C3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_2, C2*n**2, C3*n)
<class 'tuple'> (an_2, C0*an_1, C1*an_2, C2*n**2, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4*n**4 + C1*an_1*n**2 + C2*an_1 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**4*n**4 + C1*an_1*n**2 + C2*an_1 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n, an_1*n, C0*an_1**4*n**4, C1*an_1*n**2)
<class 'tuple'> (C2*an_1, C3*n, an_1*n, C0*an_1**4*n**4, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**6*n**3 <class 'ProGED.model.Model'>
an_1**6*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**6, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_16*an_30*n**4 + C1*an_3 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_16*an_30*n**4 + C1*an_3 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, C2*n, an_1*n, C0*an_1*an_16*an_30*n**4)
<class 'tuple'> (C1*an_3, C2*n, an_1*n, C0*an_1*an_16*an_30*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_4*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_4*n**2)
<class 'tuple'> (an_1, C0*an_1*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n**3)
<class 'tuple'> (an_1*an_2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2)
<class 'tuple'> (n**2, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n, C1*an_4*n)
<class 'tuple'> (C0*an_1, an_1*n, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n + C1*n**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_2**2*n + C1*n**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**3, an_1*n, C0*an_2**2*n)
<class 'tuple'> (C1*n**3, an_1*n, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1*an_32*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1*an_32*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*n, an_1*an_32*n)
<class 'tuple'> (C1*an_1, C0*an_1*n, an_1*an_32*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_2*n)
<class 'tuple'> (an_1*an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5173715260007157


Equation discovery for all (chosen) OEIS sequences took 0.5173778790012875 secconds, i.e. 0.008622964650021459 minutes or 0.00014371607750035764 hours.
43





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 43
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*n + an_18*an_2, p = 1.519305533078929e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_26*n, p = 6.432961349378593e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0028282544262295097, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_12*an_48, p = 1.195162608020544e-07, parse trees = 1, valid = False
-> C0*an_4 + an_1*n, p = 5.2572964256920205e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + an_1*n, p = 2.673370003310022e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 2.4548180508500734e-05, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_47, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2*an_3*an_38 + an_2, p = 3.4731173391832917e-09, parse trees = 1, valid = False
-> an_1*an_41, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099035e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2*n + an_1, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.00021190174684224692, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n**2 + C1*n + an_1**2, p = 1.0490588401056613e-09, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + C2*n + n, p = 5.3731386503716244e-08, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*an_34 + an_1, p = 3.2164806745939162e-06, parse trees = 1, valid = False
-> an_44, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_39*n**2 + n**2, p = 3.14754098360656e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1 + C1*an_40 + an_1*an_3*n**3, p = 1.4024236082937824e-11, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_1, p = 0.00010453562192430208, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n + C2*n + n**2, p = 4.708927707605487e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_49, p = 3.0185434023112076e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_3 + an_1*n**2, p = 8.204178108518634e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n + an_1, p = 1.4139751972896435e-08, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165045e-05, parse trees = 1, valid = False
-> an_1**2*an_6, p = 9.920162480560051e-06, parse trees = 1, valid = False
-> an_28, p = 0.0003278688524598914, parse trees = 1, valid = False
C0*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n)
<class 'tuple'> (C0*n**2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_18*an_2 <class 'ProGED.model.Model'>
C0*n + an_18*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_18*an_2)
<class 'tuple'> (C0*n, an_18*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_26*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_26*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_26*n)
<class 'tuple'> (C0*an_1, an_1*an_26*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12*an_48 <class 'ProGED.model.Model'>
an_12*an_48 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_12, an_48)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + an_1*n <class 'ProGED.model.Model'>
C0*an_4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*n)
<class 'tuple'> (C0*an_4, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**2*an_3)
<class 'tuple'> (an_1*n, C0*an_1**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_47 <class 'ProGED.model.Model'>
an_47 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*an_38 + an_2 <class 'ProGED.model.Model'>
C0*an_2*an_3*an_38 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*an_3*an_38)
<class 'tuple'> (an_2, C0*an_2*an_3*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_41 <class 'ProGED.model.Model'>
an_1*an_41 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**3, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*n**3, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n**2 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n**2 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1**3*an_3*n**2)
<class 'tuple'> (an_1**2, C1*n, C0*an_1**3*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_2*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_34 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_34 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_34)
<class 'tuple'> (an_1, C0*an_1*an_34)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_44 <class 'ProGED.model.Model'>
an_44 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_39*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_39*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_39*n**2)
<class 'tuple'> (n**2, C0*an_39*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_40 + an_1*an_3*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_40 + an_1*an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_40, an_1*an_3*n**3)
<class 'tuple'> (C0*an_1, C1*an_40, an_1*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3)
<class 'tuple'> (an_1, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_3*n + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C2*n, C1*an_3*n)
<class 'tuple'> (n**2, C0*an_1, C2*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_49 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_49, C0*an_1, C1*n)
<class 'tuple'> (an_49, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*an_3 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_3 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_1*n**2, C0*an_1**3*n)
<class 'tuple'> (C1*an_3, an_1*n**2, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (an_1, C2*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n**2 <class 'ProGED.model.Model'>
an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_6 <class 'ProGED.model.Model'>
an_1**2*an_6 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_28 <class 'ProGED.model.Model'>
an_28 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.42724828999962483


Equation discovery for all (chosen) OEIS sequences took 0.42725525700006983 secconds, i.e. 0.007120920950001164 minutes or 0.00011868201583335274 hours.
44





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 44
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1, p = 4.0913634180834555e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1**2*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_1**3*an_2*n**2, p = 6.975439270175079e-08, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**3*an_2*an_3*n + C1*an_1**2*n**2 + C2*n + n, p = 9.722425097372696e-13, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_18, p = 2.978224192974856e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> C0*an_3 + an_1*an_2, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**4, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_34*n + C1*n**2 + n, p = 1.8885245901639395e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0018413114754098378, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_2 + an_1**2, p = 5.945636886470218e-09, parse trees = 1, valid = False
-> C0*an_1**3*an_2 + an_1*an_2, p = 2.1526819211460308e-07, parse trees = 1, valid = False
-> C0*an_1 + an_9, p = 2.573216436441817e-05, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_48*n + C3*n + an_3, p = 9.747993605189574e-13, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_48 + an_1, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_2 + an_2, p = 0.0008052315685747563, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**3, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 0.0003583614727223867, parse trees = 2, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069625e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n**2, p = 5.419126640555825e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*an_5, p = 5.715984957504572e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + n**2, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2**2*n + an_1**3*n**2, p = 3.1710063394507877e-12, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + n, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + C2*an_2 + C3*an_5 + C4*n + an_1, p = 3.511523635594884e-14, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**2)
<class 'tuple'> (C0*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**3*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**3*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**3*an_2*n**2)
<class 'tuple'> (C0*n**2, an_1**3*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*an_3*n + C1*an_1**2*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*an_3*n + C1*an_1**2*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1**2*n**2, C0*an_1**3*an_2*an_3*n)
<class 'tuple'> (n, C2*n, C1*an_1**2*n**2, C0*an_1**3*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_18 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_18, C0*an_1*an_3)
<class 'tuple'> (an_18, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2**2 <class 'ProGED.model.Model'>
an_1*an_2**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_3 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*an_2)
<class 'tuple'> (C0*an_3, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**4)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_34*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_34*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_34*n)
<class 'tuple'> (n, C1*n**2, C0*an_34*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C2*an_2, C0*an_1*an_2)
<class 'tuple'> (an_1**2, C1*an_1, C2*an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**3*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1**3*an_2)
<class 'tuple'> (an_1*an_2, C0*an_1**3*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_9 <class 'ProGED.model.Model'>
C0*an_1 + an_9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_9, C0*an_1)
<class 'tuple'> (an_9, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_48*n + C3*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_48*n + C3*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C3*n, C0*an_1*an_2, C2*an_48*n)
<class 'tuple'> (an_3, C1*an_1, C3*n, C0*an_1*an_2, C2*an_48*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_48 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_48 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_48, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_48, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2)
<class 'tuple'> (an_2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*n)
<class 'tuple'> (n**3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*an_5 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_5, C0*an_1*an_2)
<class 'tuple'> (C1*n, an_1*an_5, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*n)
<class 'tuple'> (n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2**2*n + an_1**3*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2**2*n + an_1**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n**2, C0*an_1*n, C1*an_2**2*n)
<class 'tuple'> (an_1**3*n**2, C0*an_1*n, C1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*n**3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**3 + C2*an_2 + C3*an_5 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**3 + C2*an_2 + C3*an_5 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*an_2, C3*an_5, C4*n, C1*an_2*n**3)
<class 'tuple'> (an_1, C0*an_1, C2*an_2, C3*an_5, C4*n, C1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4692284720003954


Equation discovery for all (chosen) OEIS sequences took 0.46923511900058656 secconds, i.e. 0.007820585316676443 minutes or 0.00013034308861127405 hours.
45





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 45
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_39, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_36 + C1*an_3 + n, p = 1.7646830778625469e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_14*n, p = 6.557742959377051e-05, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**4, p = 8.418443247085307e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n + an_2, p = 6.0055081967213155e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_19 + C3*n + n, p = 1.0731446486192163e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_40*n, p = 1.1656306034425799e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.0010665520021499605, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_2*n + an_1, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_37 + an_1, p = 2.515452835259339e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**4 + an_1*an_3, p = 2.007083940946603e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*n + an_6, p = 7.280655737704919e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**3*an_3*n, p = 4.4556166721833704e-06, parse trees = 1, valid = False
-> C0*an_12*an_2 + n**2, p = 3.0404936748042656e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + an_1*n, p = 6.511823890226985e-19, parse trees = 1, valid = False
-> an_2*an_3*n**2, p = 1.645913583564754e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + n, p = 4.0913634180834555e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3 + an_1*n, p = 1.3490983026050158e-10, parse trees = 1, valid = False
-> C0*n**3 + an_2, p = 0.0001668196721311477, parse trees = 1, valid = False
-> C0*an_14 + an_2, p = 7.596948127802923e-06, parse trees = 1, valid = False
-> an_1*an_2*an_5*n**3, p = 4.9668815157803294e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + n, p = 7.67917441547972e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2*an_3*n**4 + an_1*n, p = 7.75048807797231e-10, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> an_24*n, p = 6.557377051340992e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_48, p = 6.037086804622417e-07, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1*n, p = 2.825356624563295e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_31, p = 2.0123622682076179e-07, parse trees = 1, valid = False
-> C0*an_18*an_40*n**2 + C1*an_42*n + C2*n + an_1*n, p = 3.845777520310538e-16, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_39 <class 'ProGED.model.Model'>
C0*n + an_39 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_39, C0*n)
<class 'tuple'> (an_39, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_36 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_36 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C0*an_1**2*an_2*an_36)
<class 'tuple'> (n, C1*an_3, C0*an_1**2*an_2*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_14*n <class 'ProGED.model.Model'>
an_14*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*an_3*n**4 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_19 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_19 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_19, C3*n, C0*an_1*an_2)
<class 'tuple'> (n, C1*an_1, C2*an_19, C3*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_40*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_40*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_40*n)
<class 'tuple'> (C0*an_1, C1*an_2, an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n)
<class 'tuple'> (an_1, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37 + an_1 <class 'ProGED.model.Model'>
C0*an_37 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_37)
<class 'tuple'> (an_1, C0*an_37)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**4 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**4 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**4, an_1*an_3, C0*an_1*n)
<class 'tuple'> (C1*n**4, an_1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3)
<class 'tuple'> (an_1, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_6 <class 'ProGED.model.Model'>
C0*n + an_6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_6, C0*n)
<class 'tuple'> (an_6, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_3*n <class 'ProGED.model.Model'>
an_1**3*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_12*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_12*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_12*an_2)
<class 'tuple'> (n**2, C0*an_12*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*n**2 + C5*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C3*an_1, C4*n**2, C5*n, an_1*n, C1*an_1*n**3, C2*an_1*n)
<class 'tuple'> (C0*an_1**2, C3*an_1, C4*n**2, C5*n, an_1*n, C1*an_1*n**3, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_2)
<class 'tuple'> (n, C0*an_1**2, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_1*n, C0*an_1*an_3)
<class 'tuple'> (C1*an_3, an_1*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_2 <class 'ProGED.model.Model'>
C0*n**3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**3)
<class 'tuple'> (an_2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + an_2 <class 'ProGED.model.Model'>
C0*an_14 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_14)
<class 'tuple'> (an_2, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_5*n**3 <class 'ProGED.model.Model'>
an_1*an_2*an_5*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_5, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n**4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n**4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n, C1*an_2*an_3*n**4)
<class 'tuple'> (C0*an_1, an_1*n, C1*an_2*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_24*n <class 'ProGED.model.Model'>
an_24*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_24, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_48 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48, C1*n, C0*an_1*n)
<class 'tuple'> (an_48, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**4)
<class 'tuple'> (an_1*n, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1*an_31 <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_31 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_31)
<class 'tuple'> (C0*n**3, an_1*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*an_40*n**2 + C1*an_42*n + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_18*an_40*n**2 + C1*an_42*n + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C1*an_42*n, C0*an_18*an_40*n**2)
<class 'tuple'> (C2*n, an_1*n, C1*an_42*n, C0*an_18*an_40*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4809482830005436


Equation discovery for all (chosen) OEIS sequences took 0.4809546920005232 secconds, i.e. 0.008015911533342053 minutes or 0.0001335985255557009 hours.
46





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 46
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**4 + n, p = 1.0238899220639635e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.00021190174684224692, parse trees = 1, valid = False
-> C0*an_2 + C1*an_47*n**2 + C2*n + an_1, p = 2.797513448262193e-09, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_49 + an_1*n**2, p = 2.9809569530662715e-09, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.48452073081007e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_3*n**2 + C1*n + an_1**3*n, p = 1.2832176015888118e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 3.138947671578783e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_24, p = 2.3158660864706957e-07, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1**2*an_2, p = 6.975439270175082e-08, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + n**2, p = 2.2095737704918065e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2 + C2*n + n, p = 2.965364255157925e-07, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2*an_14*n + C1*n + n**5, p = 2.4703950016612354e-11, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 3.138947671578784e-06, parse trees = 1, valid = False
-> C0*n**3 + an_3, p = 5.11475409836066e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00035686427519484036, parse trees = 2, valid = False
-> C0*an_1 + an_3*n**2, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_2, p = 0.00016104631371495132, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + C1*an_1*an_4 + C2*an_1 + an_1, p = 9.369799041969362e-11, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> an_25, p = 0.00032786885249142634, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2 + an_2*n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_1*an_16, p = 4.1924424469315295e-05, parse trees = 1, valid = False
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n**4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**4, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*n**4, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_47*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_47*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C2*n, C1*an_47*n**2)
<class 'tuple'> (an_1, C0*an_2, C2*n, C1*an_47*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_49 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_49 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2, C1*an_2*an_49)
<class 'tuple'> (C0*an_1, an_1*n**2, C1*an_2*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n**2 + C1*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_3*n**2 + C1*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**3*n, C0*an_3*n**2)
<class 'tuple'> (C1*n, an_1**3*n, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n)
<class 'tuple'> (an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_24 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_24 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_24, C0*an_1, C1*n)
<class 'tuple'> (an_24, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_2, C0*an_1*n**4)
<class 'tuple'> (an_1**2*an_2, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**3)
<class 'tuple'> (n**2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_14*n + C1*n + n**5 <class 'ProGED.model.Model'>
C0*an_1**2*an_14*n + C1*n + n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**5, C1*n, C0*an_1**2*an_14*n)
<class 'tuple'> (n**5, C1*n, C0*an_1**2*an_14*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_3 <class 'ProGED.model.Model'>
C0*n**3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**3)
<class 'tuple'> (an_3, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1**2*n)
<class 'tuple'> (C0*an_2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_3*n**2)
<class 'tuple'> (C0*an_1, an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
<class 'tuple'> (an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + C1*an_1*an_4 + C2*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + C1*an_1*an_4 + C2*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C1*an_1*an_4, C0*an_1*an_3*n**2)
<class 'tuple'> (an_1, C2*an_1, C1*an_1*an_4, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_25 <class 'ProGED.model.Model'>
an_25 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_2*n <class 'ProGED.model.Model'>
C0*an_2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n)
<class 'tuple'> (C0*an_2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_16 <class 'ProGED.model.Model'>
an_1*an_16 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_16)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4714156659993023


Equation discovery for all (chosen) OEIS sequences took 0.4714228379998531 secconds, i.e. 0.007857047299997552 minutes or 0.0001309507883332925 hours.
47





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 47
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_3 + C2*n**2 + n**2, p = 2.8441386723998964e-08, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*n + an_1*n, p = 9.978300069954606e-09, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_31*n**2 + an_4*n, p = 5.877547199914108e-11, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_9 + an_1*n, p = 5.146432872883636e-06, parse trees = 1, valid = False
-> C0*an_1*an_19 + C1*an_1*n + C2*an_2 + n, p = 1.7885744143653609e-09, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n, p = 1.3257442622950836e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*an_12*an_3*n**2, p = 2.5403870194453366e-09, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_13, p = 0.00032792983749180325, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_1, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0011866497823165823, parse trees = 2, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748776, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + an_2, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_47*n**4, p = 5.245901639344269e-07, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 1.2011016393442634e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + n**2, p = 1.4139751972896441e-08, parse trees = 1, valid = False
-> C0*an_1*an_12 + C1*an_1*n + C2*an_2*n**2 + C3*n + an_31*n, p = 3.1295005267947698e-15, parse trees = 1, valid = False
-> C0*an_2*n + an_2*n, p = 3.220926274299027e-05, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n**2 + C2*n + an_1, p = 3.9277088813601215e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + C2*n + an_2*n, p = 5.725475611051732e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_31 + n, p = 3.934426229508481e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_4*n, p = 1.9360640476515684e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*an_24, p = 8.225753859048926e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_3 + C2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_3 + C2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C2*n**2, C0*an_2*n)
<class 'tuple'> (n**2, C1*an_3, C2*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C0*an_1**2*n, C1*an_1*n)
<class 'tuple'> (C2*n, an_1*n, C0*an_1**2*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_31*n**2 + an_4*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_31*n**2 + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_4*n, C1*an_31*n**2)
<class 'tuple'> (C0*an_1**2, an_4*n, C1*an_31*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_9 + an_1*n <class 'ProGED.model.Model'>
C0*an_9 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_9, an_1*n)
<class 'tuple'> (C0*an_9, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_19 + C1*an_1*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_19 + C1*an_1*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_2, C0*an_1*an_19, C1*an_1*n)
<class 'tuple'> (n, C2*an_2, C0*an_1*an_19, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**3)
<class 'tuple'> (n, C1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_12*an_3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_12*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_12, an_3, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_13 <class 'ProGED.model.Model'>
an_13 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2)
<class 'tuple'> (an_1, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_47*n**4 <class 'ProGED.model.Model'>
an_47*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_47, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
<class 'tuple'> (an_2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*an_2, C3*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*an_2, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_12 + C1*an_1*n + C2*an_2*n**2 + C3*n + an_31*n <class 'ProGED.model.Model'>
C0*an_1*an_12 + C1*an_1*n + C2*an_2*n**2 + C3*n + an_31*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C3*n, an_31*n, C0*an_1*an_12, C1*an_1*n, C2*an_2*n**2)
<class 'tuple'> (C3*n, an_31*n, C0*an_1*an_12, C1*an_1*n, C2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_2*n)
<class 'tuple'> (an_2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C2*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C1*n**2, C2*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_2 + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2 + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C2*n, an_2*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_2, C2*n, an_2*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n)
<class 'tuple'> (an_1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_31 + n <class 'ProGED.model.Model'>
C0*an_31 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_31)
<class 'tuple'> (n, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1*an_4*n)
<class 'tuple'> (C1*n, C0*an_1*n, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*an_24 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*an_24 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_24, C0*an_1**2*n)
<class 'tuple'> (an_1*an_24, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4658403740013455


Equation discovery for all (chosen) OEIS sequences took 0.46584661999986565 secconds, i.e. 0.007764110333331094 minutes or 0.00012940183888885158 hours.
48





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 48
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 60 models
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + C2*n + an_1, p = 2.3097916828598608e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_3 + C2*n**2 + an_1, p = 6.021251822839804e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + an_1*n, p = 1.3005903937333988e-07, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_1**2*an_3*an_43*n, p = 1.269406459311501e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_26 + C2*n + n, p = 7.244504165761739e-08, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3*n + C2*n + an_2, p = 5.3822833874807645e-09, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n**2 + C1*n + an_3, p = 3.068852459016395e-05, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*an_3, p = 2.6733700033100223e-06, parse trees = 1, valid = False
-> an_24*n, p = 6.557377051340992e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_5*n + n, p = 2.3152227895726966e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**4*an_37, p = 8.765147551836137e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_22*n + C2*an_2 + C3*n + an_1**2*an_2*n, p = 1.7327903557706194e-14, parse trees = 1, valid = False
-> C0*n + an_22, p = 3.9344262439126184e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*an_7 + an_1*an_48, p = 1.1501896634520071e-08, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2*n**2 + an_1*n, p = 2.6758242446245387e-08, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_2*n**3 + an_2, p = 6.441852548598056e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**4 + n, p = 1.56964256920183e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1**4*an_2*n, p = 1.0703296978498158e-09, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_2, p = 4.909636101700147e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_8, p = 0.0003529655737704918, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_3*n**2 + an_2, p = 4.5761794061079086e-08, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1**2*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + n, p = 4.3601182477828577e-08, parse trees = 1, valid = False
-> C0*an_1**4 + an_1*n**2, p = 7.383760297666768e-07, parse trees = 1, valid = False
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_3, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_3, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_3 + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_3 + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_3, C2*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*an_3, C2*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n, C0*an_1*n**3)
<class 'tuple'> (C1*an_1, C2*n, an_1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_3*an_43*n <class 'ProGED.model.Model'>
an_1**2*an_3*an_43*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_43, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_26 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_26 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_26, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_26, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_3*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_3*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C0*an_1*an_3, C1*an_3*n)
<class 'tuple'> (an_2, C2*n, C0*an_1*an_3, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2, C1*n)
<class 'tuple'> (an_3, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_3, C0*an_1**2*n)
<class 'tuple'> (an_1*an_3, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_24*n <class 'ProGED.model.Model'>
an_24*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_24, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_5*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_5*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_5*n)
<class 'tuple'> (n, C0*an_1, C1*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**4*an_37 <class 'ProGED.model.Model'>
an_1**4*an_37 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_22*n + C2*an_2 + C3*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_22*n + C2*an_2 + C3*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*an_2, C3*n, an_1**2*an_2*n, C1*an_1*an_22*n)
<class 'tuple'> (C0*an_1**2, C2*an_2, C3*n, an_1**2*an_2*n, C1*an_1*an_22*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_22 <class 'ProGED.model.Model'>
C0*n + an_22 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_22, C0*n)
<class 'tuple'> (an_22, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**5 <class 'ProGED.model.Model'>
an_1*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_7 + an_1*an_48 <class 'ProGED.model.Model'>
C0*an_7 + an_1*an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_7, an_1*an_48)
<class 'tuple'> (C0*an_7, an_1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n, C1*an_1*an_2*n**2)
<class 'tuple'> (C0*an_1**2, an_1*n, C1*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**3 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n**3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n**3)
<class 'tuple'> (an_2, C0*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**4 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3*n**4)
<class 'tuple'> (n, C0*an_1, C1*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**4*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**4*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**4*an_2*n)
<class 'tuple'> (C0*n**2, an_1**4*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*n)
<class 'tuple'> (an_2, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8 <class 'ProGED.model.Model'>
an_8 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_3*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_3*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n, C1*an_3*n**2)
<class 'tuple'> (an_2, C0*an_2*n, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**2)
<class 'tuple'> (C0*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_3*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_3*n)
<class 'tuple'> (n, C1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**4 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**4 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**4, an_1*n**2)
<class 'tuple'> (C0*an_1**4, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5046431470000243


Equation discovery for all (chosen) OEIS sequences took 0.5046489700016537 secconds, i.e. 0.008410816166694228 minutes or 0.00014018026944490378 hours.
49





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 49
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 66 models
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> C0*n + an_1*an_2**2*an_3*an_39, p = 8.882070572337603e-11, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n**2 + C2*n + an_1*an_2*n, p = 1.8183837413704256e-08, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_45*n**2, p = 9.870904627606235e-09, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*n**4 + an_1**2*an_2*n**2, p = 2.182060489644513e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_32, p = 1.2865922698375927e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4, p = 3.361222304950635e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 1.1783126644080364e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + an_2, p = 1.1375331732900894e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + an_2, p = 3.1598143702502487e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_2 + an_2*n**2, p = 7.369768242519539e-10, parse trees = 1, valid = False
-> an_6*n**5, p = 1.9415081967213145e-07, parse trees = 1, valid = False
-> an_2*an_43, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n**4 + n, p = 1.272327913567052e-09, parse trees = 1, valid = False
-> an_19*an_2, p = 1.2660875436507529e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_13*an_2*an_3*n**2 + C1*an_2 + C2*n + an_2, p = 3.8632804252993365e-13, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n**3 + n, p = 2.13869600264802e-08, parse trees = 1, valid = False
-> C0*an_4*an_5 + C1*n + an_1, p = 4.4069359109352775e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*n + n, p = 1.017128384842786e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3*an_42*n + C1*n**3 + n**2, p = 1.4623562411268506e-12, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*an_2*n, p = 5.266357283750413e-07, parse trees = 1, valid = False
-> C0*an_1**3 + C1*n + n, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n**2, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> C0*an_4*n**2 + C1*n + an_1**2, p = 1.6133867063763058e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**2 + C2*n**2 + n, p = 3.0716697661918887e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_2 + an_2, p = 6.06062756261113e-07, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_2*n**2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n + an_1*an_29, p = 6.037086804627252e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_25 + an_1*n, p = 1.4904784766804694e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n**3, p = 2.825356624563294e-06, parse trees = 1, valid = False
-> an_2*an_37, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1**2*n, p = 8.719299087718844e-06, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**2*an_35*n**2 + C1*an_1*an_3*n + C2*n + an_1*n, p = 7.173051898158375e-14, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*an_1**3 + an_1*n, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_1, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> an_36*n**4, p = 5.245901639344269e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_2 + C3*n**2 + an_2*an_32, p = 1.2717382426462986e-13, parse trees = 1, valid = False
C0*an_1*an_2 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2**2*an_3*an_39 <class 'ProGED.model.Model'>
C0*n + an_1*an_2**2*an_3*an_39 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2**2*an_3*an_39)
<class 'tuple'> (C0*n, an_1*an_2**2*an_3*an_39)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n)
<class 'tuple'> (an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**2 + C2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**2 + C2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, C1*n**2, C2*n, an_1*an_2*n)
<class 'tuple'> (C0*an_3, C1*n**2, C2*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_45*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_45*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_45*n**2)
<class 'tuple'> (C0*an_1, an_1*an_45*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**4 + an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**4 + an_1**2*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**4, an_1**2*an_2*n**2)
<class 'tuple'> (C0*n**4, an_1**2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*an_32 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_32, C0*an_1*n**2)
<class 'tuple'> (an_1*an_32, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4)
<class 'tuple'> (C0*an_1, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + C3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C2*an_2, C3*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C2*an_2, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C1*an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_2*n**2, C0*an_1*an_2**2*n)
<class 'tuple'> (C1*an_2, an_2*n**2, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6*n**5 <class 'ProGED.model.Model'>
an_6*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_43 <class 'ProGED.model.Model'>
an_2*an_43 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_43)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**3*n**4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2**3*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2**3*n**4)
<class 'tuple'> (n, C0*an_1*an_2**3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_19*an_2 <class 'ProGED.model.Model'>
an_19*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_19, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_13*an_2*an_3*n**2 + C1*an_2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_13*an_2*an_3*n**2 + C1*an_2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_2, C2*n, C0*an_13*an_2*an_3*n**2)
<class 'tuple'> (an_2, C1*an_2, C2*n, C0*an_13*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*an_3*n**3)
<class 'tuple'> (n, C0*an_1**3*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*an_5 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_4*an_5 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_4*an_5)
<class 'tuple'> (an_1, C1*n, C0*an_4*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (n, C2*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*an_42*n + C1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*an_42*n + C1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n**3, C0*an_1**2*an_3*an_42*n)
<class 'tuple'> (n**2, C1*n**3, C0*an_1**2*an_3*an_42*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3, C1*n)
<class 'tuple'> (n, C0*an_1**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*n**2)
<class 'tuple'> (n**2, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4*n**2 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_4*n**2 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_4*n**2)
<class 'tuple'> (an_1**2, C1*n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**2 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**2 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n**2, C1*an_2*n**2)
<class 'tuple'> (n, C0*an_1, C2*n**2, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_1, C2*an_2)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_1, C2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n**2)
<class 'tuple'> (C0*an_1, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_29 <class 'ProGED.model.Model'>
C0*n + an_1*an_29 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_29)
<class 'tuple'> (C0*n, an_1*an_29)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_25 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_25 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_25, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_25, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n**3)
<class 'tuple'> (C0*n**2, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_37 <class 'ProGED.model.Model'>
an_2*an_37 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_37)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*an_2)
<class 'tuple'> (an_1**2*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_35*n**2 + C1*an_1*an_3*n + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_35*n**2 + C1*an_1*an_3*n + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C0*an_1**2*an_35*n**2, C1*an_1*an_3*n)
<class 'tuple'> (C2*n, an_1*n, C0*an_1**2*an_35*n**2, C1*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1*n)
<class 'tuple'> (C0*an_1**3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3, C1*n)
<class 'tuple'> (an_1, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_36*n**4 <class 'ProGED.model.Model'>
an_36*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_36, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*an_2 + C3*n**2 + an_2*an_32 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_2 + C3*n**2 + an_2*an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_2, C3*n**2, an_2*an_32, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, C2*an_2, C3*n**2, an_2*an_32, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5602900510002655


Equation discovery for all (chosen) OEIS sequences took 0.5603000289993361 secconds, i.e. 0.009338333816655602 minutes or 0.00015563889694426 hours.
50





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 50
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 50 models
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*an_3 + C1*n + n, p = 1.841311475409837e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165044e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*an_2 + C4*an_5*n + C5*n + an_2*n, p = 1.1299984984002968e-14, parse trees = 1, valid = False
-> C0*an_18*n**3 + an_1, p = 2.0123631777762424e-07, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1, p = 3.0513851545283554e-05, parse trees = 2, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1*an_4*n**3 + C1*an_1*n + an_1, p = 4.126038134339409e-09, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000007e-05, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.555173340499869e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2**2, p = 1.2916091526876182e-07, parse trees = 1, valid = False
-> C0*an_4 + an_1*an_3**2, p = 3.684804861056993e-08, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1**2*an_4*n**2 + C1*n + an_2*n, p = 1.246040006381702e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_29 + C1*n + n**3, p = 2.2662295081985387e-08, parse trees = 1, valid = False
-> C0*an_2 + an_5, p = 2.9132670429096125e-05, parse trees = 1, valid = False
-> C0*n + an_30, p = 3.934426229509143e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_46, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_31, p = 0.00032786885245904, parse trees = 1, valid = False
-> C0*an_1**2*an_29*an_3*n**3 + an_1, p = 3.895621134152515e-11, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_4 + an_30, p = 3.4703247310478292e-09, parse trees = 1, valid = False
-> an_4*n**2, p = 0.00013704918032786888, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_37*n**2 + an_9, p = 6.904324886169079e-13, parse trees = 1, valid = False
-> C0*an_1 + an_2*n**2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**4 + n, p = 2.651488524590169e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4*n, p = 6.722444609901273e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n**2, p = 1.9620532115022853e-05, parse trees = 1, valid = False
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + n**2 <class 'ProGED.model.Model'>
C0*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**3)
<class 'tuple'> (n**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n**2 <class 'ProGED.model.Model'>
an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*an_2 + C4*an_5*n + C5*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*an_2 + C4*an_5*n + C5*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*an_2, C5*n, an_2*n, C0*an_1*an_2, C1*an_1*n, C4*an_5*n)
<class 'tuple'> (C2*an_1, C3*an_2, C5*n, an_2*n, C0*an_1*an_2, C1*an_1*n, C4*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_18*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_18*n**3)
<class 'tuple'> (an_1, C0*an_18*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4*n**3 + C1*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4*n**3 + C1*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1*n, C0*an_1*an_4*n**3)
<class 'tuple'> (an_1, C1*an_1*n, C0*an_1*an_4*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_2**2)
<class 'tuple'> (C0*an_1, an_1**2*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1*an_3**2 <class 'ProGED.model.Model'>
C0*an_4 + an_1*an_3**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*an_3**2)
<class 'tuple'> (C0*an_4, an_1*an_3**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_4*n**2 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_4*n**2 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n, C0*an_1**2*an_4*n**2)
<class 'tuple'> (C1*n, an_2*n, C0*an_1**2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2 <class 'ProGED.model.Model'>
an_1*an_2**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_29 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_29 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_29, C1*n)
<class 'tuple'> (n**3, C0*an_29, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_5 <class 'ProGED.model.Model'>
C0*an_2 + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*an_2)
<class 'tuple'> (an_5, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_30 <class 'ProGED.model.Model'>
C0*n + an_30 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_30, C0*n)
<class 'tuple'> (an_30, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_46 <class 'ProGED.model.Model'>
an_46 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_31 <class 'ProGED.model.Model'>
an_31 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_29*an_3*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_29*an_3*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_29*an_3*n**3)
<class 'tuple'> (an_1, C0*an_1**2*an_29*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_4 + an_30 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_4 + an_30 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_30, C1*an_4, C0*an_2*n)
<class 'tuple'> (an_30, C1*an_4, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n**2 <class 'ProGED.model.Model'>
an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_37*n**2 + an_9 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_37*n**2 + an_9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_9, C0*an_1*n, C1*an_37*n**2)
<class 'tuple'> (an_9, C0*an_1*n, C1*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n**2)
<class 'tuple'> (C0*an_1, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**4 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**4, C0*an_1*n)
<class 'tuple'> (n, C1*n**4, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**2)
<class 'tuple'> (an_2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4*n)
<class 'tuple'> (C0*an_1, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_3)
<class 'tuple'> (n**2, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46098951299973123


Equation discovery for all (chosen) OEIS sequences took 0.460995372999605 secconds, i.e. 0.007683256216660083 minutes or 0.00012805427027766806 hours.
51





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 51
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n**3, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1*n**2 + an_1*n**2, p = 2.8253566245632938e-05, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_1**4*an_2*n**2, p = 1.0332873221500954e-09, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*an_5*n, p = 3.215587207739856e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2*an_37*n**2, p = 5.06434948789155e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_16, p = 0.0003278704990549016, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n + C2*an_1 + C3*n + n, p = 2.771750019431832e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.708927707605491e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_15*n**2, p = 1.3114973644478696e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_2*an_3**2*n**2, p = 1.9487137146030782e-07, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165045e-05, parse trees = 1, valid = False
-> C0*an_32*n**2 + an_2*n**2, p = 1.2154438770939989e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_2*an_40*n + n, p = 3.0386096927349306e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**4 + C1*an_1 + an_1*n, p = 8.370527124210097e-09, parse trees = 1, valid = False
-> an_1*an_39, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_17*an_2*n**3, p = 1.5541764794969583e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.00031996560064498814, parse trees = 1, valid = False
-> an_12*an_2*n**4, p = 2.0269957832028455e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_3*n, p = 1.3080354743348577e-06, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n**3 + n, p = 2.034256769685572e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 6.0055081967213155e-05, parse trees = 1, valid = False
-> C0*an_1**3*n + an_1, p = 2.8872396035748254e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*an_15, p = 4.192491574874336e-05, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*an_1 + an_2*an_3, p = 3.156916217656986e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n**2, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> an_1*an_16*an_2*n, p = 3.237879048267704e-07, parse trees = 1, valid = False
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*an_1, C0*an_1*n)
<class 'tuple'> (n**3, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1**4*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1**4*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1**4*an_2*n**2)
<class 'tuple'> (C0*an_2, C1*n, an_1**4*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_5*n <class 'ProGED.model.Model'>
an_1*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_37*n**2 <class 'ProGED.model.Model'>
an_2*an_37*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_37, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_16 <class 'ProGED.model.Model'>
an_16 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n + C2*an_1 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n + C2*an_1 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*n, C0*an_1*an_3, C1*an_1*n)
<class 'tuple'> (n, C2*an_1, C3*n, C0*an_1*an_3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**5 <class 'ProGED.model.Model'>
an_1**2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15*n**2 <class 'ProGED.model.Model'>
an_15*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3**2*n**2 <class 'ProGED.model.Model'>
an_2*an_3**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n**2 <class 'ProGED.model.Model'>
an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_32*n**2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_32*n**2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_32*n**2)
<class 'tuple'> (an_2*n**2, C0*an_32*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
<class 'tuple'> (n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_40*n + n <class 'ProGED.model.Model'>
C0*an_2*an_40*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*an_40*n)
<class 'tuple'> (n, C0*an_2*an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**4 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**4 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1*an_2*n**4)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_39 <class 'ProGED.model.Model'>
an_1*an_39 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_39)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_17*an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*an_17*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_17*an_2*n**3)
<class 'tuple'> (C0*n, an_1*an_17*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12*an_2*n**4 <class 'ProGED.model.Model'>
an_12*an_2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_12, an_2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_3*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_1*n**3)
<class 'tuple'> (an_3*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n**3, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C2*n**3, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*n)
<class 'tuple'> (an_1, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_15 <class 'ProGED.model.Model'>
an_1*an_15 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_15)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*an_3)
<class 'tuple'> (C0*an_1, an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n**2)
<class 'tuple'> (C0*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_16*an_2*n <class 'ProGED.model.Model'>
an_1*an_16*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_16, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.44417711599999166


Equation discovery for all (chosen) OEIS sequences took 0.4441833500004577 secconds, i.e. 0.007403055833340962 minutes or 0.00012338426388901604 hours.
52





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 52
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 43 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1 + an_17, p = 2.5154566251292126e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0017843213759742016, parse trees = 2, valid = False
-> C0*an_2 + C1*an_5*n**2 + n**2, p = 2.796736361193231e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_44*n, p = 6.432961349187823e-07, parse trees = 1, valid = False
-> C0*n + an_2**2, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*an_1**2 + C2*an_1*n**3 + C3*an_16*an_4*n + C4*an_16*n + n**3, p = 2.3897346652047186e-23, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_45*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_4*an_5*n**3 + C1*n + an_1, p = 2.225972391585049e-13, parse trees = 1, valid = False
-> an_46, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1*n + an_40*n, p = 1.0061811341037365e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + an_1, p = 1.329076853580018e-06, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n + an_2, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n**2, p = 1.0463158905262614e-06, parse trees = 1, valid = False
-> C0*an_1**3*n + an_1, p = 2.8872396035748254e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_4, p = 1.0514592851384041e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.0900295619457145e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_15*n, p = 6.557486822239345e-05, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_19*an_31*n, p = 2.388844421982725e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + n**2, p = 2.2095737704918065e-05, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_1*an_2*n, p = 3.1598143702502487e-07, parse trees = 1, valid = False
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_17 <class 'ProGED.model.Model'>
C0*an_1 + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*an_1)
<class 'tuple'> (an_17, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_5*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_5*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*an_5*n**2)
<class 'tuple'> (n**2, C0*an_2, C1*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_44*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_44*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_44*n)
<class 'tuple'> (C0*an_1, an_1*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2**2 <class 'ProGED.model.Model'>
C0*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*n)
<class 'tuple'> (an_2**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n)
<class 'tuple'> (an_1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*an_1**2 + C2*an_1*n**3 + C3*an_16*an_4*n + C4*an_16*n + n**3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*an_1**2 + C2*an_1*n**3 + C3*an_16*an_4*n + C4*an_16*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*an_1**2, C2*an_1*n**3, C4*an_16*n, C0*an_1**2*an_2*n, C3*an_16*an_4*n)
<class 'tuple'> (n**3, C1*an_1**2, C2*an_1*n**3, C4*an_16*n, C0*an_1**2*an_2*n, C3*an_16*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_45*n <class 'ProGED.model.Model'>
an_45*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_45, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_4*an_5*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_4*an_5*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*an_2*an_4*an_5*n**3)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*an_2*an_4*an_5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46 <class 'ProGED.model.Model'>
an_46 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_40*n <class 'ProGED.model.Model'>
C0*an_1*n + an_40*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_40*n, C0*an_1*n)
<class 'tuple'> (an_40*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1**2*an_2)
<class 'tuple'> (an_2, C1*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3*n)
<class 'tuple'> (an_1, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_4 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_4)
<class 'tuple'> (C0*n**2, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15*n <class 'ProGED.model.Model'>
an_15*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_19*an_31*n <class 'ProGED.model.Model'>
an_19*an_31*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_19, an_31, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**3)
<class 'tuple'> (n**2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C0*an_1*n, an_1*an_2*n)
<class 'tuple'> (C1*an_2, C0*an_1*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4059285839994118


Equation discovery for all (chosen) OEIS sequences took 0.4059346579997509 secconds, i.e. 0.006765577633329182 minutes or 0.00011275962722215304 hours.
53





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 53
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**3*an_2*n**2, p = 2.906433029239615e-06, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n, p = 0.021911040000000007, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n**2 + n, p = 1.96385444068006e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1**2*an_18 + C1*an_1 + n, p = 4.935454544581023e-08, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.0028043475624832054, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_2 + an_1*an_2, p = 1.5799071851251237e-06, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> an_3**2*an_9, p = 4.701563683934822e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_38*n, p = 6.3109062373220204e-09, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_2*n, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2*n, p = 9.819272203400299e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + an_1, p = 1.8063755468519428e-06, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> an_1**2*an_3**2*n, p = 4.125570992762378e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.0007063391561408231, parse trees = 2, valid = False
-> C0*an_1*n + an_1**2*n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> an_23*n, p = 6.55737705638254e-05, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n**3, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_24, p = 0.0003278688525670495, parse trees = 1, valid = False
-> C0*n + an_1**2*an_2, p = 8.182726836166912e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2*an_3*n, p = 1.6146850162442305e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**2 + C2*n + an_1, p = 8.315250058295502e-08, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + n**4, p = 0.00017280000000000022, parse trees = 1, valid = False
-> an_48*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*an_48 + n, p = 3.0185434023112076e-06, parse trees = 1, valid = False
-> C0*an_1**3*n**3 + C1*an_2 + C2*n + an_1*n**2, p = 1.2843956374197794e-10, parse trees = 1, valid = False
-> C0*an_1**3 + an_1*an_3*an_4*n**2, p = 2.602721956102601e-10, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> an_32, p = 0.0003278688524590235, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2*n**2 <class 'ProGED.model.Model'>
an_1**3*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_2)
<class 'tuple'> (C0*an_1, an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n, C2*an_2*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1*n, C2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_18 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_18 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**2*an_18)
<class 'tuple'> (n, C1*an_1, C0*an_1**2*an_18)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*an_2, C0*an_1*n)
<class 'tuple'> (C1*an_2, an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3**2*an_9 <class 'ProGED.model.Model'>
an_3**2*an_9 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_9, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*an_38*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*an_38*n)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n**2)
<class 'tuple'> (C0*an_1, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_2*n)
<class 'tuple'> (C0*an_1**2, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n, an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**4)
<class 'tuple'> (an_1, C0*an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_3**2*n <class 'ProGED.model.Model'>
an_1**2*an_3**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2, an_3**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_23*n <class 'ProGED.model.Model'>
an_23*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_23, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n**3)
<class 'tuple'> (C0*an_2, C1*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_24 <class 'ProGED.model.Model'>
an_24 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_2)
<class 'tuple'> (C0*n, an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1*an_2*an_3*n)
<class 'tuple'> (C0*an_1*n, an_1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1**2*n, C1*an_1*n**2)
<class 'tuple'> (an_1, C2*n, C0*an_1**2*n, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**4 <class 'ProGED.model.Model'>
C0*n + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*n)
<class 'tuple'> (n**4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_48*n <class 'ProGED.model.Model'>
an_48*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_48, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_48 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_48 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_48)
<class 'tuple'> (n, C0*an_1, C1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**3 + C1*an_2 + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**3*n**3 + C1*an_2 + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C2*n, an_1*n**2, C0*an_1**3*n**3)
<class 'tuple'> (C1*an_2, C2*n, an_1*n**2, C0*an_1**3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + an_1*an_3*an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1**3 + an_1*an_3*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1*an_3*an_4*n**2)
<class 'tuple'> (C0*an_1**3, an_1*an_3*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_32 <class 'ProGED.model.Model'>
an_32 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4786790899997868


Equation discovery for all (chosen) OEIS sequences took 0.4786857190010778 secconds, i.e. 0.007978095316684631 minutes or 0.00013296825527807718 hours.
54





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 54
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> an_15*n, p = 6.557486822239345e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_46*n**2 + an_1, p = 1.006181134103736e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_6*n + an_1**3*an_40*n**3, p = 5.672535272453873e-14, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2**2*an_4, p = 5.109089187374743e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_37*n**2 + n**2, p = 3.7053857371321887e-10, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1**2*an_2, p = 0.0005682449191782576, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_4, p = 9.73573412165189e-07, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000005e-05, parse trees = 1, valid = False
-> C0*an_3*n + an_1**3*n, p = 5.346740006620047e-07, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 3.97723278688525e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_21*n**2 + an_2, p = 3.0386097298173496e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_9*n**2 + C2*n**2 + an_1, p = 1.895237181253411e-09, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 5.1970312864346815e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*n**3 + an_1*n**2, p = 2.2095737704918068e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + an_1*n, p = 6.502951968666991e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n + an_1, p = 4.033466765940764e-06, parse trees = 1, valid = False
-> an_3**2*n**2, p = 5.046433157156083e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1**3, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*an_1*an_2 + C2*an_4*n**2 + an_1, p = 4.889593592363096e-13, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 9.75442795300048e-06, parse trees = 1, valid = False
-> C0*an_2**2*n**2 + C1*n + an_1, p = 4.942273758596541e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_47 + an_1, p = 2.515452835259339e-05, parse trees = 1, valid = False
-> an_8*n, p = 7.059311475409836e-05, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_5 + C3*n**3 + an_1, p = 3.2086094059935714e-12, parse trees = 1, valid = False
-> C0*an_4 + an_1*an_2, p = 1.0150699838312462e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_24, p = 0.0003278688525670495, parse trees = 1, valid = False
an_15*n <class 'ProGED.model.Model'>
an_15*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_46*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_46*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_46*n**2)
<class 'tuple'> (an_1, C0*an_46*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_6*n + an_1**3*an_40*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_6*n + an_1**3*an_40*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*an_40*n**3, C0*an_1*an_6*n)
<class 'tuple'> (an_1**3*an_40*n**3, C0*an_1*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2**2*an_4 <class 'ProGED.model.Model'>
an_2**2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_37*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_37*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1*n, C2*an_37*n**2)
<class 'tuple'> (n**2, C1*an_1, C0*an_1*n, C2*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_4 <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_3*n**2)
<class 'tuple'> (an_4, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_3*n)
<class 'tuple'> (an_1**3*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_21*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_21*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_21*n**2)
<class 'tuple'> (an_2, C0*an_21*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_9*n**2 + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_9*n**2 + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n**2, C1*an_9*n**2)
<class 'tuple'> (an_1, C0*an_1, C2*n**2, C1*an_9*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*n**2)
<class 'tuple'> (C0*n**3, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n**2, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n**2, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_4*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3**2*n**2 <class 'ProGED.model.Model'>
an_3**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_2)
<class 'tuple'> (an_1**3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*an_1*an_2 + C2*an_4*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*an_1*an_2 + C2*an_4*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**4, C1*an_1*an_2, C2*an_4*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**4, C1*an_1*an_2, C2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2**2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2**2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_47 + an_1 <class 'ProGED.model.Model'>
C0*an_47 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_47)
<class 'tuple'> (an_1, C0*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8*n <class 'ProGED.model.Model'>
an_8*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_8, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_5 + C3*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_5 + C3*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_5, C3*n**3, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_5, C3*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_4 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*an_2)
<class 'tuple'> (C0*an_4, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_24 <class 'ProGED.model.Model'>
an_24 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4620300970000244


Equation discovery for all (chosen) OEIS sequences took 0.4620358579995809 secconds, i.e. 0.007700597633326349 minutes or 0.00012834329388877248 hours.
55





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 55
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> an_34, p = 0.000327868852459017, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**3 + C1*n + an_1*an_2, p = 5.946276099165643e-11, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n**3 + C4*n + an_2*n, p = 8.035706039241699e-13, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1*an_4*n, p = 1.0315095335848518e-07, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 2.5428209621069635e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_1*an_4, p = 0.0004381080354743349, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1*an_2, p = 1.2555790686315142e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + an_1*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> C0*an_39*n + an_1*n, p = 1.0061811341037363e-06, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n + an_32, p = 3.934426229508283e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*an_49*n**3, p = 3.3539371136791226e-07, parse trees = 1, valid = False
-> C0*n**4 + C1*n + an_2*an_3*n**2, p = 1.8960924482665994e-09, parse trees = 1, valid = False
-> C0*an_29 + n, p = 3.934426229511348e-05, parse trees = 1, valid = False
-> an_27*n**3, p = 2.622950819695468e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1**2*an_2*an_3*an_40*n, p = 8.713547545622466e-13, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_2*an_5 + C1*an_2*n + an_1, p = 1.7261948874515235e-08, parse trees = 1, valid = False
-> C0*an_2*n**4 + n, p = 6.672786885245914e-06, parse trees = 1, valid = False
-> C0*an_4*n + an_2, p = 1.5876735644540003e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_40, p = 6.993783620655478e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + an_1*an_11, p = 1.5471015472566267e-08, parse trees = 1, valid = False
-> an_1**3*n**4, p = 3.0106259114199036e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748776, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 8.128689960833731e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
C0*an_1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n)
<class 'tuple'> (an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_34 <class 'ProGED.model.Model'>
an_34 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**3 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**3 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1**2*an_3*n**3)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1**2*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n**3 + C4*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_3*n + C3*n**3 + C4*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C3*n**3, C4*n, an_2*n, C0*an_1*n, C2*an_3*n)
<class 'tuple'> (C1*an_1, C3*n**3, C4*n, an_2*n, C0*an_1*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*n, an_1*an_4*n)
<class 'tuple'> (C1*an_1, C0*an_1*n, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_4 <class 'ProGED.model.Model'>
an_1*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2*n + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1**2*n)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**2*an_2*n)
<class 'tuple'> (an_1*n, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_39*n + an_1*n <class 'ProGED.model.Model'>
C0*an_39*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_39*n)
<class 'tuple'> (an_1*n, C0*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_32 <class 'ProGED.model.Model'>
C0*n + an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_32, C0*n)
<class 'tuple'> (an_32, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_49*n**3 <class 'ProGED.model.Model'>
an_1*an_49*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_49, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**4 + C1*n + an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*n**4 + C1*n + an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**4, C1*n, an_2*an_3*n**2)
<class 'tuple'> (C0*n**4, C1*n, an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_29 + n <class 'ProGED.model.Model'>
C0*an_29 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_29)
<class 'tuple'> (n, C0*an_29)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_27*n**3 <class 'ProGED.model.Model'>
an_27*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_27, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1**2*an_2*an_3*an_40*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1**2*an_2*an_3*an_40*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_1**2*an_2*an_3*an_40*n)
<class 'tuple'> (C0*an_1, C1*an_2, an_1**2*an_2*an_3*an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_5 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_5 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_5, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_2*an_5, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**4 + n <class 'ProGED.model.Model'>
C0*an_2*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**4)
<class 'tuple'> (n, C0*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + an_2 <class 'ProGED.model.Model'>
C0*an_4*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_4*n)
<class 'tuple'> (an_2, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_40 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_40 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_40, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_40, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1*n)
<class 'tuple'> (an_1**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**3 + an_1*an_11 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + an_1*an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**3, an_1*an_11)
<class 'tuple'> (C0*an_1, C1*n**3, an_1*an_11)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**4 <class 'ProGED.model.Model'>
an_1**3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.47665565200077253


Equation discovery for all (chosen) OEIS sequences took 0.47666223000123864 secconds, i.e. 0.007944370500020644 minutes or 0.00013240617500034406 hours.
56





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 56
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 6.818939030139095e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_39 + an_1, p = 4.112876928169263e-07, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.003513222295081969, parse trees = 3, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_45 + n, p = 3.018543402311208e-06, parse trees = 1, valid = False
-> C0*an_2 + an_2, p = 1.8656731424901463e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n**5 + n, p = 3.4560000000000055e-05, parse trees = 1, valid = False
-> C0*an_2*an_26*n + n, p = 3.03860969282504e-07, parse trees = 1, valid = False
-> C0*an_2 + an_2*n**2, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + C1*an_29 + an_1**2*an_37*n**2, p = 3.595957969986938e-12, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1**2 + an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_27 + an_1, p = 3.4305439033953084e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + n, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**3 + C2*n + n, p = 1.5908931147541013e-06, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_34*n, p = 6.55737704918034e-05, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + n, p = 4.7726793442622995e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + an_1, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_42*n**2, p = 3.8854353448086e-08, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**2 + C1*n**2 + an_1, p = 3.033421795440241e-10, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_1**2, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + an_1, p = 1.7323437621448946e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**4 + C2*n + an_1*n, p = 4.068513539371148e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 1.841311475409837e-05, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_1 + C2*an_2 + C3*n + an_1, p = 6.8041419801453026e-12, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1**2*an_18*n**2, p = 7.896727271329648e-11, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_3*n, p = 4.5459593534260617e-07, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393443, parse trees = 1, valid = False
-> an_1*an_41*an_44*n, p = 3.054587535226886e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 1.9508855906000964e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_3 + C2*an_32 + C3*n + an_1**2*n, p = 1.6829083299525763e-12, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n)
<class 'tuple'> (an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_39 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_39 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_39)
<class 'tuple'> (an_1, C0*an_1**2*an_39)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_45 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_45 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_45)
<class 'tuple'> (n, C0*an_1, C1*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2)
<class 'tuple'> (an_2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**5 + n <class 'ProGED.model.Model'>
C0*n**5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**5)
<class 'tuple'> (n, C0*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_26*n + n <class 'ProGED.model.Model'>
C0*an_2*an_26*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*an_26*n)
<class 'tuple'> (n, C0*an_2*an_26*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n**2)
<class 'tuple'> (C0*an_2, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_29 + an_1**2*an_37*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_29 + an_1**2*an_37*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_29, an_1**2*an_37*n**2)
<class 'tuple'> (C0*an_1, C1*an_29, an_1**2*an_37*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*n)
<class 'tuple'> (C0*an_1**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*an_27 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*an_27 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2, C2*an_27)
<class 'tuple'> (an_1, C0*an_1, C1*an_2, C2*an_27)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**3)
<class 'tuple'> (n, C0*an_1, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n**3)
<class 'tuple'> (C0*n, an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**3, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*n**3, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_34*n <class 'ProGED.model.Model'>
an_34*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n**2)
<class 'tuple'> (an_1, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_42*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_42*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_42*n**2, C0*an_1*an_2)
<class 'tuple'> (an_42*n**2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n**2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n**2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*an_2**2*n**2)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_3, C1*n)
<class 'tuple'> (an_1**2, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**4 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**4 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**4, C2*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n**4, C2*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*an_1 + C2*an_2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1 + C2*an_2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_2, C3*n, C0*an_1**3*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_2, C3*n, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1**2*an_18*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1**2*an_18*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n**2, an_1**2*an_18*n**2)
<class 'tuple'> (C1*n, C0*an_1*n**2, an_1**2*an_18*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_41*an_44*n <class 'ProGED.model.Model'>
an_1*an_41*an_44*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41, an_44, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_3 + C2*an_32 + C3*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_3 + C2*an_32 + C3*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, C2*an_32, C3*n, an_1**2*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_3, C2*an_32, C3*n, an_1**2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.47915175300113333


Equation discovery for all (chosen) OEIS sequences took 0.47915802500028803 secconds, i.e. 0.007985967083338133 minutes or 0.0001330994513889689 hours.
57





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 57
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*n**2 + an_1**2, p = 0.0003531695780704115, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_6, p = 6.702977479172269e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1*an_2**2, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + n, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1**3*an_2*n, p = 1.74385981754377e-06, parse trees = 1, valid = False
-> C0*an_2**2*n + an_1*n, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_2, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_4, p = 5.257296425692019e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + C1*an_31 + n, p = 3.0185434023114253e-06, parse trees = 1, valid = False
-> C0*an_1*an_4*n + an_3, p = 6.224485749908586e-07, parse trees = 1, valid = False
-> an_8*n, p = 7.059311475409836e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_2*an_4*n**2, p = 6.767133225541645e-07, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_3*n + an_1*an_3, p = 3.516880190551536e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_24*n, p = 8.384842786960616e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2*n**2, p = 1.2555790686315137e-07, parse trees = 1, valid = False
-> C0*n**3 + an_2, p = 0.0001668196721311477, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_5 + an_1**2, p = 1.2335203387067645e-05, parse trees = 1, valid = False
-> C0*an_1 + an_48, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_6 + n**2, p = 1.8619381886589636e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n**2 + an_1, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_22 + an_1*an_4*n, p = 1.9152263915991378e-08, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_2*n + an_1, p = 4.844055048732689e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**7, p = 1.1301426498253184e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**3, p = 4.545959353426066e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n, p = 4.181424876972086e-06, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*an_38*an_4*n + an_1*n**3, p = 1.4745913246378026e-14, parse trees = 1, valid = False
-> C0*an_30 + C1*an_9 + n**2, p = 1.7594642300461098e-09, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_2**2*n**2, p = 6.441852548598055e-06, parse trees = 1, valid = False
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n**2)
<class 'tuple'> (an_1**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_6 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_6, C0*an_1, C1*n)
<class 'tuple'> (an_6, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2**2)
<class 'tuple'> (C0*n, an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**3)
<class 'tuple'> (n, C0*an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**3*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1**3*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*an_2*n)
<class 'tuple'> (C0*n, an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2**2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2**2*n)
<class 'tuple'> (an_1*n, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_2, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_4 <class 'ProGED.model.Model'>
C0*n + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_4)
<class 'tuple'> (C0*n, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_31 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_31 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_31)
<class 'tuple'> (n, C0*an_1, C1*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_4*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*an_4*n)
<class 'tuple'> (an_3, C0*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_8*n <class 'ProGED.model.Model'>
an_8*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_8, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*an_4*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_3*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_3*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_3, C1*an_3*n, C0*an_1*an_3*n)
<class 'tuple'> (an_1*an_3, C1*an_3*n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
<class 'tuple'> (n, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_24*n <class 'ProGED.model.Model'>
an_1*an_24*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_2 <class 'ProGED.model.Model'>
C0*n**3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**3)
<class 'tuple'> (an_2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_5 + an_1**2 <class 'ProGED.model.Model'>
C0*an_5 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_5)
<class 'tuple'> (an_1**2, C0*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_48 <class 'ProGED.model.Model'>
C0*an_1 + an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48, C0*an_1)
<class 'tuple'> (an_48, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_6 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_6)
<class 'tuple'> (n**2, C0*an_1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
<class 'tuple'> (C0*an_1, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*n**2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_22 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_22 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_22, an_1*an_4*n)
<class 'tuple'> (C0*an_22, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_3, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**7 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**7 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**7)
<class 'tuple'> (C0*an_1, an_1*n**7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*n + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_3*n)
<class 'tuple'> (C0*n, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*an_38*an_4*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*an_38*an_4*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, C1*an_1, an_1*n**3, C2*an_38*an_4*n)
<class 'tuple'> (C0*an_1**3, C1*an_1, an_1*n**3, C2*an_38*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_30 + C1*an_9 + n**2 <class 'ProGED.model.Model'>
C0*an_30 + C1*an_9 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_30, C1*an_9)
<class 'tuple'> (n**2, C0*an_30, C1*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_2**2*n**2 <class 'ProGED.model.Model'>
C0*n + an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**2*n**2)
<class 'tuple'> (C0*n, an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4774160840006516


Equation discovery for all (chosen) OEIS sequences took 0.47742166700118105 secconds, i.e. 0.007957027783353018 minutes or 0.0001326171297225503 hours.
58





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 58
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 63 models
-> C0*an_15 + n**2, p = 7.868984186687217e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n**2 + n**2, p = 6.780855898951909e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2, p = 4.909636101700149e-06, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + n**2, p = 3.336393442622954e-05, parse trees = 1, valid = False
-> C0*an_15 + an_3**2*n, p = 5.515319821227117e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**3 + an_3*an_36*n**2, p = 7.45319358595361e-10, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1**2*n**5, p = 4.70892770760549e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_3, p = 3.1569162176569864e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3*n + an_1, p = 3.7882994611883842e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + n, p = 6.277895343157568e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n + n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> C0*an_18*n + C1*n + n, p = 9.442627218796213e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n**3, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_5*n**2 + an_1*n, p = 3.5761546913618382e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n + C2*n + n, p = 3.071669766191889e-07, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_37*n + an_28, p = 1.4333064588410555e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + an_1, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1*an_2*an_3*n**5, p = 2.020426379300474e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1**2*n**3, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> an_2**2*n**4, p = 2.1472841828660185e-06, parse trees = 1, valid = False
-> an_1**3*an_2*an_3, p = 8.602830004579914e-07, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.270088685837143e-05, parse trees = 1, valid = False
-> C0*an_6 + C1*n + n, p = 8.736786885245904e-06, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> an_1*an_8, p = 4.513330287557108e-05, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_2 + an_1**3, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1**2*an_35*n + C1*an_2 + C2*n + n**2, p = 7.154296687359059e-11, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 2.5428209621069635e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1 + C2*n + n, p = 1.9638544406800602e-07, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*an_35 + n, p = 3.0185434023112097e-06, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + n, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*an_2 + an_4*n**2, p = 3.632739534638166e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1*n, p = 8.476069873689882e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 2.4548180508500734e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + C3*n + n**2, p = 1.4646648741736125e-08, parse trees = 1, valid = False
C0*an_15 + n**2 <class 'ProGED.model.Model'>
C0*an_15 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_15)
<class 'tuple'> (n**2, C0*an_15)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**3, C1*an_1*n**2)
<class 'tuple'> (n**2, C0*an_1*n**3, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2*n**2)
<class 'tuple'> (n**2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_15 + an_3**2*n <class 'ProGED.model.Model'>
C0*an_15 + an_3**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_15, an_3**2*n)
<class 'tuple'> (C0*an_15, an_3**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_3*an_36*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_3*an_36*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_3*an_36*n**2)
<class 'tuple'> (C0*n**3, an_3*an_36*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**5 <class 'ProGED.model.Model'>
an_1**2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n**2)
<class 'tuple'> (an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*an_2)
<class 'tuple'> (an_3, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*an_3*n)
<class 'tuple'> (an_1, C0*an_2, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (n, C2*an_1, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_18*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_18*n)
<class 'tuple'> (n, C1*n, C0*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*an_3)
<class 'tuple'> (n**3, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_5*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_5*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n, C1*an_5*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n, C1*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + C1*an_2*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*n**2, C1*an_2*n)
<class 'tuple'> (n, C2*n, C0*an_1*n**2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37*n + an_28 <class 'ProGED.model.Model'>
C0*an_37*n + an_28 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_28, C0*an_37*n)
<class 'tuple'> (an_28, C0*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_3, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*an_2*an_3*n**5 <class 'ProGED.model.Model'>
C0*n + an_1*an_2*an_3*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*an_3*n**5)
<class 'tuple'> (C0*n, an_1*an_2*an_3*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**3)
<class 'tuple'> (C0*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n**4 <class 'ProGED.model.Model'>
an_2**2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2*an_3 <class 'ProGED.model.Model'>
an_1**3*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_6 + C1*n + n <class 'ProGED.model.Model'>
C0*an_6 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_6, C1*n)
<class 'tuple'> (n, C0*an_6, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_8 <class 'ProGED.model.Model'>
an_1*an_8 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_8)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_1**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_2)
<class 'tuple'> (an_1**3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_3 <class 'ProGED.model.Model'>
C0*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2)
<class 'tuple'> (an_3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_35*n + C1*an_2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_35*n + C1*an_2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_35*n)
<class 'tuple'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_35*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_35 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_35 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_35)
<class 'tuple'> (n, C0*an_1, C1*an_35)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*n**2)
<class 'tuple'> (n, C0*an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + C1*an_2 + an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + C1*an_2 + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_4*n**2, C0*an_1*an_2**2)
<class 'tuple'> (C1*an_2, an_4*n**2, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n)
<class 'tuple'> (an_2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n**2, C3*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*n**2, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.516474358000778


Equation discovery for all (chosen) OEIS sequences took 0.5164815749994887 secconds, i.e. 0.008608026249991478 minutes or 0.00014346710416652462 hours.
59





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 59
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*an_8 + C1*an_1*n + C2*an_1 + n**2, p = 1.2751767626791627e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_1*n, p = 3.55843710618951e-08, parse trees = 1, valid = False
-> C0*an_1*an_2*an_42*n + n, p = 3.8854353448086e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_3 + C3*an_45 + C4*n + n, p = 3.6350819926974846e-13, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_3**2, p = 0.000126160828928902, parse trees = 1, valid = False
-> C0*n + n, p = 0.021911040000000007, parse trees = 2, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_4*n + C2*n + an_1, p = 1.4853737283621872e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_1*an_3, p = 4.84405504873269e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_11 + C2*n + n, p = 5.569565570123857e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> an_22, p = 0.0003278688536593848, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1*n, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1*n, p = 5.419126640555825e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748776, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + an_2*n, p = 4.392659977003625e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + n, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4*n, p = 6.722444609901273e-06, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00023544638538027445, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_42, p = 3.2164806745939103e-06, parse trees = 1, valid = False
-> an_17*an_2, p = 1.2660892795047319e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_3*n + C2*n**2 + an_1**2, p = 9.845013730222359e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1*n, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0035316957807041147, parse trees = 2, valid = False
-> C0*an_1*an_3 + C1*n + an_2*n**3, p = 3.030639568950709e-08, parse trees = 1, valid = False
-> C0*n + an_1*an_4, p = 5.257296425692019e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2 + C2*n**2 + an_3*n**2, p = 3.3704686616002685e-12, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_3 + C2*an_48 + n, p = 2.7419179521128415e-09, parse trees = 1, valid = False
-> an_2*an_27*an_3, p = 1.4990105497080108e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_2 + an_1, p = 2.0202091875370442e-07, parse trees = 1, valid = False
-> an_1**2*an_2*an_23*n, p = 4.1402179949171757e-08, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_8 + C1*an_1*n + C2*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_8 + C1*an_1*n + C2*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*an_1, C0*an_1*an_8, C1*an_1*n)
<class 'tuple'> (n**2, C2*an_1, C0*an_1*an_8, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + C1*n**2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n**2, C2*n, an_1*n)
<class 'tuple'> (C0*an_2, C1*n**2, C2*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_42*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_42*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*an_42*n)
<class 'tuple'> (n, C0*an_1*an_2*an_42*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_3 + C3*an_45 + C4*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_3 + C3*an_45 + C4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_3, C3*an_45, C4*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*an_3, C3*an_45, C4*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3**2 <class 'ProGED.model.Model'>
an_3**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_3, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_4*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_4*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*n, C1*an_4*n)
<class 'tuple'> (an_1, C2*n, C0*an_1*n, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*an_3, C0*an_1*n)
<class 'tuple'> (C1*an_2, an_1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2 + C1*an_11 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_11 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_11, C2*n)
<class 'tuple'> (n, C0*an_1**2, C1*an_11, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_22 <class 'ProGED.model.Model'>
an_22 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1**2*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n**2)
<class 'tuple'> (n, C1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4*n)
<class 'tuple'> (C0*an_1, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_42 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_42)
<class 'tuple'> (C0*an_1, an_1*an_42)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17*an_2 <class 'ProGED.model.Model'>
an_17*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_17, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_3*n + C2*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_3*n + C2*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*n**2, C0*an_1**2*n, C1*an_3*n)
<class 'tuple'> (an_1**2, C2*n**2, C0*an_1**2*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n**3, C0*an_1*an_3)
<class 'tuple'> (C1*n, an_2*n**3, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_4 <class 'ProGED.model.Model'>
C0*n + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_4)
<class 'tuple'> (C0*n, an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2 + C2*n**2 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2 + C2*n**2 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C2*n**2, an_3*n**2, C0*an_1*an_2*n)
<class 'tuple'> (C1*an_2, C2*n**2, an_3*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_3 + C2*an_48 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_3 + C2*an_48 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_3, C2*an_48)
<class 'tuple'> (n, C0*an_1**2, C1*an_3, C2*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_27*an_3 <class 'ProGED.model.Model'>
an_2*an_27*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_27, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1*an_2, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C1*an_1*an_2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*an_23*n <class 'ProGED.model.Model'>
an_1**2*an_2*an_23*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_23, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4712435390010796


Equation discovery for all (chosen) OEIS sequences took 0.47124933099985356 secconds, i.e. 0.007854155516664225 minutes or 0.00013090259194440377 hours.
60





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 60
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*an_1 + C1*an_2*n + C2*an_6 + an_1*an_2*an_41*n**3, p = 1.8624181845654677e-15, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + an_1, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2*an_29*an_44 + an_1**2*n, p = 9.049656809558771e-12, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n**3 + C2*n + an_1, p = 2.6011807874667976e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_4, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_49*n + an_2*n, p = 3.03860969273493e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2*n + an_2*an_3*n, p = 2.4863906806395754e-14, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_7 + n, p = 4.938295081967214e-05, parse trees = 1, valid = False
-> an_1**2*an_3*n**2, p = 6.969041461620142e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0035316957807041147, parse trees = 2, valid = False
-> C0*an_42*n + C1*n + an_1, p = 6.037086804622417e-07, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*an_1 + n**2, p = 3.390427949475954e-07, parse trees = 1, valid = False
-> C0*an_38 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n + an_2**3*n**2, p = 2.487564189986863e-07, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_2 + C1*an_4 + C2*n + an_1, p = 7.308503883584974e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1**3*an_2*n, p = 3.0998619664502855e-09, parse trees = 1, valid = False
-> C0*an_48 + C1*n**3 + C2*n**2 + C3*n + an_1, p = 8.345668798710039e-12, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_1, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1, p = 0.00013547816601389552, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.00020456817090417276, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_17 + C1*an_1 + n, p = 3.8597826247884325e-07, parse trees = 1, valid = False
-> an_1**2*an_8*n, p = 1.1542287292769008e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*an_3*an_32*an_33, p = 1.6758623721392175e-13, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + n, p = 1.4126783122816466e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + an_1*n, p = 1.0463158905262612e-06, parse trees = 1, valid = False
-> C0*an_23 + n**2, p = 7.868852467659049e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> an_1*an_27*n, p = 8.384842784272396e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*n + an_1*n, p = 9.632967280648338e-09, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_28*n, p = 1.398756724134829e-08, parse trees = 1, valid = False
-> C0*an_4*n + n, p = 8.222950819672135e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1**3, p = 1.0838253281111653e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
C0*an_1 + C1*an_2*n + C2*an_6 + an_1*an_2*an_41*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_6 + an_1*an_2*an_41*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*an_6, C1*an_2*n, an_1*an_2*an_41*n**3)
<class 'tuple'> (C0*an_1, C2*an_6, C1*an_2*n, an_1*an_2*an_41*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_3*n)
<class 'tuple'> (an_1, C1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_29*an_44 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*an_29*an_44 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_2*an_29*an_44)
<class 'tuple'> (an_1**2*n, C0*an_2*an_29*an_44)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n**3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n**3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**3, C2*n, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C1*n**3, C2*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_4 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1*n**2)
<class 'tuple'> (an_4, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_49*n + an_2*n <class 'ProGED.model.Model'>
C0*an_49*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_49*n)
<class 'tuple'> (an_2*n, C0*an_49*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2*n + an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2*n + an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2*n**2, C1*an_1**2*n, an_2*an_3*n)
<class 'tuple'> (C0*an_1**2*n**2, C1*an_1**2*n, an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_7 + n <class 'ProGED.model.Model'>
C0*an_7 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_7)
<class 'tuple'> (n, C0*an_7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_42*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_42*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_42*n)
<class 'tuple'> (an_1, C1*n, C0*an_42*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**4 + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1*n**4)
<class 'tuple'> (n**2, C1*an_1, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_38 + n <class 'ProGED.model.Model'>
C0*an_38 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_38)
<class 'tuple'> (n, C0*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2**3*n**2 <class 'ProGED.model.Model'>
C0*n + an_2**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**3*n**2)
<class 'tuple'> (C0*n, an_2**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*an_4 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_4 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*an_4, C2*n)
<class 'tuple'> (an_1, C0*an_2, C1*an_4, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1**3*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1**3*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_1**3*an_2*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_48 + C1*n**3 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_48 + C1*n**3 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_48, C1*n**3, C2*n**2, C3*n)
<class 'tuple'> (an_1, C0*an_48, C1*n**3, C2*n**2, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n)
<class 'tuple'> (an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**3)
<class 'tuple'> (an_1, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_17 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_17 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_17)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_17)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_8*n <class 'ProGED.model.Model'>
an_1**2*an_8*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_8, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*an_3*an_32*an_33 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*an_3*an_32*an_33 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n**2, an_1*an_3*an_32*an_33)
<class 'tuple'> (C0*an_2*n**2, an_1*an_3*an_32*an_33)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**3)
<class 'tuple'> (n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n, C1*an_2*n)
<class 'tuple'> (C0*an_1**2, an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_23 + n**2 <class 'ProGED.model.Model'>
C0*an_23 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_23)
<class 'tuple'> (n**2, C0*an_23)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2)
<class 'tuple'> (an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_27*n <class 'ProGED.model.Model'>
an_1*an_27*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_27, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*n, an_1*n, C1*an_1*an_2)
<class 'tuple'> (C0*an_1**2, C2*n, an_1*n, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_28*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_28*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n, an_28*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n, an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + n <class 'ProGED.model.Model'>
C0*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n)
<class 'tuple'> (n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**3 <class 'ProGED.model.Model'>
C0*n**2 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*n**2)
<class 'tuple'> (an_1**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5247523500001989


Equation discovery for all (chosen) OEIS sequences took 0.5247583229993324 secconds, i.e. 0.008745972049988874 minutes or 0.0001457662008331479 hours.
61





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 61
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 60 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0020549036065573784, parse trees = 3, valid = False
-> C0*an_1**2*an_3*n + an_1*an_2, p = 1.0323396005495902e-07, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + C1*an_1*an_2*n + C2*n**2 + an_1*n, p = 1.642341962602342e-11, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1*an_17, p = 4.192427708548688e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*an_32 + n, p = 1.9427176724043418e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + C1*n + an_1*n, p = 1.5398611219065743e-09, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_30*an_31, p = 1.1944220490313982e-07, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**3 + n, p = 1.96385444068006e-07, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**3 + n**3, p = 2.7901757080700335e-09, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0011364898383565154, parse trees = 2, valid = False
-> C0*an_32 + an_1**2, p = 3.2164806745939793e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_3*n, p = 1.9750963002777045e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_3, p = 3.0106259114199025e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + n**3, p = 6.363572459016406e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n**2, p = 1.4826821275789621e-06, parse trees = 1, valid = False
-> an_1*an_2*an_9, p = 1.656107724728796e-06, parse trees = 1, valid = False
-> C0*n**3 + an_1**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1*an_45*an_5*n**3 + n, p = 5.622884734845654e-11, parse trees = 1, valid = False
-> C0*an_1*an_6*n + an_1*an_2**2*an_39*n**3, p = 5.173383846015186e-15, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_3*n**2 + C2*n + an_3, p = 2.752905601465574e-11, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1, p = 0.00020456817090417276, parse trees = 1, valid = False
-> C0*an_3*n + an_1*an_2**2*n**2, p = 9.752513488426693e-09, parse trees = 1, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_3 + an_1*n, p = 4.84405504873269e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_15*n**3, p = 2.6229947288957395e-06, parse trees = 1, valid = False
-> C0*an_40 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*an_44 + C1*n + an_2, p = 1.1656306034425798e-07, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1*an_2*n**2, p = 2.092631781052523e-07, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3*n**5, p = 9.239166731439449e-09, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1**2*an_3*n)
<class 'tuple'> (an_1*an_2, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + C1*an_1*an_2*n + C2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + C1*an_1*an_2*n + C2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**2, an_1*n, C0*an_1**3*n**2, C1*an_1*an_2*n)
<class 'tuple'> (C2*n**2, an_1*n, C0*an_1**3*n**2, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2)
<class 'tuple'> (an_2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_17 <class 'ProGED.model.Model'>
an_1*an_17 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_17)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_32 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_32 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*an_32)
<class 'tuple'> (n, C0*an_1*an_2*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1**2*an_3*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_30*an_31 <class 'ProGED.model.Model'>
an_30*an_31 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, an_31)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n**3)
<class 'tuple'> (n, C0*an_1, C1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**3 + n**3 <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1**3*an_2*n**3)
<class 'tuple'> (n**3, C0*an_1**3*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_32 + an_1**2 <class 'ProGED.model.Model'>
C0*an_32 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_32)
<class 'tuple'> (an_1**2, C0*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_3*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_2*n**2)
<class 'tuple'> (an_3*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (n**3, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2)
<class 'tuple'> (n**2, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_9 <class 'ProGED.model.Model'>
an_1*an_2*an_9 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_9)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n**3)
<class 'tuple'> (an_1**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_45*an_5*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*an_45*an_5*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_45*an_5*n**3)
<class 'tuple'> (n, C0*an_1*an_45*an_5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6*n + an_1*an_2**2*an_39*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_6*n + an_1*an_2**2*an_39*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_6*n, an_1*an_2**2*an_39*n**3)
<class 'tuple'> (C0*an_1*an_6*n, an_1*an_2**2*an_39*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*an_3*n**2 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*an_3*n**2 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*n, C0*an_1*an_2*n, C1*an_1*an_3*n**2)
<class 'tuple'> (an_3, C2*n, C0*an_1*an_2*n, C1*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2)
<class 'tuple'> (an_1, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_3*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3*n, an_1*an_2**2*n**2)
<class 'tuple'> (C0*an_3*n, an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_3, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15*n**3 <class 'ProGED.model.Model'>
an_15*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_40 + n <class 'ProGED.model.Model'>
C0*an_40 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_40)
<class 'tuple'> (n, C0*an_40)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n)
<class 'tuple'> (an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_44 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_44 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_44)
<class 'tuple'> (an_2, C1*n, C0*an_1*an_44)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1*an_2*n**2)
<class 'tuple'> (C0*an_1**2, C1*n, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**3*n**5 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n**5, C0*an_1*n)
<class 'tuple'> (an_1**3*n**5, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5043187240007683


Equation discovery for all (chosen) OEIS sequences took 0.5043249219997961 secconds, i.e. 0.008405415366663267 minutes or 0.00014009025611105445 hours.
62





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 62
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.001856041967213116, parse trees = 2, valid = False
-> C0*an_1 + C1*an_49*n + an_1*an_2, p = 1.4904784765331353e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n + C1*an_47 + an_2*n**2, p = 4.317150383120667e-10, parse trees = 1, valid = False
-> C0*an_2*an_45*n + an_1**2, p = 2.4841307942218922e-08, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
-> C0*an_27*n + an_2, p = 1.519304846380981e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_21 + n, p = 1.8231658378904094e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 0.00013547816601389552, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**3 + an_1**2, p = 2.1676506562223312e-07, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**4, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_2**2*n**2, p = 6.864269109161863e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*n**2 + an_47*n, p = 4.596543323009419e-10, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*an_39 + an_1*n, p = 2.96127138828187e-08, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*an_23 + C2*n + an_3, p = 6.475725581793526e-09, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + an_19, p = 2.515453176347628e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565154, parse trees = 1, valid = False
-> an_11, p = 0.00032854646393442623, parse trees = 1, valid = False
-> C0*an_2**2*n**2 + C1*n**2 + an_1**2, p = 1.2639257481000997e-08, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*an_4*n + an_1*an_2, p = 2.5959166799618774e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_31, p = 3.859776809512971e-07, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_1*n**2 + C2*an_1 + an_1**2, p = 6.668922022760728e-11, parse trees = 1, valid = False
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_49*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_49*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2, C1*an_49*n)
<class 'tuple'> (C0*an_1, an_1*an_2, C1*an_49*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2)
<class 'tuple'> (an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2)
<class 'tuple'> (n, C0*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + C1*an_47 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_3*n + C1*an_47 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_47, an_2*n**2, C0*an_3*n)
<class 'tuple'> (C1*an_47, an_2*n**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_45*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*an_45*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*an_45*n)
<class 'tuple'> (an_1**2, C0*an_2*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_27*n + an_2 <class 'ProGED.model.Model'>
C0*an_27*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_27*n)
<class 'tuple'> (an_2, C0*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_21 + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_21 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_21, C0*an_2*n)
<class 'tuple'> (n, C1*an_21, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1)
<class 'tuple'> (n, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n**3, C0*an_1*n**2)
<class 'tuple'> (an_1**2, C1*n**3, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**4)
<class 'tuple'> (C0*an_1, an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
an_1*an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_4 + C1*n**2 + an_47*n <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*n**2 + an_47*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_47*n, C0*an_1*an_4)
<class 'tuple'> (C1*n**2, an_47*n, C0*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_39 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_39 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_39, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_39, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_23 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_23 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2, C1*an_23, C2*n)
<class 'tuple'> (an_3, C0*an_2, C1*an_23, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_19 <class 'ProGED.model.Model'>
C0*an_1 + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C0*an_1)
<class 'tuple'> (an_19, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_11 <class 'ProGED.model.Model'>
an_11 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2*n**2 + C1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_2**2*n**2 + C1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n**2, C0*an_2**2*n**2)
<class 'tuple'> (an_1**2, C1*n**2, C0*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_4*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_4*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*an_4*n)
<class 'tuple'> (an_1*an_2, C0*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_31 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_31 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_31, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_31, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*an_1*n**2 + C2*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1*n**2 + C2*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*an_1, C0*an_1**3*n, C1*an_1*n**2)
<class 'tuple'> (an_1**2, C2*an_1, C0*an_1**3*n, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48464443599914375


Equation discovery for all (chosen) OEIS sequences took 0.48465546399893356 secconds, i.e. 0.008077591066648893 minutes or 0.00013462651777748156 hours.
63





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 63
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**2*an_2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00013230613037116667, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.0006773908300694775, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + an_2*n**2, p = 1.2843956374197794e-10, parse trees = 1, valid = False
-> C0*an_1**2*an_23*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + an_1*n, p = 3.7999555726982656e-14, parse trees = 1, valid = False
-> an_20*n**2, p = 1.3114754631857728e-05, parse trees = 1, valid = False
-> an_20*n, p = 6.557377315928862e-05, parse trees = 1, valid = False
-> C0*an_49*n + an_1**2, p = 6.432961349187821e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_8*n + an_1, p = 1.6620893701587377e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_34*n, p = 6.55737704918034e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_1, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_30*n, p = 6.557377049181905e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_41 + an_1, p = 4.112876928169264e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_2 + C2*n**3 + n, p = 3.927708881360123e-08, parse trees = 1, valid = False
-> an_3*n**3, p = 8.524590163934432e-05, parse trees = 1, valid = False
-> C0*n + an_2**2, p = 0.0001610463137149513, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> an_14*n**2, p = 1.3115485918754107e-05, parse trees = 1, valid = False
-> C0*n + an_2*an_3, p = 4.93774075069426e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n**2, p = 0.00010368000000000012, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n + an_4, p = 2.24081486996709e-07, parse trees = 1, valid = False
-> C0*an_1*an_48 + an_1*n, p = 6.432961349187821e-07, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*an_4*an_49 + an_1, p = 1.224488999982017e-08, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> an_1*an_24*n, p = 8.384842786960616e-06, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + an_1, p = 7.803542362400393e-08, parse trees = 1, valid = False
-> C0*an_22 + n, p = 3.934426243912619e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_20 + C2*n + an_1*n, p = 1.1845086034975515e-09, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 6.220800000000007e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_2)
<class 'tuple'> (C0*n, an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1*n)
<class 'tuple'> (C0*an_1**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**3 + C2*an_1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*n**2, C1*an_1*n**3, C2*an_1*n)
<class 'tuple'> (C0*an_1**2, an_2*n**2, C1*an_1*n**3, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_23*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_23*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, C3*an_1, an_1*n, C2*an_1*n, C0*an_1**2*an_23*n**2)
<class 'tuple'> (C1*an_1**2, C3*an_1, an_1*n, C2*an_1*n, C0*an_1**2*an_23*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20*n**2 <class 'ProGED.model.Model'>
an_20*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_20*n <class 'ProGED.model.Model'>
an_20*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_49*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_49*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_49*n)
<class 'tuple'> (an_1**2, C0*an_49*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_8*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_8*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2, C1*an_8*n)
<class 'tuple'> (an_1, C0*an_1*n**2, C1*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_34*n <class 'ProGED.model.Model'>
an_34*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n**2)
<class 'tuple'> (an_1, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_30*n <class 'ProGED.model.Model'>
an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_41 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_41 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_41)
<class 'tuple'> (an_1, C0*an_1**2*an_41)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_2 + C2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_2 + C2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n**3, C0*an_1**2*n)
<class 'tuple'> (n, C1*an_2, C2*n**3, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2**2 <class 'ProGED.model.Model'>
C0*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*n)
<class 'tuple'> (an_2**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14*n**2 <class 'ProGED.model.Model'>
an_14*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*an_3 <class 'ProGED.model.Model'>
C0*n + an_2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_3)
<class 'tuple'> (C0*n, an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2, C1*n)
<class 'tuple'> (n**2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C1*an_3, C2*n)
<class 'tuple'> (an_4, C0*an_1, C1*an_3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_48 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_48 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_48)
<class 'tuple'> (an_1*n, C0*an_1*an_48)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4*an_49 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4*an_49 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_4*an_49)
<class 'tuple'> (an_1, C0*an_1*an_4*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_24*n <class 'ProGED.model.Model'>
an_1*an_24*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**2, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_22 + n <class 'ProGED.model.Model'>
C0*an_22 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_22)
<class 'tuple'> (n, C0*an_22)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_20 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_20 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_20, C2*n, an_1*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_20, C2*n, an_1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4519103160000668


Equation discovery for all (chosen) OEIS sequences took 0.4519161560001521 secconds, i.e. 0.007531935933335869 minutes or 0.0001255322655555978 hours.
64





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 64
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*an_2*n + C3*n + n**2, p = 9.426501315264295e-10, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.0001066552002149961, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*n + an_1*an_15*n, p = 1.006197977969841e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + C2*an_2*n + an_1, p = 4.848502050088909e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1*n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_45, p = 1.2865922698375647e-07, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + C2*n + n, p = 2.354463853802744e-06, parse trees = 1, valid = False
-> C0*an_7*n + C1*n + an_1, p = 7.577449502821825e-07, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005741896352558148, parse trees = 2, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*an_22*n, p = 8.38484281489575e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.003441501703843055, parse trees = 3, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1 + n**3, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1*an_40*n, p = 1.0061811341037363e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + an_41, p = 7.868852459016397e-06, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n**2 + C3*n + an_2**3*n, p = 1.061246626922814e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1, p = 0.00020456817090417276, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n**2 + an_2**2*n**2, p = 1.2883705097196113e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*an_1 + an_1, p = 1.3858750097159167e-07, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_12 + an_2*n, p = 1.5202468374021327e-06, parse trees = 1, valid = False
-> C0*an_1 + n**5, p = 2.2095737704918065e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2**2*n**3, p = 1.2639257481000994e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2**2*n, p = 2.059280732748558e-05, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1 + C1*an_6 + C2*n**2 + n**2, p = 2.6811909916689092e-08, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> an_1*an_46, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*an_2*n + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*an_2*n + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C3*n, C0*an_1*n**3, C2*an_2*n)
<class 'tuple'> (n**2, C1*an_1, C3*n, C0*an_1*n**3, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_15*n <class 'ProGED.model.Model'>
C0*n + an_1*an_15*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_15*n)
<class 'tuple'> (C0*n, an_1*an_15*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n + C2*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n + C2*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1*n, C2*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C1*an_1*n, C2*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*an_45 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_45)
<class 'tuple'> (C0*n**2, an_1**2*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_3, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_7*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_7*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_7*n)
<class 'tuple'> (an_1, C1*n, C0*an_7*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_22*n <class 'ProGED.model.Model'>
an_1*an_22*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_22, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**3 <class 'ProGED.model.Model'>
C0*an_1 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1)
<class 'tuple'> (n**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_40*n <class 'ProGED.model.Model'>
C0*n + an_1*an_40*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_40*n)
<class 'tuple'> (C0*n, an_1*an_40*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_41 <class 'ProGED.model.Model'>
C0*n**2 + an_41 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_41, C0*n**2)
<class 'tuple'> (an_41, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n**2 + C3*n + an_2**3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n**2 + C3*n + an_2**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*n**2, C3*n, an_2**3*n, C1*an_2*n)
<class 'tuple'> (C0*an_1, C2*n**2, C3*n, an_2**3*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2)
<class 'tuple'> (an_1, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_2**2*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_2**2*n**2)
<class 'tuple'> (C0*n**2, an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1**2*n**4)
<class 'tuple'> (an_1, C1*an_1, C0*an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_12 + an_2*n <class 'ProGED.model.Model'>
C0*an_12 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_12, an_2*n)
<class 'tuple'> (C0*an_12, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**5 <class 'ProGED.model.Model'>
C0*an_1 + n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**5, C0*an_1)
<class 'tuple'> (n**5, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_2**2*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2**2*n**3)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_2, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2**2*n)
<class 'tuple'> (C0*an_1, an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_6 + C2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_6 + C2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_6, C2*n**2)
<class 'tuple'> (n**2, C0*an_1, C1*an_6, C2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_46 <class 'ProGED.model.Model'>
an_1*an_46 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_46)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4879201519997878


Equation discovery for all (chosen) OEIS sequences took 0.4879284329999791 secconds, i.e. 0.008132140549999651 minutes or 0.00013553567583332753 hours.
65





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 65
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> C0*an_1*n**2 + C1*an_1 + C2*n + n, p = 5.618550500928283e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n**2, p = 0.00013257442622950833, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_1, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.001059508734211234, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_45, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_2*n + an_2, p = 0.00016104631371495132, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*an_2, p = 6.319628740500498e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0007063391561408232, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + an_1**2, p = 1.7323437621448946e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_18*n + C1*n + an_1*n**3, p = 4.829671626662985e-09, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_37*n**4, p = 5.245901639344268e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130316e-05, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> an_20*n, p = 6.557377315928862e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.0007063391561408231, parse trees = 2, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> C0*an_5 + an_1**2*an_3*n, p = 2.920904262875764e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*n**3 + an_16, p = 1.5737783954635288e-06, parse trees = 1, valid = False
-> C0*an_4 + C1*n + n**2, p = 1.1841049180327874e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + C2*n + an_2, p = 2.7828803009943604e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 0.00031996560064498814, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**2 + an_1*n, p = 1.346806125024697e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_3*n**2 + C4*n + an_1*n**2, p = 1.0275165099358242e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_1*an_2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n**2, p = 1.909071737704921e-07, parse trees = 1, valid = False
-> C0*an_2*n**7 + an_1**2, p = 4.364120979289027e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1*an_23 + C1*an_1*n + C2*n + an_1, p = 5.922542783068691e-09, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n + C2*n + n, p = 3.013389764715637e-09, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_21*n**3 + an_1*an_2*n**2, p = 3.1083483137803736e-10, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_1**2*n, p = 1.0463158905262617e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_28, p = 4.631732171427594e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1*n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 3.484520730810071e-05, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_1, p = 7.954465573770502e-06, parse trees = 1, valid = False
C0*an_1*n**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**3)
<class 'tuple'> (an_1, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_45 <class 'ProGED.model.Model'>
C0*n + an_1*an_45 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_45)
<class 'tuple'> (C0*n, an_1*an_45)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
<class 'tuple'> (an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*an_2, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1**2*an_2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1**2, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*n + C1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_18*n + C1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n**3, C0*an_18*n)
<class 'tuple'> (C1*n, an_1*n**3, C0*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_37*n**4 <class 'ProGED.model.Model'>
an_37*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20*n <class 'ProGED.model.Model'>
an_20*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_5 + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*an_5 + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_5, an_1**2*an_3*n)
<class 'tuple'> (C0*an_5, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_16 <class 'ProGED.model.Model'>
C0*n**3 + an_16 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_16, C0*n**3)
<class 'tuple'> (an_16, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_4 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_4, C1*n)
<class 'tuple'> (n**2, C0*an_4, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*n**2, C2*n)
<class 'tuple'> (an_2, C0*an_2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n)
<class 'tuple'> (an_2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2**2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**2*an_2**2*n**2)
<class 'tuple'> (an_1*n, C0*an_1**2*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_3*n**2 + C4*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_3*n**2 + C4*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C4*n, an_1*n**2, C0*an_1*n, C2*an_2*n, C3*an_3*n**2)
<class 'tuple'> (C1*an_1, C4*n, an_1*n**2, C0*an_1*n, C2*an_2*n, C3*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n**3)
<class 'tuple'> (an_1*an_2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n**2)
<class 'tuple'> (n**2, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**7 + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*n**7 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*n**7)
<class 'tuple'> (an_1**2, C0*an_2*n**7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_23 + C1*an_1*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_23 + C1*an_1*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*an_23, C1*an_1*n)
<class 'tuple'> (an_1, C2*n, C0*an_1*an_23, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (n, C2*n, C1*an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_21*n**3 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_21*n**3 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_21*n**3, an_1*an_2*n**2)
<class 'tuple'> (C0*an_21*n**3, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1**2*n, C0*an_1*n)
<class 'tuple'> (C1*an_2, an_1**2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_28 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_28 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_28, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_28, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3, C1*n)
<class 'tuple'> (an_1, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5067895009997301


Equation discovery for all (chosen) OEIS sequences took 0.506795143999625 secconds, i.e. 0.008446585733327083 minutes or 0.0001407764288887847 hours.
66





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 66
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> C0*an_1 + C1*n**2 + an_1**2, p = 2.078812514573874e-06, parse trees = 1, valid = False
-> C0*an_3*n + an_3*n**6, p = 9.689151661739691e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1**2, p = 2.0788125145738735e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2*n**2, p = 4.118561465497118e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> C0*an_1**3 + C1*n + an_3, p = 1.604022001986013e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1**2 + n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_2*an_40, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> C0*an_1**4*n + C1*n + n, p = 6.929375048579581e-07, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1*n + n, p = 0.005523934426229512, parse trees = 2, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> an_35*n, p = 6.557377049180334e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_22*an_3 + C1*n**2 + an_1*an_4, p = 2.7210866765889396e-11, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_2 + an_1**2*n**3, p = 5.351648489249079e-09, parse trees = 1, valid = False
-> an_38*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n**2, p = 3.901771181200195e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + an_2, p = 7.372007438860535e-09, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0018413114754098378, parse trees = 2, valid = False
-> C0*an_1*n + C1*n + an_19*n, p = 1.4489010295762354e-08, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**4*an_2*n**2, p = 3.4215457554215423e-09, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1 + C2*n + an_1, p = 9.62413201191608e-07, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + C1*an_1 + C2*n + an_43*n, p = 3.029234993914572e-11, parse trees = 1, valid = False
-> C0*an_31 + an_1, p = 2.5154528352595206e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2*an_3*n**3, p = 3.875244038986154e-09, parse trees = 1, valid = False
-> C0*n + an_2*n**3, p = 3.336393442622954e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_35*n**2, p = 1.8526928685660951e-09, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n**2 + C2*n + n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n**2 + C3*n + n, p = 1.8430018597151332e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_16 + C1*an_2 + C2*an_7 + an_1*n, p = 3.197920436013017e-11, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_31*n, p = 6.557377049180801e-05, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2, p = 3.1389476715787826e-06, parse trees = 1, valid = False
C0*an_1 + C1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*n**2)
<class 'tuple'> (an_1**2, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_3*n**6 <class 'ProGED.model.Model'>
C0*an_3*n + an_3*n**6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n**6, C0*an_3*n)
<class 'tuple'> (an_3*n**6, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1**2, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_2*n**2)
<class 'tuple'> (C0*an_2, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1**3, C1*n)
<class 'tuple'> (an_3, C0*an_1**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + n**3 <class 'ProGED.model.Model'>
C0*an_1**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1**2)
<class 'tuple'> (n**3, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_40 <class 'ProGED.model.Model'>
an_2*an_40 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_40)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**4*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**4*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**4*n)
<class 'tuple'> (n, C1*n, C0*an_1**4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_35*n <class 'ProGED.model.Model'>
an_35*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_35, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_22*an_3 + C1*n**2 + an_1*an_4 <class 'ProGED.model.Model'>
C0*an_22*an_3 + C1*n**2 + an_1*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*an_4, C0*an_22*an_3)
<class 'tuple'> (C1*n**2, an_1*an_4, C0*an_22*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_2 + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_2 + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1**2*n**3, C0*an_1**2*n)
<class 'tuple'> (C1*an_2, an_1**2*n**3, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38*n <class 'ProGED.model.Model'>
an_38*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_38, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_19*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_19*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_19*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_19*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*n)
<class 'tuple'> (C0*n**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**4*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**4*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**4*an_2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1**4*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*an_3)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + C1*an_1 + C2*n + an_43*n <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + C1*an_1 + C2*n + an_43*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_43*n, C0*an_1**3*n**2)
<class 'tuple'> (C1*an_1, C2*n, an_43*n, C0*an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_31 + an_1 <class 'ProGED.model.Model'>
C0*an_31 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_31)
<class 'tuple'> (an_1, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_2*an_3*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2*an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2*an_3*n**3)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_2*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**3)
<class 'tuple'> (C0*n, an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_35*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_35*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_35*n**2)
<class 'tuple'> (C0*an_1**2, C1*n, an_35*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_1**2, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n**2 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n**2 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n**2, C3*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n**2, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
<class 'tuple'> (C0*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_16 + C1*an_2 + C2*an_7 + an_1*n <class 'ProGED.model.Model'>
C0*an_16 + C1*an_2 + C2*an_7 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_16, C1*an_2, C2*an_7, an_1*n)
<class 'tuple'> (C0*an_16, C1*an_2, C2*an_7, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_31*n <class 'ProGED.model.Model'>
an_31*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_31, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.503184216999216


Equation discovery for all (chosen) OEIS sequences took 0.5031898509987514 secconds, i.e. 0.008386497516645856 minutes or 0.00013977495861076426 hours.
67





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 67
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 57 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_4*n**3 + C1*an_1*an_4 + C2*n + an_1*n, p = 1.8849004810424845e-12, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1*n**2 + an_46, p = 7.896723702084995e-11, parse trees = 1, valid = False
-> an_1*an_11*n**3, p = 3.360868745821019e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_14 + C1*an_3**2*an_47 + n, p = 1.2055814756396067e-12, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*an_1*an_37 + C2*an_1*an_41 + C3*an_1 + an_1, p = 1.2530190093531141e-15, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0007063391561408232, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_12, p = 3.0204149429895193e-06, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_43*n, p = 1.0061811341037363e-06, parse trees = 1, valid = False
-> an_1**2*an_4*n**2, p = 2.240814869967092e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8 + C2*n + an_2, p = 9.034947345478262e-09, parse trees = 1, valid = False
-> C0*an_1**5*an_6 + C1*an_1*n + C2*an_1 + C3*n + an_1, p = 2.2478761754314614e-13, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n**2, p = 1.3092362937867085e-08, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_13 + C1*an_2*an_3 + C2*an_2*n + an_2, p = 9.65820106324834e-12, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_5, p = 8.881346438688706e-07, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*n + an_1**2*an_2**2*n**3, p = 2.1065429135001664e-08, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1 + an_26*n, p = 5.030905670667871e-06, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1*n**3, p = 5.017709852366503e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4 + C2*n + an_1, p = 2.4200800595644574e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + C2*n + an_2, p = 4.638133834990601e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 1.950885590600097e-06, parse trees = 1, valid = False
-> C0*an_2**2 + an_1*n, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_36*n**2, p = 2.5731845396751306e-08, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1, p = 0.00010665520021499605, parse trees = 1, valid = False
-> an_2*an_22, p = 1.2660873766081897e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2**2*an_4, p = 5.109089187374743e-06, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1**2*an_2*n + C2*n + an_1**2*n, p = 3.3566274188634255e-11, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_4*n, p = 4.572499865627524e-08, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_4*n**3 + C1*an_1*an_4 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_4*n**3 + C1*an_1*an_4 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C1*an_1*an_4, C0*an_1*an_4*n**3)
<class 'tuple'> (C2*n, an_1*n, C1*an_1*an_4, C0*an_1*an_4*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
<class 'tuple'> (n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1*n**2 + an_46 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1*n**2 + an_46 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_46, C0*an_1**2*n**3, C1*an_1*n**2)
<class 'tuple'> (an_46, C0*an_1**2*n**3, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_11*n**3 <class 'ProGED.model.Model'>
an_1*an_11*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_11, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
<class 'tuple'> (C0*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + C1*an_3**2*an_47 + n <class 'ProGED.model.Model'>
C0*an_14 + C1*an_3**2*an_47 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14, C1*an_3**2*an_47)
<class 'tuple'> (n, C0*an_14, C1*an_3**2*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*an_1*an_37 + C2*an_1*an_41 + C3*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*an_1*an_37 + C2*an_1*an_41 + C3*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C3*an_1, C1*an_1*an_37, C2*an_1*an_41, C0*an_1*an_3*n)
<class 'tuple'> (an_1, C3*an_1, C1*an_1*an_37, C2*an_1*an_41, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_12 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_12, C0*an_1, C1*n)
<class 'tuple'> (an_12, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_24 <class 'ProGED.model.Model'>
an_1*an_24 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_43*n <class 'ProGED.model.Model'>
C0*n + an_1*an_43*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_43*n)
<class 'tuple'> (C0*n, an_1*an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4*n**2 <class 'ProGED.model.Model'>
an_1**2*an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_8 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_8 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_8, C2*n)
<class 'tuple'> (an_2, C0*an_1, C1*an_8, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**5*an_6 + C1*an_1*n + C2*an_1 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**5*an_6 + C1*an_1*n + C2*an_1 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C3*n, C0*an_1**5*an_6, C1*an_1*n)
<class 'tuple'> (an_1, C2*an_1, C3*n, C0*an_1**5*an_6, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_2*n**2)
<class 'tuple'> (C0*n**2, an_1**2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
<class 'tuple'> (n, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_13 + C1*an_2*an_3 + C2*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_13 + C1*an_2*an_3 + C2*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_13, C1*an_2*an_3, C2*an_2*n)
<class 'tuple'> (an_2, C0*an_13, C1*an_2*an_3, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_5 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*an_1, C1*n)
<class 'tuple'> (an_5, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2*an_2**2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_2**2*n**3)
<class 'tuple'> (C0*n, an_1**2*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_26*n <class 'ProGED.model.Model'>
C0*an_1 + an_26*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_26*n)
<class 'tuple'> (C0*an_1, an_26*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, an_1*n**3)
<class 'tuple'> (C0*an_1, C1*an_3, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_4, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_4, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C2*n, C0*an_2*n)
<class 'tuple'> (an_2, C1*n**2, C2*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2**2, an_1*n)
<class 'tuple'> (C0*an_2**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_36*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_36*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1*an_36*n**2)
<class 'tuple'> (C0*an_1*n, an_1*an_36*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n**2)
<class 'tuple'> (an_1, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_22 <class 'ProGED.model.Model'>
an_2*an_22 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_22)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*an_4 <class 'ProGED.model.Model'>
an_2**2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1**2*an_2*n + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1**2*an_2*n + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, C2*n, an_1**2*n, C1*an_1**2*an_2*n)
<class 'tuple'> (C0*an_1**3, C2*n, an_1**2*n, C1*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_4*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_4*n, C0*an_2*n)
<class 'tuple'> (C1*n, an_4*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5124354639992816


Equation discovery for all (chosen) OEIS sequences took 0.51244126399979 secconds, i.e. 0.008540687733329833 minutes or 0.00014234479555549722 hours.
68





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 68
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> C0*an_1 + C1*an_2*an_3 + n, p = 3.788299461188384e-06, parse trees = 1, valid = False
-> an_1**2*an_34*n**2, p = 2.1443204497292788e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**3*an_40*n**2, p = 2.7419179521128448e-08, parse trees = 1, valid = False
-> C0*an_46 + an_1*an_2, p = 9.713588362021496e-07, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2, p = 1.5066948823578173e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1*an_2, p = 1.1783126644080364e-07, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*an_2**2*n**2, p = 4.213085827000333e-09, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_3 + n**2, p = 2.3230138205400464e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n, p = 8.3152500582955e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> an_2**2*an_32*n, p = 9.778161124162406e-08, parse trees = 1, valid = False
-> C0*an_34 + C1*n + an_1**3, p = 4.935452313803125e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*n**2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + an_3, p = 1.2544274630916253e-05, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + n, p = 1.017128384842786e-06, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> C0*an_28*n + an_1, p = 5.030905670532107e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + n, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2 + C2*n + an_1**2*n, p = 2.34935468371055e-12, parse trees = 1, valid = False
-> an_1**2*an_2**2*an_6*an_7*n**2, p = 2.705571972635817e-13, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.000588615963450686, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2 + an_48*n, p = 9.592636218124613e-10, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_26 + an_1*n, p = 5.030905670667872e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*n**2 + C3*an_2 + n, p = 3.514127981602901e-11, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1*n**2 + C1*an_1 + n**2, p = 8.476069873689879e-06, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130323e-05, parse trees = 1, valid = False
-> an_1*an_5*n, p = 3.215587207739856e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n + n, p = 2.5088549261832513e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_43*n**5, p = 1.6098898145659798e-09, parse trees = 1, valid = False
-> C0*an_5 + C1*n + an_1*n**2, p = 4.630445579145394e-07, parse trees = 1, valid = False
C0*an_1 + C1*an_2*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_34*n**2 <class 'ProGED.model.Model'>
an_1**2*an_34*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**3*an_40*n**2 <class 'ProGED.model.Model'>
an_1**3*an_40*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_40, an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_46 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_46 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_46, an_1*an_2)
<class 'tuple'> (C0*an_46, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + C2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_2, C2*n, an_1*n**2)
<class 'tuple'> (C0*an_1**2, C1*an_2, C2*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1**2*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1**2*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1**2*an_2**2*n**2)
<class 'tuple'> (C0*n**3, an_1**2*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C0*an_1*an_3)
<class 'tuple'> (n**2, C1*an_3, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, an_1*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (C2*an_1, an_1*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*an_32*n <class 'ProGED.model.Model'>
an_2**2*an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_34 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_34 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_34, C1*n)
<class 'tuple'> (an_1**3, C0*an_34, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n**3)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_28*n + an_1 <class 'ProGED.model.Model'>
C0*an_28*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_28*n)
<class 'tuple'> (an_1, C0*an_28*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n**3)
<class 'tuple'> (n, C1*an_1, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2 + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2 + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, C2*n, an_1**2*n, C0*an_1**2*n**2)
<class 'tuple'> (C1*an_1**2, C2*n, an_1**2*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2**2*an_6*an_7*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2**2*an_6*an_7*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, an_7, an_1**2, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2**2 + an_48*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2 + an_48*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48*n, C0*an_1**2*an_2**2)
<class 'tuple'> (an_48*n, C0*an_1**2*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_26 + an_1*n <class 'ProGED.model.Model'>
C0*an_26 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_26, an_1*n)
<class 'tuple'> (C0*an_26, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*n**2 + C3*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*n**2 + C3*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C3*an_2, C2*an_2*n**2, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C1*an_1, C3*an_2, C2*an_2*n**2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (n**2, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_5*n <class 'ProGED.model.Model'>
an_1*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*an_3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_43*n**5 <class 'ProGED.model.Model'>
C0*an_1*n + an_43*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_43*n**5, C0*an_1*n)
<class 'tuple'> (an_43*n**5, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_5 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_5 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_5, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_5, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5106399380001676


Equation discovery for all (chosen) OEIS sequences took 0.5106489130012051 secconds, i.e. 0.008510815216686752 minutes or 0.00014184692027811253 hours.
69





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 69
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> C0*an_1**3 + an_1, p = 0.00014436198017874117, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_36 + n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2, p = 1.0002577937144514e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1, p = 3.76673720589454e-07, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> C0*an_1*an_2*n**2 + C1*n + an_1, p = 1.6365453672333828e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_2 + an_2**2*n, p = 6.218910474967155e-06, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_3*n + an_1*an_2*n, p = 1.2627664870627953e-06, parse trees = 1, valid = False
-> an_1**2*an_2*an_4*n**2, p = 8.653055599872928e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> an_1*an_7*n**2, p = 2.104847084117174e-06, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_4, p = 2.030139967662493e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_5*n**2 + C2*n + an_1*an_2*an_4*n, p = 5.0135747404315604e-15, parse trees = 1, valid = False
-> C0*an_3*an_4*n + n, p = 9.73573412165189e-07, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n**3, p = 6.143339532383779e-08, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_2, p = 3.344780305780671e-06, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1*an_36*n + C1*an_2 + C2*an_3*n**2 + n, p = 6.624348784591716e-12, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1**2*an_4, p = 3.053193063889587e-08, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099032e-05, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*n, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_3, p = 1.8063755468519412e-07, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_26 + C1*n + n, p = 5.665573770659819e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_1 + C2*n + n, p = 3.791777244300299e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1*an_2*n, p = 6.421978187098897e-10, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_16*n + n, p = 2.4148468494325635e-08, parse trees = 1, valid = False
C0*an_1**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3)
<class 'tuple'> (an_1, C0*an_1**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_36 + n <class 'ProGED.model.Model'>
C0*an_1*an_36 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_36)
<class 'tuple'> (n, C0*an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_26*n + C2*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n, C1*an_26*n, C2*an_3*n)
<class 'tuple'> (an_2, C0*an_2*n, C1*an_26*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C2*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_2**2*n <class 'ProGED.model.Model'>
C0*an_2 + an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2**2*n)
<class 'tuple'> (C0*an_2, an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3*n, an_1*an_2*n)
<class 'tuple'> (C0*an_3*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*an_4*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_7*n**2 <class 'ProGED.model.Model'>
an_1*an_7*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_7, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1*an_2*n)
<class 'tuple'> (an_4, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_5*n**2 + C2*n + an_1*an_2*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_5*n**2 + C2*n + an_1*an_2*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, C0*an_1*n**2, C1*an_5*n**2, an_1*an_2*an_4*n)
<class 'tuple'> (C2*n, C0*an_1*n**2, C1*an_5*n**2, an_1*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*an_4*n + n <class 'ProGED.model.Model'>
C0*an_3*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*an_4*n)
<class 'tuple'> (n, C0*an_3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n**3, C0*an_2*n)
<class 'tuple'> (C1*n, an_1*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_36*n + C1*an_2 + C2*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_36*n + C1*an_2 + C2*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*an_3*n**2, C0*an_1*an_36*n)
<class 'tuple'> (n, C1*an_2, C2*an_3*n**2, C0*an_1*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_3 <class 'ProGED.model.Model'>
C0*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2)
<class 'tuple'> (an_3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1**2*an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1**2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, an_1**2*an_4)
<class 'tuple'> (C0*an_1, C1*an_3, an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
<class 'tuple'> (an_1, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_26 + C1*n + n <class 'ProGED.model.Model'>
C0*an_26 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_26, C1*n)
<class 'tuple'> (n, C0*an_26, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*an_2**2*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*n**2, an_1*an_2*n)
<class 'tuple'> (C1*an_1, C0*an_1*n**2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_16*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_16*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2, C1*an_16*n)
<class 'tuple'> (n, C0*an_1*n**2, C1*an_16*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4952781360007066


Equation discovery for all (chosen) OEIS sequences took 0.4952842769998824 secconds, i.e. 0.00825473794999804 minutes or 0.00013757896583330067 hours.
70





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 70
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 58 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_3*n**2 + C1*n**2 + n, p = 1.2275409836065588e-06, parse trees = 1, valid = False
-> C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41, p = 5.4833804296425185e-15, parse trees = 1, valid = False
-> C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1, p = 1.4424013004980718e-11, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2, p = 1.3458079971324725e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1**2 + an_1**2*n**2, p = 5.7744792071496496e-06, parse trees = 1, valid = False
-> C0*n + an_5*n, p = 3.017704918032788e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**3*an_26*an_31*n**2 + an_1**2*n, p = 1.959850245456722e-14, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + an_1, p = 1.0838253281111655e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_2*n**3, p = 3.336393442622954e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34, p = 1.3886030946084935e-13, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*n, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_36, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n, p = 3.444291073833651e-11, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> an_1**4*an_2*n, p = 1.8582112809892628e-06, parse trees = 1, valid = False
-> C0*an_1 + an_12*n, p = 5.034024904982534e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_31*n + C1*n + an_1, p = 6.037086804622851e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 8.128689960833731e-05, parse trees = 1, valid = False
-> an_1*an_6*n, p = 1.551615157215803e-05, parse trees = 1, valid = False
-> C0*an_1 + an_42*n**2, p = 1.006181134103736e-06, parse trees = 1, valid = False
-> an_1*an_30, p = 4.192421392099907e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_2**2*n**3, p = 1.0736420914330088e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_3*n, p = 4.708927707605487e-07, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.5053129557099515e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_3**3 + n, p = 6.372466670059193e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_24*n + an_3, p = 1.3800726639113416e-09, parse trees = 1, valid = False
-> C0*an_4 + an_1, p = 0.0002628648212846009, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1 + an_1**2*an_2*n, p = 5.166436610750474e-09, parse trees = 1, valid = False
-> C0*an_3*n + an_1, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1*an_12 + an_1, p = 3.218474939251128e-06, parse trees = 1, valid = False
-> C0*an_1*an_20*n**2 + C1*n + an_1, p = 1.5439107866100557e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_4 + C3*n + an_1, p = 3.713434320905465e-08, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> C0*an_13 + C1*an_2*n + an_1, p = 1.1658474158053134e-07, parse trees = 1, valid = False
-> an_14*n, p = 6.557742959377051e-05, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_3*n**2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_3*n**2)
<class 'tuple'> (n, C1*n**2, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41 <class 'ProGED.model.Model'>
C0*an_2**2*n**4 + C1*n**2 + an_1*an_4*an_41 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, C0*an_2**2*n**4, an_1*an_4*an_41)
<class 'tuple'> (C1*n**2, C0*an_2**2*n**4, an_1*an_4*an_41)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_12 + C1*an_1*an_4*n + C2*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C0*an_1*an_12, C1*an_1*an_4*n)
<class 'tuple'> (an_1, C2*an_1, C0*an_1*an_12, C1*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*an_5 + C3*n + an_1**3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*an_5, C3*n, an_1**3*n**2)
<class 'tuple'> (C0*an_1, C1*an_2, C2*an_5, C3*n, an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1**2*n**2)
<class 'tuple'> (C0*an_1**2, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_5*n <class 'ProGED.model.Model'>
C0*n + an_5*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_5*n)
<class 'tuple'> (C0*n, an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**3*an_26*an_31*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1**3*an_26*an_31*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1**3*an_26*an_31*n**2)
<class 'tuple'> (an_1**2*n, C0*an_1**3*an_26*an_31*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**3, C1*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n**3, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**3)
<class 'tuple'> (C0*n, an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_21 + an_1**2*an_34 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_21, an_1**2*an_34, C0*an_1*an_2*n**2)
<class 'tuple'> (C1*an_21, an_1**2*an_34, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1**2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_36 <class 'ProGED.model.Model'>
C0*n + an_1*an_36 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_36)
<class 'tuple'> (C0*n, an_1*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + C1*an_1 + C2*an_3 + C3*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_3, C3*n**2, an_1*n, C0*an_1*an_2**2)
<class 'tuple'> (C1*an_1, C2*an_3, C3*n**2, an_1*n, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**4*an_2*n <class 'ProGED.model.Model'>
an_1**4*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_12*n <class 'ProGED.model.Model'>
C0*an_1 + an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_12*n)
<class 'tuple'> (C0*an_1, an_12*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_31*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_31*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_31*n)
<class 'tuple'> (an_1, C1*n, C0*an_31*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_6*n <class 'ProGED.model.Model'>
an_1*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_6, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_42*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_42*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_42*n**2)
<class 'tuple'> (C0*an_1, an_42*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_30 <class 'ProGED.model.Model'>
an_1*an_30 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_30)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n**3 <class 'ProGED.model.Model'>
an_2**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**3 <class 'ProGED.model.Model'>
an_1**3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_3**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_3**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*an_3**3, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C2*an_3**3, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_24*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_24*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*an_2*an_24*n)
<class 'tuple'> (an_3, C0*an_1, C1*an_2*an_24*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1 <class 'ProGED.model.Model'>
C0*an_4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_4)
<class 'tuple'> (an_1, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**2*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (C1*an_1, an_1**2*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n)
<class 'tuple'> (an_1, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_12 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_12 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_12)
<class 'tuple'> (an_1, C0*an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_20*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_20*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_20*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_20*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_4 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_4 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_4, C3*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_4, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_13 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_13 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_13, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_13, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14*n <class 'ProGED.model.Model'>
an_14*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5241527500002121


Equation discovery for all (chosen) OEIS sequences took 0.5241588150001917 secconds, i.e. 0.008735980250003194 minutes or 0.0001455996708333866 hours.
71





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 71
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*an_1*n + C1*an_2 + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*n + an_1**3*n, p = 4.515938867129854e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_18 + C1*n + an_23*n, p = 1.7199685299029869e-09, parse trees = 1, valid = False
-> C0*an_1*an_30 + C1*n + n, p = 6.037086804623869e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_41, p = 5.3608011243231836e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1*an_47*n**3, p = 3.3539371136791215e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_1*an_16*n, p = 6.31093793143436e-09, parse trees = 1, valid = False
-> C0*an_1*an_6 + n, p = 9.309690943294816e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_4 + C1*n**2 + C2*n + n, p = 1.1841049180327879e-06, parse trees = 1, valid = False
-> an_2*an_6, p = 2.3428946818358274e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1**2 + an_1**2, p = 1.1329835473141143e-08, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*an_2**2*n, p = 4.38863106979201e-06, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_2*n**2 + an_1, p = 1.7107728777107703e-08, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*an_31 + C1*an_1*n + C2*an_1 + C3*n + an_1**2, p = 5.810172037508694e-11, parse trees = 1, valid = False
-> an_14, p = 0.00032788714796885246, parse trees = 1, valid = False
-> C0*an_1*an_32*an_4 + an_1*an_3, p = 1.449759289596226e-10, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + an_1*n, p = 6.929375048579583e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_1, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + an_2**2, p = 2.0202091875370442e-07, parse trees = 1, valid = False
-> C0*an_19 + C1*n**2 + n, p = 9.442624231212638e-07, parse trees = 1, valid = False
-> C0*an_3 + C1*an_4 + C2*n + n, p = 3.504864283794679e-07, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_1*an_2*n, p = 1.2121255125222264e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1**2*n**5, p = 6.652200046636405e-10, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_1**2*an_2*an_3*n**6, p = 4.305826709984619e-10, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1**3 + an_2, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_20*n**2 + an_1, p = 1.0061811750343307e-06, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1, p = 0.00010665520021499605, parse trees = 1, valid = False
-> C0*n**4 + an_8*n, p = 6.77693901639345e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1**3*an_2*n, p = 1.114926768593557e-06, parse trees = 1, valid = False
C0*an_1*n + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3*n <class 'ProGED.model.Model'>
C0*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*n)
<class 'tuple'> (C0*n, an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_18 + C1*n + an_23*n <class 'ProGED.model.Model'>
C0*an_18 + C1*n + an_23*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18, C1*n, an_23*n)
<class 'tuple'> (C0*an_18, C1*n, an_23*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_30 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_30 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_30)
<class 'tuple'> (n, C1*n, C0*an_1*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n**2)
<class 'tuple'> (an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_41 <class 'ProGED.model.Model'>
an_1**2*an_41 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_41, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_47*n**3 <class 'ProGED.model.Model'>
an_1*an_47*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_47, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_1*an_16*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_1*an_16*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_1*an_16*n)
<class 'tuple'> (C0*an_1**2, C1*an_1, an_1*an_16*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6 + n <class 'ProGED.model.Model'>
C0*an_1*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_6)
<class 'tuple'> (n, C0*an_1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_4 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4, C1*n**2, C2*n)
<class 'tuple'> (n, C0*an_4, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_6 <class 'ProGED.model.Model'>
an_2*an_6 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_6)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1**2, C0*an_1**2*n**3)
<class 'tuple'> (an_1**2, C1*an_1**2, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_2**2*n <class 'ProGED.model.Model'>
an_1**2*an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C1*an_1*an_2*n**2)
<class 'tuple'> (an_1, C0*an_1**3, C1*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_31 + C1*an_1*n + C2*an_1 + C3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_31 + C1*an_1*n + C2*an_1 + C3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*an_1, C3*n, C0*an_1*an_31, C1*an_1*n)
<class 'tuple'> (an_1**2, C2*an_1, C3*n, C0*an_1*an_31, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14 <class 'ProGED.model.Model'>
an_14 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_32*an_4 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1*an_32*an_4 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_3, C0*an_1*an_32*an_4)
<class 'tuple'> (an_1*an_3, C0*an_1*an_32*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1**2*n**2)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3, C1*n)
<class 'tuple'> (an_1, C0*n**3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + an_2**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1**2, C1*an_1*n)
<class 'tuple'> (an_2**2, C0*an_1**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_19 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_19 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_19, C1*n**2)
<class 'tuple'> (n, C0*an_19, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*an_4 + C2*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*an_4 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*an_4, C2*n)
<class 'tuple'> (n, C0*an_3, C1*an_4, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, an_1*an_2*n)
<class 'tuple'> (C0*an_1, C1*an_2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1**2*n**5 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1**2*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1**2*n**5)
<class 'tuple'> (C0*an_1**2, C1*n, an_1**2*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*an_3*n**6 <class 'ProGED.model.Model'>
an_1**2*an_2*an_3*n**6 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**2, n**6)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3)
<class 'tuple'> (an_2, C0*an_1**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_20*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_20*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_20*n**2)
<class 'tuple'> (an_1, C0*an_20*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n**2)
<class 'tuple'> (an_1, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**4 + an_8*n <class 'ProGED.model.Model'>
C0*n**4 + an_8*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**4, an_8*n)
<class 'tuple'> (C0*n**4, an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**3*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**3*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**3*an_2*n)
<class 'tuple'> (C0*an_1, an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4764691420004965


Equation discovery for all (chosen) OEIS sequences took 0.476475682000455 secconds, i.e. 0.00794126136667425 minutes or 0.0001323543561112375 hours.
72





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 72
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> C0*an_4*n + an_1**2, p = 6.722444609901273e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1*an_2 + n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1*an_2, p = 9.8192722034003e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1**2*an_2**2, p = 3.719834359740343e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1*an_3, p = 1.604022001986013e-06, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_36*n + an_2*n, p = 3.038609692734931e-07, parse trees = 1, valid = False
-> C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3, p = 1.788559333950637e-13, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_33, p = 0.0003278688524590185, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_13, p = 5.361798256651793e-06, parse trees = 1, valid = False
-> C0*an_1*an_14 + C1*an_1*an_2*n + an_2, p = 5.755902899846387e-10, parse trees = 1, valid = False
-> C0*an_4 + an_1*n, p = 5.2572964256920205e-05, parse trees = 1, valid = False
-> C0*an_4*n**2 + an_2, p = 3.1753471289080013e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2 + an_3, p = 0.00024688703753471296, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0011047868852459028, parse trees = 2, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n**2, p = 7.848212846009146e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n**2 + n, p = 8.362849753944173e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*n**2, p = 9.031877734259712e-06, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**4 + an_1*n, p = 1.7838828297496937e-09, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**3*an_2*n**5, p = 2.325146423391694e-08, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> an_1*an_2*an_3*n, p = 1.0523054058856625e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_1*an_2*an_42 + an_2, p = 3.750966726317956e-08, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_32, p = 0.0003278688524590235, parse trees = 1, valid = False
-> C0*n**2 + an_17, p = 7.868864314506769e-06, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**3*an_3, p = 2.2278083360916845e-05, parse trees = 1, valid = False
-> an_45*n**2, p = 1.3114754098360662e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_37*n, p = 6.432961349187823e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_20*n + C3*n**3 + C4*n + an_1*n**2, p = 1.7448394274733794e-14, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + C1*n**2 + an_1, p = 3.159814370250248e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*an_38 + an_1, p = 3.2164806745939103e-06, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*n**4 + C1*n + an_1*n, p = 2.651488524590169e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n**4 + an_1, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*n + an_49, p = 3.934426229508197e-05, parse trees = 1, valid = False
C0*an_4*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_4*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_4*n)
<class 'tuple'> (an_1**2, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_2)
<class 'tuple'> (n**3, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1**2*an_2**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1**2*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1**2*an_2**2)
<class 'tuple'> (C0*an_1**2, C1*n, an_1**2*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*n, an_1*an_3)
<class 'tuple'> (C0*an_1**2, C1*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_36*n + an_2*n <class 'ProGED.model.Model'>
C0*an_36*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_36*n)
<class 'tuple'> (an_2*n, C0*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3 <class 'ProGED.model.Model'>
C0*an_1**3*an_3*n + C1*an_1*n + C2*an_1 + C3*n**3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*an_1, C3*n**3, C1*an_1*n, C0*an_1**3*an_3*n)
<class 'tuple'> (an_3, C2*an_1, C3*n**3, C1*an_1*n, C0*an_1**3*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_33 <class 'ProGED.model.Model'>
an_33 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_13 <class 'ProGED.model.Model'>
an_1**2*an_13 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_13, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_14 + C1*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_14 + C1*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_14, C1*an_1*an_2*n)
<class 'tuple'> (an_2, C0*an_1*an_14, C1*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1*n <class 'ProGED.model.Model'>
C0*an_4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*n)
<class 'tuple'> (C0*an_4, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_4*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_4*n**2)
<class 'tuple'> (an_2, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2)
<class 'tuple'> (an_3, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n**2)
<class 'tuple'> (C0*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_3*n**2)
<class 'tuple'> (n, C0*an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n**4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**3*an_2*n**4)
<class 'tuple'> (an_1*n, C0*an_1**3*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*an_2*n**5 <class 'ProGED.model.Model'>
an_1**3*an_2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n <class 'ProGED.model.Model'>
an_1*an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_42 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_42 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*an_42)
<class 'tuple'> (an_2, C0*an_1*an_2*an_42)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_32 <class 'ProGED.model.Model'>
an_32 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_17 <class 'ProGED.model.Model'>
C0*n**2 + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*n**2)
<class 'tuple'> (an_17, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_3 <class 'ProGED.model.Model'>
an_1**3*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_45*n**2 <class 'ProGED.model.Model'>
an_45*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_45, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_37*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_37*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_37*n)
<class 'tuple'> (C0*an_1, an_1*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C0*an_1*n)
<class 'tuple'> (n, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_20*n + C3*n**3 + C4*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_20*n + C3*n**3 + C4*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C3*n**3, C4*n, an_1*n**2, C1*an_1*n, C2*an_20*n)
<class 'tuple'> (C0*an_1**2, C3*n**3, C4*n, an_1*n**2, C1*an_1*n, C2*an_20*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*an_2**2)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_38 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_38 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_38)
<class 'tuple'> (an_1, C0*an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**4 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*n**4 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**4, C1*n, an_1*n)
<class 'tuple'> (C0*n**4, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2*n**4)
<class 'tuple'> (an_1, C0*an_1, C1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_49 <class 'ProGED.model.Model'>
C0*n + an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_49, C0*n)
<class 'tuple'> (an_49, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4863533429997915


Equation discovery for all (chosen) OEIS sequences took 0.48635966399888275 secconds, i.e. 0.00810599439998138 minutes or 0.00013509990666635632 hours.
73





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 73
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2*an_2*an_4*n + n**2, p = 1.0383666719847512e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1**2*n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_31 + an_28, p = 7.166532294205794e-08, parse trees = 1, valid = False
-> C0*n**3 + n**2, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 7.954465573770502e-06, parse trees = 1, valid = False
-> an_1*an_36*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_1*n**2, p = 1.8063755468519428e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2, p = 6.882264003663931e-10, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n**2, p = 2.6514885245901683e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_2*an_4*n**2 + an_3*n**2, p = 1.9229012444162062e-10, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**2*an_4*n, p = 1.1204074349835457e-05, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_8, p = 1.9627200429991953e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_40*n**2, p = 2.8978016662187625e-09, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3, p = 3.878801640071129e-11, parse trees = 1, valid = False
-> C0*an_1*n**3 + n**2, p = 2.2095737704918065e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 6.272137315458123e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 2.709563320277912e-05, parse trees = 1, valid = False
-> an_1*an_13, p = 4.193201200714862e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2, p = 6.818939030139095e-05, parse trees = 1, valid = False
-> an_1*an_2*an_3*n**2, p = 2.104610811771325e-06, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*n + an_1, p = 7.533474411789083e-08, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2**2, p = 1.316589320937603e-05, parse trees = 1, valid = False
-> C0*an_35 + n**2, p = 7.868852459016401e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*n + n**5, p = 3.4560000000000055e-05, parse trees = 1, valid = False
-> an_1*an_47*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*an_12*n**3 + an_1*n, p = 4.02721992398603e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.555173340499869e-05, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823767e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_25 + C2*n**2 + n, p = 7.244504166263024e-08, parse trees = 1, valid = False
-> an_7*n**2, p = 1.6460983606557384e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*n + an_1, p = 6.50295196866699e-07, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_25, p = 3.8597768098942334e-07, parse trees = 1, valid = False
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*an_2*an_4*n)
<class 'tuple'> (n**2, C0*an_1**2*an_2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**2)
<class 'tuple'> (C0*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_31 + an_28 <class 'ProGED.model.Model'>
C0*an_31 + an_28 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_28, C0*an_31)
<class 'tuple'> (an_28, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n**2 <class 'ProGED.model.Model'>
C0*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**3)
<class 'tuple'> (n**2, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_36*n <class 'ProGED.model.Model'>
an_1*an_36*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_36, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + an_3**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3**2, C1*an_1, C0*an_1*n, C2*an_2*n)
<class 'tuple'> (an_3**2, C1*an_1, C0*an_1*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1*n**3)
<class 'tuple'> (n**2, C1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_4*n**2 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_4*n**2 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n**2, C0*an_1*an_2*an_4*n**2)
<class 'tuple'> (an_3*n**2, C0*an_1*an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_4*n <class 'ProGED.model.Model'>
an_1**2*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_8 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_8, C1*n, C0*an_2*n)
<class 'tuple'> (an_8, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_40*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_40*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_40*n**2, C0*an_1*n)
<class 'tuple'> (C1*n, an_40*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + an_1*an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, C0*an_1*n**2, an_1*an_2**2*n**3)
<class 'tuple'> (C1*an_1, C2*n, C0*an_1*n**2, an_1*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**3)
<class 'tuple'> (n**2, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3)
<class 'tuple'> (an_1, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_13 <class 'ProGED.model.Model'>
an_1*an_13 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_13)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n)
<class 'tuple'> (an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*n, C0*an_1*n, C2*an_2*n)
<class 'tuple'> (an_1, C1*an_1, C3*n, C0*an_1*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1*an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2**2)
<class 'tuple'> (C0*an_1, an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_35 + n**2 <class 'ProGED.model.Model'>
C0*an_35 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_35)
<class 'tuple'> (n**2, C0*an_35)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**5 <class 'ProGED.model.Model'>
C0*n + n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**5, C0*n)
<class 'tuple'> (n**5, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_47*n <class 'ProGED.model.Model'>
an_1*an_47*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_47, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_12*n**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_12*n**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_12*n**3)
<class 'tuple'> (an_1*n, C0*an_12*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_25 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_25 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_25, C2*n**2)
<class 'tuple'> (n, C0*an_1, C1*an_25, C2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_7*n**2 <class 'ProGED.model.Model'>
an_7*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_7, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n**3)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + an_25 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_25 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_25, C0*an_1**2, C1*n)
<class 'tuple'> (an_25, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4679827469990414


Equation discovery for all (chosen) OEIS sequences took 0.46798850999948627 secconds, i.e. 0.007799808499991438 minutes or 0.00012999680833319062 hours.
74





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 74
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 58 models
-> C0*n + an_1**3, p = 0.00022579694335649256, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1, p = 8.3152500582955e-08, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_4 + C1*n + an_26, p = 8.986831497175939e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1*n**2, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_26*an_34, p = 1.1944220490664481e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2**2 + C1*n + an_1*n, p = 2.4711368792982704e-06, parse trees = 1, valid = False
-> C0*an_1*an_2**2 + n, p = 2.0592807327485583e-05, parse trees = 1, valid = False
-> an_1**3*an_3*n, p = 4.4556166721833704e-06, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 9.215009298575664e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_37, p = 7.244504165546904e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.014869344799785009, parse trees = 2, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3 + C2*n + n, p = 4.5459593534260617e-07, parse trees = 1, valid = False
-> an_42*n**2, p = 1.3114754098360662e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + n**2, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> an_1**2*an_32*n, p = 1.0721602248646601e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_36 + an_1, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*n + an_33*n**2, p = 1.5737704918032897e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*n**2 + n, p = 3.251475984333495e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_2*n**2, p = 8.532416017199696e-07, parse trees = 1, valid = False
-> C0*an_1*an_14 + C1*an_1 + C2*an_6 + C3*n**2 + C4*n + an_2*n, p = 1.332160153646227e-15, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_5, p = 3.4959204514915354e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1*an_8*n**3, p = 3.610664230045691e-07, parse trees = 1, valid = False
-> C0*an_3*n**2 + an_1, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2**2*n**2 + C2*n + an_11, p = 1.0825110447885334e-10, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_2**2*n**3 + n, p = 1.2883705097196111e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_3 + n, p = 1.254427463091625e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
C0*n + an_1**3 <class 'ProGED.model.Model'>
C0*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*n)
<class 'tuple'> (an_1**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**3, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*n**3, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4 + C1*n + an_26 <class 'ProGED.model.Model'>
C0*an_4 + C1*n + an_26 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_26, C0*an_4, C1*n)
<class 'tuple'> (an_26, C0*an_4, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_26*an_34 <class 'ProGED.model.Model'>
an_26*an_34 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_26, an_34)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2**2, C1*n, an_1*n)
<class 'tuple'> (C0*an_2**2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2**2)
<class 'tuple'> (n, C0*an_1*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_3*n <class 'ProGED.model.Model'>
an_1**3*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_37 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_37, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_37, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*an_3)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42*n**2 <class 'ProGED.model.Model'>
an_42*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_42, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*n)
<class 'tuple'> (n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_32*n <class 'ProGED.model.Model'>
an_1**2*an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1*n)
<class 'tuple'> (n, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_36 + an_1 <class 'ProGED.model.Model'>
C0*an_36 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_36)
<class 'tuple'> (an_1, C0*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_33*n**2 <class 'ProGED.model.Model'>
C0*n + an_33*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_33*n**2)
<class 'tuple'> (C0*n, an_33*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1, C2*n**2)
<class 'tuple'> (n, C0*an_1**2, C1*an_1, C2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_2*n**2)
<class 'tuple'> (C0*n**3, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_14 + C1*an_1 + C2*an_6 + C3*n**2 + C4*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_14 + C1*an_1 + C2*an_6 + C3*n**2 + C4*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_6, C3*n**2, C4*n, an_2*n, C0*an_1*an_14)
<class 'tuple'> (C1*an_1, C2*an_6, C3*n**2, C4*n, an_2*n, C0*an_1*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_5 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*an_2, C1*n)
<class 'tuple'> (an_5, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_8*n**3 <class 'ProGED.model.Model'>
an_1*an_8*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_8, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n**2)
<class 'tuple'> (an_1, C0*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2**2*n**2 + C2*n + an_11 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*n**2 + C2*n + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*an_1, C2*n, C1*an_2**2*n**2)
<class 'tuple'> (an_11, C0*an_1, C2*n, C1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2*n**3 + n <class 'ProGED.model.Model'>
C0*an_2**2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2*n**3)
<class 'tuple'> (n, C0*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_3)
<class 'tuple'> (n, C0*an_1**2, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4710902890001307


Equation discovery for all (chosen) OEIS sequences took 0.47109637100038526 secconds, i.e. 0.007851606183339754 minutes or 0.00013086010305566256 hours.
75





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 75
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4, p = 2.0209153236073647e-17, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_6 + an_1, p = 4.654845471647407e-05, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n, p = 1.205355905886255e-10, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*an_3*n + C1*n + an_1**2, p = 3.208044003972027e-07, parse trees = 1, valid = False
-> an_15*n, p = 6.557486822239345e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18, p = 1.537608742897261e-16, parse trees = 1, valid = False
-> an_30, p = 0.00032786885245909516, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_49, p = 3.2164806745939103e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_3*n + an_1*n, p = 4.102089054259314e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n, p = 1.148097024611217e-11, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + an_1, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**2 + n**2, p = 1.0171283848427857e-06, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> an_1*an_2*an_45, p = 1.6189313936702495e-06, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + n, p = 4.238034936844938e-05, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*n**2, p = 9.03187773425971e-06, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n**2 + an_18, p = 7.86885601566351e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + C2*n + an_1**2*n, p = 1.300590393733399e-07, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n**2 + C2*n**2 + C3*n + an_1, p = 2.787932228618259e-10, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1**5*n**2 + an_2*n, p = 5.702576259035903e-09, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_4 + C2*n**2 + C3*n + an_1, p = 1.8993303411844365e-10, parse trees = 1, valid = False
-> C0*n + an_2*an_8, p = 1.6356000358326625e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0001271410481053481, parse trees = 1, valid = False
-> C0*an_1*n + an_2*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_4*n + C2*n + an_1**2*an_28*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*n, an_1**2*an_28*an_4, C1*an_1*an_4*n)
<class 'tuple'> (C0*an_1**2, C2*n, an_1**2*an_28*an_4, C1*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_6 + an_1 <class 'ProGED.model.Model'>
C0*an_6 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_6)
<class 'tuple'> (an_1, C0*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n**3 + C3*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n**3, C3*n, an_1**2*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (C2*n**3, C3*n, an_1**2*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3*n + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*an_3*n)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15*n <class 'ProGED.model.Model'>
an_15*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18 <class 'ProGED.model.Model'>
C0*an_1**2*an_4*n**3 + C1*an_1 + C2*an_3 + C3*n**2 + C4*n + an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_18, C1*an_1, C2*an_3, C3*n**2, C4*n, C0*an_1**2*an_4*n**3)
<class 'tuple'> (an_18, C1*an_1, C2*an_3, C3*n**2, C4*n, C0*an_1**2*an_4*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30 <class 'ProGED.model.Model'>
an_30 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_49 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_49 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_49)
<class 'tuple'> (C0*an_1, an_1*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n, C1*an_1*an_3*n)
<class 'tuple'> (C0*an_1**2, an_1*n, C1*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*an_3*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*n, an_1*an_2*n, C2*an_2*an_3*n**2)
<class 'tuple'> (C1*an_1, C0*an_1*n, an_1*an_2*n, C2*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n**3)
<class 'tuple'> (an_1, C0*an_2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n**2, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_1, C2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_45 <class 'ProGED.model.Model'>
an_1*an_2*an_45 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_45)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
<class 'tuple'> (C0*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_20 <class 'ProGED.model.Model'>
an_20 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n**2, C0*an_1*n)
<class 'tuple'> (an_1**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_18 <class 'ProGED.model.Model'>
C0*n**2 + an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_18, C0*n**2)
<class 'tuple'> (an_18, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**3 + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**3, C2*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n**3, C2*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n**2 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n**2 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n**2, C3*n, C1*an_4*n**2)
<class 'tuple'> (an_1, C0*an_1, C2*n**2, C3*n, C1*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**5*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**5*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**5*n**2)
<class 'tuple'> (an_2*n, C0*an_1**5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_4 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_4 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n**2, C3*n, C0*an_1**2*n, C1*an_1*an_4)
<class 'tuple'> (an_1, C2*n**2, C3*n, C0*an_1**2*n, C1*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_8 <class 'ProGED.model.Model'>
C0*n + an_2*an_8 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_8)
<class 'tuple'> (C0*n, an_2*an_8)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n)
<class 'tuple'> (an_2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4572922009992908


Equation discovery for all (chosen) OEIS sequences took 0.45729823900001065 secconds, i.e. 0.007621637316666844 minutes or 0.00012702728861111408 hours.
76





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 76
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> C0*n + an_2**2*n, p = 3.2209262742990264e-05, parse trees = 1, valid = False
-> C0*an_1 + an_36*n, p = 5.0309056705186815e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n, p = 4.955230082638033e-10, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3, p = 7.61041521468189e-14, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_28*n**3, p = 2.6229508196791334e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2, p = 2.4058331635056544e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_2**2, p = 7.899535925625614e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + an_5*n, p = 8.94038672840459e-08, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 2.38633967213115e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1, p = 1.5358348830959436e-06, parse trees = 1, valid = False
-> C0*n + an_1**2*an_49*n**2, p = 2.5731845396751306e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_25*n, p = 6.557377049828528e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*n**2 + an_2*n, p = 2.5111581372630297e-08, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.272979676713032e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n**2, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n**4, p = 5.5606557377049235e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_3 + C3*n + n, p = 3.6127510937038834e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1**3*an_4*n, p = 1.4326521299789604e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3*n**3 + C2*n + n, p = 3.6367674827408518e-09, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_32 + n, p = 3.9344262295082824e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + C1*n + n, p = 5.119449610319814e-07, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*an_1*an_3*n**2 + an_1, p = 6.56334248681491e-11, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*an_5, p = 4.115509169403293e-09, parse trees = 1, valid = False
-> C0*n + an_1*an_3*n**4, p = 3.139285138403659e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_2 + an_48, p = 7.596524231837322e-06, parse trees = 1, valid = False
C0*n + an_2**2*n <class 'ProGED.model.Model'>
C0*n + an_2**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**2*n)
<class 'tuple'> (C0*n, an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_36*n <class 'ProGED.model.Model'>
C0*an_1 + an_36*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_36*n)
<class 'tuple'> (C0*an_1, an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1**2*an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, C0*an_1*n, an_1**2*an_2*an_3*n)
<class 'tuple'> (C1*n**2, C0*an_1*n, an_1**2*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*an_2 + C3*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1**2, C3*n, an_2*n**3, C0*an_1**2*n**3, C2*an_1*an_2)
<class 'tuple'> (C1*an_1**2, C3*n, an_2*n**3, C0*an_1**2*n**3, C2*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_28*n**3 <class 'ProGED.model.Model'>
an_28*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_28, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2*an_4 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C1*an_2*an_4, C0*an_1*an_2*n)
<class 'tuple'> (an_1*n**2, C1*an_2*an_4, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1)
<class 'tuple'> (an_2**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + an_5*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + an_5*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_5*n, C0*an_1*n)
<class 'tuple'> (C1*an_2, an_5*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*an_49*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_49*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_49*n**2)
<class 'tuple'> (C0*n, an_1**2*an_49*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_25*n <class 'ProGED.model.Model'>
an_25*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_25, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n**2, an_2*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_1, C2*n**2, an_2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n**2)
<class 'tuple'> (n**2, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**4)
<class 'tuple'> (an_1, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n**4 <class 'ProGED.model.Model'>
an_2*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*an_3 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_3 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_3, C3*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*an_1, C2*an_3, C3*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_4*n <class 'ProGED.model.Model'>
an_1**3*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*an_3*n**3)
<class 'tuple'> (n, C0*an_1, C2*n, C1*an_2*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_32 + n <class 'ProGED.model.Model'>
C0*an_32 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_32)
<class 'tuple'> (n, C0*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*n**3)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*an_1*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*an_1*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**4, C1*an_1*an_3*n**2)
<class 'tuple'> (an_1, C0*an_1**2*n**4, C1*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*an_5 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*an_5)
<class 'tuple'> (C0*an_1, C1*n, an_2*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3*n**4 <class 'ProGED.model.Model'>
C0*n + an_1*an_3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3*n**4)
<class 'tuple'> (C0*n, an_1*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_48 <class 'ProGED.model.Model'>
C0*an_2 + an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48, C0*an_2)
<class 'tuple'> (an_48, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4723569059988222


Equation discovery for all (chosen) OEIS sequences took 0.472362576998421 secconds, i.e. 0.00787270961664035 minutes or 0.00013121182694400584 hours.
77





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 77
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> C0*n + an_1*an_24*n, p = 1.006181134435274e-06, parse trees = 1, valid = False
-> C0*n + an_3*an_4, p = 4.867867060825944e-06, parse trees = 1, valid = False
-> an_1*an_48*n**2, p = 1.6769685568395603e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_4*n, p = 8.222950819672135e-05, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00035551733404998685, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n**3 + n**2, p = 9.417855415210976e-08, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1**2*n**2, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_27 + an_1*an_2**2*n**2, p = 1.1511163461851946e-10, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_36*n + n, p = 7.8688524590164e-06, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 6.628721311475417e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565158, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2, p = 4.924862792045725e-22, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_13 + C2*an_2 + n, p = 1.7889068544160228e-09, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*n + an_1, p = 1.0838253281111651e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + an_1, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3*n + C1*an_1*n**2 + n, p = 1.2832176015888116e-08, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_4*n**2, p = 0.0001370491803278689, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*an_2**2, p = 0.0001716067277290465, parse trees = 1, valid = False
-> C0*an_36 + an_2, p = 7.596524231837324e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000003, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**3 + n, p = 1.0838253281111651e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**2 + C2*n**2 + n, p = 5.543500038863666e-10, parse trees = 1, valid = False
-> C0*an_49 + C1*n + n, p = 4.721311475409837e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_2*an_3*n**2, p = 4.576179406107907e-08, parse trees = 1, valid = False
-> C0*an_6 + an_2*n, p = 2.8114736182029935e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_14*n, p = 6.037423681944513e-07, parse trees = 1, valid = False
-> an_1*an_2*an_20, p = 1.6189314595270044e-06, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + n**2, p = 4.0036721311475465e-06, parse trees = 1, valid = False
-> an_1**2*an_12, p = 5.36412489875188e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_37, p = 0.0003278688524590164, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_24*n <class 'ProGED.model.Model'>
C0*n + an_1*an_24*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_24*n)
<class 'tuple'> (C0*n, an_1*an_24*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_3*an_4 <class 'ProGED.model.Model'>
C0*n + an_3*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*an_4)
<class 'tuple'> (C0*n, an_3*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_48*n**2 <class 'ProGED.model.Model'>
an_1*an_48*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_48, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_3, C2*n**3)
<class 'tuple'> (n**2, C0*an_1, C1*an_3, C2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*n**2, C0*an_2*n)
<class 'tuple'> (C1*n, an_1**2*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_27 + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_27 + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_27, an_1*an_2**2*n**2)
<class 'tuple'> (C0*an_1, C1*an_27, an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_36*n + n <class 'ProGED.model.Model'>
C0*an_36*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_36*n)
<class 'tuple'> (n, C0*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2)
<class 'tuple'> (n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + C2*an_1 + C3*an_2*an_38*n**5 + C4*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C4*n, an_4*n**2, C0*an_1*n**3, C1*an_1*n, C3*an_2*an_38*n**5)
<class 'tuple'> (C2*an_1, C4*n, an_4*n**2, C0*an_1*n**3, C1*an_1*n, C3*an_2*an_38*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_13 + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_13 + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_13, C2*an_2, C0*an_1**2*n)
<class 'tuple'> (n, C1*an_13, C2*an_2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n**3)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1*n**2, C0*an_1**2*an_3*n)
<class 'tuple'> (n, C1*an_1*n**2, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n**2 <class 'ProGED.model.Model'>
an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2**2 <class 'ProGED.model.Model'>
an_1*an_2**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_36 + an_2 <class 'ProGED.model.Model'>
C0*an_36 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_36)
<class 'tuple'> (an_2, C0*an_36)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1*n**3)
<class 'tuple'> (n, C0*an_1**2, C1*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**2 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**2 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n**2, C1*an_3*n**2)
<class 'tuple'> (n, C0*an_1, C2*n**2, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_49 + C1*n + n <class 'ProGED.model.Model'>
C0*an_49 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_49, C1*n)
<class 'tuple'> (n, C0*an_49, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_2*an_3*n**2)
<class 'tuple'> (C0*an_2, C1*n, an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_6 + an_2*n <class 'ProGED.model.Model'>
C0*an_6 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_6, an_2*n)
<class 'tuple'> (C0*an_6, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_14*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_14*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_14*n)
<class 'tuple'> (C0*an_1, C1*n, an_14*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_20 <class 'ProGED.model.Model'>
an_1*an_2*an_20 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_20)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_2*n**2)
<class 'tuple'> (n**2, C1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_12 <class 'ProGED.model.Model'>
an_1**2*an_12 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_12, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37 <class 'ProGED.model.Model'>
an_37 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48601607800083


Equation discovery for all (chosen) OEIS sequences took 0.4860221500002808 secconds, i.e. 0.008100369166671346 minutes or 0.00013500615277785578 hours.
78





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 78
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*n + an_11, p = 3.9425575672131156e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2, p = 2.7095633202779117e-05, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n + an_1**3, p = 2.051044527129656e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1 + an_14, p = 2.5155932008102126e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**3, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_34 + C1*n + an_20*an_40, p = 3.1329104199845314e-12, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2, p = 9.300585693566775e-11, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n**2 + an_1*n, p = 5.119449610319815e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + an_2*an_3*n, p = 6.313832435313972e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_17 + C1*an_2 + C2*an_5 + n, p = 7.641367690860036e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*an_27*n + C1*n + n, p = 5.595026896574163e-10, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n, p = 5.756185686502205e-16, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1*an_39*n + C1*an_1 + an_1**6*n, p = 3.3742774857117617e-13, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*an_1*an_48*n**3 + C1*an_1 + n, p = 3.0878214476101568e-09, parse trees = 1, valid = False
-> an_37*n**4, p = 5.245901639344269e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.00019886163934426245, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1*an_2*an_27*n, p = 4.574058537860417e-11, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + n**2, p = 4.003672131147547e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1**3*n**3, p = 3.6127510937038867e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> C0*an_4 + an_1, p = 0.0002628648212846009, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_43, p = 1.2420653971109458e-07, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_1, p = 0.00010453562192430208, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_1 + n**2, p = 6.319628740500498e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + n, p = 2.001836065573773e-05, parse trees = 1, valid = False
C0*n + an_11 <class 'ProGED.model.Model'>
C0*n + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*n)
<class 'tuple'> (an_11, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*n)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C1*n, C0*an_1*an_3)
<class 'tuple'> (an_1**3, C1*n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_14 <class 'ProGED.model.Model'>
C0*an_1 + an_14 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_14, C0*an_1)
<class 'tuple'> (an_14, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1, C1*n)
<class 'tuple'> (n**3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_34 + C1*n + an_20*an_40 <class 'ProGED.model.Model'>
C0*an_34 + C1*n + an_20*an_40 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_34, C1*n, an_20*an_40)
<class 'tuple'> (C0*an_34, C1*n, an_20*an_40)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_2 + C2*an_3*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, an_1*n**2, C0*an_1*n**3, C2*an_3*n)
<class 'tuple'> (C1*an_2, an_1*n**2, C0*an_1*n**3, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2*an_3*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*an_3*n)
<class 'tuple'> (C0*an_1, an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_17 + C1*an_2 + C2*an_5 + n <class 'ProGED.model.Model'>
C0*an_17 + C1*an_2 + C2*an_5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_17, C1*an_2, C2*an_5)
<class 'tuple'> (n, C0*an_17, C1*an_2, C2*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*an_27*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_27*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*an_27*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_4*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n**2 + C4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C4*n, an_1*n, C1*an_1*n**2, C3*an_2*n**2, C0*an_1**3*an_4*n)
<class 'tuple'> (C2*an_1, C4*n, an_1*n, C1*an_1*n**2, C3*an_2*n**2, C0*an_1**3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
<class 'tuple'> (n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_39*n + C1*an_1 + an_1**6*n <class 'ProGED.model.Model'>
C0*an_1*an_39*n + C1*an_1 + an_1**6*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**6*n, C0*an_1*an_39*n)
<class 'tuple'> (C1*an_1, an_1**6*n, C0*an_1*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_48*n**3 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_48*n**3 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_48*n**3)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_48*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37*n**4 <class 'ProGED.model.Model'>
an_37*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1*an_2*an_27*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1*an_2*an_27*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, an_1*an_2*an_27*n)
<class 'tuple'> (C0*an_1, C1*n**2, an_1*an_2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2, C1*n**3)
<class 'tuple'> (n**2, C0*an_2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**3*n**3 <class 'ProGED.model.Model'>
C0*n**2 + an_1**3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**3*n**3)
<class 'tuple'> (C0*n**2, an_1**3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C0*an_1*n)
<class 'tuple'> (n, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1 <class 'ProGED.model.Model'>
C0*an_4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_4)
<class 'tuple'> (an_1, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_43 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_43 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_43, C0*an_1**2*an_2)
<class 'tuple'> (an_43, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3)
<class 'tuple'> (an_1, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1*an_2**2*n)
<class 'tuple'> (n**2, C1*an_1, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**3)
<class 'tuple'> (n, C0*an_2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4824220369991963


Equation discovery for all (chosen) OEIS sequences took 0.4824287609990279 secconds, i.e. 0.008040479349983799 minutes or 0.00013400798916639664 hours.
79





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 79
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 49 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_9*n + C1*n + n, p = 4.769590247218937e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n, p = 6.382051567341324e-19, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*an_2, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> an_1*an_2*an_4*n**4, p = 2.7068532902166595e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4, p = 3.621531830301716e-14, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n + an_1**2*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_4*n, p = 0.0013704918032786885, parse trees = 2, valid = False
-> C0*an_2 + an_2, p = 0.0008052315685747563, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n**3, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2, p = 5.4383210271077564e-11, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> an_1*an_26*an_3, p = 4.963704744890886e-07, parse trees = 1, valid = False
-> an_41*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> an_22*n**2, p = 1.3114754146375402e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n, p = 1.0514592851384043e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_46 + C2*n + an_4, p = 6.894814984514125e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565156, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + an_1, p = 4.23803493684494e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_11*an_2*n, p = 1.5034875622062959e-09, parse trees = 1, valid = False
-> an_1*an_3*n**4, p = 2.180059123891429e-06, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_2, p = 1.6365453672333835e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_4, p = 7.570506852996511e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*n**2 + n**2, p = 0.0008640000000000007, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_9*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_9*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*an_9*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*an_9*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n)
<class 'tuple'> (C0*an_1, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_23 + an_1**2*an_2*an_3*an_35**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2*an_23, an_1**2*an_2*an_3*an_35**2*n)
<class 'tuple'> (C0*an_1**2*an_23, an_1**2*an_2*an_3*an_35**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*an_2)
<class 'tuple'> (C0*n**2, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_4*n**4 <class 'ProGED.model.Model'>
an_1*an_2*an_4*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_4, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*an_2 + C3*an_4 + an_1*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, C1*an_1, C2*an_2, C3*an_4, an_1*an_2*n**4)
<class 'tuple'> (C0*an_1**3, C1*an_1, C2*an_2, C3*an_4, an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n**3)
<class 'tuple'> (C0*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2)
<class 'tuple'> (an_2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**3, C0*an_1*n)
<class 'tuple'> (an_1*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**4 + C2*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n, C1*an_1*n**4, C2*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1**2*n, C1*an_1*n**4, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_26*an_3 <class 'ProGED.model.Model'>
an_1*an_26*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_26, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_41*n <class 'ProGED.model.Model'>
an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_22*n**2 <class 'ProGED.model.Model'>
an_22*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_22, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_4*n + an_1*n <class 'ProGED.model.Model'>
C0*an_4*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_4*n)
<class 'tuple'> (an_1*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_46 + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_46 + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C1*an_46, C2*n)
<class 'tuple'> (an_4, C0*an_1, C1*an_46, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**2)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_11*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_11*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_11*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n**4 <class 'ProGED.model.Model'>
an_1*an_3*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1**2*n**2)
<class 'tuple'> (an_2, C1*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_4, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**2 <class 'ProGED.model.Model'>
C0*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2)
<class 'tuple'> (n**2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4404868390010961


Equation discovery for all (chosen) OEIS sequences took 0.440494917000251 secconds, i.e. 0.007341581950004184 minutes or 0.0001223596991667364 hours.
80





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 80
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n, p = 2.693612250049392e-10, parse trees = 1, valid = False
-> C0*an_1*n + an_21*n, p = 1.0061811463829146e-06, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + n, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_3*n**5 + C1*n + an_1*an_2*n**2, p = 5.8188279723853736e-12, parse trees = 1, valid = False
-> C0*an_23 + n, p = 3.934426233829523e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n**2 + n**2, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2**2 + n, p = 0.0001610463137149513, parse trees = 1, valid = False
-> an_2*an_37*n, p = 2.5321747439457746e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + n, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> C0*n + an_42, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1 + n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_4 + an_19, p = 7.489027262915301e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**3, p = 4.545959353426065e-06, parse trees = 1, valid = False
-> C0*n**3 + an_4, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n, p = 8.470478783043669e-13, parse trees = 1, valid = False
-> C0*an_46 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + C2*an_30 + C3*n + an_1, p = 3.889002301847393e-11, parse trees = 1, valid = False
-> an_3*n, p = 0.0042622950819672135, parse trees = 2, valid = False
-> C0*an_29 + an_2, p = 7.596524231843405e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_49*n, p = 1.9427176724042997e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + n, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_22*n, p = 6.557377073187698e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 0.00021190174684224692, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n**4 + an_2, p = 3.3363934426229555e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> C0*an_1*an_11*an_2*n + C1*an_1*an_3 + C2*an_1*n**2 + C3*an_3 + an_1*an_2*an_22*an_3*n**2, p = 3.284116617018931e-24, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_28 + C4*n**2 + C5*n + n, p = 5.234518069498355e-14, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_5, p = 2.9631666019703714e-10, parse trees = 1, valid = False
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n, C3*an_3*n)
<class 'tuple'> (C1*an_1, C2*an_2, an_2*n, C0*an_1*n, C3*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_21*n <class 'ProGED.model.Model'>
C0*an_1*n + an_21*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_21*n, C0*an_1*n)
<class 'tuple'> (an_21*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C0*an_1*n)
<class 'tuple'> (n, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n**5 + C1*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_3*n**5 + C1*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_3*n**5, an_1*an_2*n**2)
<class 'tuple'> (C1*n, C0*an_3*n**5, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_23 + n <class 'ProGED.model.Model'>
C0*an_23 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_23)
<class 'tuple'> (n, C0*an_23)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**2)
<class 'tuple'> (n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + n <class 'ProGED.model.Model'>
C0*an_2**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2)
<class 'tuple'> (n, C0*an_2**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_37*n <class 'ProGED.model.Model'>
an_2*an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_42 <class 'ProGED.model.Model'>
C0*n + an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_42, C0*n)
<class 'tuple'> (an_42, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
<class 'tuple'> (C0*n**2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_19 <class 'ProGED.model.Model'>
C0*an_4 + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C0*an_4)
<class 'tuple'> (an_19, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_4 <class 'ProGED.model.Model'>
C0*n**3 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n**3)
<class 'tuple'> (an_4, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_23*an_3 + C2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1**2*n, C0*an_2*n**2, C1*an_23*an_3)
<class 'tuple'> (C2*n, an_1**2*n, C0*an_2*n**2, C1*an_23*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_46 + n <class 'ProGED.model.Model'>
C0*an_46 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_46)
<class 'tuple'> (n, C0*an_46)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_2 + C2*an_30 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_2 + C2*an_30 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*an_30, C3*n, C0*an_2*n)
<class 'tuple'> (an_1, C1*an_2, C2*an_30, C3*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_29 + an_2 <class 'ProGED.model.Model'>
C0*an_29 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_29)
<class 'tuple'> (an_2, C0*an_29)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*an_49*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_49*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_49*n)
<class 'tuple'> (C0*an_2, an_1*an_49*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_22*n <class 'ProGED.model.Model'>
an_22*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_22, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**4 + an_2 <class 'ProGED.model.Model'>
C0*n**4 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**4)
<class 'tuple'> (an_2, C0*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_11*an_2*n + C1*an_1*an_3 + C2*an_1*n**2 + C3*an_3 + an_1*an_2*an_22*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_11*an_2*n + C1*an_1*an_3 + C2*an_1*n**2 + C3*an_3 + an_1*an_2*an_22*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C3*an_3, C1*an_1*an_3, C2*an_1*n**2, C0*an_1*an_11*an_2*n, an_1*an_2*an_22*an_3*n**2)
<class 'tuple'> (C3*an_3, C1*an_1*an_3, C2*an_1*n**2, C0*an_1*an_11*an_2*n, an_1*an_2*an_22*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_28 + C4*n**2 + C5*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_28 + C4*n**2 + C5*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*an_28, C4*n**2, C5*n, C0*an_1**2*n, C1*an_1*n**2)
<class 'tuple'> (n, C2*an_1, C3*an_28, C4*n**2, C5*n, C0*an_1**2*n, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_5 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_5, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4796334190014022


Equation discovery for all (chosen) OEIS sequences took 0.47963918000095873 secconds, i.e. 0.007993986333349311 minutes or 0.00013323310555582186 hours.
81





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 81
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 62 models
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_2 + an_4, p = 7.938367822269999e-05, parse trees = 1, valid = False
-> an_37, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> an_27*an_46*n**2, p = 4.777688196166607e-09, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> an_1*an_4*n, p = 8.762160709486699e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1, p = 3.42154575542154e-10, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.001177231926901372, parse trees = 2, valid = False
-> C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1, p = 3.507250604414163e-12, parse trees = 1, valid = False
-> C0*an_1*an_3*an_45*n + C1*n + n, p = 1.4295469664861833e-09, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*an_2 + n, p = 3.8651115291588325e-06, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.00019886163934426245, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n + n, p = 1.3005903937333975e-08, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_3 + n**2, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_2 + an_1**2*an_3*n, p = 8.07342508122115e-07, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n**3, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + an_2, p = 3.865111529158833e-06, parse trees = 1, valid = False
-> C0*an_1**3 + an_1*n, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_19*n**3, p = 5.795604118304944e-10, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_48, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**4, p = 6.929375048579581e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + an_1**2*n, p = 1.3858750097159172e-07, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + C3*n + an_3*n, p = 2.1753284108431012e-13, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> an_1*an_46, p = 4.192421392098899e-05, parse trees = 1, valid = False
-> C0*an_3*n + n, p = 0.0002557377049180329, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565156, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0010595087342112341, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_4*n + an_1*n**2, p = 2.102918570276809e-06, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> an_33, p = 0.0003278688524590185, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011047868852459031, parse trees = 1, valid = False
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_4 <class 'ProGED.model.Model'>
C0*an_2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_2)
<class 'tuple'> (an_4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37 <class 'ProGED.model.Model'>
an_37 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_27*an_46*n**2 <class 'ProGED.model.Model'>
an_27*an_46*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_27, an_46, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n)
<class 'tuple'> (C0*n**2, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_4*n <class 'ProGED.model.Model'>
an_1*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*an_3 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_2, C3*an_3, C4*n, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_2, C3*an_3, C4*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_8 + C1*an_2*an_31 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1*an_8, C1*an_2*an_31)
<class 'tuple'> (an_1, C2*n, C0*an_1*an_8, C1*an_2*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*an_45*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*an_45*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_3*an_45*n)
<class 'tuple'> (n, C1*n, C0*an_1*an_3*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**2)
<class 'tuple'> (n, C1*an_2, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3, C2*n)
<class 'tuple'> (n, C0*an_1, C1*an_3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_3)
<class 'tuple'> (n**2, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1**2*an_3*n <class 'ProGED.model.Model'>
C0*an_2 + an_1**2*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1**2*an_3*n)
<class 'tuple'> (C0*an_2, an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_1*an_2*n)
<class 'tuple'> (n**3, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C0*an_2*n)
<class 'tuple'> (an_2, C1*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1*n)
<class 'tuple'> (C0*an_1**3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_19*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_19*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_19*n**3, C0*an_1*n)
<class 'tuple'> (C1*n, an_19*n**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_48 <class 'ProGED.model.Model'>
an_48 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**4 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**4, C0*n**2, C1*n)
<class 'tuple'> (an_1**4, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (an_1**2*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n**2)
<class 'tuple'> (an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + C3*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + C3*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n, an_3*n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (C2*an_1, C3*n, an_3*n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_46 <class 'ProGED.model.Model'>
an_1*an_46 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_46)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + n <class 'ProGED.model.Model'>
C0*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*n)
<class 'tuple'> (n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n)
<class 'tuple'> (an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_4*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_4*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_4*n)
<class 'tuple'> (an_1*n**2, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_33 <class 'ProGED.model.Model'>
an_33 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
<class 'tuple'> (C0*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48435256000084337


Equation discovery for all (chosen) OEIS sequences took 0.48435858999982884 secconds, i.e. 0.008072643166663814 minutes or 0.00013454405277773024 hours.
82





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 82
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 61 models
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + an_37, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3, p = 2.439497886837189e-14, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**3 + an_1*an_4*n, p = 6.45354682550523e-09, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_32*n, p = 6.557377049180471e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*n**2 + an_3, p = 0.0002557377049180329, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2, p = 4.489353750082322e-10, parse trees = 1, valid = False
-> C0*an_8*n + n, p = 8.471173770491805e-06, parse trees = 1, valid = False
-> an_12, p = 0.0003280721359016393, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_3 + an_3, p = 2.323013820540047e-07, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_3, p = 9.67922425225019e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0003763282389274878, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n, p = 3.674631684778041e-12, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n**2, p = 5.085641924213928e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n + C2*n + n, p = 4.708927707605488e-07, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 1.950885590600097e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_17*n**4 + C1*an_1*n**2 + C2*an_1 + n, p = 2.4233916462934003e-13, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n, p = 6.277895343157566e-07, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_38*n + an_1*n, p = 2.52436249492881e-10, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_43*n**2 + an_1, p = 2.3690171106254984e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1*n, p = 4.515938867129855e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n, p = 2.7095633202779127e-05, parse trees = 1, valid = False
-> C0*an_4 + C1*n + an_1**2*n, p = 8.066933531881532e-07, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*n + an_15, p = 3.934492093343607e-05, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00027803278688524614, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_1**2 + an_1, p = 0.0011289847167824626, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**2 + C2*an_1*n + C3*an_1 + C4*n + an_1**2*n, p = 7.560157755717012e-13, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_18*n + an_1**2*an_27*n, p = 4.687041352920163e-11, parse trees = 1, valid = False
-> an_1**3*an_4, p = 7.163260649894799e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_3 + C1*n**3 + C2*n + n, p = 7.365245901639353e-07, parse trees = 1, valid = False
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_37 <class 'ProGED.model.Model'>
C0*an_1 + an_37 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_37, C0*an_1)
<class 'tuple'> (an_37, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_37*n**3 + C1*an_1*n**2 + an_1*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1*n**2, an_1*an_2*n**3, C0*an_1*an_37*n**3)
<class 'tuple'> (C1*an_1*n**2, an_1*an_2*n**3, C0*an_1*an_37*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**3 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**3 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**3, C0*an_1*n, an_1*an_4*n)
<class 'tuple'> (C1*n**3, C0*an_1*n, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_32*n <class 'ProGED.model.Model'>
an_32*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_32, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_3 <class 'ProGED.model.Model'>
C0*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n**2)
<class 'tuple'> (an_3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3 + C1*an_2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_2*an_3)
<class 'tuple'> (n**2, C1*an_2, C2*n, C0*an_1**2*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_8*n + n <class 'ProGED.model.Model'>
C0*an_8*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_8*n)
<class 'tuple'> (n, C0*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_12 <class 'ProGED.model.Model'>
an_12 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_3 + an_3 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_3, C0*an_1*n**2)
<class 'tuple'> (an_3, C1*an_3, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_3 + an_3 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*an_3)
<class 'tuple'> (an_3, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n**3 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n**3, C3*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n**3, C3*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2, C1*n)
<class 'tuple'> (n**2, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*n, C1*an_3*n)
<class 'tuple'> (n, C2*n, C0*an_1*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_17*n**4 + C1*an_1*n**2 + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_17*n**4 + C1*an_1*n**2 + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C1*an_1*n**2, C0*an_1**2*an_17*n**4)
<class 'tuple'> (n, C2*an_1, C1*an_1*n**2, C0*an_1**2*an_17*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_1, C2*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*an_38*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_38*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**3*n, C1*an_38*n)
<class 'tuple'> (an_1*n, C0*an_1**3*n, C1*an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*an_43*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_43*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n**2, C2*an_43*n**2)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n**2, C2*an_43*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**2*n)
<class 'tuple'> (an_1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + C1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_4 + C1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, C1*n, an_1**2*n)
<class 'tuple'> (C0*an_4, C1*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_15 <class 'ProGED.model.Model'>
C0*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*n)
<class 'tuple'> (an_15, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2)
<class 'tuple'> (an_1, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**2 + C2*an_1*n + C3*an_1 + C4*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**2 + C2*an_1*n + C3*an_1 + C4*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C3*an_1, C4*n, an_1**2*n, C1*an_1*n**2, C2*an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (C3*an_1, C4*n, an_1**2*n, C1*an_1*n**2, C2*an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
<class 'tuple'> (n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_18*n + an_1**2*an_27*n <class 'ProGED.model.Model'>
C0*an_18*n + an_1**2*an_27*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18*n, an_1**2*an_27*n)
<class 'tuple'> (C0*an_18*n, an_1**2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_4 <class 'ProGED.model.Model'>
an_1**3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n**3, C2*n)
<class 'tuple'> (n, C0*an_3, C1*n**3, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5142959790009627


Equation discovery for all (chosen) OEIS sequences took 0.5143021330004558 secconds, i.e. 0.008571702216674264 minutes or 0.00014286170361123773 hours.
83





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 83
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n, p = 8.687670537427102e-15, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + n, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_5, p = 2.960448812896237e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**4*an_43*n + an_1, p = 1.3449472309046935e-09, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*n + an_1*n, p = 1.1783126644080361e-07, parse trees = 1, valid = False
-> C0*an_1*an_4 + an_1*an_22*n, p = 2.4489780089300456e-09, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.003093403278688527, parse trees = 2, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_1**2*an_4*an_48, p = 2.0408149999700284e-08, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0007063391561408232, parse trees = 2, valid = False
-> C0*an_1 + an_1*n**6, p = 5.65071324912659e-07, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_15*an_2*n + C1*n**2 + an_1, p = 4.662600466220905e-09, parse trees = 1, valid = False
-> C0*an_2*an_3**2*n + an_1, p = 7.475393593723285e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_14 + n, p = 3.934645775626231e-05, parse trees = 1, valid = False
-> C0*an_2**2 + C1*n + n, p = 1.932555764579416e-05, parse trees = 1, valid = False
-> C0*an_3*an_36*n + n, p = 9.316491982442001e-08, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**3 + n, p = 5.455151224111278e-07, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_2*an_3*n**2, p = 1.645913583564754e-05, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1**3*an_3, p = 2.2278083360916845e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_2, p = 4.091363418083456e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_2*an_7 + C1*an_2 + C2*n + an_2, p = 1.023693833790823e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_25*an_49 + an_1*an_2*n**4, p = 4.3438352690141245e-14, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*an_31*n, p = 8.384842784198405e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**3*an_2 + C1*an_1*an_2 + an_1**2, p = 2.111838238363739e-09, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_26*an_46*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**2, C1*an_26*an_46*n**2)
<class 'tuple'> (an_2*n, C0*an_1**2*n**2, C1*an_26*an_46*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2)
<class 'tuple'> (n, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + an_5 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C1*n, C0*an_1**2*n)
<class 'tuple'> (an_5, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**4*an_43*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**4*an_43*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**4*an_43*n)
<class 'tuple'> (an_1, C0*an_1**4*an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4 + an_1*an_22*n <class 'ProGED.model.Model'>
C0*an_1*an_4 + an_1*an_22*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_4, an_1*an_22*n)
<class 'tuple'> (C0*an_1*an_4, an_1*an_22*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_4*an_48 <class 'ProGED.model.Model'>
an_1**2*an_4*an_48 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_48, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**6 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**6)
<class 'tuple'> (C0*an_1, an_1*n**6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_15*an_2*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_15*an_2*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_15*an_2*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_15*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3**2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3**2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3**2*n)
<class 'tuple'> (an_1, C0*an_2*an_3**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_14 + n <class 'ProGED.model.Model'>
C0*an_14 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_14)
<class 'tuple'> (n, C0*an_14)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2**2, C1*n)
<class 'tuple'> (n, C0*an_2**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*an_36*n + n <class 'ProGED.model.Model'>
C0*an_3*an_36*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3*an_36*n)
<class 'tuple'> (n, C0*an_3*an_36*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*an_2*n**3)
<class 'tuple'> (n, C0*an_1**2*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*n)
<class 'tuple'> (an_1**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_3 <class 'ProGED.model.Model'>
an_1**3*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_7 + C1*an_2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*an_7 + C1*an_2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_2, C2*n, C0*an_2*an_7)
<class 'tuple'> (an_2, C1*an_2, C2*n, C0*an_2*an_7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_25*an_49 + an_1*an_2*n**4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_25*an_49 + an_1*an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_25*an_49, an_1*an_2*n**4)
<class 'tuple'> (C0*an_1, C1*an_25*an_49, an_1*an_2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_31*n <class 'ProGED.model.Model'>
an_1*an_31*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_31, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2 + C1*an_1*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**3*an_2 + C1*an_1*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**3*an_2, C1*an_1*an_2)
<class 'tuple'> (an_1**2, C0*an_1**3*an_2, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.45730249599910167


Equation discovery for all (chosen) OEIS sequences took 0.4573083079994831 secconds, i.e. 0.007621805133324718 minutes or 0.00012703008555541197 hours.
84





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 84
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 52 models
-> C0*an_1 + C1*an_3 + C2*n + an_13*n**3, p = 1.715775442128575e-10, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n, p = 4.648137630006623e-13, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n + n, p = 2.3566253288160726e-08, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_16 + an_1, p = 2.515465468158918e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + n, p = 8.47606987368988e-06, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n**2, p = 1.279862402579953e-05, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016724372536414953, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_10, p = 0.00033012755737704913, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1**2*n, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*an_35*n + an_1*n, p = 1.006181134103737e-06, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> an_5*n, p = 0.0002514754098360656, parse trees = 1, valid = False
-> C0*an_2*n + C1*n**2 + an_1*n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_42*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*an_12 + an_1, p = 2.5170124524912657e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2*an_27, p = 1.2660873719841506e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*an_1**2 + an_4, p = 3.361222304950635e-05, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_2 + an_1, p = 3.159814370250248e-07, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n, p = 1.2798624025799533e-05, parse trees = 1, valid = False
-> C0*an_1*an_11*n + an_3*n, p = 1.1937511938708536e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + an_2*an_3, p = 2.4220275243663436e-06, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00035551733404998685, parse trees = 2, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_2**2*n**2, p = 5.368210457165045e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_6, p = 5.95209748833603e-06, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.505312955709952e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + n, p = 2.133104004299922e-05, parse trees = 1, valid = False
C0*an_1 + C1*an_3 + C2*n + an_13*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + an_13*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, C2*n, an_13*n**3)
<class 'tuple'> (C0*an_1, C1*an_3, C2*n, an_13*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*n**3 + C2*an_1 + C3*an_44*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3, C2*an_1, C1*an_1*n**3, C3*an_44*n)
<class 'tuple'> (n, C0*an_1**3, C2*an_1, C1*an_1*n**3, C3*an_44*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_16 + an_1 <class 'ProGED.model.Model'>
C0*an_16 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_16)
<class 'tuple'> (an_1, C0*an_16)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_10 <class 'ProGED.model.Model'>
an_10 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_2*n**2)
<class 'tuple'> (an_1**2*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_35*n + an_1*n <class 'ProGED.model.Model'>
C0*an_35*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_35*n)
<class 'tuple'> (an_1*n, C0*an_35*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_5*n <class 'ProGED.model.Model'>
an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_2*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_42*n <class 'ProGED.model.Model'>
an_42*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_42, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_12 + an_1 <class 'ProGED.model.Model'>
C0*an_12 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_12)
<class 'tuple'> (an_1, C0*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1)
<class 'tuple'> (n, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_27 <class 'ProGED.model.Model'>
an_2*an_27 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_27)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_4 <class 'ProGED.model.Model'>
C0*an_1**2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1**2)
<class 'tuple'> (an_4, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1, C1*an_2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_11*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1*an_11*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_1*an_11*n)
<class 'tuple'> (an_3*n, C0*an_1*an_11*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*an_3)
<class 'tuple'> (C0*an_1, an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2**2*n**2 <class 'ProGED.model.Model'>
an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + an_6 <class 'ProGED.model.Model'>
C0*an_1**2 + an_6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_6, C0*an_1**2)
<class 'tuple'> (an_6, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**3 <class 'ProGED.model.Model'>
an_1**3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.43783660199915175


Equation discovery for all (chosen) OEIS sequences took 0.4378427150004427 secconds, i.e. 0.007297378583340712 minutes or 0.00012162297638901186 hours.
85





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 85
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000005, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*an_38*n**3 + C1*n + an_1, p = 9.325044827540643e-10, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2*an_20*n + C1*an_7 + an_1*n**2, p = 2.131936337233124e-12, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*n + an_1, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_4*n**2, p = 1.644590163934427e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*n**5, p = 3.6826229508196786e-05, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**2*an_2*n, p = 3.2730907344667675e-07, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*n + an_1, p = 1.3290768535800176e-06, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00011772319269013723, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.0006773908300694775, parse trees = 1, valid = False
-> C0*n + an_2**2*an_25*an_3, p = 8.335481614863871e-11, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005004590163934429, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_3*an_4, p = 3.112242874954291e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_25*an_46*n, p = 2.343519617422121e-10, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*n + an_1*an_3*n**2, p = 5.940822229577827e-09, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_2 + n, p = 6.277895343157568e-07, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*n + n**2, p = 1.261751142166085e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.5876735644540003e-05, parse trees = 1, valid = False
-> C0*an_2*an_49 + an_1, p = 9.713588362021496e-07, parse trees = 1, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_2*an_41*n, p = 2.5321747439457746e-06, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*an_4*n**2, p = 2.063019067169703e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*n + an_1, p = 4.816483640324168e-08, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*n + an_5, p = 0.00015088524590163935, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + n**2, p = 5.419126640555826e-06, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_3*n**3 + C2*an_1*n + C3*an_2 + C4*n + an_1, p = 3.5000730350541685e-13, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 3.138947671578783e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.839587207739858e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_2 + an_1*an_2, p = 0.00010296403663742789, parse trees = 1, valid = False
-> an_16*n, p = 6.557409981098034e-05, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> C0*an_8 + n, p = 4.2355868852459025e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2*an_2*n**3, p = 6.97543927017508e-08, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**4*an_12*an_2*n, p = 4.784485151758142e-13, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_38*n**3 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_38*n**3 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*an_38*n**3)
<class 'tuple'> (an_1, C1*n, C0*an_2*an_38*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*an_20*n + C1*an_7 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2*an_20*n + C1*an_7 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_7, an_1*n**2, C0*an_2*an_20*n)
<class 'tuple'> (C1*an_7, an_1*n**2, C0*an_2*an_20*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**4 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**4)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n**2)
<class 'tuple'> (C0*n, an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**5 <class 'ProGED.model.Model'>
an_1*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1**2*an_2*n)
<class 'tuple'> (C0*n**2, C1*n, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C1*an_1, C2*n)
<class 'tuple'> (an_1, C0*an_1**3, C1*an_1, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2**2*an_25*an_3 <class 'ProGED.model.Model'>
C0*n + an_2**2*an_25*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2**2*an_25*an_3)
<class 'tuple'> (C0*n, an_2**2*an_25*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
<class 'tuple'> (n, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_3*an_4 <class 'ProGED.model.Model'>
C0*an_1 + an_3*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_3*an_4)
<class 'tuple'> (C0*an_1, an_3*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_25*an_46*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_25*an_46*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_25*an_46*n)
<class 'tuple'> (C0*an_1, an_1*an_25*an_46*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_3, an_1*an_3*n**2)
<class 'tuple'> (C1*n, C0*an_1*an_3, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C2*an_2, C1*an_1*n)
<class 'tuple'> (n, C0*an_1**2, C2*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_4*n)
<class 'tuple'> (n**2, C0*an_1, C1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4)
<class 'tuple'> (C0*n, an_2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_49 + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_49 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_49)
<class 'tuple'> (an_1, C0*an_2*an_49)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_41*n <class 'ProGED.model.Model'>
an_2*an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2*an_4*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*an_4*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1**2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + C2*an_2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_2, C3*n, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_2, C3*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_5 <class 'ProGED.model.Model'>
C0*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*n)
<class 'tuple'> (an_5, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C0*an_1**2*n)
<class 'tuple'> (n**2, C1*an_1, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_3*n**3 + C2*an_1*n + C3*an_2 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_3*n**3 + C2*an_1*n + C3*an_2 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C3*an_2, C4*n, C2*an_1*n, C1*an_1*an_3*n**3)
<class 'tuple'> (an_1, C0*an_1**2, C3*an_2, C4*n, C2*an_1*n, C1*an_1*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*an_2)
<class 'tuple'> (C0*an_2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_16*n <class 'ProGED.model.Model'>
an_16*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_16, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_8 + n <class 'ProGED.model.Model'>
C0*an_8 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_8)
<class 'tuple'> (n, C0*an_8)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1**2*an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1**2*an_2*n**3)
<class 'tuple'> (C0*an_1*n, an_1**2*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**4*an_12*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**4*an_12*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**4*an_12*an_2*n)
<class 'tuple'> (C0*an_1, C1*n, an_1**4*an_12*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.47945807299947774


Equation discovery for all (chosen) OEIS sequences took 0.47946813499947893 secconds, i.e. 0.007991135583324649 minutes or 0.00013318559305541082 hours.
86





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 86
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 61 models
-> C0*an_1 + C1*n + an_1, p = 0.0001271410481053481, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_38*n, p = 7.868852459016397e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_6 + an_1**3, p = 5.8391659960821975e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_5*n + an_2, p = 9.345888868975501e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_3 + C1*n**3 + n, p = 6.137704918032792e-06, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_18*n, p = 7.719557108190832e-08, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> an_1*an_10*n**2, p = 1.688521277076056e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + an_1**2, p = 5.495747515001257e-07, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3*n**3, p = 8.524590163934432e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*an_4*n**3, p = 3.504864283794682e-06, parse trees = 1, valid = False
-> an_4*an_5*n, p = 9.573471886291022e-07, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*an_2**2*n**2, p = 1.9084918703505777e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 7.679174415479718e-06, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.00019886163934426245, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3*n + an_1**2*n, p = 1.2388075206595079e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_2*n, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n, p = 2.7275756120556386e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_2*an_3*n + an_1, p = 6.313832435313972e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> an_23*n**3, p = 2.6229508225530175e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3*n**4 + C1*an_1 + C2*n + an_12, p = 2.1675638894601558e-14, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + an_2*n, p = 5.455151224111278e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_32 + n, p = 3.018543402311273e-06, parse trees = 1, valid = False
-> an_1*an_49*n**2, p = 1.6769685568395607e-06, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_30*n**2 + C2*an_3 + C3*n + an_45*n, p = 1.2261627176342037e-16, parse trees = 1, valid = False
-> C0*an_42 + C1*n + an_3*n, p = 5.5898951894652e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n**3 + an_1, p = 1.0532714567500832e-07, parse trees = 1, valid = False
-> C0*n + an_4*n, p = 9.867540983606564e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_3*n, p = 5.017709852366504e-07, parse trees = 1, valid = False
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_38*n <class 'ProGED.model.Model'>
C0*n + an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_38*n)
<class 'tuple'> (C0*n, an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_6 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_6 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*an_6)
<class 'tuple'> (an_1**3, C0*an_1, C1*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*an_5*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_5*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3, C1*an_1*an_5*n)
<class 'tuple'> (an_2, C0*an_1**3, C1*an_1*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
<class 'tuple'> (n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n**3)
<class 'tuple'> (n, C0*an_3, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*an_18*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_18*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_18*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_10*n**2 <class 'ProGED.model.Model'>
an_1*an_10*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_4 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*an_4)
<class 'tuple'> (an_1**2, C0*an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_4*n**3 <class 'ProGED.model.Model'>
an_1*an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4*an_5*n <class 'ProGED.model.Model'>
an_4*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_2**2*n**2)
<class 'tuple'> (C0*an_2, C1*n, an_1*an_2**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
<class 'tuple'> (C0*an_2, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n, C1*an_2*an_3*n)
<class 'tuple'> (C0*an_1, an_1**2*n, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**3)
<class 'tuple'> (an_2*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n)
<class 'tuple'> (an_2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_2*n)
<class 'tuple'> (C0*n**2, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
<class 'tuple'> (n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n)
<class 'tuple'> (an_1, C0*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_23*n**3 <class 'ProGED.model.Model'>
an_23*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_23, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3*n**4 + C1*an_1 + C2*n + an_12 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3*n**4 + C1*an_1 + C2*n + an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_12, C1*an_1, C2*n, C0*an_1**2*an_2*an_3*n**4)
<class 'tuple'> (an_12, C1*an_1, C2*n, C0*an_1**2*an_2*an_3*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
<class 'tuple'> (C0*n, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**3)
<class 'tuple'> (an_2*n, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_32 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_32 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_32)
<class 'tuple'> (n, C0*an_1, C1*an_32)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_49*n**2 <class 'ProGED.model.Model'>
an_1*an_49*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_49, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_30*n**2 + C2*an_3 + C3*n + an_45*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_30*n**2 + C2*an_3 + C3*n + an_45*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_3, C3*n, an_45*n, C0*an_1**2*n, C1*an_1*an_30*n**2)
<class 'tuple'> (C2*an_3, C3*n, an_45*n, C0*an_1**2*n, C1*an_1*an_30*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_42 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_42 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_42, C1*n, an_3*n)
<class 'tuple'> (C0*an_42, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
<class 'tuple'> (C0*n**2, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2**2*n**3)
<class 'tuple'> (an_1, C0*an_1*an_2**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*an_3*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1*an_3*n)
<class 'tuple'> (C1*n, C0*an_1*n, an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4922588419995009


Equation discovery for all (chosen) OEIS sequences took 0.49227648799933377 secconds, i.e. 0.008204608133322229 minutes or 0.0001367434688887038 hours.
87





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 87
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_3, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n, p = 9.984212093901781e-11, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1, p = 2.3566253288160733e-08, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*an_35*n + an_1*n, p = 7.719553619025392e-08, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*an_10, p = 4.221303192690137e-05, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_2*n**2, p = 8.532416017199693e-07, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 1.625737992166747e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3*n, p = 1.9620532115022853e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2, p = 1.1450951222103466e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + an_2, p = 3.071669766191889e-07, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> an_1**3*n**3, p = 1.5053129557099515e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_2 + an_4, p = 7.938367822269999e-05, parse trees = 1, valid = False
-> C0*an_4*an_6 + an_1*n**2, p = 7.088252849357441e-09, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*an_18, p = 4.192423287033835e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_7, p = 0.00041152459016393435, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n, p = 5.316307414320072e-08, parse trees = 1, valid = False
-> an_2*n**3, p = 0.0002780327868852462, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_7, p = 7.577449502821826e-07, parse trees = 1, valid = False
-> C0*an_1**3 + an_1**3*n**5, p = 7.553223648760767e-10, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_5*n**2, p = 4.93408135482706e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n + an_1**2*an_3*n**2, p = 6.33619584337323e-11, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + an_1*an_2*n, p = 4.185263562105048e-08, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_14*an_4*n, p = 2.4964813816207714e-07, parse trees = 1, valid = False
-> C0*an_21 + an_1*an_2*n, p = 1.9427176961127312e-07, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_2 + an_2, p = 3.731346284980294e-06, parse trees = 1, valid = False
-> an_24*n, p = 6.557377051340992e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_3*n**2 + n, p = 5.017709852366503e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + C2*n + n, p = 9.545358688524605e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3*n + C2*an_2*n + C3*an_3 + C4*n + an_1**3*n, p = 5.760817751864369e-17, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 1.6257379921667467e-05, parse trees = 1, valid = False
-> C0*an_41*n + an_1, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> an_1**2*an_2*an_44, p = 2.0701089951849095e-07, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_3 <class 'ProGED.model.Model'>
C0*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*n)
<class 'tuple'> (an_3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**3*an_3 + C1*an_1*an_4 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1**3*an_3, C1*an_1*an_4)
<class 'tuple'> (an_1*n, C0*an_1**3*an_3, C1*an_1*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n**2, C3*n, C0*an_1*n, C1*an_2*n)
<class 'tuple'> (an_1, C2*n**2, C3*n, C0*an_1*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*an_35*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_35*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n, C1*an_35*n)
<class 'tuple'> (C0*an_1, an_1*n, C1*an_35*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_10 <class 'ProGED.model.Model'>
an_1*an_10 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_2*n**2)
<class 'tuple'> (C0*n**3, an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_3*n)
<class 'tuple'> (C0*an_1, C1*n, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_2*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
<class 'tuple'> (an_2, C2*n, C1*an_2*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (an_2, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**3 <class 'ProGED.model.Model'>
an_1**3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_4 <class 'ProGED.model.Model'>
C0*an_2 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_2)
<class 'tuple'> (an_4, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*an_6 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_4*an_6 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_4*an_6)
<class 'tuple'> (an_1*n**2, C0*an_4*an_6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_18 <class 'ProGED.model.Model'>
an_1*an_18 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_18)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1**2, C2*an_1, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1**2, C2*an_1, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_7 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_7 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_7, C0*an_1, C1*n**2)
<class 'tuple'> (an_7, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + an_1**3*n**5 <class 'ProGED.model.Model'>
C0*an_1**3 + an_1**3*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3, an_1**3*n**5)
<class 'tuple'> (C0*an_1**3, an_1**3*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_5*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_5*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_5*n**2)
<class 'tuple'> (C0*an_1, an_1*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + C1*n + an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n + an_1**2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*an_3*n**2, C0*an_1**2*an_2*n)
<class 'tuple'> (C1*n, an_1**2*an_3*n**2, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n**2, C1*an_1*n, an_1*an_2*n)
<class 'tuple'> (C0*an_1*n**2, C1*an_1*n, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_14*an_4*n <class 'ProGED.model.Model'>
an_14*an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_14, an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_21 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_21 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_21, an_1*an_2*n)
<class 'tuple'> (C0*an_21, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_2, C0*an_2*n)
<class 'tuple'> (an_2, C1*an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_24*n <class 'ProGED.model.Model'>
an_24*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_24, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_3*n**2)
<class 'tuple'> (n, C0*an_1**2, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n + C3*an_3 + C4*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n + C3*an_3 + C4*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C3*an_3, C4*n, an_1**3*n, C2*an_2*n, C1*an_2*an_3*n)
<class 'tuple'> (C0*an_1, C3*an_3, C4*n, an_1**3*n, C2*an_2*n, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_41*n + an_1 <class 'ProGED.model.Model'>
C0*an_41*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_41*n)
<class 'tuple'> (an_1, C0*an_41*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*an_44 <class 'ProGED.model.Model'>
an_1**2*an_2*an_44 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_44, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48450248100016324


Equation discovery for all (chosen) OEIS sequences took 0.4845084680000582 secconds, i.e. 0.008075141133334303 minutes or 0.00013458568555557173 hours.
88





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 88
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_2*n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*n + an_13*n, p = 7.870316099803282e-06, parse trees = 1, valid = False
-> an_26*n, p = 6.557377049374788e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.005886159634506859, parse trees = 2, valid = False
-> n**4, p = 0.0014400000000000016, parse trees = 1, valid = False
-> C0*an_1*an_23 + an_1*an_46*n, p = 2.343519619764438e-10, parse trees = 1, valid = False
-> an_1*an_3*an_4, p = 5.1870714582571536e-06, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2, p = 3.496548077900259e-21, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*an_16*n**4 + an_4, p = 1.9591922392153473e-11, parse trees = 1, valid = False
-> C0*an_1**2 + n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_2, p = 9.662778822897076e-05, parse trees = 1, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> an_1*an_2**2*an_5*n**2, p = 9.589971596952913e-09, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_35, p = 0.00032786885245901656, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2, p = 2.384765563238802e-11, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*an_1*n + an_1, p = 5.157547667924257e-07, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0011364898383565154, parse trees = 2, valid = False
-> C0*an_1*n**6 + an_1*n, p = 1.1301426498253184e-07, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004262295081967215, parse trees = 1, valid = False
-> C0*an_1 + an_1**3, p = 0.00014436198017874117, parse trees = 1, valid = False
-> C0*an_5 + C1*n + an_1, p = 1.3891336737436179e-06, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_3*an_44 + C1*n + an_2, p = 1.2951451149361996e-09, parse trees = 1, valid = False
-> C0*n + an_15, p = 3.934492093343607e-05, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*n**2 + an_1, p = 2.719160513553876e-10, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + an_1, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> an_1**2*an_2*an_3, p = 6.7278542343509565e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_4*n**5, p = 1.0963934426229522e-06, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565154, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 7.526564778549751e-06, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**2)
<class 'tuple'> (C0*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_13*n <class 'ProGED.model.Model'>
C0*n + an_13*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_13*n)
<class 'tuple'> (C0*n, an_13*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_26*n <class 'ProGED.model.Model'>
an_26*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_26, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**4 <class 'ProGED.model.Model'>
n**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 4)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_23 + an_1*an_46*n <class 'ProGED.model.Model'>
C0*an_1*an_23 + an_1*an_46*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_23, an_1*an_46*n)
<class 'tuple'> (C0*an_1*an_23, an_1*an_46*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*an_4 <class 'ProGED.model.Model'>
an_1*an_3*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, an_4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_27 + C1*an_1*an_25*n**2 + C2*an_1*an_46 + C3*n**2 + C4*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C3*n**2, C4*n, C2*an_1*an_46, C0*an_1*an_2*an_27, C1*an_1*an_25*n**2)
<class 'tuple'> (n**2, C3*n**2, C4*n, C2*an_1*an_46, C0*an_1*an_2*an_27, C1*an_1*an_25*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_16*n**4 + an_4 <class 'ProGED.model.Model'>
C0*an_1**2*an_16*n**4 + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1**2*an_16*n**4)
<class 'tuple'> (an_4, C0*an_1**2*an_16*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
<class 'tuple'> (n, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*n)
<class 'tuple'> (an_2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2**2*an_5*n**2 <class 'ProGED.model.Model'>
an_1*an_2**2*an_5*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5, an_2**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_35 <class 'ProGED.model.Model'>
an_35 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2 <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1**2*an_24*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_2*n**2, an_1**2*an_24*n**2)
<class 'tuple'> (C1*n, C0*an_2*n**2, an_1**2*an_24*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4 + C1*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_4, C1*an_1*n)
<class 'tuple'> (an_1, C0*an_1*an_4, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**6 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**6 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**6)
<class 'tuple'> (an_1*n, C0*an_1*n**6)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1)
<class 'tuple'> (an_1**3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_5 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_5 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_5, C1*n)
<class 'tuple'> (an_1, C0*an_5, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3*an_44 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_3*an_44 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_3*an_44)
<class 'tuple'> (an_2, C1*n, C0*an_3*an_44)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_15 <class 'ProGED.model.Model'>
C0*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*n)
<class 'tuple'> (an_15, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
<class 'tuple'> (an_2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1**2 + C2*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1**2, C0*an_1**2*n**3, C2*an_1*n**2)
<class 'tuple'> (an_1, C1*an_1**2, C0*an_1**2*n**3, C2*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_2)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_4*n**5 <class 'ProGED.model.Model'>
an_4*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*n)
<class 'tuple'> (an_3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.44220132699956594


Equation discovery for all (chosen) OEIS sequences took 0.44220728800064535 secconds, i.e. 0.007370121466677423 minutes or 0.00012283535777795704 hours.
89





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 89
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_26 + n, p = 3.934426229624873e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n, p = 8.344702428480093e-14, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n**2 + an_2*n, p = 0.0001668196721311477, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_20 + an_1*an_2*n, p = 1.9427177514324056e-07, parse trees = 1, valid = False
-> an_24, p = 0.0003278688525670495, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1, p = 4.150127035478745e-11, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n, p = 1.2639257481001002e-08, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**2*an_2*an_6*n**3, p = 3.0645893564717427e-09, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1, p = 4.238034936844939e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0028709481762790733, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.0021190174684224683, parse trees = 2, valid = False
-> C0*an_1**2*an_3*n + C1*n + n**2, p = 1.2042503645679616e-08, parse trees = 1, valid = False
-> an_2*an_23*n**2, p = 5.064349493453913e-07, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_3, p = 1.5053129557099507e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1**2, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> an_20, p = 0.000327868865796443, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_2 + an_48, p = 7.596524231837322e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3, p = 3.291149761494129e-18, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1*n, p = 2.5597248051599066e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1 + an_1*an_2*an_30, p = 1.242065397111244e-07, parse trees = 1, valid = False
-> C0*n + an_2*n**2, p = 0.00016681967213114768, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> an_2*an_3*n, p = 8.229567917823765e-05, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2 + n**2, p = 0.00035316957807041144, parse trees = 1, valid = False
-> an_23, p = 0.0003278688528191269, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + C2*an_4**2*n + an_1*an_3*n**2, p = 7.134018214104176e-14, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_2 + an_2, p = 2.0202091875370445e-07, parse trees = 1, valid = False
-> C0*an_1*an_35 + n, p = 5.030905670518682e-06, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_30 + n, p = 3.934426229509143e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_4*n, p = 6.7224446099012716e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2, p = 1.0394062572869364e-05, parse trees = 1, valid = False
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_26 + n <class 'ProGED.model.Model'>
C0*an_26 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_26)
<class 'tuple'> (n, C0*an_26)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1**2 + C2*an_1*n + C3*an_1 + C4*an_3 + C5*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1**2, C3*an_1, C4*an_3, C5*n, C0*an_1**2*n**2, C2*an_1*n)
<class 'tuple'> (n, C1*an_1**2, C3*an_1, C4*an_3, C5*n, C0*an_1**2*n**2, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_2*n)
<class 'tuple'> (C0*n**2, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_20 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_20 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_20, an_1*an_2*n)
<class 'tuple'> (C0*an_20, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_24 <class 'ProGED.model.Model'>
an_24 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_4*n + C1*an_4 + C2*n**2 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_4, C2*n**2, C3*n, C0*an_4*n)
<class 'tuple'> (an_1, C1*an_4, C2*n**2, C3*n, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C1*an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (an_2*n, C1*an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**2*an_2*an_6*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_6*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_6, an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*an_3*n)
<class 'tuple'> (n**2, C1*n, C0*an_1**2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_23*n**2 <class 'ProGED.model.Model'>
an_2*an_23*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_23, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_2)
<class 'tuple'> (an_1**2, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_20 <class 'ProGED.model.Model'>
an_20 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_48 <class 'ProGED.model.Model'>
C0*an_2 + an_48 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_48, C0*an_2)
<class 'tuple'> (an_48, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_45 + C1*an_1*n**2 + C2*an_2**2*an_47 + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n**3, C0*an_1*an_45, C1*an_1*n**2, C2*an_2**2*an_47)
<class 'tuple'> (an_1**2*n**3, C0*an_1*an_45, C1*an_1*n**2, C2*an_2**2*an_47)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
<class 'tuple'> (an_2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*an_30 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*an_30 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*an_30)
<class 'tuple'> (C0*an_1, an_1*an_2*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**2)
<class 'tuple'> (C0*n, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n)
<class 'tuple'> (C0*an_1, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2)
<class 'tuple'> (n**2, C0*an_1**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_23 <class 'ProGED.model.Model'>
an_23 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + C2*an_4**2*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + C2*an_4**2*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, C2*an_4**2*n, an_1*an_3*n**2)
<class 'tuple'> (C0*an_1**2, C1*an_1, C2*an_4**2*n, an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n, C1*an_1*an_2)
<class 'tuple'> (an_2, C0*an_1**2*n, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_35 + n <class 'ProGED.model.Model'>
C0*an_1*an_35 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_35)
<class 'tuple'> (n, C0*an_1*an_35)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_30 + n <class 'ProGED.model.Model'>
C0*an_30 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_30)
<class 'tuple'> (n, C0*an_30)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_4*n)
<class 'tuple'> (C0*an_1, an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4941115159999754


Equation discovery for all (chosen) OEIS sequences took 0.4941204179995111 secconds, i.e. 0.008235340299991852 minutes or 0.00013725567166653088 hours.
90





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 90
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 55 models
-> C0*an_1**2*an_2 + C1*n + an_1**3*n, p = 1.7107728777107713e-08, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_6, p = 0.0006067213114754098, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_39 + C1*n + n**3, p = 1.8885245901639363e-07, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n**2 + C2*n + n, p = 4.882216247245375e-09, parse trees = 1, valid = False
-> an_2*an_46*n**2, p = 5.06434948789155e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + an_1*n**3, p = 4.3353013124446635e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3, p = 1.7359360076803268e-17, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_16 + an_1, p = 2.961286260134584e-08, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*n + n, p = 0.0025920000000000014, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3, p = 2.3847666403445645e-12, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n**2 + n, p = 5.017709852366504e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_2, p = 1.3165893209376027e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*n**2 + n**3, p = 0.0001728000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.0002119017468422469, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n + C2*n**2 + an_1, p = 3.0106259114199014e-07, parse trees = 1, valid = False
-> C0*an_1*an_3 + C1*an_1*n**2 + C2*n + an_1*n, p = 9.239166731439445e-10, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**2 + C4*n + an_2, p = 3.2978739519658017e-11, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_3 + an_1**2*an_2*n, p = 5.097425314189143e-10, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*an_27 + C1*n**2 + C2*n + an_3, p = 9.659338887481804e-11, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + n, p = 3.051385154528357e-06, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n**2, p = 5.0856419242139284e-06, parse trees = 1, valid = False
-> an_1**2*an_2, p = 0.0005682449191782577, parse trees = 1, valid = False
-> an_2*an_35*n**2, p = 5.064349487891554e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1 + C1*an_41 + an_33, p = 5.498257563408428e-09, parse trees = 1, valid = False
-> an_1**2*an_37*n, p = 1.0721602248646373e-06, parse trees = 1, valid = False
C0*an_1**2*an_2 + C1*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**3*n, C0*an_1**2*an_2)
<class 'tuple'> (C1*n, an_1**3*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_6 <class 'ProGED.model.Model'>
an_6 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_39 + C1*n + n**3 <class 'ProGED.model.Model'>
C0*an_39 + C1*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_39, C1*n)
<class 'tuple'> (n**3, C0*an_39, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**2, C2*n, C0*an_1*n**2)
<class 'tuple'> (n, C1*n**2, C2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_46*n**2 <class 'ProGED.model.Model'>
an_2*an_46*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_46, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n**3, C0*an_1*n**3)
<class 'tuple'> (C1*an_1, an_1*n**3, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
<class 'tuple'> (C0*an_1, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3 <class 'ProGED.model.Model'>
C0*an_1**3*an_4*n + C1*an_1**3 + C2*an_1 + C3*an_21 + C4*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C1*an_1**3, C2*an_1, C3*an_21, C4*n, C0*an_1**3*an_4*n)
<class 'tuple'> (n**3, C1*an_1**3, C2*an_1, C3*an_21, C4*n, C0*an_1**3*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_16 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_16 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*an_16, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C2*an_16, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_18*n + C2*an_2 + C3*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*an_2, C3*n, C0*an_1*n, C1*an_18*n)
<class 'tuple'> (an_3, C2*an_2, C3*n, C0*an_1*n, C1*an_18*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3, C1*an_1*n**2)
<class 'tuple'> (n, C0*an_1*an_3, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*an_2)
<class 'tuple'> (an_2, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n**3 <class 'ProGED.model.Model'>
C0*n**2 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n**2)
<class 'tuple'> (n**3, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
<class 'tuple'> (n, C0*an_1**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n**2, C1*an_3*n)
<class 'tuple'> (an_1, C0*an_1, C2*n**2, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + C1*an_1*n**2 + C2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_3 + C1*an_1*n**2 + C2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*n, an_1*n, C0*an_1*an_3, C1*an_1*n**2)
<class 'tuple'> (C2*n, an_1*n, C0*an_1*an_3, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**2 + C4*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_2*n + C2*an_2 + C3*n**2 + C4*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*an_2, C3*n**2, C4*n, C0*an_1*n**2, C1*an_2*n)
<class 'tuple'> (an_2, C2*an_2, C3*n**2, C4*n, C0*an_1*n**2, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_3 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_3 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_2*n, C0*an_1**2*an_2*an_3)
<class 'tuple'> (an_1**2*an_2*n, C0*an_1**2*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_3, C0*an_1*n)
<class 'tuple'> (n, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_27 + C1*n**2 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_27 + C1*n**2 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_27, C1*n**2, C2*n)
<class 'tuple'> (an_3, C0*an_27, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
<class 'tuple'> (n, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n**2)
<class 'tuple'> (C0*an_1, C1*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_35*n**2 <class 'ProGED.model.Model'>
an_2*an_35*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_35, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_41 + an_33 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_41 + an_33 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_33, C0*an_1, C1*an_41)
<class 'tuple'> (an_33, C0*an_1, C1*an_41)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_37*n <class 'ProGED.model.Model'>
an_1**2*an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.48679938599889283


Equation discovery for all (chosen) OEIS sequences took 0.4868052619985974 secconds, i.e. 0.008113421033309956 minutes or 0.0001352236838884993 hours.
91





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 91
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 54 models
-> C0*an_1 + C1*an_3*n + C2*n + an_4, p = 6.453546825505225e-10, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_2*n, p = 0.013901639344262301, parse trees = 2, valid = False
-> an_1*an_2*n, p = 0.0017775866702499342, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n, p = 5.065937715369294e-16, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1, p = 0.00013547816601389558, parse trees = 1, valid = False
-> an_1*an_3*n**2, p = 5.450147809728571e-05, parse trees = 1, valid = False
-> C0*an_1*an_38 + C1*an_1 + n, p = 3.859776809512693e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + an_1**2, p = 2.8872396035748247e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_3*n + an_1**4*n, p = 6.836815090432194e-08, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_18*n, p = 6.557380013052922e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n, p = 4.9864187580166795e-15, parse trees = 1, valid = False
-> C0*an_1**3*an_5*n + C1*an_2*n + an_4, p = 5.56493097896262e-12, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n, p = 7.154296687359052e-11, parse trees = 1, valid = False
-> C0*an_2*n + an_1**3*n, p = 1.7438598175437693e-06, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + an_2**2, p = 0.00010296403663742787, parse trees = 1, valid = False
-> an_2*an_25, p = 1.2660873720980403e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n, p = 6.546181468933532e-09, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_37*n + C1*n + an_2*n**3, p = 9.20893076939964e-13, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1**2, p = 5.231579452631305e-06, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1**2*an_2*an_41*n**2 + C1*an_1*an_2*n**3 + C2*an_1*an_2*n + C3*an_1 + an_1*n, p = 1.0502925995336719e-20, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n**2, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*an_1**3 + n, p = 0.00022579694335649256, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1**5*an_3*an_40*n**2, p = 5.307927747954165e-12, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_3*n**3 + n, p = 3.0306395689507104e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + n**2, p = 0.00011047868852459028, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> an_1*an_14*n**2, p = 1.6770621338734762e-06, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2**2*n + C1*an_2*n**2 + C2*n + an_1**2, p = 3.514127981602902e-11, parse trees = 1, valid = False
-> C0*an_1*n**4 + an_1**2, p = 1.8063755468519426e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_35, p = 4.1128769281692645e-07, parse trees = 1, valid = False
-> an_9, p = 0.000335397868852459, parse trees = 1, valid = False
-> C0*an_15 + n, p = 3.934492093343607e-05, parse trees = 1, valid = False
-> an_15, p = 0.0003278743411119672, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2, p = 0.00034094695150695456, parse trees = 1, valid = False
C0*an_1 + C1*an_3*n + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C2*n, C1*an_3*n)
<class 'tuple'> (an_4, C0*an_1, C2*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n <class 'ProGED.model.Model'>
C0*an_1*an_14*an_2*n + C1*n**2 + an_2**2*an_43*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_2**2*an_43*n, C0*an_1*an_14*an_2*n)
<class 'tuple'> (C1*n**2, an_2**2*an_43*n, C0*an_1*an_14*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C0*an_1*n)
<class 'tuple'> (an_1, C1*an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_38 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_38 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_38)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*n)
<class 'tuple'> (an_1**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3*n + an_1**4*n <class 'ProGED.model.Model'>
C0*an_3*n + an_1**4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**4*n, C0*an_3*n)
<class 'tuple'> (an_1**4*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_18*n <class 'ProGED.model.Model'>
an_18*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_18, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_7 + C1*an_1**2*n + C2*an_25 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_25, C3*n, C0*an_1**2*an_7, C1*an_1**2*n)
<class 'tuple'> (n, C2*an_25, C3*n, C0*an_1**2*an_7, C1*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_5*n + C1*an_2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1**3*an_5*n + C1*an_2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C1*an_2*n, C0*an_1**3*an_5*n)
<class 'tuple'> (an_4, C1*an_2*n, C0*an_1**3*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_47 + C2*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_47, C2*n, C0*an_1*n**2, an_1*an_2*n)
<class 'tuple'> (C1*an_47, C2*n, C0*an_1*n**2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_2*n)
<class 'tuple'> (an_1**3*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_2**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*an_1)
<class 'tuple'> (an_2**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_25 <class 'ProGED.model.Model'>
an_2*an_25 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_25)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*an_3, C3*n, C0*an_1*n)
<class 'tuple'> (n, C1*an_2, C2*an_3, C3*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_37*n + C1*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_37*n + C1*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n**3, C0*an_1**2*an_2*an_37*n)
<class 'tuple'> (C1*n, an_2*n**3, C0*an_1**2*an_2*an_37*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_1**2, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_41*n**2 + C1*an_1*an_2*n**3 + C2*an_1*an_2*n + C3*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_41*n**2 + C1*an_1*an_2*n**3 + C2*an_1*an_2*n + C3*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C3*an_1, an_1*n, C1*an_1*an_2*n**3, C2*an_1*an_2*n, C0*an_1**2*an_2*an_41*n**2)
<class 'tuple'> (C3*an_1, an_1*n, C1*an_1*an_2*n**3, C2*an_1*an_2*n, C0*an_1**2*an_2*an_41*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2, C1*n)
<class 'tuple'> (n**2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + n <class 'ProGED.model.Model'>
C0*an_1**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3)
<class 'tuple'> (n, C0*an_1**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**5*an_3*an_40*n**2 <class 'ProGED.model.Model'>
an_1**5*an_3*an_40*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_40, an_1**5, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + C1*an_3*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_3*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2, C1*an_3*n**3)
<class 'tuple'> (n, C0*an_1*an_2, C1*an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**2)
<class 'tuple'> (n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_14*n**2 <class 'ProGED.model.Model'>
an_1*an_14*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_14, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n + C1*an_2*n**2 + C2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2**2*n + C1*an_2*n**2 + C2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C2*n, C0*an_2**2*n, C1*an_2*n**2)
<class 'tuple'> (an_1**2, C2*n, C0*an_2**2*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**4 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n**4 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n**4)
<class 'tuple'> (an_1**2, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_35 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_35 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_35)
<class 'tuple'> (C0*an_1, an_1**2*an_35)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_15 + n <class 'ProGED.model.Model'>
C0*an_15 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_15)
<class 'tuple'> (n, C0*an_15)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_15 <class 'ProGED.model.Model'>
an_15 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2)
<class 'tuple'> (C0*an_1, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.49456761100009317


Equation discovery for all (chosen) OEIS sequences took 0.4945736539993959 secconds, i.e. 0.008242894233323266 minutes or 0.00013738157055538774 hours.
92





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 92
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2, p = 3.0133897647156353e-09, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1*n, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 0.00033143606557377075, parse trees = 1, valid = False
-> C0*an_1*an_3*n + n, p = 3.2700886858371424e-05, parse trees = 1, valid = False
-> an_2*n**2, p = 0.002780327868852461, parse trees = 2, valid = False
-> C0*n**3 + an_1, p = 0.0005523934426229513, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*n + an_46, p = 1.3800726634566062e-09, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.00027250739048642847, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3, p = 7.920244804216528e-09, parse trees = 1, valid = False
-> an_30*n, p = 6.557377049181905e-05, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_11, p = 9.73366358079311e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3 + n**2, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_3*n + an_1**2, p = 2.090712438486042e-05, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_17, p = 2.7949518056991243e-07, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_4*n**2 + C1*n + an_1*n, p = 2.523502284332172e-07, parse trees = 1, valid = False
-> C0*an_1*an_2**3*n + an_1*an_12*n, p = 7.413113893751159e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + C1*n**2 + an_8*n, p = 1.9678653745048803e-10, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_4 + C2*an_5 + C3*n**3 + C4*n + an_3, p = 3.984372982395799e-17, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + an_1, p = 9.031877734259709e-06, parse trees = 1, valid = False
-> C0*n + an_27, p = 3.9344262295432005e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_17, p = 6.432971041314056e-07, parse trees = 1, valid = False
-> C0*an_37 + n, p = 3.934426229508197e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*n + an_1, p = 6.277895343157567e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n**2, p = 2.727575612055639e-06, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + an_1**2, p = 4.816483640324167e-08, parse trees = 1, valid = False
-> C0*n + an_4*n**2, p = 1.6445901639344274e-05, parse trees = 1, valid = False
-> C0*n**3 + an_1*n, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + an_4*n, p = 2.5591820099624155e-08, parse trees = 1, valid = False
-> an_10, p = 0.00033012755737704913, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_42, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + an_2*n**2, p = 3.2109890935494475e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*an_39, p = 4.1924213920988996e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**4 + C3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*an_2, C2*n**4, C3*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*an_2, C2*n**4, C3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
<class 'tuple'> (n, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n)
<class 'tuple'> (n, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1 <class 'ProGED.model.Model'>
C0*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**3)
<class 'tuple'> (an_1, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3 + C1*n + an_46 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3 + C1*n + an_46 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_46, C1*n, C0*an_1*an_2*an_3)
<class 'tuple'> (an_46, C1*n, C0*an_1*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + an_1**2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_3, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (an_1**2*an_3, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30*n <class 'ProGED.model.Model'>
an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + an_11 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C0*an_1*an_2)
<class 'tuple'> (an_11, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_3, C0*an_1*n)
<class 'tuple'> (n**2, C1*an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_3*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_3*n)
<class 'tuple'> (an_1**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_17 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*an_3, C1*n)
<class 'tuple'> (an_17, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_4*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_4*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**3*n + an_1*an_12*n <class 'ProGED.model.Model'>
C0*an_1*an_2**3*n + an_1*an_12*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_12*n, C0*an_1*an_2**3*n)
<class 'tuple'> (an_1*an_12*n, C0*an_1*an_2**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_3 + C1*n**2 + an_8*n <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + C1*n**2 + an_8*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_8*n, C0*an_1**2*an_3)
<class 'tuple'> (C1*n**2, an_8*n, C0*an_1**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_4 + C2*an_5 + C3*n**3 + C4*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_4 + C2*an_5 + C3*n**3 + C4*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_4, C2*an_5, C3*n**3, C4*n, C0*an_1*n)
<class 'tuple'> (an_3, C1*an_4, C2*an_5, C3*n**3, C4*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*n**3)
<class 'tuple'> (an_1, C0*an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_27 <class 'ProGED.model.Model'>
C0*n + an_27 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_27, C0*n)
<class 'tuple'> (an_27, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_17 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_17, C0*an_1*n)
<class 'tuple'> (an_1*an_17, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_37 + n <class 'ProGED.model.Model'>
C0*an_37 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_37)
<class 'tuple'> (n, C0*an_37)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*an_2)
<class 'tuple'> (an_1, C1*n, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_1**2*n)
<class 'tuple'> (an_2*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C2*n, C1*an_2*n)
<class 'tuple'> (an_1**2, C0*an_1, C2*n, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n**2 <class 'ProGED.model.Model'>
C0*n + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n**2)
<class 'tuple'> (C0*n, an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + an_1*n <class 'ProGED.model.Model'>
C0*n**3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*n)
<class 'tuple'> (C0*n**3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_4 + an_4*n <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4*n, C0*an_1**2*an_4)
<class 'tuple'> (an_4*n, C0*an_1**2*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_10 <class 'ProGED.model.Model'>
an_10 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
<class 'tuple'> (n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_42 <class 'ProGED.model.Model'>
an_42 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_2*n**2, C1*an_1*n)
<class 'tuple'> (C0*an_1**2, an_2*n**2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_39 <class 'ProGED.model.Model'>
an_1*an_39 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_39)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4666584309998143


Equation discovery for all (chosen) OEIS sequences took 0.46666419900066103 secconds, i.e. 0.007777736650011017 minutes or 0.0001296289441668503 hours.
93





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 93
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 60 models
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_2*an_4*n**2 + an_1*n, p = 8.120559870649976e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130323e-05, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_43*n + an_1**2, p = 9.870904627606237e-09, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1**2*n**2, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n, p = 4.848502050088908e-09, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + n, p = 6.540177371674286e-06, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_5 + C2*n**3 + n, p = 3.3560836334318777e-09, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2*n, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1, p = 2.5428209621069632e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + n**2, p = 2.0018360655737727e-05, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> C0*an_25 + C1*n + an_1*n, p = 6.037086805219186e-07, parse trees = 1, valid = False
-> an_11*an_2, p = 1.2687040137358539e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> C0*an_2*an_3*n + n, p = 9.87548150138852e-06, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_3, p = 1.1772319269013713e-05, parse trees = 1, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_17, p = 3.9344321572533834e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*n + an_32, p = 3.934426229508283e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n**2 + C2*an_6 + n, p = 1.0353597272018377e-09, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n, p = 7.063391561408233e-05, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184000000000003, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1*an_2*n**2 + C2*an_2*n + an_2, p = 1.8722813016736772e-10, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + an_1*n**2, p = 3.4877196350875403e-07, parse trees = 1, valid = False
-> an_1**2*an_3, p = 0.00017422603654050346, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_3, p = 0.00010453562192430208, parse trees = 1, valid = False
-> an_1*an_47*n, p = 8.384842784197798e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> C0*n + an_1*an_10*an_2*n, p = 3.9122023031707535e-08, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n + an_4, p = 2.0257345781344274e-13, parse trees = 1, valid = False
-> an_1**5*an_34*n**2, p = 4.4831574363489885e-10, parse trees = 1, valid = False
-> C0*an_2*n + an_1*n, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + C2*n + n, p = 6.502951968666992e-07, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099035e-05, parse trees = 1, valid = False
-> an_1**4*an_2, p = 9.291056404946309e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 9.810266057511425e-05, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1**2*n**2 + C2*n**3 + C3*n**2 + an_1, p = 6.525985232529306e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_1, p = 0.0002119017468422469, parse trees = 1, valid = False
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
<class 'tuple'> (n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_4*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2*an_4*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*an_4*n**2)
<class 'tuple'> (an_1*n, C0*an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_43*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_43*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n, C1*an_43*n)
<class 'tuple'> (an_1**2, C0*an_1*n, C1*an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1**2*n**2)
<class 'tuple'> (C0*n**2, C1*n, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2 + C2*n**2 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*n**2, an_2*n, C1*an_1*an_2)
<class 'tuple'> (C0*an_1**2, C2*n**2, an_2*n, C1*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n**2)
<class 'tuple'> (n, C0*an_1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_5 + C2*n**3 + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_5 + C2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_5, C2*n**3, C0*an_2*n)
<class 'tuple'> (n, C1*an_5, C2*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_2*n)
<class 'tuple'> (C0*an_1, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*n**2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_2*n)
<class 'tuple'> (n**2, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_25 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_25 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_25, C1*n, an_1*n)
<class 'tuple'> (C0*an_25, C1*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_11*an_2 <class 'ProGED.model.Model'>
an_11*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n + n <class 'ProGED.model.Model'>
C0*an_2*an_3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*an_3*n)
<class 'tuple'> (n, C0*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*n)
<class 'tuple'> (an_3, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_17 <class 'ProGED.model.Model'>
C0*n + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*n)
<class 'tuple'> (an_17, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_32 <class 'ProGED.model.Model'>
C0*n + an_32 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_32, C0*n)
<class 'tuple'> (an_32, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n**2 + C2*an_6 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n**2 + C2*an_6 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_6, C0*an_1*n, C1*an_2*n**2)
<class 'tuple'> (n, C2*an_6, C0*an_1*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**2)
<class 'tuple'> (an_1*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
<class 'tuple'> (n, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*an_2*n**2 + C2*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*an_2*n**2 + C2*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C2*an_2*n, C1*an_1*an_2*n**2)
<class 'tuple'> (an_2, C0*an_1**2, C2*an_2*n, C1*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1**2*an_2*n)
<class 'tuple'> (an_1*n**2, C0*an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_3 <class 'ProGED.model.Model'>
an_1**2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_3)
<class 'tuple'> (C0*an_1, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_47*n <class 'ProGED.model.Model'>
an_1*an_47*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_47, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_10*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_10*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_10*an_2*n)
<class 'tuple'> (C0*n, an_1*an_10*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n + an_4 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1**2, C2*an_2, C3*n, C1*an_1*n)
<class 'tuple'> (an_4, C0*an_1**2, C2*an_2, C3*n, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**5*an_34*n**2 <class 'ProGED.model.Model'>
an_1**5*an_34*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_34, an_1**5, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_2*n)
<class 'tuple'> (an_1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_1 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*n, C0*an_1**2*n**2)
<class 'tuple'> (n, C1*an_1, C2*n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**4*an_2 <class 'ProGED.model.Model'>
an_1**4*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1**2*n**2 + C2*n**3 + C3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1**2*n**2 + C2*n**3 + C3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C2*n**3, C3*n**2, C1*an_1**2*n**2)
<class 'tuple'> (an_1, C0*an_1**3, C2*n**3, C3*n**2, C1*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n**2)
<class 'tuple'> (an_1, C0*an_1, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5406657940002333


Equation discovery for all (chosen) OEIS sequences took 0.5406745119998959 secconds, i.e. 0.009011241866664932 minutes or 0.00015018736444441554 hours.
94





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 94
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 53 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_22*n, p = 6.557377073187698e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0005523934426229514, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_2*an_3*n**2, p = 6.88226400366393e-10, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.0016571803278688534, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.0001000918032786886, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n**4 + an_1, p = 2.167650656222332e-07, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.00012714104810534812, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_3, p = 1.1149267685935563e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*n**2, p = 1.4126783122816469e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2, p = 1.549930983225142e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> C0*n + an_4*n, p = 9.86754098360656e-06, parse trees = 1, valid = False
-> an_2*an_28*n**3, p = 1.0128698975810136e-07, parse trees = 1, valid = False
-> C0*an_2*n + an_2, p = 0.00016104631371495132, parse trees = 1, valid = False
-> an_30*n, p = 6.557377049181905e-05, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_2*n, p = 4.266208008599845e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_1*an_2, p = 4.5459593534260617e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*n**3, p = 2.825356624563294e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n**3 + n, p = 3.0716697661918887e-07, parse trees = 1, valid = False
-> an_4*n, p = 0.0006852459016393444, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2 + an_1*an_9, p = 9.748114439693629e-09, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2, p = 1.3637878060278192e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 3.8395872077398584e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_28*n, p = 6.55737704919783e-05, parse trees = 1, valid = False
-> an_1**2*n, p = 0.002943079817253429, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.0001177231926901372, parse trees = 1, valid = False
-> C0*an_2**2 + C1*n**3 + an_1, p = 4.942273758596542e-07, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> an_1**4*n, p = 4.8120660059580425e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> an_1**3*an_2, p = 7.266082573099032e-05, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_22*n <class 'ProGED.model.Model'>
an_22*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_22, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3 + an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_3, an_2*an_3*n**2)
<class 'tuple'> (C0*an_1, C1*an_3, an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
<class 'tuple'> (n, C0*an_2, C1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**4, C0*an_1**2*n)
<class 'tuple'> (an_1, C1*n**4, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
<class 'tuple'> (n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
<class 'tuple'> (C0*an_1, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*an_2)
<class 'tuple'> (an_3, C0*an_1, C1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**2, C0*an_1*n**2)
<class 'tuple'> (an_1*n**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*an_1, C0*an_1*an_2, C2*an_2*n)
<class 'tuple'> (an_1**2, C1*an_1, C0*an_1*an_2, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
<class 'tuple'> (an_1**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4*n <class 'ProGED.model.Model'>
C0*n + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_4*n)
<class 'tuple'> (C0*n, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_28*n**3 <class 'ProGED.model.Model'>
an_2*an_28*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_28, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
<class 'tuple'> (an_2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30*n <class 'ProGED.model.Model'>
an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_2*n)
<class 'tuple'> (C0*n**3, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
<class 'tuple'> (C0*an_1, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, C1*n, an_1*an_2)
<class 'tuple'> (C0*an_3, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*n**3)
<class 'tuple'> (C0*n**2, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n**3, C1*an_2*n)
<class 'tuple'> (n, C0*an_1, C2*n**3, C1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_2 + an_1*an_9 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2 + an_1*an_9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_2, an_1*an_9)
<class 'tuple'> (C0*an_1**2, C1*an_2, an_1*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*n**2)
<class 'tuple'> (an_1*an_2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
<class 'tuple'> (an_1, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_28*n <class 'ProGED.model.Model'>
an_28*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_28, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2**2 + C1*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_2**2 + C1*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2**2, C1*n**3)
<class 'tuple'> (an_1, C0*an_2**2, C1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_1**4*n <class 'ProGED.model.Model'>
an_1**4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*an_2 <class 'ProGED.model.Model'>
an_1**3*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46872586400058935


Equation discovery for all (chosen) OEIS sequences took 0.46873588300150004 secconds, i.e. 0.007812264716691667 minutes or 0.00013020441194486112 hours.
95





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 95
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 63 models
-> C0*an_1 + C1*an_5 + an_2, p = 2.235096682101146e-06, parse trees = 1, valid = False
-> C0*n**2 + an_2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_1*an_2, p = 1.4826821275789623e-06, parse trees = 1, valid = False
-> C0*n + an_16, p = 3.93444598865882e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + n, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_1*n**2, p = 0.013809836065573781, parse trees = 3, valid = False
-> C0*an_1 + C1*an_2**2*an_3 + n, p = 1.462877023264003e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 3.9772327868852495e-05, parse trees = 1, valid = False
-> C0*an_13 + n, p = 3.93515804990164e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_23, p = 0.0003278688528191269, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*an_27 + n, p = 5.030905670563438e-06, parse trees = 1, valid = False
-> C0*an_3*n + C1*n**2 + an_1, p = 3.924106423004572e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> C0*n + an_1*n**5, p = 4.419147540983615e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n, p = 3.0825495298074717e-12, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0001777586670249935, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_2*an_3*n**2 + an_1, p = 1.2627664870627949e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1**3, p = 0.0018816411946374378, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.00022579694335649264, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 6.628721311475418e-05, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_46*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*n + an_1**2*an_2, p = 2.052927453252925e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**2 + an_1**2, p = 3.2080440039720264e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0011289847167824626, parse trees = 1, valid = False
-> C0*an_24*n + an_1, p = 5.030905672176368e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_2 + an_1, p = 1.0463158905262614e-06, parse trees = 1, valid = False
-> C0*an_2*an_3 + an_2, p = 9.533707096058136e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + n**2, p = 0.00010368000000000012, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 0.0001000918032786886, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00011364898383565158, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.0003314360655737708, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_1**2*n**3, p = 2.6011807874667982e-08, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*n + an_5, p = 1.8106229508196725e-05, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_3*n**5 + C2*an_1 + C3*n + an_1, p = 2.9639653434492154e-14, parse trees = 1, valid = False
-> an_1*an_32*n**3, p = 3.3539371136791946e-07, parse trees = 1, valid = False
-> C0*n**3 + an_1**2*n**2, p = 2.8253566245632946e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1**2*an_2*n, p = 2.092631781052524e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1**2*an_36*n**2, p = 6.580603085070832e-10, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> an_1*n**3, p = 0.0009206557377049189, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.00034094695150695456, parse trees = 1, valid = False
-> C0*an_2*n + an_2*n**2, p = 6.441852548598056e-06, parse trees = 1, valid = False
-> C0*n + an_23, p = 3.934426233829523e-05, parse trees = 1, valid = False
-> C0*an_3 + an_1*n**2, p = 3.270088685837143e-05, parse trees = 1, valid = False
C0*an_1 + C1*an_5 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_5 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_5)
<class 'tuple'> (an_2, C0*an_1, C1*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2)
<class 'tuple'> (an_2, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_37*n <class 'ProGED.model.Model'>
an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_2)
<class 'tuple'> (C0*an_2, C1*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_16 <class 'ProGED.model.Model'>
C0*n + an_16 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_16, C0*n)
<class 'tuple'> (an_16, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n**2)
<class 'tuple'> (n, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2**2*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2**2*an_3)
<class 'tuple'> (n, C0*an_1, C1*an_2**2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
<class 'tuple'> (n**2, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_13 + n <class 'ProGED.model.Model'>
C0*an_13 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_13)
<class 'tuple'> (n, C0*an_13)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_23 <class 'ProGED.model.Model'>
an_23 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_27 + n <class 'ProGED.model.Model'>
C0*an_1*an_27 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_27)
<class 'tuple'> (n, C0*an_1*an_27)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_3*n)
<class 'tuple'> (an_1, C1*n**2, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**5 <class 'ProGED.model.Model'>
C0*n + an_1*n**5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**5)
<class 'tuple'> (C0*n, an_1*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**3 + C1*an_1*n**3 + C2*an_1 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n, an_1*n, C1*an_1*n**3, C0*an_1*an_2*n**3)
<class 'tuple'> (C2*an_1, C3*n, an_1*n, C1*an_1*n**3, C0*an_1*an_2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
<class 'tuple'> (n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n**2)
<class 'tuple'> (an_1, C0*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
<class 'tuple'> (C0*an_1, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*n)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
<class 'tuple'> (C0*n, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_46*n <class 'ProGED.model.Model'>
an_46*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_46, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*n + C1*n + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*n + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1**2*an_2, C0*an_1**3*n)
<class 'tuple'> (C1*n, an_1**2*an_2, C0*an_1**3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*an_3*n**2)
<class 'tuple'> (an_1**2, C0*an_1, C1*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
<class 'tuple'> (an_1**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_24*n + an_1 <class 'ProGED.model.Model'>
C0*an_24*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_24*n)
<class 'tuple'> (an_1, C0*an_24*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1**2*n**2)
<class 'tuple'> (an_1, C1*an_2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*an_3 + an_2 <class 'ProGED.model.Model'>
C0*an_2*an_3 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*an_3)
<class 'tuple'> (an_2, C0*an_2*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n**2, C1*n)
<class 'tuple'> (n**2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
<class 'tuple'> (an_2, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n**2 + C2*n + an_1**2*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_1**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_1**2*n**3)
<class 'tuple'> (C0*an_1, C1*n**2, C2*n, an_1**2*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_5 <class 'ProGED.model.Model'>
C0*n + an_5 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5, C0*n)
<class 'tuple'> (an_5, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1*an_3*n**5 + C2*an_1 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_3*n**5 + C2*an_1 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**3, C2*an_1, C3*n, C1*an_1*an_3*n**5)
<class 'tuple'> (an_1, C0*an_1**3, C2*an_1, C3*n, C1*an_1*an_3*n**5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_32*n**3 <class 'ProGED.model.Model'>
an_1*an_32*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_32, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**3 + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*n**3 + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1**2*n**2)
<class 'tuple'> (C0*n**3, an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1**2*an_2*n)
<class 'tuple'> (C1*n, C0*an_1*n, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1**2*an_36*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1**2*an_36*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n**2, an_1**2*an_36*n**2)
<class 'tuple'> (C0*an_1*n**2, an_1**2*an_36*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**3 <class 'ProGED.model.Model'>
an_1*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
<class 'tuple'> (an_1, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_2*n)
<class 'tuple'> (an_2*n**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_23 <class 'ProGED.model.Model'>
C0*n + an_23 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_23, C0*n)
<class 'tuple'> (an_23, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_3 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n**2)
<class 'tuple'> (C0*an_3, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5419832320003479


Equation discovery for all (chosen) OEIS sequences took 0.5419941520012799 secconds, i.e. 0.009033235866687998 minutes or 0.00015055393111146662 hours.
96





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 96
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> C0*an_3*n + an_1**3*an_12*an_2, p = 3.763131752534991e-11, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + an_1*an_12, p = 5.034024904982533e-06, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_1*an_39*n**3, p = 3.3539371136791215e-07, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + n, p = 4.2380349368449404e-05, parse trees = 1, valid = False
-> C0*an_2*n + an_1**3*an_2*an_27*n, p = 2.453198770558612e-11, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_30 + n**2, p = 4.829669443699099e-09, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_3 + n**3, p = 5.114754098360659e-05, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.008829239451760283, parse trees = 1, valid = False
-> C0*an_1*an_6*n + an_1*an_2*n, p = 9.193768069415225e-09, parse trees = 1, valid = False
-> C0*an_1*an_14*n + C1*an_1 + an_1*an_2, p = 1.9059640734396995e-09, parse trees = 1, valid = False
-> C0*an_1*an_3 + n, p = 0.0001635044342918571, parse trees = 1, valid = False
-> C0*an_1*an_30*n**2 + C1*an_1 + n, p = 1.543910723805449e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_2, p = 1.235568439649135e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_2*n, p = 8.719299087718846e-06, parse trees = 1, valid = False
-> C0*an_1*n + an_2, p = 0.0005332760010749803, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_3 + C1*n + n, p = 0.00015344262295081973, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*n + an_2*n**2, p = 6.546181468933537e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_2*n + C1*an_37 + an_3*n**3, p = 8.634300766241339e-11, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + n, p = 3.068852459016395e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_1*an_9*n**2, p = 2.6322738628519602e-08, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011047868852459031, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.00013547816601389555, parse trees = 1, valid = False
-> C0*an_2**2*n + an_1**2, p = 2.633178641875206e-06, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_1, p = 2.0907124384860425e-05, parse trees = 1, valid = False
-> an_30*n, p = 6.557377049181905e-05, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0008887933351249672, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_2, p = 9.662778822897076e-05, parse trees = 1, valid = False
-> C0*an_16 + an_1*n, p = 5.030930936317838e-06, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> an_1**3*n, p = 0.00037632823892748765, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1*an_2, p = 5.231579452631306e-06, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.0008340983606557383, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**2 + C1*an_2*n + C2*n + an_1, p = 9.697004100177821e-10, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*an_2*n, p = 8.237122930994234e-07, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1 + C2*an_2*n**2 + C3*an_8*n + n, p = 5.796901731572905e-14, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*n + n, p = 1.325744262295084e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_3*n, p = 5.017709852366503e-07, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001278688524590164, parse trees = 1, valid = False
-> an_16, p = 0.0003278704990549016, parse trees = 1, valid = False
-> an_1*an_2**2*an_3*n, p = 4.0635472868444517e-07, parse trees = 1, valid = False
-> an_3*n**2, p = 0.000852459016393443, parse trees = 2, valid = False
-> C0*an_1**2*an_2*an_5 + C1*an_2 + C2*n + an_2*an_42, p = 1.86306072992557e-14, parse trees = 1, valid = False
-> an_1*an_2*an_3, p = 5.261527029428311e-05, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> an_2*an_5*n, p = 9.710890143032045e-06, parse trees = 1, valid = False
-> an_29, p = 0.00032786885245927893, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 7.679174415479718e-06, parse trees = 1, valid = False
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1**3*an_12*an_2 <class 'ProGED.model.Model'>
C0*an_3*n + an_1**3*an_12*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3*n, an_1**3*an_12*an_2)
<class 'tuple'> (C0*an_3*n, an_1**3*an_12*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_12 <class 'ProGED.model.Model'>
C0*n + an_1*an_12 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_12)
<class 'tuple'> (C0*n, an_1*an_12)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_39*n**3 <class 'ProGED.model.Model'>
an_1*an_39*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_39, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*n)
<class 'tuple'> (n, C1*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + an_1**3*an_2*an_27*n <class 'ProGED.model.Model'>
C0*an_2*n + an_1**3*an_2*an_27*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n, an_1**3*an_2*an_27*n)
<class 'tuple'> (C0*an_2*n, an_1**3*an_2*an_27*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*an_30 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_30 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_30, C0*an_1*n**3)
<class 'tuple'> (n**2, C1*an_30, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_3 + n**3 <class 'ProGED.model.Model'>
C0*an_3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_3)
<class 'tuple'> (n**3, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_6*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_6*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2*n, C0*an_1*an_6*n)
<class 'tuple'> (an_1*an_2*n, C0*an_1*an_6*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_14*n + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_14*n + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_2, C0*an_1*an_14*n)
<class 'tuple'> (C1*an_1, an_1*an_2, C0*an_1*an_14*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3)
<class 'tuple'> (n, C0*an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_30*n**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_30*n**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_30*n**2)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_30*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_2)
<class 'tuple'> (an_2, C1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_2*n)
<class 'tuple'> (C0*an_1, an_1**2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
<class 'tuple'> (an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
<class 'tuple'> (n, C0*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3, C1*n)
<class 'tuple'> (n, C0*an_3, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + C1*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_2*n**2, C0*an_1**2*n**2)
<class 'tuple'> (C1*n, an_2*n**2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*an_37 + an_3*n**3 <class 'ProGED.model.Model'>
C0*an_2*n + C1*an_37 + an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_37, an_3*n**3, C0*an_2*n)
<class 'tuple'> (C1*an_37, an_3*n**3, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_3*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_3*n)
<class 'tuple'> (n, C1*n, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_1*an_9*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1*an_9*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n, an_1*an_9*n**2)
<class 'tuple'> (C0*an_1*n, an_1*an_9*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
<class 'tuple'> (C0*n**2, an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2**2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2**2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2**2*n)
<class 'tuple'> (an_1**2, C0*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3*n)
<class 'tuple'> (an_1, C0*an_1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_30*n <class 'ProGED.model.Model'>
an_30*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_30, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*n)
<class 'tuple'> (an_2, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_16 + an_1*n <class 'ProGED.model.Model'>
C0*an_16 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_16, an_1*n)
<class 'tuple'> (C0*an_16, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + C1*an_1 + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_2, C0*an_1*n)
<class 'tuple'> (C1*an_1, an_1*an_2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
<class 'tuple'> (C0*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2*n**2 + C1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**2 + C1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C1*an_2*n, C0*an_1**2*an_2*n**2)
<class 'tuple'> (an_1, C2*n, C1*an_2*n, C0*an_1**2*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n**2, an_1*an_2*n)
<class 'tuple'> (C0*an_2*n**2, an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3 + C1*an_1 + C2*an_2*n**2 + C3*an_8*n + n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1 + C2*an_2*n**2 + C3*an_8*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3, C1*an_1, C2*an_2*n**2, C3*an_8*n)
<class 'tuple'> (n, C0*an_1**3, C1*an_1, C2*an_2*n**2, C3*an_8*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**3)
<class 'tuple'> (n, C1*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_3*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_3*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, an_3*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
<class 'tuple'> (n, C0*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_16 <class 'ProGED.model.Model'>
an_16 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_2**2*an_3*n <class 'ProGED.model.Model'>
an_1*an_2**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*an_2*an_5 + C1*an_2 + C2*n + an_2*an_42 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*an_5 + C1*an_2 + C2*n + an_2*an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_2, C2*n, an_2*an_42, C0*an_1**2*an_2*an_5)
<class 'tuple'> (C1*an_2, C2*n, an_2*an_42, C0*an_1**2*an_2*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*an_3 <class 'ProGED.model.Model'>
an_1*an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_5*n <class 'ProGED.model.Model'>
an_2*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_5, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_29 <class 'ProGED.model.Model'>
an_29 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4993483339985687


Equation discovery for all (chosen) OEIS sequences took 0.4993555399996694 secconds, i.e. 0.008322592333327824 minutes or 0.0001387098722221304 hours.
97





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 97
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 51 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2, p = 3.119357953660667e-16, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4, p = 6.464669400118551e-11, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n, p = 1.9638544406800602e-07, parse trees = 1, valid = False
-> an_1**3*n**2, p = 7.526564778549756e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3*n + C1*an_1 + n, p = 9.68811009746538e-08, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 1.9620532115022856e-05, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + C2*n + an_1**3, p = 9.978300069954601e-09, parse trees = 1, valid = False
-> an_3*n**2, p = 0.000852459016393443, parse trees = 2, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> an_37*n, p = 6.55737704918033e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1**2, p = 4.5159388671298534e-05, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_4, p = 3.154377855415211e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1, p = 2.4612534325555883e-08, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.00017775866702499345, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2, p = 2.2380117701695156e-11, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008175221714592852, parse trees = 1, valid = False
-> C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2, p = 1.1040581307661698e-11, parse trees = 1, valid = False
-> C0*an_45 + an_1*n, p = 5.030905670518681e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.0006773908300694775, parse trees = 1, valid = False
-> C0*an_1*an_21*n + C1*n + an_2, p = 2.331261235335278e-08, parse trees = 1, valid = False
-> C0*an_1**3*an_2*an_3*n + C1*an_2 + C2*n**2 + n, p = 1.148097024611217e-11, parse trees = 1, valid = False
-> an_1*an_43*n**2, p = 1.6769685568395607e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> an_1*an_23, p = 4.192421396703591e-05, parse trees = 1, valid = False
-> an_1*n**4, p = 0.00018413114754098385, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1*an_4 + C1*an_1*n**2 + C2*n + n, p = 1.936064047651568e-08, parse trees = 1, valid = False
-> C0*an_5 + an_1, p = 9.646761623219565e-05, parse trees = 1, valid = False
-> C0*n + an_2, p = 0.00417049180327869, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1 + n**2, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1*an_18 + C1*n + an_1*n, p = 9.263468529829e-09, parse trees = 1, valid = False
-> an_2*an_44, p = 1.266087371972887e-05, parse trees = 1, valid = False
-> an_4, p = 0.0034262295081967206, parse trees = 1, valid = False
-> C0*n**2 + an_43*n, p = 1.57377049180328e-06, parse trees = 1, valid = False
-> an_19, p = 0.0003278688969171053, parse trees = 1, valid = False
-> C0*an_1*n**4 + C1*n + an_1, p = 1.6952139747379766e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_2*n, p = 4.266208008599845e-06, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_3*an_45*n**2 + C3*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C3*n, an_1**2*n**2, C1*an_2*n, C2*an_3*an_45*n**2)
<class 'tuple'> (C0*an_1, C3*n, an_1**2*n**2, C1*an_2*n, C2*an_3*an_45*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4 <class 'ProGED.model.Model'>
C0*an_1*an_2**2*n + C1*an_1*n + an_1*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n**4, C1*an_1*n, C0*an_1*an_2**2*n)
<class 'tuple'> (an_1*n**4, C1*an_1*n, C0*an_1*an_2**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, C2*n, an_2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**3*n**2 <class 'ProGED.model.Model'>
an_1**3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*an_3*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*an_2*an_3*n)
<class 'tuple'> (n, C1*an_1, C0*an_1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n**2 + C2*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + C2*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C1*n**2, C2*n, C0*an_1*n)
<class 'tuple'> (an_1**3, C1*n**2, C2*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_37*n <class 'ProGED.model.Model'>
an_37*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_37, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n**2)
<class 'tuple'> (an_1**2, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1 + C1*n + an_4 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*an_1, C1*n)
<class 'tuple'> (an_4, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*an_1*n, C2*an_3*n)
<class 'tuple'> (an_1, C0*an_1**2, C1*an_1*n, C2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n**4 + an_18*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*n**4, an_18*n**2)
<class 'tuple'> (C0*an_1, C1*an_2, C2*n**4, an_18*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
<class 'tuple'> (an_3, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_29 + C1*n**2 + an_1*an_2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_29, C1*n**2, an_1*an_2*an_3*n**2)
<class 'tuple'> (C0*an_29, C1*n**2, an_1*an_2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_45 + an_1*n <class 'ProGED.model.Model'>
C0*an_45 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_45, an_1*n)
<class 'tuple'> (C0*an_45, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_21*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_21*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_21*n)
<class 'tuple'> (an_2, C1*n, C0*an_1*an_21*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_2*an_3*n + C1*an_2 + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*an_3*n + C1*an_2 + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n**2, C0*an_1**3*an_2*an_3*n)
<class 'tuple'> (n, C1*an_2, C2*n**2, C0*an_1**3*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_43*n**2 <class 'ProGED.model.Model'>
an_1*an_43*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_43, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
<class 'tuple'> (C0*an_2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_23 <class 'ProGED.model.Model'>
an_1*an_23 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_23)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*n**4 <class 'ProGED.model.Model'>
an_1*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**4)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_4 + C1*an_1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_4 + C1*an_1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C0*an_1*an_4, C1*an_1*n**2)
<class 'tuple'> (n, C2*n, C0*an_1*an_4, C1*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_5 + an_1 <class 'ProGED.model.Model'>
C0*an_5 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_5)
<class 'tuple'> (an_1, C0*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
<class 'tuple'> (an_2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
<class 'tuple'> (n**2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_18 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_18 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1*an_18)
<class 'tuple'> (C1*n, an_1*n, C0*an_1*an_18)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_44 <class 'ProGED.model.Model'>
an_2*an_44 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_44)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_43*n <class 'ProGED.model.Model'>
C0*n**2 + an_43*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_43*n)
<class 'tuple'> (C0*n**2, an_43*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_19 <class 'ProGED.model.Model'>
an_19 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**4 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**4 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n**4)
<class 'tuple'> (an_1, C1*n, C0*an_1*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**3)
<class 'tuple'> (an_2*n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.4541695210009493


Equation discovery for all (chosen) OEIS sequences took 0.45417517500027316 secconds, i.e. 0.007569586250004552 minutes or 0.0001261597708334092 hours.
98





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 98
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 59 models
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n, p = 6.586644294460405e-13, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2, p = 2.7219493961318855e-14, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3*n + C2*n**2 + n, p = 2.260285299650636e-09, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_1*n + an_1**2, p = 0.00022579694335649262, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> C0*an_1**2*n**4 + C1*n + an_1*an_2, p = 1.0044632549052121e-09, parse trees = 1, valid = False
-> an_17, p = 0.0003278693464377819, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3, p = 2.887239603574824e-05, parse trees = 1, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*an_1*n + an_1, p = 0.0017658478903520573, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> C0*an_44 + C1*n + n, p = 4.721311475409837e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1, p = 0.00013637878060278186, parse trees = 2, valid = False
-> an_2**2, p = 0.0013420526142912605, parse trees = 1, valid = False
-> C0*an_2*n + an_1**2, p = 6.818939030139093e-05, parse trees = 1, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15, p = 1.933044745512378e-13, parse trees = 1, valid = False
-> C0*an_3 + an_1*n, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.063391561408231e-05, parse trees = 1, valid = False
-> an_2**2*n, p = 0.00026841052285825215, parse trees = 1, valid = False
-> an_1**2*an_25, p = 5.360801124853101e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**3, p = 2.133104004299922e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_2, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_7, p = 1.2629082504703043e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2*n, p = 2.402203278688528e-06, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1, p = 6.399312012899765e-05, parse trees = 1, valid = False
-> C0*an_2*n**2 + C1*n + an_1*n, p = 2.559724805159907e-06, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0002725073904864285, parse trees = 1, valid = False
-> an_1*an_10, p = 4.221303192690137e-05, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.0005184000000000003, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1*n, p = 5.231579452631305e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.004603278688524594, parse trees = 1, valid = False
-> n**3, p = 0.007200000000000005, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.005523934426229512, parse trees = 2, valid = False
-> C0*an_1 + C1*an_2 + C2*n + an_1, p = 1.4449450920972498e-07, parse trees = 1, valid = False
-> C0*an_1**3*n**2 + C1*an_1 + an_2, p = 1.3379121223122693e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n + an_1, p = 8.182726836166914e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_4*n + an_1*an_3, p = 6.224485749908586e-07, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + an_1**2*n, p = 5.3163074143200755e-08, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*an_36*n**3 + an_1**2, p = 3.2903015425354136e-09, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_3*n + an_1, p = 0.0001635044342918571, parse trees = 1, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1**2*n + an_5*n**2, p = 9.868162709654126e-08, parse trees = 1, valid = False
-> C0*an_15*an_4*n + n, p = 2.9956606466623464e-08, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_4, p = 9.867540983606562e-06, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_16, p = 2.5154654681589173e-05, parse trees = 1, valid = False
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n + C2*an_1 + C3*n**2 + C4*n + an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, C3*n**2, C4*n, an_38*n, C0*an_1*an_2, C1*an_1*n)
<class 'tuple'> (C2*an_1, C3*n**2, C4*n, an_38*n, C0*an_1*an_2, C1*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n**9 + C2*an_1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n**2, C1*an_1*n**9, C2*an_1*n)
<class 'tuple'> (C0*an_1**2, an_1*n**2, C1*an_1*n**9, C2*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_3*n + C2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3*n + C2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n**2, C0*an_1*n, C1*an_3*n)
<class 'tuple'> (n, C2*n**2, C0*an_1*n, C1*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*n)
<class 'tuple'> (an_1**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
<class 'tuple'> (C0*n, an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**4 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**4 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_2, C0*an_1**2*n**4)
<class 'tuple'> (C1*n, an_1*an_2, C0*an_1**2*n**4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1**3 <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1*n)
<class 'tuple'> (an_1**3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
<class 'tuple'> (an_1, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_44 + C1*n + n <class 'ProGED.model.Model'>
C0*an_44 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_44, C1*n)
<class 'tuple'> (n, C0*an_44, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2 <class 'ProGED.model.Model'>
an_2**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_2, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_2*n)
<class 'tuple'> (an_1**2, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3**2*an_4*n + C2*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*an_1, C2*n, C1*an_3**2*an_4*n)
<class 'tuple'> (an_15, C0*an_1, C2*n, C1*an_3**2*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3 + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_1*n)
<class 'tuple'> (C0*an_3, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
<class 'tuple'> (n, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_25 <class 'ProGED.model.Model'>
an_1**2*an_25 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_25, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_2 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n**3)
<class 'tuple'> (C0*an_2, an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2)
<class 'tuple'> (C0*n, an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_7 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_7 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_7, C0*an_1*n**2)
<class 'tuple'> (an_7, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_2*n)
<class 'tuple'> (C0*n**2, C1*n, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_2*n**2)
<class 'tuple'> (C1*n, an_1*n, C0*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1*an_10 <class 'ProGED.model.Model'>
an_1*an_10 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n, C0*an_1*an_2)
<class 'tuple'> (C1*an_1, an_1*n, C0*an_1*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2, C2*n)
<class 'tuple'> (an_1, C0*an_1, C1*an_2, C2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*n**2 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1**3*n**2 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1**3*n**2)
<class 'tuple'> (an_2, C1*an_1, C0*an_1**3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*an_2*n)
<class 'tuple'> (an_1, C1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*an_4*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_3, C0*an_4*n)
<class 'tuple'> (an_1*an_3, C0*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**2*n, C0*an_1*n**2)
<class 'tuple'> (C1*an_1, an_1**2*n, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_36*n**3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_36*n**3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_36*n**3)
<class 'tuple'> (an_1**2, C0*an_1*an_36*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3*n)
<class 'tuple'> (an_1, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*n + an_5*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_5*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_5*n**2, C0*an_1**2*n)
<class 'tuple'> (an_5*n**2, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_15*an_4*n + n <class 'ProGED.model.Model'>
C0*an_15*an_4*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_15*an_4*n)
<class 'tuple'> (n, C0*an_15*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + C1*n + an_4 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n**2, C1*n)
<class 'tuple'> (an_4, C0*n**2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_16 <class 'ProGED.model.Model'>
C0*an_1 + an_16 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_16, C0*an_1)
<class 'tuple'> (an_16, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.49257819400008884


Equation discovery for all (chosen) OEIS sequences took 0.4925842320008087 secconds, i.e. 0.008209737200013478 minutes or 0.00013682895333355798 hours.
99





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 99
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 60 models
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> an_1**2*n, p = 0.0029430798172534293, parse trees = 1, valid = False
-> C0*an_1*n + an_1*n, p = 0.0003531695780704116, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.004320000000000003, parse trees = 1, valid = False
-> an_1*n, p = 0.046032786885245924, parse trees = 2, valid = False
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_2 + n**2, p = 0.0008340983606557383, parse trees = 1, valid = False
-> an_1*an_24, p = 4.192421393480307e-05, parse trees = 1, valid = False
-> an_2*an_5*n**3, p = 3.88435605721282e-07, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> an_1**5*n, p = 6.153133581388975e-06, parse trees = 1, valid = False
-> C0*n + n, p = 0.02419200000000001, parse trees = 2, valid = False
-> C0*an_1**2 + C1*an_1 + an_2, p = 2.615789726315652e-05, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.0001136489838356516, parse trees = 1, valid = False
-> C0*an_9 + n, p = 4.024774426229509e-05, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> C0*an_1 + an_2*n, p = 0.0005332760010749802, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1, p = 1.162573211695846e-08, parse trees = 1, valid = False
-> C0*an_2 + C1*an_3 + n, p = 2.962644450416556e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_24*an_38*n, p = 2.1993030260880306e-10, parse trees = 1, valid = False
-> C0*n + an_2*an_4*n**2, p = 6.350694257816005e-07, parse trees = 1, valid = False
-> an_49, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_2, p = 1.363787806027819e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0017843213759742016, parse trees = 2, valid = False
-> an_5, p = 0.0012573770491803276, parse trees = 1, valid = False
-> C0*n + an_1**3, p = 0.00022579694335649256, parse trees = 1, valid = False
-> C0*n + an_4, p = 0.00041114754098360654, parse trees = 1, valid = False
-> an_1*an_2, p = 0.008887933351249669, parse trees = 2, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.013809836065573775, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> C0*an_31 + n, p = 3.934426229508481e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_5*n + an_1, p = 3.1545766039058254e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**2 + an_1*n, p = 3.273090734466767e-07, parse trees = 1, valid = False
-> C0*an_2 + an_3*n, p = 4.93774075069426e-05, parse trees = 1, valid = False
-> an_39*an_47*n**2, p = 4.7776881961241035e-09, parse trees = 1, valid = False
-> n**2, p = 0.03600000000000001, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + n, p = 1.0394062572869364e-05, parse trees = 1, valid = False
-> C0*n + an_1*an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*n + an_34, p = 3.934426229508205e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1, p = 0.00950663028182976, parse trees = 2, valid = False
-> C0*n + n**3, p = 0.0008640000000000007, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011047868852459028, parse trees = 1, valid = False
-> C0*an_1 + an_2*n**2, p = 0.00010665520021499607, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1, p = 0.00035316957807041155, parse trees = 1, valid = False
-> C0*an_1 + an_2, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1*an_11*n, p = 8.402171864552544e-06, parse trees = 1, valid = False
-> C0*an_1 + an_9, p = 2.573216436441817e-05, parse trees = 1, valid = False
-> C0*an_1*an_5 + n, p = 1.929352324643913e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*n, p = 0.001765847890352057, parse trees = 1, valid = False
-> an_38, p = 0.0003278688524590164, parse trees = 1, valid = False
-> an_37, p = 0.0003278688524590164, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.00417049180327869, parse trees = 1, valid = False
-> an_3*an_47, p = 3.8818716593508316e-06, parse trees = 1, valid = False
-> C0*an_2 + an_3*n**3, p = 1.9750963002777053e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_1, p = 4.35964954385942e-05, parse trees = 1, valid = False
-> C0*an_2 + an_1, p = 0.0026663800053749005, parse trees = 1, valid = False
-> an_1**2, p = 0.014715399086267138, parse trees = 1, valid = False
-> C0*an_2 + C1*an_29*n + an_2, p = 3.520138004701208e-08, parse trees = 1, valid = False
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
<class 'tuple'> (an_1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
<class 'tuple'> (n, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2)
<class 'tuple'> (n**2, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_24 <class 'ProGED.model.Model'>
an_1*an_24 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*an_5*n**3 <class 'ProGED.model.Model'>
an_2*an_5*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_5, n**3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**5*n <class 'ProGED.model.Model'>
an_1**5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**5)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2, C1*an_1)
<class 'tuple'> (an_2, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_9 + n <class 'ProGED.model.Model'>
C0*an_9 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_9)
<class 'tuple'> (n, C0*an_9)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n)
<class 'tuple'> (C0*an_1, an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n**2 + C2*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_3, C0*an_1*n, C1*an_2*n**2)
<class 'tuple'> (an_1, C2*an_3, C0*an_1*n, C1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*an_3)
<class 'tuple'> (n, C0*an_2, C1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_24*an_38*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_24*an_38*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_24*an_38*n)
<class 'tuple'> (C0*an_1, C1*n, an_24*an_38*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_2*an_4*n**2 <class 'ProGED.model.Model'>
C0*n + an_2*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4*n**2)
<class 'tuple'> (C0*n, an_2*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_49 <class 'ProGED.model.Model'>
an_49 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**2*n**2)
<class 'tuple'> (an_2, C0*an_1**2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1**3 <class 'ProGED.model.Model'>
C0*n + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*n)
<class 'tuple'> (an_1**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_4 <class 'ProGED.model.Model'>
C0*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C0*n)
<class 'tuple'> (an_4, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_31 + n <class 'ProGED.model.Model'>
C0*an_31 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_31)
<class 'tuple'> (n, C0*an_31)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_5*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_5*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_5*n)
<class 'tuple'> (an_1, C0*an_1**2*an_5*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, an_1*n, C0*an_1*an_2*n)
<class 'tuple'> (C1*n**2, an_1*n, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_3*n <class 'ProGED.model.Model'>
C0*an_2 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_3*n)
<class 'tuple'> (C0*an_2, an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_39*an_47*n**2 <class 'ProGED.model.Model'>
an_39*an_47*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_39, an_47, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_1**2 + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*an_1)
<class 'tuple'> (n, C0*an_1**2, C1*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1*an_3 <class 'ProGED.model.Model'>
C0*n + an_1*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_3)
<class 'tuple'> (C0*n, an_1*an_3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_34 <class 'ProGED.model.Model'>
C0*n + an_34 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_34, C0*n)
<class 'tuple'> (an_34, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
<class 'tuple'> (an_1, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
<class 'tuple'> (n**3, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
<class 'tuple'> (n, C0*an_1*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_2*n**2)
<class 'tuple'> (C0*an_1, an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n**2)
<class 'tuple'> (an_1, C0*an_1*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
<class 'tuple'> (an_2, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_11*n <class 'ProGED.model.Model'>
an_1*an_11*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_11, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_9 <class 'ProGED.model.Model'>
C0*an_1 + an_9 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_9, C0*an_1)
<class 'tuple'> (an_9, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_5 + n <class 'ProGED.model.Model'>
C0*an_1*an_5 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_5)
<class 'tuple'> (n, C0*an_1*an_5)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
<class 'tuple'> (C0*an_1, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_38 <class 'ProGED.model.Model'>
an_38 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_37 <class 'ProGED.model.Model'>
an_37 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
<class 'tuple'> (n, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_3*an_47 <class 'ProGED.model.Model'>
an_3*an_47 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_47)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_2 + an_3*n**3 <class 'ProGED.model.Model'>
C0*an_2 + an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_3*n**3)
<class 'tuple'> (C0*an_2, an_3*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**2*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2)
<class 'tuple'> (an_1, C0*an_1**2*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2)
<class 'tuple'> (an_1, C0*an_2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
inside model2diofant()
Add False
Pow True
exiting model2diofant()
C0*an_2 + C1*an_29*n + an_2 <class 'ProGED.model.Model'>
C0*an_2 + C1*an_29*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2, C1*an_29*n)
<class 'tuple'> (an_2, C0*an_2, C1*an_29*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.46908982199965976


Equation discovery for all (chosen) OEIS sequences took 0.46909576799953356 secconds, i.e. 0.007818262799992226 minutes or 0.00013030437999987044 hours.
100





 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 100
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 100
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of terms in every sequence actually used = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
data shape (49, 51)
data: [[1.00000000e+00 1.00000000e+00 0.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [1.00000000e+00 2.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [2.00000000e+00 3.00000000e+00 1.00000000e+00 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 ...
 [2.97121507e+09 4.70000000e+01 1.83631190e+09 ... 0.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [4.80752698e+09 4.80000000e+01 2.97121507e+09 ... 1.00000000e+00
  0.00000000e+00 0.00000000e+00]
 [7.77874205e+09 4.90000000e+01 4.80752698e+09 ... 1.00000000e+00
  1.00000000e+00 0.00000000e+00]]
data[:4][:4] : [[1. 1. 0. 0. 0. 0.]
 [1. 2. 1. 0. 0. 0.]
 [2. 3. 1. 1. 0. 0.]
 [3. 4. 2. 1. 1. 0.]
 [5. 5. 3. 2. 1. 1.]
 [8. 6. 5. 3. 2. 1.]] [0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0. 0.
 1.]
=>> Grammar used: 
Grammar with 55 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.319672]
    V -> 'an_2' [0.0965392]
    V -> 'an_3' [0.0295993]
    V -> 'an_4' [0.0095173]
    V -> 'an_5' [0.00349271]
    V -> 'an_6' [0.00168534]
    V -> 'an_7' [0.00114312]
    V -> 'an_8' [0.00098046]
    V -> 'an_9' [0.000931661]
    V -> 'an_10' [0.000917021]
    V -> 'an_11' [0.000912629]
    V -> 'an_12' [0.000911311]
    V -> 'an_13' [0.000910916]
    V -> 'an_14' [0.000910798]
    V -> 'an_15' [0.000910762]
    V -> 'an_16' [0.000910751]
    V -> 'an_17' [0.000910748]
    V -> 'an_18' [0.000910747]
    V -> 'an_19' [0.000910747]
    V -> 'an_20' [0.000910747]
    V -> 'an_21' [0.000910747]
    V -> 'an_22' [0.000910747]
    V -> 'an_23' [0.000910747]
    V -> 'an_24' [0.000910747]
    V -> 'an_25' [0.000910747]
    V -> 'an_26' [0.000910747]
    V -> 'an_27' [0.000910747]
    V -> 'an_28' [0.000910747]
    V -> 'an_29' [0.000910747]
    V -> 'an_30' [0.000910747]
    V -> 'an_31' [0.000910747]
    V -> 'an_32' [0.000910747]
    V -> 'an_33' [0.000910747]
    V -> 'an_34' [0.000910747]
    V -> 'an_35' [0.000910747]
    V -> 'an_36' [0.000910747]
    V -> 'an_37' [0.000910747]
    V -> 'an_38' [0.000910747]
    V -> 'an_39' [0.000910747]
    V -> 'an_40' [0.000910747]
    V -> 'an_41' [0.000910747]
    V -> 'an_42' [0.000910747]
    V -> 'an_43' [0.000910747]
    V -> 'an_44' [0.000910747]
    V -> 'an_45' [0.000910747]
    V -> 'an_46' [0.000910747]
    V -> 'an_47' [0.000910747]
    V -> 'an_48' [0.000910747]
    V -> 'an_49' [0.000910747]

ModelBox: 56 models
-> an_2, p = 0.034754098360655745, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_3 + an_2*n, p = 9.688110097465382e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1, p = 1.059781868872741e-12, parse trees = 1, valid = False
-> C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1, p = 8.055637792002801e-16, parse trees = 1, valid = False
-> an_1, p = 0.11508196721311477, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*an_24 + an_1*n, p = 8.942870862145495e-09, parse trees = 1, valid = False
-> an_1*n**2, p = 0.009206557377049188, parse trees = 2, valid = False
-> n, p = 0.18000000000000002, parse trees = 1, valid = False
-> C0*n + n**2, p = 0.004320000000000003, parse trees = 1, valid = False
-> C0*an_1 + an_42, p = 2.5154528352593396e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n, p = 3.927708881360121e-08, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.000888793335124967, parse trees = 1, valid = False
-> C0*an_1 + C1*an_4*an_7 + an_1, p = 9.221504209964569e-09, parse trees = 1, valid = False
-> an_4*n**2, p = 0.0001370491803278689, parse trees = 1, valid = False
-> C0*n + an_1, p = 0.015467016393442628, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n, p = 1.6161673500296354e-10, parse trees = 1, valid = False
-> an_1*an_41*n, p = 8.384842784197802e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1**2, p = 1.7438598175437693e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.023016393442622962, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.2729796767130323e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0016571803278688534, parse trees = 1, valid = False
-> an_17*an_3, p = 3.881877507915451e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**3*an_3*n**2, p = 6.836815090432192e-08, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.013809836065573775, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2, p = 6.37956889718409e-09, parse trees = 1, valid = False
-> an_1*an_2, p = 0.0044439666756248344, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.002761967213114756, parse trees = 1, valid = False
-> C0*an_1 + C1*an_45*n + an_1**2, p = 4.9354523138031163e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n, p = 3.3704686616002673e-12, parse trees = 1, valid = False
-> an_2*n, p = 0.006950819672131151, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n, p = 4.927025887807025e-11, parse trees = 1, valid = False
-> C0*an_1*n + an_3, p = 0.00016350443429185711, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2, p = 2.6055771886060754e-13, parse trees = 1, valid = False
-> an_1*an_9, p = 4.288694060736361e-05, parse trees = 1, valid = False
-> an_3, p = 0.010655737704918032, parse trees = 1, valid = False
-> an_27, p = 0.0003278688524619333, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0027619672131147556, parse trees = 1, valid = False
-> an_2*an_3, p = 0.0004114783958911882, parse trees = 1, valid = False
-> C0*n + n, p = 0.021600000000000008, parse trees = 1, valid = False
-> an_1*an_3, p = 0.0013625369524321422, parse trees = 1, valid = False
-> an_3*n, p = 0.0021311475409836068, parse trees = 1, valid = False
-> an_1**2*n**2, p = 0.0005886159634506859, parse trees = 1, valid = False
-> C0*n + an_1*an_38, p = 5.03090567051868e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1, p = 0.001059508734211234, parse trees = 1, valid = False
-> C0*an_1 + an_4*n, p = 5.257296425692019e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005523934426229513, parse trees = 1, valid = False
-> C0*n + an_1**2*an_3*n**2, p = 8.362849753944173e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00033143606557377086, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*n + an_1**3*an_45*n, p = 4.8739968025947886e-11, parse trees = 1, valid = False
-> C0*an_1*an_39*n + C1*an_1*n + C2*an_1 + C3*n + n, p = 1.3086295173710951e-12, parse trees = 1, valid = False
-> C0*an_4 + an_1, p = 0.0002628648212846009, parse trees = 1, valid = False
-> an_2*n**2, p = 0.0013901639344262304, parse trees = 1, valid = False
-> C0*an_4*n**2 + an_35*n, p = 5.99122099793963e-09, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 0.0003199656006449881, parse trees = 1, valid = False
-> C0*an_3*n + an_17, p = 4.658253009498542e-07, parse trees = 1, valid = False
-> C0*an_1*an_4*n + C1*an_1*n**2 + C2*n**2 + C3*n + an_11, p = 2.0354783897807863e-14, parse trees = 1, valid = False
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**2*n + C1*an_3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_3, an_2*n, C0*an_1**2*n)
<class 'tuple'> (C1*an_3, an_2*n, C0*an_1**2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_2*an_29*n + C3*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*an_2, C0*an_1*n**2, C2*an_2*an_29*n)
<class 'tuple'> (an_1, C1*an_1, C3*an_2, C0*an_1*n**2, C2*an_2*an_29*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1 <class 'ProGED.model.Model'>
C0*an_1**3*an_5*n**3 + C1*an_4 + C2*an_41 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_4, C2*an_41, C0*an_1**3*an_5*n**3)
<class 'tuple'> (an_1, C1*an_4, C2*an_41, C0*an_1**3*an_5*n**3)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2 + C2*an_24 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*an_24 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*an_2, C2*an_24, an_1*n)
<class 'tuple'> (C0*an_1, C1*an_2, C2*an_24, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
<class 'tuple'> (n**2, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_42 <class 'ProGED.model.Model'>
C0*an_1 + an_42 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_42, C0*an_1)
<class 'tuple'> (an_42, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*n**2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n**2, C0*an_1*an_2*n)
<class 'tuple'> (n, C2*n, C1*an_1*n**2, C0*an_1*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*an_4*an_7 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_4*an_7 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_4*an_7)
<class 'tuple'> (an_1, C0*an_1, C1*an_4*an_7)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_4*n**2 <class 'ProGED.model.Model'>
an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
<class 'tuple'> (an_1, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2*n + C3*an_2 + C4*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C3*an_2, C4*an_3, C0*an_1*n, C2*an_2*n)
<class 'tuple'> (n, C1*an_1, C3*an_2, C4*an_3, C0*an_1*n, C2*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_41*n <class 'ProGED.model.Model'>
an_1*an_41*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_41, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1*an_2*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_2*n**2)
<class 'tuple'> (an_1**2, C0*an_1*an_2*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
<class 'tuple'> (n, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_17*an_3 <class 'ProGED.model.Model'>
an_17*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_17, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1 + an_1**3*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**3*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**3*an_3*n**2)
<class 'tuple'> (C0*an_1, an_1**3*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
<class 'tuple'> (n, C0*an_1)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1**2*n**2, C0*an_1*n)
<class 'tuple'> (C1*an_1, C2*n, an_1**2*n**2, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
<class 'tuple'> (C0*n, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_45*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_45*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1, C1*an_45*n)
<class 'tuple'> (an_1**2, C0*an_1, C1*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*an_3*n + C2*an_2*n**2 + C3*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C3*n**3, C2*an_2*n**2, C1*an_2*an_3*n)
<class 'tuple'> (n, C0*an_1, C3*n**3, C2*an_2*n**2, C1*an_2*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n + C1*an_1*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*n, C1*an_1*n, C0*an_1**3*an_2*n)
<class 'tuple'> (n, C2*n, C1*an_1*n, C0*an_1**3*an_2*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
<class 'tuple'> (an_3, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_49*an_5*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_2*n, C1*an_49*an_5*n**2)
<class 'tuple'> (n**2, C0*an_1*an_2*n, C1*an_49*an_5*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_9 <class 'ProGED.model.Model'>
an_1*an_9 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_9)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_27 <class 'ProGED.model.Model'>
an_27 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
<class 'tuple'> (an_1, C0*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*an_3 <class 'ProGED.model.Model'>
an_2*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
<class 'tuple'> (n, C0*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_1*an_3 <class 'ProGED.model.Model'>
an_1*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
an_1**2*n**2 <class 'ProGED.model.Model'>
an_1**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*n + an_1*an_38 <class 'ProGED.model.Model'>
C0*n + an_1*an_38 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_38)
<class 'tuple'> (C0*n, an_1*an_38)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
<class 'tuple'> (an_1, C0*an_1, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1 + an_4*n <class 'ProGED.model.Model'>
C0*an_1 + an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_4*n)
<class 'tuple'> (C0*an_1, an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
<class 'tuple'> (C0*n**2, an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*n + an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
C0*n + an_1**2*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_3*n**2)
<class 'tuple'> (C0*n, an_1**2*an_3*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
<class 'tuple'> (n, C1*n, C0*an_1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_2 + C1*n + an_1**3*an_45*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*n + an_1**3*an_45*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*an_2, an_1**3*an_45*n)
<class 'tuple'> (C1*n, C0*an_1*an_2, an_1**3*an_45*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_39*n + C1*an_1*n + C2*an_1 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*an_39*n + C1*an_1*n + C2*an_1 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C3*n, C1*an_1*n, C0*an_1*an_39*n)
<class 'tuple'> (n, C2*an_1, C3*n, C1*an_1*n, C0*an_1*an_39*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_4 + an_1 <class 'ProGED.model.Model'>
C0*an_4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_4)
<class 'tuple'> (an_1, C0*an_4)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
inside model2diofant()
Add False
Pow False
exiting model2diofant()
C0*an_4*n**2 + an_35*n <class 'ProGED.model.Model'>
C0*an_4*n**2 + an_35*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_35*n, C0*an_4*n**2)
<class 'tuple'> (an_35*n, C0*an_4*n**2)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
<class 'tuple'> (an_1, C0*an_2, C1*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_3*n + an_17 <class 'ProGED.model.Model'>
C0*an_3*n + an_17 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_17, C0*an_3*n)
<class 'tuple'> (an_17, C0*an_3*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
C0*an_1*an_4*n + C1*an_1*n**2 + C2*n**2 + C3*n + an_11 <class 'ProGED.model.Model'>
C0*an_1*an_4*n + C1*an_1*n**2 + C2*n**2 + C3*n + an_11 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_11, C2*n**2, C3*n, C1*an_1*n**2, C0*an_1*an_4*n)
<class 'tuple'> (an_11, C2*n**2, C3*n, C1*an_1*n**2, C0*an_1*an_4*n)
inside model2diofant()
Add True
Pow False
exiting model2diofant()
returning 0 earlier

Total time consumed by now:0.5040059929997369


Equation discovery for all (chosen) OEIS sequences took 0.5040116689997376 secconds, i.e. 0.00840019448332896 minutes or 0.000140003241388816 hours.
