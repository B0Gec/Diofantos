




 TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...)
parameter_estimation avoids more than 5 parameters to estimate. In oeis exact may use more than 5 constants? 
TRY GRAMMAR WITH / DIVIDING NONCONSTANT VARIABLES (an_1, n, ...) 





IDEA: max ORDER for GRAMMAR = floor(DATASET ROWS (LEN(SEQ)))/2)-1
fibs ['0', '1', '1', '2', '3', '5', '8', '13', '21', '34', '55', '89', '144', '233', '377', '610', '987', '1597', '2584', '4181', '6765', '10946', '17711', '28657', '46368', '75025', '121393', '196418', '317811', '514229', '832040', '1346269', '2178309', '3524578', '5702887', '9227465', '14930352', '24157817', '39088169', '63245986', '102334155', '165580141', '267914296', '433494437', '701408733', '1134903170', '1836311903', '2971215073', '4807526976', '7778742049']
1
Running equation discovery for all oeis sequences, with these settings:
=>> sample_size = 1000
=>> grammar's q and p = 0.5 and 0.3
=>> grammar_template_name = polynomial2
=>> generator_settings = {'functions': [], 'p_F': []}
=>> optimizer = oeis_exact
=>> task_type = algebraic
=>> timeout = inf
=>> random_seed = 86
=>> lower_upper_bounds = (-4, 4)
=>> number of terms in every sequence saved in csv = 50
=>> number of all considered sequences = 1
=>> list of considered sequences = ('A000045',)
----. inside oeis_eq_disco
seq_id, nof_eqs, max_order,  before A000045 None None
seq_id, nof_eqs, max_order, shape,  after A000045 None 24
data shape (49, 26)
data: Matrix([
[         1,  1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         1,  2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         2,  3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         3,  4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         5,  5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[         8,  6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        13,  7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        21,  8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        34,  9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        55, 10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[        89, 11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       144, 12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       233, 13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       377, 14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       610, 15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[       987, 16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[      1597, 17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[      2584, 18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[      4181, 19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[      6765, 20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[     10946, 21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[     17711, 22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[     28657, 23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[     46368, 24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[     75025, 25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[    121393, 26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[    196418, 27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[    317811, 28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[    514229, 29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[    832040, 30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[   1346269, 31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[   2178309, 32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[   3524578, 33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[   5702887, 34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[   9227465, 35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[  14930352, 36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[  24157817, 37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[  39088169, 38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[  63245986, 39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[ 102334155, 40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[ 165580141, 41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[ 267914296, 42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[ 433494437, 43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[ 701408733, 44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[1134903170, 45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[1836311903, 46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[2971215073, 47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[4807526976, 48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[7778742049, 49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
data[:4][:4] : Matrix([
[1, 1, 0, 0, 0, 0],
[1, 2, 1, 0, 0, 0],
[2, 3, 1, 1, 0, 0],
[3, 4, 2, 1, 1, 0],
[5, 5, 3, 2, 1, 1],
[8, 6, 5, 3, 2, 1]]) 
 Matrix([
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     0],
[     1],
[     1],
[     2],
[     3],
[     5],
[     8],
[    13],
[    21],
[    34],
[    55],
[    89],
[   144],
[   233],
[   377],
[   610],
[   987],
[  1597],
[  2584],
[  4181],
[  6765],
[ 10946],
[ 17711],
[ 28657],
[ 46368],
[ 75025],
[121393]])
data.shape (49, 26)
variable_names ['an', 'n', 'an_1', 'an_2', 'an_3', 'an_4', 'an_5', 'an_6', 'an_7', 'an_8', 'an_9', 'an_10', 'an_11', 'an_12', 'an_13', 'an_14', 'an_15', 'an_16', 'an_17', 'an_18', 'an_19', 'an_20', 'an_21', 'an_22', 'an_23', 'an_24']
=>> Grammar used: 
Grammar with 30 productions (start state = S)
    S -> S '+' 'C' '*' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    T -> T '*' V [0.4]
    T -> V [0.6]
    V -> 'n' [0.5]
    V -> 'an_1' [0.334924]
    V -> 'an_2' [0.101145]
    V -> 'an_3' [0.0310115]
    V -> 'an_4' [0.00997137]
    V -> 'an_5' [0.00365935]
    V -> 'an_6' [0.00176574]
    V -> 'an_7' [0.00119766]
    V -> 'an_8' [0.00102724]
    V -> 'an_9' [0.00097611]
    V -> 'an_10' [0.000960772]
    V -> 'an_11' [0.000956171]
    V -> 'an_12' [0.00095479]
    V -> 'an_13' [0.000954376]
    V -> 'an_14' [0.000954252]
    V -> 'an_15' [0.000954214]
    V -> 'an_16' [0.000954203]
    V -> 'an_17' [0.0009542]
    V -> 'an_18' [0.000954199]
    V -> 'an_19' [0.000954199]
    V -> 'an_20' [0.000954199]
    V -> 'an_21' [0.000954198]
    V -> 'an_22' [0.000954198]
    V -> 'an_23' [0.000954198]
    V -> 'an_24' [0.000954198]

ModelBox: 344 models
-> C0*an_1 + C1*n + an_1, p = 0.00023304761795690392, parse trees = 2, valid = False
-> C0*an_1 + an_2, p = 0.002926874890742275, parse trees = 1, valid = False
-> n**3, p = 0.0072, parse trees = 1, valid = False
-> C0*an_3 + n, p = 0.001339694656488916, parse trees = 1, valid = False
-> an_1**2, p = 0.01615303595362485, parse trees = 1, valid = False
-> n, p = 0.18, parse trees = 1, valid = False
-> C0*n + an_14*n, p = 8.244734850453433e-06, parse trees = 1, valid = False
-> C0*n**2 + an_1, p = 0.0028937404580160818, parse trees = 1, valid = False
-> n**2, p = 0.036, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + n, p = 0.00014048999475562923, parse trees = 2, valid = False
-> C0*an_1 + C1*an_3 + an_1**3, p = 1.2946440521943475e-06, parse trees = 1, valid = False
-> an_1, p = 0.1205725190840034, parse trees = 1, valid = False
-> C0*an_1**3 + C1*an_1*an_3*n + an_2, p = 1.047574576585032e-08, parse trees = 1, valid = False
-> C0*an_1**2*n + n, p = 0.0007753457257739929, parse trees = 2, valid = False
-> an_1**2*n, p = 0.009691821572174911, parse trees = 3, valid = False
-> an_2*n**2, p = 0.0043694656488561835, parse trees = 3, valid = False
-> C0*n + an_2, p = 0.004369465648856183, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + n, p = 2.097343511450968e-05, parse trees = 1, valid = False
-> C0*an_1**2 + an_1*n, p = 0.00025968163143773673, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_4*n, p = 9.277514695809498e-07, parse trees = 1, valid = False
-> C0*n + an_1*n**2, p = 0.0012269459541988186, parse trees = 3, valid = False
-> C0*an_1*n + an_2, p = 0.00117074995629691, parse trees = 2, valid = False
-> an_1*an_3*n**2, p = 0.00011965211817499793, parse trees = 2, valid = False
-> C0*an_1**2*an_3 + an_1**2, p = 2.157740086990579e-06, parse trees = 1, valid = False
-> an_1*n, p = 0.04822900763360136, parse trees = 2, valid = False
-> an_2, p = 0.03641221374046819, parse trees = 1, valid = False
-> an_3*n**3, p = 8.93129770992611e-05, parse trees = 1, valid = False
-> an_1*an_3*n**3, p = 1.1965211817499795e-05, parse trees = 1, valid = False
-> an_3**2*n, p = 2.76972495775456e-05, parse trees = 1, valid = False
-> C0*an_2*n + n, p = 0.0017477862595424735, parse trees = 2, valid = False
-> C0*an_1 + C1*n + an_1*an_2**2*n**2, p = 7.614752556495648e-08, parse trees = 1, valid = False
-> an_1**3, p = 0.002164013595314473, parse trees = 1, valid = False
-> C0*an_1 + n, p = 0.015631720878741397, parse trees = 2, valid = False
-> C0*an_1*n + an_3, p = 0.00035895635452499384, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_1*n, p = 7.867439706315235e-05, parse trees = 2, valid = False
-> C0*n + an_1, p = 0.016413295877867214, parse trees = 3, valid = False
-> C0*an_1 + C1*an_2**2*n + an_1**2*n, p = 5.1007216552113086e-08, parse trees = 1, valid = False
-> C0*an_1*n**3 + an_2*n, p = 4.68299982518764e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n, p = 1.568447460535615e-05, parse trees = 1, valid = False
-> C0*n**2 + an_1**2*an_2*n, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + n, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_2*an_3*n + an_1, p = 7.261330835812974e-06, parse trees = 1, valid = False
-> an_1*n**2, p = 0.014468702290080408, parse trees = 3, valid = False
-> an_3, p = 0.011164122137407634, parse trees = 1, valid = False
-> an_4*n**3, p = 2.8717557251915727e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3, p = 3.037070909210618e-12, parse trees = 1, valid = False
-> C0*n + an_1*n**3, p = 0.00011574961832064325, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + an_2*n, p = 6.273789842142459e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + n, p = 7.753457257739928e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_7 + n, p = 4.1588683235256785e-06, parse trees = 1, valid = False
-> an_1*an_24*n**2, p = 1.8408018186829341e-06, parse trees = 1, valid = False
-> an_1*an_2, p = 0.009756249635807582, parse trees = 2, valid = False
-> C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n, p = 6.639151884055571e-16, parse trees = 1, valid = False
-> C0*an_18 + C1*n + an_2*n, p = 2.001282881135933e-07, parse trees = 1, valid = False
-> C0*n**2 + an_1*an_2, p = 0.000117074995629691, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n**3 + an_1, p = 4.202481363726381e-07, parse trees = 1, valid = False
-> C0*n + an_3*n, p = 0.00030009160305351717, parse trees = 2, valid = False
-> C0*an_1*n + an_1, p = 0.003907890424642492, parse trees = 3, valid = False
-> C0*an_1 + an_1*n, p = 0.003876728628869964, parse trees = 2, valid = False
-> C0*n + n**2, p = 0.00432, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1*an_2*n, p = 1.8821369526427374e-06, parse trees = 1, valid = False
-> an_2*n, p = 0.014564885496187277, parse trees = 2, valid = False
-> an_1*an_2*an_3*n**2, p = 2.420443611937658e-06, parse trees = 1, valid = False
-> an_1*an_2*n, p = 0.0019512499271615164, parse trees = 2, valid = False
-> C0*an_1*n + an_1*n, p = 0.0007753457257739929, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + n, p = 0.0004652074354643957, parse trees = 2, valid = False
-> C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n, p = 4.504197974455335e-09, parse trees = 1, valid = False
-> an_1*an_5, p = 0.00017648687430811048, parse trees = 1, valid = False
-> C0*n**2 + an_1*n**2, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_4*n**3 + n, p = 3.446106870229887e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + n, p = 0.00117074995629691, parse trees = 2, valid = False
-> C0*n + n, p = 0.0216, parse trees = 1, valid = False
-> an_1**2*an_2*an_3*n**3, p = 1.2970621492982554e-07, parse trees = 2, valid = False
-> C0*an_1 + n**2, p = 0.0028937404580160818, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2, p = 3.893680700350545e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n + n, p = 8.429399685337752e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1**2, p = 6.232359154505682e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*n, p = 0.00023260371773219785, parse trees = 1, valid = False
-> C0*an_1**4*n**2 + C1*n + an_1, p = 1.1185724610959254e-07, parse trees = 1, valid = False
-> an_1**2*an_2*n**2, p = 2.6140791008926915e-05, parse trees = 1, valid = False
-> an_2*an_3*n, p = 0.00027100693432798625, parse trees = 3, valid = False
-> C0*an_2*n**3 + C1*an_2 + n, p = 8.48543558068186e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_1**3*n**4, p = 4.474289844383701e-09, parse trees = 1, valid = False
-> C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1, p = 4.310243790083787e-10, parse trees = 1, valid = False
-> an_9, p = 0.0003513996755725212, parse trees = 1, valid = False
-> an_1**2*an_2*n, p = 0.00039211186513390375, parse trees = 3, valid = False
-> an_17, p = 0.00034351196792813403, parse trees = 1, valid = False
-> C0*an_1*n + n**2, p = 0.0011574961832064325, parse trees = 2, valid = False
-> C0*an_1**3*n + C1*an_1*n + C2*n + an_19, p = 1.912089936360464e-10, parse trees = 1, valid = False
-> C0*n + an_1*n, p = 0.0032409893129780117, parse trees = 2, valid = False
-> C0*an_1 + C1*n**2 + an_2, p = 7.02449973778146e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n, p = 8.333972519086315e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2 + an_1, p = 1.9036881391239116e-05, parse trees = 2, valid = False
-> C0*n**2 + C1*n + an_1, p = 0.0003472488549619298, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n + an_1, p = 3.490121126523182e-05, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_3, p = 3.9024998543230025e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + C1*n + n, p = 2.8853514604192746e-06, parse trees = 1, valid = False
-> an_1**2*an_20, p = 6.165281149128489e-06, parse trees = 1, valid = False
-> C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1, p = 2.854674928983084e-10, parse trees = 1, valid = False
-> C0*n + an_2**2, p = 0.00017677990793087212, parse trees = 1, valid = False
-> C0*n**2 + n, p = 0.00442368, parse trees = 2, valid = False
-> C0*an_1 + an_1, p = 0.010470866466488121, parse trees = 2, valid = False
-> an_1**2*an_2, p = 0.0013070395504463455, parse trees = 2, valid = False
-> C0*an_2*n + an_2, p = 0.0001767799079308721, parse trees = 1, valid = False
-> C0*n + an_1*an_18, p = 6.626889540365226e-07, parse trees = 1, valid = False
-> C0*n + an_2*an_4, p = 1.7427830546014797e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + C2*n + n**2, p = 1.0115279622405302e-06, parse trees = 1, valid = False
-> C0*n**3 + C1*n + an_1*an_2, p = 2.809799895112584e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*n + n, p = 7.778374351147226e-05, parse trees = 2, valid = False
-> an_1**2*an_3*n**2, p = 8.01486516783132e-06, parse trees = 1, valid = False
-> C0*an_1*n + n**4, p = 2.3149923664128657e-05, parse trees = 1, valid = False
-> an_2*an_4, p = 0.00014523192121678998, parse trees = 1, valid = False
-> an_2**3*an_6*n, p = 8.419262008910353e-09, parse trees = 1, valid = False
-> C0*an_1*n + an_1**3*n, p = 6.9578818805092585e-06, parse trees = 1, valid = False
-> C0*an_1*n + n, p = 0.0057874809160321635, parse trees = 2, valid = False
-> C0*an_2*n + C1*n + n, p = 0.00010486717557254841, parse trees = 1, valid = False
-> C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1, p = 3.9306599993346483e-10, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2, p = 2.368310980295938e-05, parse trees = 1, valid = False
-> C0*an_1**3*an_2*n**3 + n, p = 8.404962727452765e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1, p = 5.566305504407362e-09, parse trees = 1, valid = False
-> C0*an_4 + n, p = 0.0004307633587787359, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**2, p = 0.00038767286288699643, parse trees = 1, valid = False
-> C0*n + an_2*n**3, p = 6.991145038169892e-05, parse trees = 2, valid = False
-> C0*an_1**2 + n, p = 0.001938364314434982, parse trees = 1, valid = False
-> C0*an_1**2*n + an_2*n**2, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*an_2 + an_2*n**2, p = 3.535598158617442e-05, parse trees = 1, valid = False
-> an_3*n**2, p = 0.0004465648854963054, parse trees = 1, valid = False
-> C0*an_2*n**2 + n, p = 0.00017477862595424736, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + n, p = 0.00010768690635749815, parse trees = 1, valid = False
-> an_1**2*an_2**2*n**2, p = 2.1152090434710134e-06, parse trees = 2, valid = False
-> C0*an_14*an_2 + an_1**2*an_2, p = 6.055325596076297e-09, parse trees = 1, valid = False
-> an_3*n**5, p = 3.572519083970444e-06, parse trees = 1, valid = False
-> C0*n**3 + n, p = 0.0008640000000000001, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*n**2 + an_1, p = 1.8821369526427377e-06, parse trees = 1, valid = False
-> an_1**3*n, p = 0.0004328027190628946, parse trees = 1, valid = False
-> C0*n + an_1**3*an_2*an_22*n**6, p = 2.566400842205913e-13, parse trees = 1, valid = False
-> C0*an_1*n + C1*n**2 + an_1, p = 4.652074354643957e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3*n**2 + C2*n + an_1, p = 4.1549061030037555e-08, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_3, p = 1.7312108762515647e-06, parse trees = 1, valid = False
-> an_4, p = 0.0035896946564894657, parse trees = 1, valid = False
-> C0*an_2*n**4 + C1*n + n, p = 8.389374045803875e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1*an_3*n**2, p = 1.742719400595114e-07, parse trees = 1, valid = False
-> an_1**3*an_2*n**2, p = 3.5020678031053164e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*an_3, p = 1.610620805673426e-05, parse trees = 1, valid = False
-> C0*an_4 + an_1*n**2, p = 1.1541827399341898e-05, parse trees = 1, valid = False
-> C0*an_11*n**2 + n, p = 1.6522626751145045e-06, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + n, p = 0.00023260371773219785, parse trees = 1, valid = False
-> C0*an_1*an_2*n**4 + an_1, p = 6.273789842142459e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + n**2, p = 4.682999825187641e-06, parse trees = 1, valid = False
-> an_1*an_3*n, p = 0.0005982605908749898, parse trees = 2, valid = False
-> an_4*n, p = 0.0007179389312978932, parse trees = 1, valid = False
-> C0*an_1 + n**4, p = 0.00011574961832064328, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + an_3*n, p = 9.727966119736914e-07, parse trees = 1, valid = False
-> an_1**2*an_4*n**4, p = 1.0308349662010555e-07, parse trees = 1, valid = False
-> C0*n**5 + C1*n**4 + n, p = 3.317760000000001e-08, parse trees = 1, valid = False
-> C0*an_1*an_4*n**3 + an_1, p = 3.0925048986031656e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*n + an_2, p = 6.820735623252302e-08, parse trees = 1, valid = False
-> C0*an_1 + an_1**2, p = 0.0012984081571886835, parse trees = 1, valid = False
-> an_24, p = 0.00034351145049486674, parse trees = 1, valid = False
-> C0*an_2 + n, p = 0.004369465648856183, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_3**2*n + n**2, p = 1.0686486890441672e-08, parse trees = 1, valid = False
-> C0*n + an_15, p = 4.1222064107741216e-05, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_1*an_2*n, p = 3.13689492107123e-06, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_1*n, p = 0.00013889954198477192, parse trees = 2, valid = False
-> an_1**2*an_2*an_4*n**3, p = 2.0852768400256185e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n**2, p = 0.0007503226021795872, parse trees = 4, valid = False
-> C0*an_2*an_4*n**2 + C1*n + an_1**2, p = 7.506996624092227e-09, parse trees = 1, valid = False
-> an_19*n, p = 6.870229939217204e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_1, p = 2.7912446127863743e-05, parse trees = 1, valid = False
-> an_1*an_2*an_4, p = 1.9456642880575433e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_15, p = 3.9761984890501115e-07, parse trees = 1, valid = False
-> C0*an_2 + C1*n**2 + n, p = 0.00010486717557254839, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n, p = 1.013407528856135e-07, parse trees = 1, valid = False
-> C0*an_1**3*n + an_1**2*an_13*an_2*n**3, p = 5.758732745110909e-13, parse trees = 1, valid = False
-> an_1*an_2*n**2, p = 0.0003902499854323033, parse trees = 2, valid = False
-> C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n, p = 1.251120405995209e-11, parse trees = 1, valid = False
-> C0*an_2*n + an_1, p = 0.000585374978148455, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1*n, p = 7.842237302678073e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n, p = 9.11121272763185e-12, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_1, p = 0.0003921118651339037, parse trees = 1, valid = False
-> C0*an_7 + C1*n**2 + n, p = 1.241736183206178e-06, parse trees = 1, valid = False
-> an_1**2*an_3*n, p = 4.007432583915659e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*n + an_4*n**3, p = 5.72686092333915e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + n, p = 0.0038371475609124926, parse trees = 5, valid = False
-> C0*an_3 + an_2*n, p = 5.4201386865597254e-05, parse trees = 1, valid = False
-> C0*an_1**2*an_3 + C1*n + an_1*an_14, p = 7.377300826333937e-10, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1*an_2*n, p = 2.550360827605654e-07, parse trees = 1, valid = False
-> C0*an_2*n**2 + an_1*an_2*n, p = 9.473243921183752e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1*n**2, p = 1.2607444091179139e-06, parse trees = 1, valid = False
-> C0*an_1**2 + an_1**2, p = 0.0001739470470127314, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_2*n, p = 4.736621960591877e-06, parse trees = 1, valid = False
-> C0*an_11*n**2 + C1*n + an_2, p = 5.775604001440042e-10, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*n**2 + C2*n + an_2, p = 2.2585643431712852e-07, parse trees = 1, valid = False
-> C0*an_22 + an_2, p = 8.338674932926214e-06, parse trees = 1, valid = False
-> an_1*an_10*n**2, p = 1.85348319384121e-06, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1*n + an_1*n, p = 2.4929436618022726e-07, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*n**3 + n**2, p = 6.743519748270201e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + an_16, p = 6.626919826077551e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_2, p = 8.42939968533775e-05, parse trees = 2, valid = False
-> C0*n**2 + C1*n + n, p = 0.0005184, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3, p = 1.6953115285197628e-11, parse trees = 1, valid = False
-> C0*n + an_2*n, p = 0.001747786259542473, parse trees = 2, valid = False
-> C0*n**4 + n, p = 0.00017280000000000003, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2, p = 6.120865986253569e-09, parse trees = 1, valid = False
-> an_3*n, p = 0.0022328244274815267, parse trees = 1, valid = False
-> an_1**4*n, p = 5.798234900424381e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + an_2, p = 7.02449973778146e-05, parse trees = 1, valid = False
-> an_1**3*n**5, p = 6.924843505006314e-07, parse trees = 1, valid = False
-> C0*an_1 + C1*an_5*n + C2*n + an_1, p = 2.0428288339767133e-07, parse trees = 1, valid = False
-> C0*an_1 + an_1*n**3, p = 7.753457257739928e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*n + an_1, p = 4.02686085994533e-08, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + n, p = 7.1791270904998776e-06, parse trees = 1, valid = False
-> C0*an_2 + an_1*n**2, p = 0.000117074995629691, parse trees = 1, valid = False
-> C0*an_1**3 + C1*n + n, p = 3.1161795772528414e-05, parse trees = 1, valid = False
-> an_1**3*an_3*n, p = 5.368736018911422e-06, parse trees = 1, valid = False
-> an_21, p = 0.0003435114545738056, parse trees = 1, valid = False
-> an_1**2*an_2*an_7, p = 3.1307837628679856e-07, parse trees = 1, valid = False
-> C0*an_2*n + n**2, p = 0.0003495572519084946, parse trees = 2, valid = False
-> C0*an_1*n + an_1**2*n, p = 5.193632628754735e-05, parse trees = 1, valid = False
-> C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4, p = 3.249079761275656e-12, parse trees = 1, valid = False
-> C0*an_2 + n**4, p = 3.495572519084947e-05, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_17*n + n, p = 5.362221619191048e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**4*an_5*n**3, p = 3.2745995330563104e-11, parse trees = 1, valid = False
-> C0*an_2 + an_1*n, p = 0.00117074995629691, parse trees = 2, valid = False
-> C0*an_2 + C1*n + an_1*n**2, p = 1.4048999475562919e-05, parse trees = 1, valid = False
-> C0*an_1*n + an_13, p = 5.5234326456661136e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + C2*n + an_1, p = 8.656054381257823e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + an_2*n**2, p = 4.68299982518764e-06, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + an_3, p = 4.8089191006987895e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1, p = 5.2382746397719266e-12, parse trees = 1, valid = False
-> an_22, p = 0.0003435114516393172, parse trees = 1, valid = False
-> C0*n + an_1**2*an_2*n, p = 1.568447460535615e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_1, p = 2.243649295622046e-06, parse trees = 1, valid = False
-> C0*an_1*an_4*n + an_1**2, p = 1.0357530719561228e-06, parse trees = 1, valid = False
-> C0*an_1**2*an_4 + C1*n + an_1*n, p = 1.2429036863473475e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1, p = 2.7203848827793434e-12, parse trees = 1, valid = False
-> C0*an_1 + C1*an_14 + C2*n + an_1, p = 2.663549969349563e-07, parse trees = 1, valid = False
-> C0*an_1*an_2*n**2 + an_1, p = 1.5684474605356152e-05, parse trees = 1, valid = False
-> an_1*an_2*n**3, p = 3.9024998543230345e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + n**2, p = 6.944977099238596e-05, parse trees = 1, valid = False
-> C0*n + an_1**2*n, p = 0.00038767286288699643, parse trees = 1, valid = False
-> C0*n**2 + C1*n + an_2, p = 0.00010486717557254839, parse trees = 1, valid = False
-> C0*an_1*an_12 + an_1*an_3*n, p = 9.183016603569755e-09, parse trees = 1, valid = False
-> C0*an_1 + C1*an_8*n + C2*n + an_2*n, p = 3.4635985054397364e-09, parse trees = 1, valid = False
-> C0*n + an_1**2, p = 0.001938364314434982, parse trees = 1, valid = False
-> an_18, p = 0.00034351160564561576, parse trees = 1, valid = False
-> C0*an_1*n + an_2*n, p = 0.000351224986889073, parse trees = 3, valid = False
-> C0*an_1*n + C1*an_1 + an_1**2*n, p = 4.174729128305554e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1, p = 1.3039986322575237e-12, parse trees = 1, valid = False
-> C0*an_3 + C1*n + an_1*n, p = 2.1537381271499633e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*n + an_1, p = 0.00015580897886264205, parse trees = 1, valid = False
-> C0*an_1*n + C1*n + n, p = 0.00034724885496192985, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1, p = 1.324837979023153e-12, parse trees = 1, valid = False
-> an_1**4, p = 0.000289911745021219, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n, p = 6.273789842142408e-08, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*n + n**2, p = 1.3551386059027712e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1 + an_3*n**2, p = 3.8654899336162227e-07, parse trees = 1, valid = False
-> C0*an_3**2*n + n**2, p = 6.647339898610945e-07, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2, p = 1.592445241312357e-13, parse trees = 1, valid = False
-> C0*an_2*n**3 + C1*n**3 + C2*n + n, p = 2.4161397251915157e-09, parse trees = 1, valid = False
-> an_2*n**3, p = 0.00029129770992374554, parse trees = 1, valid = False
-> C0*an_1**2*an_2*n + C1*n + n**2, p = 3.764273905285476e-07, parse trees = 1, valid = False
-> an_1*an_7, p = 5.7762060048967765e-05, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_2*n + n, p = 1.404899947556292e-05, parse trees = 1, valid = False
-> C0*an_2 + C1*n + an_1, p = 0.00035122498688907293, parse trees = 1, valid = False
-> an_6*n**2, p = 2.5426717557255202e-05, parse trees = 1, valid = False
-> an_11*n, p = 6.884427812977101e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n**3 + C2*n + n, p = 8.333972519086317e-06, parse trees = 1, valid = False
-> an_16, p = 0.0003435131755365285, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3, p = 3.025786581882993e-08, parse trees = 1, valid = False
-> C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3, p = 9.428984925583986e-13, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + an_1, p = 4.705342381606845e-05, parse trees = 1, valid = False
-> C0*an_15*n + an_1*an_16*an_2, p = 8.527878873985633e-11, parse trees = 1, valid = False
-> C0*an_1*an_2 + C1*an_2*n + C2*n + an_4, p = 9.793743288046453e-11, parse trees = 1, valid = False
-> C0*an_1 + an_3, p = 0.0008973908863124845, parse trees = 1, valid = False
-> an_1**3*an_11*an_2*n**3, p = 2.678859220736651e-10, parse trees = 1, valid = False
-> C0*an_3 + an_1, p = 0.0008973908863124845, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1, p = 2.4321780692547244e-09, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1 + n, p = 3.1161795772528414e-05, parse trees = 1, valid = False
-> an_1**3*an_15, p = 8.259732144081182e-07, parse trees = 1, valid = False
-> C0*an_1**2*an_2 + C1*an_1*an_2 + n**2, p = 5.100721655211306e-08, parse trees = 1, valid = False
-> C0*n**2 + an_3*an_4*n**2, p = 4.2747508886451136e-08, parse trees = 1, valid = False
-> an_7, p = 0.00043115839694658954, parse trees = 1, valid = False
-> an_1**2*an_19*n, p = 1.233056346864949e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + an_1*an_2, p = 3.1728135652065205e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + an_2, p = 4.705342381606845e-05, parse trees = 1, valid = False
-> an_1*an_4*n**2, p = 1.9236378998903164e-05, parse trees = 1, valid = False
-> C0*an_18*n + n, p = 8.244278535494778e-06, parse trees = 1, valid = False
-> C0*an_2 + an_4*n**2, p = 3.4855661092029596e-06, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_2 + n, p = 9.410684763213688e-06, parse trees = 1, valid = False
-> an_1**4*n**5, p = 9.277175840679011e-08, parse trees = 1, valid = False
-> C0*n + an_1*an_2*n, p = 0.00011707499562969098, parse trees = 1, valid = False
-> C0*an_1 + C1*an_3 + an_1, p = 7.213378651048185e-05, parse trees = 1, valid = False
-> an_1*an_5*n, p = 3.5297374861622094e-05, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_15*an_2, p = 1.0775773627970504e-08, parse trees = 1, valid = False
-> C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1, p = 1.7704622961346587e-11, parse trees = 1, valid = False
-> C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2, p = 7.09811194029814e-14, parse trees = 1, valid = False
-> C0*an_2 + C1*n + n, p = 0.0005243358778627419, parse trees = 1, valid = False
-> C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2, p = 1.2074870074065041e-12, parse trees = 1, valid = False
-> C0*n**3 + an_1*an_2, p = 2.3414999125938203e-05, parse trees = 1, valid = False
-> C0*an_1 + an_1*an_2*n, p = 7.842237302678076e-05, parse trees = 1, valid = False
-> C0*an_1**2*n**3 + C1*an_1 + an_2, p = 2.5214888182358285e-07, parse trees = 1, valid = False
-> an_1**2*an_2*an_23*n**2, p = 9.977401159403935e-09, parse trees = 1, valid = False
-> C0*n**3 + C1*n + n, p = 0.00010368000000000001, parse trees = 1, valid = False
-> C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n, p = 2.1430873765893048e-13, parse trees = 1, valid = False
-> C0*n**2 + an_1*n, p = 0.0005787480916032164, parse trees = 1, valid = False
-> C0*an_3 + n**2, p = 0.0002679389312977832, parse trees = 1, valid = False
-> C0*an_3 + n**3, p = 5.358778625955664e-05, parse trees = 1, valid = False
-> C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2, p = 1.0201443310422612e-08, parse trees = 1, valid = False
-> C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n, p = 1.001934990793333e-07, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2*n**3, p = 9.473243921183754e-07, parse trees = 1, valid = False
-> C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3, p = 4.007739963173331e-09, parse trees = 1, valid = False
-> C0*an_1*an_3*n**2 + an_2, p = 1.452266167162595e-06, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2 + an_3, p = 2.178399250743892e-05, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3, p = 5.994182196103467e-11, parse trees = 1, valid = False
-> C0*n + n**3, p = 0.0008640000000000001, parse trees = 1, valid = False
-> C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n + C4*an_22*an_4 + C5*n**2 + C6*n + an_1, p = 8.571535750405164e-19, parse trees = 1, valid = False
-> an_1**2*n**3, p = 0.00012922428762899882, parse trees = 1, valid = False
-> an_1*an_2*n**5, p = 1.560999941729213e-06, parse trees = 1, valid = False
-> C0*an_1*n + C1*an_1 + C2*n + an_2*n**2, p = 2.2585643431712857e-07, parse trees = 1, valid = False
-> C0*an_2*n + C1*n + an_1*n**2, p = 2.809799895112584e-06, parse trees = 1, valid = False
-> C0*an_1 + an_1**2*n, p = 0.0002596816314377368, parse trees = 1, valid = False
-> an_2**2*n, p = 0.0002946331798847868, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1*an_3*n**4, p = 2.7699374020025042e-09, parse trees = 1, valid = False
-> C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2, p = 9.978333476377917e-14, parse trees = 1, valid = False
-> C0*an_3*n + C1*n + an_1, p = 2.153738127149963e-05, parse trees = 1, valid = False
-> an_1*an_24*an_3, p = 5.708593426260661e-07, parse trees = 1, valid = False
-> an_5, p = 0.001317366412214015, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_1**2*n**2, p = 6.2323591545056834e-06, parse trees = 1, valid = False
-> C0*an_1*an_2 + an_2, p = 0.0001184155490147969, parse trees = 1, valid = False
-> n**5, p = 0.000288, parse trees = 1, valid = False
-> C0*an_1 + C1*n + an_9*n**3, p = 2.7116252217011476e-08, parse trees = 1, valid = False
-> C0*an_1*an_4*n + C1*n + n, p = 1.385019287921028e-06, parse trees = 1, valid = False
-> C0*an_1*an_2*n + n, p = 0.00011707499562969102, parse trees = 1, valid = False
-> C0*an_1**3*n + C1*an_1**2*an_4*n + C2*an_1**2*n + C3*an_1 + C4*an_2 + C5*n + an_1**2, p = 2.0190534632243422e-17, parse trees = 1, valid = False
-> C0*an_1 + C1*an_5 + an_2, p = 2.570511115877626e-06, parse trees = 1, valid = False
-> an_1*an_2*an_3*n, p = 1.2102218059688294e-05, parse trees = 1, valid = False
-> C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2, p = 9.805496786702815e-16, parse trees = 1, valid = False
-> C0*an_1*an_3 + an_1, p = 0.00012022297751746976, parse trees = 1, valid = False
-> an_2**3*n**2, p = 2.3840547379997045e-06, parse trees = 1, valid = False
-> C0*an_1*n**2 + n**2, p = 0.00011574961832064325, parse trees = 1, valid = False
-> C0*an_1 + C1*an_2*n + C2*an_2 + n, p = 1.7051839058130751e-06, parse trees = 1, valid = False
-> C0*an_2 + C1*n**3 + C2*n + an_1, p = 1.6858799370675502e-06, parse trees = 1, valid = False
task data <class 'sympy.matrices.dense.MutableDenseMatrix'>
X origin Matrix([
[ 1,          0,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 2,          1,          0,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 3,          1,          1,          0,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 4,          2,          1,          1,          0,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 5,          3,          2,          1,          1,         0,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 6,          5,          3,          2,          1,         1,         0,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 7,          8,          5,          3,          2,         1,         1,         0,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 8,         13,          8,          5,          3,         2,         1,         1,         0,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[ 9,         21,         13,          8,          5,         3,         2,         1,         1,         0,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[10,         34,         21,         13,          8,         5,         3,         2,         1,         1,        0,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[11,         55,         34,         21,         13,         8,         5,         3,         2,         1,        1,        0,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[12,         89,         55,         34,         21,        13,         8,         5,         3,         2,        1,        1,        0,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[13,        144,         89,         55,         34,        21,        13,         8,         5,         3,        2,        1,        1,        0,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[14,        233,        144,         89,         55,        34,        21,        13,         8,         5,        3,        2,        1,        1,       0,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[15,        377,        233,        144,         89,        55,        34,        21,        13,         8,        5,        3,        2,        1,       1,       0,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[16,        610,        377,        233,        144,        89,        55,        34,        21,        13,        8,        5,        3,        2,       1,       1,       0,       0,       0,      0,      0,      0,      0,      0,     0],
[17,        987,        610,        377,        233,       144,        89,        55,        34,        21,       13,        8,        5,        3,       2,       1,       1,       0,       0,      0,      0,      0,      0,      0,     0],
[18,       1597,        987,        610,        377,       233,       144,        89,        55,        34,       21,       13,        8,        5,       3,       2,       1,       1,       0,      0,      0,      0,      0,      0,     0],
[19,       2584,       1597,        987,        610,       377,       233,       144,        89,        55,       34,       21,       13,        8,       5,       3,       2,       1,       1,      0,      0,      0,      0,      0,     0],
[20,       4181,       2584,       1597,        987,       610,       377,       233,       144,        89,       55,       34,       21,       13,       8,       5,       3,       2,       1,      1,      0,      0,      0,      0,     0],
[21,       6765,       4181,       2584,       1597,       987,       610,       377,       233,       144,       89,       55,       34,       21,      13,       8,       5,       3,       2,      1,      1,      0,      0,      0,     0],
[22,      10946,       6765,       4181,       2584,      1597,       987,       610,       377,       233,      144,       89,       55,       34,      21,      13,       8,       5,       3,      2,      1,      1,      0,      0,     0],
[23,      17711,      10946,       6765,       4181,      2584,      1597,       987,       610,       377,      233,      144,       89,       55,      34,      21,      13,       8,       5,      3,      2,      1,      1,      0,     0],
[24,      28657,      17711,      10946,       6765,      4181,      2584,      1597,       987,       610,      377,      233,      144,       89,      55,      34,      21,      13,       8,      5,      3,      2,      1,      1,     0],
[25,      46368,      28657,      17711,      10946,      6765,      4181,      2584,      1597,       987,      610,      377,      233,      144,      89,      55,      34,      21,      13,      8,      5,      3,      2,      1,     1],
[26,      75025,      46368,      28657,      17711,     10946,      6765,      4181,      2584,      1597,      987,      610,      377,      233,     144,      89,      55,      34,      21,     13,      8,      5,      3,      2,     1],
[27,     121393,      75025,      46368,      28657,     17711,     10946,      6765,      4181,      2584,     1597,      987,      610,      377,     233,     144,      89,      55,      34,     21,     13,      8,      5,      3,     2],
[28,     196418,     121393,      75025,      46368,     28657,     17711,     10946,      6765,      4181,     2584,     1597,      987,      610,     377,     233,     144,      89,      55,     34,     21,     13,      8,      5,     3],
[29,     317811,     196418,     121393,      75025,     46368,     28657,     17711,     10946,      6765,     4181,     2584,     1597,      987,     610,     377,     233,     144,      89,     55,     34,     21,     13,      8,     5],
[30,     514229,     317811,     196418,     121393,     75025,     46368,     28657,     17711,     10946,     6765,     4181,     2584,     1597,     987,     610,     377,     233,     144,     89,     55,     34,     21,     13,     8],
[31,     832040,     514229,     317811,     196418,    121393,     75025,     46368,     28657,     17711,    10946,     6765,     4181,     2584,    1597,     987,     610,     377,     233,    144,     89,     55,     34,     21,    13],
[32,    1346269,     832040,     514229,     317811,    196418,    121393,     75025,     46368,     28657,    17711,    10946,     6765,     4181,    2584,    1597,     987,     610,     377,    233,    144,     89,     55,     34,    21],
[33,    2178309,    1346269,     832040,     514229,    317811,    196418,    121393,     75025,     46368,    28657,    17711,    10946,     6765,    4181,    2584,    1597,     987,     610,    377,    233,    144,     89,     55,    34],
[34,    3524578,    2178309,    1346269,     832040,    514229,    317811,    196418,    121393,     75025,    46368,    28657,    17711,    10946,    6765,    4181,    2584,    1597,     987,    610,    377,    233,    144,     89,    55],
[35,    5702887,    3524578,    2178309,    1346269,    832040,    514229,    317811,    196418,    121393,    75025,    46368,    28657,    17711,   10946,    6765,    4181,    2584,    1597,    987,    610,    377,    233,    144,    89],
[36,    9227465,    5702887,    3524578,    2178309,   1346269,    832040,    514229,    317811,    196418,   121393,    75025,    46368,    28657,   17711,   10946,    6765,    4181,    2584,   1597,    987,    610,    377,    233,   144],
[37,   14930352,    9227465,    5702887,    3524578,   2178309,   1346269,    832040,    514229,    317811,   196418,   121393,    75025,    46368,   28657,   17711,   10946,    6765,    4181,   2584,   1597,    987,    610,    377,   233],
[38,   24157817,   14930352,    9227465,    5702887,   3524578,   2178309,   1346269,    832040,    514229,   317811,   196418,   121393,    75025,   46368,   28657,   17711,   10946,    6765,   4181,   2584,   1597,    987,    610,   377],
[39,   39088169,   24157817,   14930352,    9227465,   5702887,   3524578,   2178309,   1346269,    832040,   514229,   317811,   196418,   121393,   75025,   46368,   28657,   17711,   10946,   6765,   4181,   2584,   1597,    987,   610],
[40,   63245986,   39088169,   24157817,   14930352,   9227465,   5702887,   3524578,   2178309,   1346269,   832040,   514229,   317811,   196418,  121393,   75025,   46368,   28657,   17711,  10946,   6765,   4181,   2584,   1597,   987],
[41,  102334155,   63245986,   39088169,   24157817,  14930352,   9227465,   5702887,   3524578,   2178309,  1346269,   832040,   514229,   317811,  196418,  121393,   75025,   46368,   28657,  17711,  10946,   6765,   4181,   2584,  1597],
[42,  165580141,  102334155,   63245986,   39088169,  24157817,  14930352,   9227465,   5702887,   3524578,  2178309,  1346269,   832040,   514229,  317811,  196418,  121393,   75025,   46368,  28657,  17711,  10946,   6765,   4181,  2584],
[43,  267914296,  165580141,  102334155,   63245986,  39088169,  24157817,  14930352,   9227465,   5702887,  3524578,  2178309,  1346269,   832040,  514229,  317811,  196418,  121393,   75025,  46368,  28657,  17711,  10946,   6765,  4181],
[44,  433494437,  267914296,  165580141,  102334155,  63245986,  39088169,  24157817,  14930352,   9227465,  5702887,  3524578,  2178309,  1346269,  832040,  514229,  317811,  196418,  121393,  75025,  46368,  28657,  17711,  10946,  6765],
[45,  701408733,  433494437,  267914296,  165580141, 102334155,  63245986,  39088169,  24157817,  14930352,  9227465,  5702887,  3524578,  2178309, 1346269,  832040,  514229,  317811,  196418, 121393,  75025,  46368,  28657,  17711, 10946],
[46, 1134903170,  701408733,  433494437,  267914296, 165580141, 102334155,  63245986,  39088169,  24157817, 14930352,  9227465,  5702887,  3524578, 2178309, 1346269,  832040,  514229,  317811, 196418, 121393,  75025,  46368,  28657, 17711],
[47, 1836311903, 1134903170,  701408733,  433494437, 267914296, 165580141, 102334155,  63245986,  39088169, 24157817, 14930352,  9227465,  5702887, 3524578, 2178309, 1346269,  832040,  514229, 317811, 196418, 121393,  75025,  46368, 28657],
[48, 2971215073, 1836311903, 1134903170,  701408733, 433494437, 267914296, 165580141, 102334155,  63245986, 39088169, 24157817, 14930352,  9227465, 5702887, 3524578, 2178309, 1346269,  832040, 514229, 317811, 196418, 121393,  75025, 46368],
[49, 4807526976, 2971215073, 1836311903, 1134903170, 701408733, 433494437, 267914296, 165580141, 102334155, 63245986, 39088169, 24157817, 14930352, 9227465, 5702887, 3524578, 2178309, 1346269, 832040, 514229, 317811, 196418, 121393, 75025]])
Y origin Matrix([
[         1],
[         1],
[         2],
[         3],
[         5],
[         8],
[        13],
[        21],
[        34],
[        55],
[        89],
[       144],
[       233],
[       377],
[       610],
[       987],
[      1597],
[      2584],
[      4181],
[      6765],
[     10946],
[     17711],
[     28657],
[     46368],
[     75025],
[    121393],
[    196418],
[    317811],
[    514229],
[    832040],
[   1346269],
[   2178309],
[   3524578],
[   5702887],
[   9227465],
[  14930352],
[  24157817],
[  39088169],
[  63245986],
[ 102334155],
[ 165580141],
[ 267914296],
[ 433494437],
[ 701408733],
[1134903170],
[1836311903],
[2971215073],
[4807526976],
[7778742049]])
shapes: task.data (49, 26), X (49, 25), Y (49, 1), 
C0*an_1 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*n)
C0*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1)
n**3 <class 'ProGED.model.Model'>
n**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 3)
C0*an_3 + n <class 'ProGED.model.Model'>
C0*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_3)
an_1**2 <class 'ProGED.model.Model'>
an_1**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 2)
n <class 'ProGED.model.Model'>
n <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*n + an_14*n <class 'ProGED.model.Model'>
C0*n + an_14*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_14*n)
C0*n**2 + an_1 <class 'ProGED.model.Model'>
C0*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2)
n**2 <class 'ProGED.model.Model'>
n**2 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 2)
C0*an_1 + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_2*n)
C0*an_1 + C1*an_3 + an_1**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3, C0*an_1, C1*an_3)
an_1 <class 'ProGED.model.Model'>
an_1 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1**3, C1*an_1*an_3*n)
C0*an_1**2*n + n <class 'ProGED.model.Model'>
C0*an_1**2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n)
an_1**2*n <class 'ProGED.model.Model'>
an_1**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**2)
an_2*n**2 <class 'ProGED.model.Model'>
an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**2)
C0*n + an_2 <class 'ProGED.model.Model'>
C0*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n)
C0*an_2 + C1*n**3 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**3)
C0*an_1**2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, an_1*n)
C0*an_1 + C1*n + an_1*an_4*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_4*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_4*n)
C0*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**2)
C0*an_1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*n)
an_1*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**2)
C0*an_1**2*an_3 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2*an_3)
an_1*n <class 'ProGED.model.Model'>
an_1*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n)
an_2 <class 'ProGED.model.Model'>
an_2 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_3*n**3 <class 'ProGED.model.Model'>
an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**3)
an_1*an_3*n**3 <class 'ProGED.model.Model'>
an_1*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n**3)
an_3**2*n <class 'ProGED.model.Model'>
an_3**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_3**2)
C0*an_2*n + n <class 'ProGED.model.Model'>
C0*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n)
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_2**2*n**2)
an_1**3 <class 'ProGED.model.Model'>
an_1**3 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 3)
C0*an_1 + n <class 'ProGED.model.Model'>
C0*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1)
C0*an_1*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1*n)
C0*an_2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n)
C0*n + an_1 <class 'ProGED.model.Model'>
C0*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n)
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n, C1*an_2**2*n)
C0*an_1*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n**3)
C0*an_1**2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n)
C0*n**2 + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n**2 + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1**2*an_2*n)
C0*an_1*n**3 + n <class 'ProGED.model.Model'>
C0*an_1*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n**3)
C0*an_2*an_3*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*an_3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*an_3*n)
an_1*n**2 <class 'ProGED.model.Model'>
an_1*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, n**2)
an_3 <class 'ProGED.model.Model'>
an_3 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_4*n**3 <class 'ProGED.model.Model'>
an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n**3)
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1**2*an_2**2*n**4)
C0*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n**3)
C0*an_1**2*n**3 + an_2*n <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1**2*n**3)
C0*an_1**2*n**2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2*n**2)
C0*an_1 + C1*an_7 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_7 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_7)
an_1*an_24*n**2 <class 'ProGED.model.Model'>
an_1*an_24*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, n**2)
an_1*an_2 <class 'ProGED.model.Model'>
an_1*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2)
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_2, C3*n, an_20*n, C0*an_1**2*n, C1*an_1*an_7*n**2)
C0*an_18 + C1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_18 + C1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_18, C1*n, an_2*n)
C0*n**2 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*an_2)
C0*an_1**2*an_2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n**3)
C0*n + an_3*n <class 'ProGED.model.Model'>
C0*n + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_3*n)
C0*an_1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*n)
C0*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n)
C0*n + n**2 <class 'ProGED.model.Model'>
C0*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*n)
C0*an_1*n + C1*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, C0*an_1*n, an_1*an_2*n)
an_2*n <class 'ProGED.model.Model'>
an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n)
an_1*an_2*an_3*n**2 <class 'ProGED.model.Model'>
an_1*an_2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n**2)
an_1*an_2*n <class 'ProGED.model.Model'>
an_1*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n)
C0*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n)
C0*an_1*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1*n)
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_4, C0*an_1*an_2, C1*an_1*n**2)
an_1*an_5 <class 'ProGED.model.Model'>
an_1*an_5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5)
C0*n**2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n**2)
C0*an_4*n**3 + n <class 'ProGED.model.Model'>
C0*an_4*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4*n**3)
C0*an_1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2)
C0*n + n <class 'ProGED.model.Model'>
C0*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n)
an_1**2*an_2*an_3*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_3*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, an_1**2, n**3)
C0*an_1 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1)
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1**3*an_2*an_21*n**2)
C0*an_1 + C1*an_2*n + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*n, C1*an_2*n)
C0*an_1*n + C1*an_2 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*n, C0*an_1*n)
C0*an_1*n + C1*n**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n**2, C0*an_1*n)
C0*an_1 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*n)
C0*an_1**4*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**4*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**4*n**2)
an_1**2*an_2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2, n**2)
an_2*an_3*n <class 'ProGED.model.Model'>
an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_3, n)
C0*an_2*n**3 + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_2*n**3)
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**3*n**4, C0*an_1*n)
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C2*n, C0*an_1*an_17*n**2)
an_9 <class 'ProGED.model.Model'>
an_9 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_1**2*an_2*n <class 'ProGED.model.Model'>
an_1**2*an_2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n, an_1**2)
an_17 <class 'ProGED.model.Model'>
an_17 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n)
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_19, C2*n, C0*an_1**3*n, C1*an_1*n)
C0*n + an_1*n <class 'ProGED.model.Model'>
C0*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*n)
C0*an_1 + C1*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n**2)
C0*an_1 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**2)
C0*an_1*an_2 + C1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_2, C0*an_1*an_2)
C0*n**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*n**2, C1*n)
C0*an_1**2*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1**2*n)
C0*an_2 + C1*n + an_3 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_2, C1*n)
C0*an_1**2*an_3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1**2*an_3)
an_1**2*an_20 <class 'ProGED.model.Model'>
an_1**2*an_20 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_20, an_1**2)
C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**3, C0*an_1*an_14*n)
C0*n + an_2**2 <class 'ProGED.model.Model'>
C0*n + an_2**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2**2, C0*n)
C0*n**2 + n <class 'ProGED.model.Model'>
C0*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2)
C0*an_1 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1)
an_1**2*an_2 <class 'ProGED.model.Model'>
an_1**2*an_2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**2)
C0*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_2*n)
C0*n + an_1*an_18 <class 'ProGED.model.Model'>
C0*n + an_1*an_18 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_18)
C0*n + an_2*an_4 <class 'ProGED.model.Model'>
C0*n + an_2*an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*an_4)
C0*an_1 + C1*an_2 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*an_2, C2*n)
C0*n**3 + C1*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**3 + C1*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, C1*n, an_1*an_2)
C0*an_1*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n**2)
an_1**2*an_3*n**2 <class 'ProGED.model.Model'>
an_1**2*an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, an_1**2, n**2)
C0*an_1*n + n**4 <class 'ProGED.model.Model'>
C0*an_1*n + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1*n)
an_2*an_4 <class 'ProGED.model.Model'>
an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4)
an_2**3*an_6*n <class 'ProGED.model.Model'>
an_2**3*an_6*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n, an_2**3)
C0*an_1*n + an_1**3*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**3*n, C0*an_1*n)
C0*an_1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n)
C0*an_2*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n)
C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1**2*an_9)
C0*an_1*an_2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2*n)
C0*an_1**3*an_2*n**3 + n <class 'ProGED.model.Model'>
C0*an_1**3*an_2*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3*an_2*n**3)
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*n, C0*an_1*n**2, C2*an_3*n)
C0*an_4 + n <class 'ProGED.model.Model'>
C0*an_4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_4)
C0*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**2)
C0*n + an_2*n**3 <class 'ProGED.model.Model'>
C0*n + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n**3)
C0*an_1**2 + n <class 'ProGED.model.Model'>
C0*an_1**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2)
C0*an_1**2*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_1**2*n)
C0*an_2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_2*n**2)
an_3*n**2 <class 'ProGED.model.Model'>
an_3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**2)
C0*an_2*n**2 + n <class 'ProGED.model.Model'>
C0*an_2*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2*n**2)
C0*an_1 + C1*an_3 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*an_3)
an_1**2*an_2**2*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2**2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, an_2**2, n**2)
C0*an_14*an_2 + an_1**2*an_2 <class 'ProGED.model.Model'>
C0*an_14*an_2 + an_1**2*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*an_2, C0*an_14*an_2)
an_3*n**5 <class 'ProGED.model.Model'>
an_3*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n**5)
C0*n**3 + n <class 'ProGED.model.Model'>
C0*n**3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3)
C0*an_1*an_2*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*an_2*n)
an_1**3*n <class 'ProGED.model.Model'>
an_1**3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**3)
C0*n + an_1**3*an_2*an_22*n**6 <class 'ProGED.model.Model'>
C0*n + an_1**3*an_2*an_22*n**6 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**3*an_2*an_22*n**6)
C0*an_1*n + C1*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n**2, C0*an_1*n)
C0*an_1 + C1*an_3*n**2 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3*n**2 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_3*n**2)
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C1*an_1, C2*n, C0*an_1*n)
an_4 <class 'ProGED.model.Model'>
an_4 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_2*n**4 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2*n**4 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_2*n**4)
C0*an_2 + C1*n + an_1*an_3*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*an_3*n**2)
an_1**3*an_2*n**2 <class 'ProGED.model.Model'>
an_1**3*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_1**3, n**2)
C0*an_1 + an_1**2*an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*an_3)
C0*an_4 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_4 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_4, an_1*n**2)
C0*an_11*n**2 + n <class 'ProGED.model.Model'>
C0*an_11*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_11*n**2)
C0*an_1**2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**2, C1*n)
C0*an_1*an_2*n**4 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**4 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n**4)
C0*an_1*an_2*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*an_2*n**2)
an_1*an_3*n <class 'ProGED.model.Model'>
an_1*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_3, n)
an_4*n <class 'ProGED.model.Model'>
an_4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, n)
C0*an_1 + n**4 <class 'ProGED.model.Model'>
C0*an_1 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_1)
C0*an_1**2*an_2 + an_3*n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3*n, C0*an_1**2*an_2)
an_1**2*an_4*n**4 <class 'ProGED.model.Model'>
an_1**2*an_4*n**4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_4, an_1**2, n**4)
C0*n**5 + C1*n**4 + n <class 'ProGED.model.Model'>
C0*n**5 + C1*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**5, C1*n**4)
C0*an_1*an_4*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_4*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_4*n**3)
C0*an_1*an_2*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*an_2*n**2)
C0*an_1 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1)
an_24 <class 'ProGED.model.Model'>
an_24 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_2 + n <class 'ProGED.model.Model'>
C0*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2)
C0*an_1*n + C1*an_3**2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_3**2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n, C1*an_3**2*n)
C0*n + an_15 <class 'ProGED.model.Model'>
C0*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*n)
C0*an_1*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*n**2, an_1*an_2*n)
C0*n**2 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, C1*n, an_1*n)
an_1**2*an_2*an_4*n**3 <class 'ProGED.model.Model'>
an_1**2*an_2*an_4*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_4, an_1**2, n**3)
C0*an_1 + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n)
C0*an_2*an_4*n**2 + C1*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_2*an_4*n**2 + C1*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C1*n, C0*an_2*an_4*n**2)
an_19*n <class 'ProGED.model.Model'>
an_19*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_19, n)
C0*an_1*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_1*n)
an_1*an_2*an_4 <class 'ProGED.model.Model'>
an_1*an_2*an_4 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_4)
C0*an_1 + C1*n + an_15 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_15 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_15, C0*an_1, C1*n)
C0*an_2 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n**2)
C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_1, C0*an_1**2*an_2, C1*an_1*n)
C0*an_1**3*n + an_1**2*an_13*an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1**3*n + an_1**2*an_13*an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**3*n, an_1**2*an_13*an_2*n**3)
an_1*an_2*n**2 <class 'ProGED.model.Model'>
an_1*an_2*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**2)
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C2*an_2, C4*an_3, C0*an_1*n, C3*an_3*n**2)
C0*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2*n)
C0*an_1*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*an_2)
C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C3*n, an_1*n, C2*an_2*an_3, C0*an_1*an_2*n**2)
C0*an_1*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2)
C0*an_7 + C1*n**2 + n <class 'ProGED.model.Model'>
C0*an_7 + C1*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_7, C1*n**2)
an_1**2*an_3*n <class 'ProGED.model.Model'>
an_1**2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**2)
C0*an_1*an_3*n + an_4*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_3*n + an_4*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4*n**3, C0*an_1*an_3*n)
C0*an_1 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n)
C0*an_3 + an_2*n <class 'ProGED.model.Model'>
C0*an_3 + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, an_2*n)
C0*an_1**2*an_3 + C1*n + an_1*an_14 <class 'ProGED.model.Model'>
C0*an_1**2*an_3 + C1*n + an_1*an_14 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*an_14, C0*an_1**2*an_3)
C0*an_1*an_2 + C1*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*an_2, an_1*an_2*n)
C0*an_2*n**2 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_2*n**2 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2*n**2, an_1*an_2*n)
C0*an_1*an_2 + C1*an_1 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*n**2, C0*an_1*an_2)
C0*an_1**2 + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**2 + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1**2)
C0*an_1*an_2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*an_2*n)
C0*an_11*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_11*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_11*n**2)
C0*an_1**2*n + C1*n**2 + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*n**2 + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n**2, C2*n, C0*an_1**2*n)
C0*an_22 + an_2 <class 'ProGED.model.Model'>
C0*an_22 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_22)
an_1*an_10*n**2 <class 'ProGED.model.Model'>
an_1*an_10*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_10, n**2)
C0*an_1*n**3 + C1*an_1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*n, C0*an_1*n**3, C1*an_1*n)
C0*an_1*n + C1*an_2 + C2*n**3 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*n**3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_2, C2*n**3, C0*an_1*n)
C0*an_1 + C1*n**2 + an_16 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + an_16 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_16, C0*an_1, C1*n**2)
C0*an_1 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*n)
C0*n**2 + C1*n + n <class 'ProGED.model.Model'>
C0*n**2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**2, C1*n)
C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C0*an_1*an_2, an_1**2*an_2*an_3*n**3)
C0*n + an_2*n <class 'ProGED.model.Model'>
C0*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_2*n)
C0*n**4 + n <class 'ProGED.model.Model'>
C0*n**4 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**4)
C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C2*n, C1*an_1*n, C0*an_1**2*an_2*n)
an_3*n <class 'ProGED.model.Model'>
an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n)
an_1**4*n <class 'ProGED.model.Model'>
an_1**4*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_1**4)
C0*an_1*n + C1*n + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*n, C0*an_1*n)
an_1**3*n**5 <class 'ProGED.model.Model'>
an_1**3*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**3, n**5)
C0*an_1 + C1*an_5*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_5*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C2*n, C1*an_5*n)
C0*an_1 + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1 + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*n**3)
C0*an_1**2 + C1*an_1*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C2*n, C1*an_1*n)
C0*an_1*an_3*n**2 + n <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_3*n**2)
C0*an_2 + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n**2)
C0*an_1**3 + C1*n + n <class 'ProGED.model.Model'>
C0*an_1**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1**3, C1*n)
an_1**3*an_3*n <class 'ProGED.model.Model'>
an_1**3*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_3, n, an_1**3)
an_21 <class 'ProGED.model.Model'>
an_21 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_1**2*an_2*an_7 <class 'ProGED.model.Model'>
an_1**2*an_2*an_7 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_7, an_1**2)
C0*an_2*n + n**2 <class 'ProGED.model.Model'>
C0*an_2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_2*n)
C0*an_1*n + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2*n, C0*an_1*n)
C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 <class 'ProGED.model.Model'>
C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n**2, C2*n, an_2*n**4, C0*an_2*an_4*n)
C0*an_2 + n**4 <class 'ProGED.model.Model'>
C0*an_2 + n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**4, C0*an_2)
C0*an_1*an_2*n + C1*an_17*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_17*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_17*n, C0*an_1*an_2*n)
C0*an_1 + C1*n + an_1**4*an_5*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**4*an_5*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**4*an_5*n**3)
C0*an_2 + an_1*n <class 'ProGED.model.Model'>
C0*an_2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_1*n)
C0*an_2 + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, C1*n, an_1*n**2)
C0*an_1*n + an_13 <class 'ProGED.model.Model'>
C0*an_1*n + an_13 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_13, C0*an_1*n)
C0*an_1 + C1*an_3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3, C2*n)
C0*an_1*n**2 + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**2, C0*an_1*n**2)
C0*an_1**2*n**2 + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1**2*n**2)
C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C3*an_1, C4*an_2, C0*an_1**2*n, C1*an_1*n**3, C2*an_1*n)
an_22 <class 'ProGED.model.Model'>
an_22 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*n + an_1**2*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*an_2*n)
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n, C0*an_1*n)
C0*an_1*an_4*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1*an_4*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*an_1*an_4*n)
C0*an_1**2*an_4 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_1**2*an_4 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n, C0*an_1**2*an_4)
C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n**3, C3*n, C1*an_2*n**2, C0*an_1*an_2*an_3)
C0*an_1 + C1*an_14 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_14 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_14, C2*n)
C0*an_1*an_2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_2*n**2)
an_1*an_2*n**3 <class 'ProGED.model.Model'>
an_1*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**3)
C0*an_1 + C1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1, C1*n**2)
C0*n + an_1**2*n <class 'ProGED.model.Model'>
C0*n + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1**2*n)
C0*n**2 + C1*n + an_2 <class 'ProGED.model.Model'>
C0*n**2 + C1*n + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*n**2, C1*n)
C0*an_1*an_12 + an_1*an_3*n <class 'ProGED.model.Model'>
C0*an_1*an_12 + an_1*an_3*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1*an_12, an_1*an_3*n)
C0*an_1 + C1*an_8*n + C2*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_8*n + C2*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C2*n, an_2*n, C1*an_8*n)
C0*n + an_1**2 <class 'ProGED.model.Model'>
C0*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C0*n)
an_18 <class 'ProGED.model.Model'>
an_18 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1*n + an_2*n <class 'ProGED.model.Model'>
C0*an_1*n + an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n, C0*an_1*n)
C0*an_1*n + C1*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1**2*n, C0*an_1*n)
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C3*an_9, C4*n, C0*an_1*n**2, C2*an_3*n)
C0*an_3 + C1*n + an_1*n <class 'ProGED.model.Model'>
C0*an_3 + C1*n + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_3, C1*n, an_1*n)
C0*an_1**2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2, C1*n)
C0*an_1*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*n)
C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1**2*an_2*n, C1*an_1**2*an_5*n**3)
an_1**4 <class 'ProGED.model.Model'>
an_1**4 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (an_1, 4)
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C2*an_3, C3*n, C0*an_1*n)
C0*an_1*an_2 + C1*an_1 + C2*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*an_1, C2*n, C0*an_1*an_2)
C0*an_1**2 + C1*an_1 + an_3*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1 + an_3*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_1, an_3*n**2)
C0*an_3**2*n + n**2 <class 'ProGED.model.Model'>
C0*an_3**2*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_3**2*n)
C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C2*an_2, C3*n**3, C1*an_1*n, an_1*an_2**2*n**2)
C0*an_2*n**3 + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_2*n**3 + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n**3, C2*n, C0*an_2*n**3)
an_2*n**3 <class 'ProGED.model.Model'>
an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, n**3)
C0*an_1**2*an_2*n + C1*n + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2*n + C1*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C1*n, C0*an_1**2*an_2*n)
an_1*an_7 <class 'ProGED.model.Model'>
an_1*an_7 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_7)
C0*an_1*n + C1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*n, C1*an_2*n)
C0*an_2 + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n)
an_6*n**2 <class 'ProGED.model.Model'>
an_6*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_6, n**2)
an_11*n <class 'ProGED.model.Model'>
an_11*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, n)
C0*an_1 + C1*n**3 + C2*n + n <class 'ProGED.model.Model'>
C0*an_1 + C1*n**3 + C2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C1*n**3, C2*n)
an_16 <class 'ProGED.model.Model'>
an_16 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n**3, C0*an_1*an_2)
C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n**2, C2*n, an_2**2*n**3)
C0*an_1 + C1*an_2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_2*n)
C0*an_15*n + an_1*an_16*an_2 <class 'ProGED.model.Model'>
C0*an_15*n + an_1*an_16*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_15*n, an_1*an_16*an_2)
C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 <class 'ProGED.model.Model'>
C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_4, C2*n, C0*an_1*an_2, C1*an_2*n)
C0*an_1 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1)
an_1**3*an_11*an_2*n**3 <class 'ProGED.model.Model'>
an_1**3*an_11*an_2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_11, an_2, an_1**3, n**3)
C0*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_3)
C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*n, C0*an_1**2*n, C1*an_1*an_2*n)
C0*an_1**2*n + C1*an_1 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_1, C0*an_1**2*n)
an_1**3*an_15 <class 'ProGED.model.Model'>
an_1**3*an_15 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_15, an_1**3)
C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 <class 'ProGED.model.Model'>
C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1**2*an_2, C1*an_1*an_2)
C0*n**2 + an_3*an_4*n**2 <class 'ProGED.model.Model'>
C0*n**2 + an_3*an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_3*an_4*n**2)
an_7 <class 'ProGED.model.Model'>
an_7 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
an_1**2*an_19*n <class 'ProGED.model.Model'>
an_1**2*an_19*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_19, n, an_1**2)
C0*an_1*an_2*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1*an_2, C0*an_1*an_2*n)
C0*an_1*n + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1*n)
an_1*an_4*n**2 <class 'ProGED.model.Model'>
an_1*an_4*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_4, n**2)
C0*an_18*n + n <class 'ProGED.model.Model'>
C0*an_18*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_18*n)
C0*an_2 + an_4*n**2 <class 'ProGED.model.Model'>
C0*an_2 + an_4*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_2, an_4*n**2)
C0*an_1**2*n + C1*an_2 + n <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*an_2, C0*an_1**2*n)
an_1**4*n**5 <class 'ProGED.model.Model'>
an_1**4*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**4, n**5)
C0*n + an_1*an_2*n <class 'ProGED.model.Model'>
C0*n + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n, an_1*an_2*n)
C0*an_1 + C1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1, C1*an_3)
an_1*an_5*n <class 'ProGED.model.Model'>
an_1*an_5*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_5, n)
C0*an_1 + C1*n + an_15*an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_15*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_15*an_2)
C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*an_1, C2*n**2, C0*an_1*an_16*an_3*n)
C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C3*n, C1*an_1*an_2, C2*an_2*n**5, C0*an_1*an_2*n)
C0*an_2 + C1*n + n <class 'ProGED.model.Model'>
C0*an_2 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_2, C1*n)
C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, an_1*an_19*an_2, C0*an_1*an_2*an_3*n)
C0*n**3 + an_1*an_2 <class 'ProGED.model.Model'>
C0*n**3 + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**3, an_1*an_2)
C0*an_1 + an_1*an_2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1*an_2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1*an_2*n)
C0*an_1**2*n**3 + C1*an_1 + an_2 <class 'ProGED.model.Model'>
C0*an_1**2*n**3 + C1*an_1 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C1*an_1, C0*an_1**2*n**3)
an_1**2*an_2*an_23*n**2 <class 'ProGED.model.Model'>
an_1**2*an_2*an_23*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2, an_23, an_1**2, n**2)
C0*n**3 + C1*n + n <class 'ProGED.model.Model'>
C0*n**3 + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*n**3, C1*n)
C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C2*an_2, C1*an_1*n**2, C0*an_1*an_11*an_3*n**2)
C0*n**2 + an_1*n <class 'ProGED.model.Model'>
C0*n**2 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*n**2, an_1*n)
C0*an_3 + n**2 <class 'ProGED.model.Model'>
C0*an_3 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_3)
C0*an_3 + n**3 <class 'ProGED.model.Model'>
C0*an_3 + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*an_3)
C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1**2, C1*an_2*n, an_1*an_2*n**2)
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'ProGED.model.Model'>
C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C2*an_1, an_1*n, C0*an_1*n**2, C1*an_1*n)
C0*an_1*an_2 + an_2*n**3 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2*n**3, C0*an_1*an_2)
C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 <class 'ProGED.model.Model'>
C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_1*n**3, C0*an_1**2*n**2)
C0*an_1*an_3*n**2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_3*n**2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_3*n**2)
C0*an_1 + C1*an_2 + an_3 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C0*an_1, C1*an_2)
C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_3, C2*an_1, C3*n**2, C0*an_1**2*n, C1*an_1*n)
C0*n + n**3 <class 'ProGED.model.Model'>
C0*n + n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**3, C0*n)
C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n + C4*an_22*an_4 + C5*n**2 + C6*n + an_1 <class 'ProGED.model.Model'>
C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n + C4*an_22*an_4 + C5*n**2 + C6*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C2*an_1, C5*n**2, C6*n, C0*an_1**2*n, C1*an_1*n**2, C3*an_2*n, C4*an_22*an_4)
an_1**2*n**3 <class 'ProGED.model.Model'>
an_1**2*n**3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1**2, n**3)
an_1*an_2*n**5 <class 'ProGED.model.Model'>
an_1*an_2*n**5 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, n**5)
C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 <class 'ProGED.model.Model'>
C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*n, an_2*n**2, C0*an_1*n)
C0*an_2*n + C1*n + an_1*n**2 <class 'ProGED.model.Model'>
C0*an_2*n + C1*n + an_1*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*n, an_1*n**2, C0*an_2*n)
C0*an_1 + an_1**2*n <class 'ProGED.model.Model'>
C0*an_1 + an_1**2*n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, an_1**2*n)
an_2**2*n <class 'ProGED.model.Model'>
an_2**2*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (n, an_2**2)
C0*an_1 + C1*n + an_1*an_3*n**4 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1*an_3*n**4 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1*an_3*n**4)
C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 <class 'ProGED.model.Model'>
C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C1*an_1, C2*an_15, C3*n, an_1*an_2, C0*an_1*n**3)
C0*an_3*n + C1*n + an_1 <class 'ProGED.model.Model'>
C0*an_3*n + C1*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C1*n, C0*an_3*n)
an_1*an_24*an_3 <class 'ProGED.model.Model'>
an_1*an_24*an_3 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_24, an_3)
an_5 <class 'ProGED.model.Model'>
an_5 <class 'sympy.core.symbol.Symbol'>
<class 'sympy.core.symbol.Symbol'> ()
C0*an_1 + C1*n + an_1**2*n**2 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_1**2*n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_1**2*n**2)
C0*an_1*an_2 + an_2 <class 'ProGED.model.Model'>
C0*an_1*an_2 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1*an_2)
n**5 <class 'ProGED.model.Model'>
n**5 <class 'sympy.core.power.Pow'>
<class 'sympy.core.power.Pow'> (n, 5)
C0*an_1 + C1*n + an_9*n**3 <class 'ProGED.model.Model'>
C0*an_1 + C1*n + an_9*n**3 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (C0*an_1, C1*n, an_9*n**3)
C0*an_1*an_4*n + C1*n + n <class 'ProGED.model.Model'>
C0*an_1*an_4*n + C1*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C1*n, C0*an_1*an_4*n)
C0*an_1*an_2*n + n <class 'ProGED.model.Model'>
C0*an_1*an_2*n + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1*an_2*n)
C0*an_1**3*n + C1*an_1**2*an_4*n + C2*an_1**2*n + C3*an_1 + C4*an_2 + C5*n + an_1**2 <class 'ProGED.model.Model'>
C0*an_1**3*n + C1*an_1**2*an_4*n + C2*an_1**2*n + C3*an_1 + C4*an_2 + C5*n + an_1**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1**2, C3*an_1, C4*an_2, C5*n, C0*an_1**3*n, C2*an_1**2*n, C1*an_1**2*an_4*n)
C0*an_1 + C1*an_5 + an_2 <class 'ProGED.model.Model'>
C0*an_1 + C1*an_5 + an_2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_2, C0*an_1, C1*an_5)
an_1*an_2*an_3*n <class 'ProGED.model.Model'>
an_1*an_2*an_3*n <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_1, an_2, an_3, n)
C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 <class 'ProGED.model.Model'>
C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C2*an_8, C3*n, C1*an_1*n, C0*an_1*an_3*an_4)
C0*an_1*an_3 + an_1 <class 'ProGED.model.Model'>
C0*an_1*an_3 + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_1*an_3)
an_2**3*n**2 <class 'ProGED.model.Model'>
an_2**3*n**2 <class 'sympy.core.mul.Mul'>
<class 'sympy.core.mul.Mul'> (an_2**3, n**2)
C0*an_1*n**2 + n**2 <class 'ProGED.model.Model'>
C0*an_1*n**2 + n**2 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n**2, C0*an_1*n**2)
C0*an_1 + C1*an_2*n + C2*an_2 + n <class 'ProGED.model.Model'>
C0*an_1 + C1*an_2*n + C2*an_2 + n <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (n, C0*an_1, C2*an_2, C1*an_2*n)
C0*an_2 + C1*n**3 + C2*n + an_1 <class 'ProGED.model.Model'>
C0*an_2 + C1*n**3 + C2*n + an_1 <class 'sympy.core.add.Add'>
<class 'sympy.core.add.Add'> (an_1, C0*an_2, C1*n**3, C2*n)
returning 0 earlier
Estimating model C0*an_1 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1 -0.931638490088389*an_1 - 3.21490762629033*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1 C0*an_1 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*n                                                      ; p: 0.00023304761795690392 ; error: 111
Estimating model C0*an_1 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_2 -3.38729302238944*an_1 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_2 C0*an_1 + an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [1], [2], [3], [5], [8]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([[1]])]
{'x': [1], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 0.002926874890742275   ; error: 0
Estimating model n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**3 n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**3 n**3 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-7], [-25], [-61], [-120], [-208], [-330], [-491]])
x []
model: n**3                                                                  ; p: 0.0072                 ; error: 111
Estimating model C0*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n -0.0909437746198349*an_3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n C0*an_3 + n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_3 + n                                                          ; p: 0.001339694656488916   ; error: 111
Estimating model an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2 an_1**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2 an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
model: an_1**2                                                               ; p: 0.01615303595362485    ; error: 111
Estimating model n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
model: n                                                                     ; p: 0.18                   ; error: 111
Estimating model C0*n + an_14*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_14*n an_14*n + 1.14611160322801*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_14*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_14*n C0*n + an_14*n 13 [1, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[14]]) Matrix([[377]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_14*n + 111*n                                                       ; p: 8.244734850453433e-06  ; error: 111
Estimating model C0*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1 an_1 - 2.15534738151254*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1 C0*n**2 + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n**2                                                       ; p: 0.0028937404580160818  ; error: 111
Estimating model n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**2 n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**2 n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
model: n**2                                                                  ; p: 0.036                  ; error: 111
Estimating model C0*an_1 + C1*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + n 4.886008142797*an_1 - 3.71837779808204*an_2*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + n C0*an_1 + C1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [2, 4], [3, 10], [5, 18], [8, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2*n + n                                             ; p: 0.00014048999475562923 ; error: 111
Estimating model C0*an_1 + C1*an_3 + an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + an_1**3 an_1**3 - 1.53874602431923*an_1 + 1.54939711452807*an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + an_1**3 C0*an_1 + C1*an_3 + an_1**3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 1], [3, 1], [5, 2], [8, 3]]) Matrix([[1], [-5], [-22], [-117], [-499]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3 + 111*an_1 + 111*an_3                                         ; p: 1.2946440521943475e-06 ; error: 111
Estimating model an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1 an_1 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1 an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
model: an_1                                                                  ; p: 0.1205725190840034     ; error: 111
Estimating model C0*an_1**3 + C1*an_1*an_3*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3 + C1*an_1*an_3*n + an_2 -3.44148861733947*an_1**3 + 2.03926281466229*an_1*an_3*n + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3 + C1*an_1*an_3*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3 + C1*an_1*an_3*n + an_2 C0*an_1**3 + C1*an_1*an_3*n + an_2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [8, 8], [27, 15], [125, 60], [512, 168]]) Matrix([[1], [2], [3], [5], [8]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3 + 111*an_1*an_3*n + an_2                                  ; p: 1.047574576585032e-08  ; error: 111
Estimating model C0*an_1**2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + n 4.44362290153865*an_1**2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + n C0*an_1**2*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [16], [45], [150], [448]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + n                                                     ; p: 0.0007753457257739929  ; error: 111
Estimating model an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*n an_1**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*n an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
model: an_1**2*n                                                             ; p: 0.009691821572174911   ; error: 111
Estimating model an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n**2 an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n**2 an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
model: an_2*n**2                                                             ; p: 0.0043694656488561835  ; error: 111
Estimating model C0*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2 an_2 - 1.44632215307908*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2 C0*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2 + 111*n                                                          ; p: 0.004369465648856183   ; error: 111
Estimating model C0*an_2 + C1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**3 + n -1.86108359610879*an_2 - 1.99323635796169*n**3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**3 + n C0*an_2 + C1*n**3 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 8], [1, 27], [1, 64], [2, 125], [3, 216], [5, 343]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + 111*n**3 + n                                               ; p: 2.097343511450968e-05  ; error: 111
Estimating model C0*an_1**2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + an_1*n 2.37749321905208*an_1**2 + an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + an_1*n C0*an_1**2 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + an_1*n                                                  ; p: 0.00025968163143773673 ; error: 111
Estimating model C0*an_1 + C1*n + an_1*an_4*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_4*n an_1*an_4*n + 2.7931552692319*an_1 + 1.43261587374135*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_4*n C0*an_1 + C1*n + an_1*an_4*n 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[3], [-10], [-22], [-99]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_4*n + 111*an_1 + 111*n                                        ; p: 9.277514695809498e-07  ; error: 111
Estimating model C0*n + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**2 an_1*n**2 + 1.68083643878194*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**2 C0*n + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*n                                                     ; p: 0.0012269459541988186  ; error: 111
Estimating model C0*an_1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_2 0.179925273167348*an_1*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_2 C0*an_1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [8], [15], [30], [56]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_2                                                     ; p: 0.00117074995629691    ; error: 111
Estimating model an_1*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**2 an_1*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**2 an_1*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-29], [-70], [-352], [-1163]])
x []
model: an_1*an_3*n**2                                                        ; p: 0.00011965211817499793 ; error: 111
Estimating model C0*an_1**2*an_3 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + an_1**2 -3.52117204598396*an_1**2*an_3 + an_1**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + an_1**2 C0*an_1**2*an_3 + an_1**2 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [50], [192]]) Matrix([[1], [-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_3 + an_1**2                                            ; p: 2.157740086990579e-06  ; error: 111
Estimating model an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n an_1*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
model: an_1*n                                                                ; p: 0.04822900763360136    ; error: 111
Estimating model an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2 an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2 an_2 1 [3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
model: an_2                                                                  ; p: 0.03641221374046819    ; error: 111
Estimating model an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**3 an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**3 an_3*n**3 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-61], [-120], [-424], [-1016]])
x []
model: an_3*n**3                                                             ; p: 8.93129770992611e-05   ; error: 111
Estimating model an_1*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n**3 an_1*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n**3 an_1*an_3*n**3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-125], [-370], [-2152], [-8219]])
x []
model: an_1*an_3*n**3                                                        ; p: 1.1965211817499795e-05 ; error: 111
Estimating model an_3**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3**2*n an_3**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3**2*n an_3**2*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1], [0], [-16], [-50]])
x []
model: an_3**2*n                                                             ; p: 2.76972495775456e-05   ; error: 111
Estimating model C0*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + n 1.19942705341058*an_2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + n C0*an_2*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + n                                                        ; p: 0.0017477862595424735  ; error: 111
Estimating model C0*an_1 + C1*n + an_1*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_2**2*n**2 an_1*an_2**2*n**2 + 0.953056313182407*an_1 - 1.29380419473357*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_2**2*n**2 C0*an_1 + C1*n + an_1*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-7], [-29], [-295], [-1612], [-9787]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n                                  ; p: 7.614752556495648e-08  ; error: 111
Estimating model an_1**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3 an_1**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3 an_1**3 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-5], [-22], [-117], [-499]])
x []
model: an_1**3                                                               ; p: 0.002164013595314473   ; error: 111
Estimating model C0*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n -0.723215544453294*an_1 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n C0*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n                                                          ; p: 0.015631720878741397   ; error: 111
Estimating model C0*an_1*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_3 -0.56735068822634*an_1*n + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_3 C0*an_1*n + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [8], [15], [30], [56]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_3                                                     ; p: 0.00035895635452499384 ; error: 111
Estimating model C0*an_2 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*n an_1*n + 3.45334946796427*an_2 - 0.695248129144802*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*n C0*an_2 + C1*n + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_2 + 111*n                                             ; p: 7.867439706315235e-05  ; error: 111
Estimating model C0*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1 an_1 - 4.1139580931143*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1 C0*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n                                                          ; p: 0.016413295877867214   ; error: 111
Estimating model C0*an_1 + C1*an_2**2*n + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2**2*n + an_1**2*n an_1**2*n - 4.72461864082546*an_1 - 0.163365744660633*an_2**2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2**2*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2**2*n + an_1**2*n C0*an_1 + C1*an_2**2*n + an_1**2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [2, 4], [3, 20], [5, 54], [8, 175]]) Matrix([[-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*an_1 + 111*an_2**2*n                                  ; p: 5.1007216552113086e-08 ; error: 111
Estimating model C0*an_1*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + an_2*n -4.04074229112346*an_1*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + an_2*n C0*an_1*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [27], [128], [375], [1080], [2744]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**3 + an_2*n                                                ; p: 4.68299982518764e-06   ; error: 111
Estimating model C0*an_1**2*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n -0.570436974378895*an_1**2*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n C0*an_1**2*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [16], [45], [150], [448]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_2*n                                                ; p: 1.568447460535615e-05  ; error: 111
Estimating model C0*n**2 + an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1**2*an_2*n an_1**2*an_2*n - 2.5658071806154*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1**2*an_2*n C0*n**2 + an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [16], [25], [36], [49]]) Matrix([[1], [-1], [-13], [-85], [-442], [-2227]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2*n + 111*n**2                                             ; p: 3.13689492107123e-06   ; error: 111
Estimating model C0*an_1*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + n -3.70386505215037*an_1*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + n C0*an_1*n**3 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [8], [27], [128], [375], [1080], [2744]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**3 + n                                                     ; p: 0.00011574961832064328 ; error: 111
Estimating model C0*an_2*an_3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_3*n + an_1 an_1 - 3.24437525310367*an_2*an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_3*n + an_1 C0*an_2*an_3*n + an_1 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [10], [36], [105]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*an_2*an_3*n                                                ; p: 7.261330835812974e-06  ; error: 111
Estimating model an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*n**2 an_1*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*n**2 an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
model: an_1*n**2                                                             ; p: 0.014468702290080408   ; error: 111
Estimating model an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3 an_3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3 an_3 2 [4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [2], [4], [6], [10]])
x []
model: an_3                                                                  ; p: 0.011164122137407634   ; error: 111
Estimating model an_4*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4*n**3 an_4*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4*n**3 an_4*n**3 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-120], [-208], [-673]])
x []
model: an_4*n**3                                                             ; p: 2.8717557251915727e-05 ; error: 111
Estimating model C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2.57736761374815*an_1**2*an_2**2*n**4 + 0.263415921385857*an_1 + an_3 + 4.50301867916131*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 C0*an_1**2*an_2**2*n**4 + C1*an_1 + C2*n + an_3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 81], [2, 4, 1024], [3, 5, 22500], [5, 6, 291600], [8, 7, 3841600]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n                    ; p: 3.037070909210618e-12  ; error: 111
Estimating model C0*n + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n**3 an_1*n**3 - 3.53941366605452*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n**3 C0*n + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**3 + 111*n                                                     ; p: 0.00011574961832064325 ; error: 111
Estimating model C0*an_1**2*n**3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**3 + an_2*n -2.63065138335986*an_1**2*n**3 + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**3 + an_2*n C0*an_1**2*n**3 + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [27], [256], [1125], [5400], [21952]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**3 + an_2*n                                             ; p: 6.273789842142459e-07  ; error: 111
Estimating model C0*an_1**2*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + n 0.0868721793972393*an_1**2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + n C0*an_1**2*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [64], [225], [900], [3136]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**2 + n                                                  ; p: 7.753457257739928e-05  ; error: 111
Estimating model C0*an_1 + C1*an_7 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_7 + n -3.9399742275706*an_1 - 1.6756216293962*an_7 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_7 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_7 + n C0*an_1 + C1*an_7 + n 6 [1, 2, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8, 0], [13, 1]]) Matrix([[6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_7 + n                                               ; p: 4.1588683235256785e-06 ; error: 111
Estimating model an_1*an_24*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_24*n**2 an_1*an_24*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_24*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_24*n**2 an_1*an_24*n**2 23 [1, 2, 25] 1 24
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 24
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1*an_24*n**2
model: an_1*an_24*n**2                                                       ; p: 1.8408018186829341e-06 ; error: 100000000
Estimating model an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2 an_1*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2 an_1*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
model: an_1*an_2                                                             ; p: 0.009756249635807582   ; error: 111
Estimating model C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n -4.96393415407436*an_1**2*n - 0.178197468328311*an_1*an_7*n**2 + 3.72368223006067*an_2 + an_20*n + 3.04046146664525*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n C0*an_1**2*n + C1*an_1*an_7*n**2 + C2*an_2 + C3*n + an_20*n 19 [1, 2, 3, 8, 21] 1 20
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 20
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0], [23, 17711, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0]]) Matrix([[6765], [10946], [17711], [28657]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2584, 20, 349615220, 389669200], [4181, 21, 961069725, 1124728605], [6765, 22, 2635928152, 3231697040], [10946, 23, 7214628983, 9247320453]]) Matrix([[6765], [10925], [17689], [28611]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n       ; p: 6.639151884055571e-16  ; error: 111
Estimating model C0*an_18 + C1*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_18 + C1*n + an_2*n -0.12438410840407*an_18 + an_2*n + 4.06384668714394*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_18 + C1*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_18 + C1*n + an_2*n C0*an_18 + C1*n + an_2*n 17 [1, 3, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0]]) Matrix([[2584], [4181]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 18], [1, 19]]) Matrix([[-15182], [-26162]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_18 + an_2*n + 111*n                                            ; p: 2.001282881135933e-07  ; error: 111
Estimating model C0*n**2 + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*an_2 an_1*an_2 - 4.17618046771062*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*an_2 C0*n**2 + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [16], [25], [36], [49]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*n**2                                                  ; p: 0.000117074995629691   ; error: 111
Estimating model C0*an_1**2*an_2*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n**3 + an_1 -2.46917679533612*an_1**2*an_2*n**3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n**3 + an_1 C0*an_1**2*an_2*n**3 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [27], [256], [2250], [16200], [109760]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2*n**3 + an_1                                          ; p: 4.202481363726381e-07  ; error: 111
Estimating model C0*n + an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_3*n an_3*n + 4.84244497296571*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_3*n C0*n + an_3*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3], [4], [5], [6], [7]]) Matrix([[2], [-1], [0], [-4], [-8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_3*n + 111*n                                                        ; p: 0.00030009160305351717 ; error: 111
Estimating model C0*an_1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1 -3.96997638671773*an_1*n + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1 C0*an_1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_1                                                     ; p: 0.003907890424642492   ; error: 111
Estimating model C0*an_1 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n an_1*n + 0.58832509811073*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n C0*an_1 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_1                                                     ; p: 0.003876728628869964   ; error: 111
Estimating model C0*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n**2 n**2 + 0.395514211589462*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n**2 C0*n + n**2 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: n**2 + 111*n                                                          ; p: 0.00432                ; error: 111
Estimating model C0*an_1*n + C1*n + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_1*an_2*n an_1*an_2*n + 4.98897552081565*an_1*n - 2.45278598732714*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_1*an_2*n C0*an_1*n + C1*n + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 2], [3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_1*n + 111*n                                      ; p: 1.8821369526427374e-06 ; error: 111
Estimating model an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n an_2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
model: an_2*n                                                                ; p: 0.014564885496187277   ; error: 111
Estimating model an_1*an_2*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_3*n**2 an_1*an_2*an_3*n**2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-29], [-145], [-1072], [-5867]])
x []
model: an_1*an_2*an_3*n**2                                                   ; p: 2.420443611937658e-06  ; error: 111
Estimating model an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n an_1*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
model: an_1*an_2*n                                                           ; p: 0.0019512499271615164  ; error: 111
Estimating model C0*an_1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1*n -1.7366609801189*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1*n C0*an_1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1*n                                                            ; p: 0.0007753457257739929  ; error: 111
Estimating model C0*an_1*n + C1*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + n 4.95104677152123*an_1*n - 1.00160428570936*an_1 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + n C0*an_1*n + C1*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_1 + n                                             ; p: 0.0004652074354643957  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3.42389189473463*an_1*an_2 - 0.907543326966944*an_1*n**2 - 0.736191125095648*an_4 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n C0*an_1*an_2 + C1*an_1*n**2 + C2*an_4 + n 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2, 32], [1, 6, 75], [1, 15, 180], [2, 40, 392]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n                          ; p: 4.504197974455335e-09  ; error: 111
Estimating model an_1*an_5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_5 an_1*an_5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_5 an_1*an_5 4 [2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[5], [3], [5]])
x []
model: an_1*an_5                                                             ; p: 0.00017648687430811048 ; error: 111
Estimating model C0*n**2 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*n**2 an_1*n**2 + 3.16777058585259*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*n**2 C0*n**2 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*n**2                                                  ; p: 0.00011574961832064328 ; error: 111
Estimating model C0*an_4*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4*n**3 + n -4.66567071302591*an_4*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4*n**3 + n C0*an_4*n**3 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [125], [216], [686]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_4*n**3 + n                                                     ; p: 3.446106870229887e-06  ; error: 111
Estimating model C0*an_1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + n -0.379891564734828*an_1*an_2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + n C0*an_1*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + n                                                     ; p: 0.00117074995629691    ; error: 111
Estimating model C0*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n 3.81307521430685*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n C0*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*n                                                                 ; p: 0.0216                 ; error: 111
Estimating model an_1**2*an_2*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-253], [-2245], [-32392], [-329267]])
x []
model: an_1**2*an_2*an_3*n**3                                                ; p: 1.2970621492982554e-07 ; error: 111
Estimating model C0*an_1 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n**2 -3.38476187356185*an_1 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n**2 C0*an_1 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n**2                                                       ; p: 0.0028937404580160818  ; error: 111
Estimating model C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 an_1**3*an_2*an_21*n**2 - 4.98516169144148*an_2 - 1.63764244808087*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 C0*an_2 + C1*n + an_1**3*an_2*an_21*n**2 20 [1, 2, 3, 22] 1 21
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 21
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0], [22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0]]) Matrix([[10946], [17711]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4181, 21], [6765, 22]]) Matrix([[10946], [-4294172575393185649]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n                            ; p: 3.893680700350545e-12  ; error: 111
Estimating model C0*an_1 + C1*an_2*n + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + C2*n + n 1.11774259288263*an_1 + 1.03730829468596*an_2*n + 1.20089175639547*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + C2*n + n C0*an_1 + C1*an_2*n + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2, 0], [1, 3, 3], [2, 4, 4], [3, 5, 10], [5, 6, 18], [8, 7, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2*n + 112*n                                         ; p: 8.429399685337752e-06  ; error: 111
Estimating model C0*an_1*n + C1*an_2 + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*n + n -4.71570544893716*an_1*n - 0.592618022589214*an_2 + 1.12530943404008*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*n + n C0*an_1*n + C1*an_2 + C2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2, 2], [1, 3, 3], [1, 4, 8], [2, 5, 15], [3, 6, 30], [5, 7, 56]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_2 + 112*n                                         ; p: 8.429399685337752e-06  ; error: 111
Estimating model C0*an_1*n + C1*n**2 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n**2 + an_1**2 an_1**2 + 1.50005456450705*an_1*n + 3.8085740056491*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n**2 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n**2 + an_1**2 C0*an_1*n + C1*n**2 + an_1**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [4, 2], [9, 3], [16, 8], [25, 15], [36, 30], [49, 56]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*an_1*n + 111*n**2                                       ; p: 6.232359154505682e-06  ; error: 111
Estimating model C0*an_1 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*n an_1*n + 2.26310868721149*an_1 + 0.620623973355764*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*n C0*an_1 + C1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_1 + 111*n                                             ; p: 0.00023260371773219785 ; error: 111
Estimating model C0*an_1**4*n**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**4*n**2 + C1*n + an_1 -4.02958440341425*an_1**4*n**2 + an_1 + 3.19512905954627*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**4*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**4*n**2 + C1*n + an_1 C0*an_1**4*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 4], [3, 9], [4, 256], [5, 2025], [6, 22500], [7, 200704]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**4*n**2 + an_1 + 111*n                                       ; p: 1.1185724610959254e-07 ; error: 111
Estimating model an_1**2*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n**2 an_1**2*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n**2 an_1**2*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-61], [-445], [-2692], [-15667]])
x []
model: an_1**2*an_2*n**2                                                     ; p: 2.6140791008926915e-05 ; error: 111
Estimating model an_2*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_3*n an_2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_3*n an_2*an_3*n 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1], [-5], [-28], [-92]])
x []
model: an_2*an_3*n                                                           ; p: 0.00027100693432798625 ; error: 111
Estimating model C0*an_2*n**3 + C1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**3 + C1*an_2 + n 1.53482562619658*an_2*n**3 - 3.58680779358041*an_2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**3 + C1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**3 + C1*an_2 + n C0*an_2*n**3 + C1*an_2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 27], [1, 64], [2, 250], [3, 648], [5, 1715]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**3 + 111*an_2 + n                                          ; p: 8.48543558068186e-07   ; error: 111
Estimating model C0*an_1*n + C1*an_1 + an_1**3*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_1**3*n**4 an_1**3*n**4 + 4.22760676525618*an_1*n - 0.709171778324632*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_1**3*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_1**3*n**4 C0*an_1*n + C1*an_1 + an_1**3*n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[1], [-15], [-79], [-2045], [-16870], [-161992], [-1229299]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*n**4 + 111*an_1*n + 111*an_1                                  ; p: 4.474289844383701e-09  ; error: 111
Estimating model C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824]]) Matrix([[610], [987], [1597]])
x [Matrix([
[1],
[0],
[0]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1 16 [1, 2, 3, 18] 1 17
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0], [19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0]]) Matrix([[1597], [2584], [4181], [6765], [10946]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 17, 0], [987, 18, 517428], [1597, 19, 932824], [2584, 20, 3344800], [4181, 21, 8950095]]) Matrix([[610], [987], [1597], [2584], [4181]])
x [Matrix([
[1],
[0],
[0]])]
Uuhuu! Eqation found even after double checking with {SECOND_CHECK_nof_eqs} equations :)
Excepted an error inside fit_one: Of type <class 'AttributeError'> and message:'list' object has no attribute 'T'!! 
Model: C0*an_1*an_17*n**2 + C1*an_2 + C2*n + an_1
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; p: 4.310243790083787e-10  ; error: 100000000
Estimating model an_9






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_9 an_9 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_9 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_9 an_9 8 [10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_9
model: an_9                                                                  ; p: 0.0003513996755725212  ; error: 100000000
Estimating model an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*n an_1**2*an_2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*n an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-13], [-85], [-442], [-2227]])
x []
model: an_1**2*an_2*n                                                        ; p: 0.00039211186513390375 ; error: 111
Estimating model an_17






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_17 an_17 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_17 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_17 an_17 16 [18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_17
model: an_17                                                                 ; p: 0.00034351196792813403 ; error: 100000000
Estimating model C0*an_1*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**2 -2.70272190045233*an_1*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**2 C0*an_1*n + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n**2                                                     ; p: 0.0011574961832064325  ; error: 111
Estimating model C0*an_1**3*n + C1*an_1*n + C2*n + an_19






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*n + C1*an_1*n + C2*n + an_19 3.07624470317416*an_1**3*n + 3.71312503429106*an_1*n + an_19 - 3.34758577118351*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*n + C1*an_1*n + C2*n + an_19 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*n + C1*an_1*n + C2*n + an_19 C0*an_1**3*n + C1*an_1*n + C2*n + an_19 18 [1, 2, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0], [21, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0]]) Matrix([[4181], [6765], [10946]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[19, 327816741376, 49096], [20, 1461741234820, 83620], [21, 6501636689625, 142065]]) Matrix([[4181], [6764], [10945]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n                            ; p: 1.912089936360464e-10  ; error: 111
Estimating model C0*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*n an_1*n - 4.01021245471769*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*n C0*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*n                                                        ; p: 0.0032409893129780117  ; error: 111
Estimating model C0*an_1 + C1*n**2 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + an_2 1.61768900689656*an_1 + an_2 + 3.89076752782736*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + an_2 C0*an_1 + C1*n**2 + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 7.02449973778146e-05   ; error: 0
Estimating model C0*an_1 + C1*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + n -3.07752780614617*an_1 - 1.04917697404411*n**2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + n C0*an_1 + C1*n**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*n**2 + n                                               ; p: 8.333972519086315e-06  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_2 + an_1 2.52599404073776*an_1*an_2 + an_1 - 1.22819108917753*an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_2 + an_1 C0*an_1*an_2 + C1*an_2 + an_1 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 1], [1, 2], [2, 6], [3, 15], [5, 40]]) Matrix([[0], [1], [1], [2], [3], [5]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1*an_2 + an_1                                                      ; p: 1.9036881391239116e-05 ; error: 0
Estimating model C0*n**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + C1*n + an_1 an_1 - 3.75795766913405*n**2 - 4.13557018801783*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + C1*n + an_1 C0*n**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [4, 2], [9, 3], [16, 4], [25, 5], [36, 6], [49, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*n**2 + 111*n                                               ; p: 0.0003472488549619298  ; error: 111
Estimating model C0*an_1**2*n + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*n + an_1 4.66412214893353*an_1**2*n + an_1 - 2.4689103617128*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*n + an_1 C0*an_1**2*n + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 2], [3, 3], [4, 16], [5, 45], [6, 150], [7, 448]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_1 + 111*n                                          ; p: 3.490121126523182e-05  ; error: 111
Estimating model C0*an_2 + C1*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_3 -2.62019439651843*an_2 + an_3 - 3.44932340734513*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_3 C0*an_2 + C1*n + an_3 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[2], [2], [4], [6], [10]])
x [Matrix([
[2],
[0]])]
{'x': [2, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.Integer'>
model: 2*an_2 + an_3                                                         ; p: 3.9024998543230025e-06 ; error: 0
Estimating model C0*an_1**2*an_3 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + C1*n + n -1.57759730177886*an_1**2*an_3 - 1.2539136373761*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + C1*n + n C0*an_1**2*an_3 + C1*n + n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [4, 4], [5, 9], [6, 50], [7, 192]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_3 + 112*n                                              ; p: 2.8853514604192746e-06 ; error: 111
Estimating model an_1**2*an_20






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_20 an_1**2*an_20 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_20 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_20 an_1**2*an_20 19 [2, 21] 1 20
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 20
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**2*an_20
model: an_1**2*an_20                                                         ; p: 6.165281149128489e-06  ; error: 100000000
Estimating model C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 -0.0208775425890451*an_1*an_14*n + 1.24792017829984*an_1 + 4.94489830566559*n**3 (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 C0*an_1*an_14*n + C1*an_1 + C2*n**3 + an_1 13 [1, 2, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377], [610], [987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[233, 2744, 0], [377, 3375, 5655], [610, 4096, 9760]]) Matrix([[144], [233], [377]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3                                ; p: 2.854674928983084e-10  ; error: 111
Estimating model C0*n + an_2**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2**2 an_2**2 - 3.71867999939666*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2**2 C0*n + an_2**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [1], [2], [1], [-1], [-12]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2**2 + 111*n                                                       ; p: 0.00017677990793087212 ; error: 111
Estimating model C0*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + n 4.6155691256941*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + n C0*n**2 + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49], [64]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**2 + n                                                          ; p: 0.00442368             ; error: 111
Estimating model C0*an_1 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1 2.05396393935447*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1 C0*an_1 + an_1 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1                                                              ; p: 0.010470866466488121   ; error: 111
Estimating model an_1**2*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2 an_1**2*an_2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2 an_1**2*an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [1], [-1], [-13], [-67], [-307]])
x []
model: an_1**2*an_2                                                          ; p: 0.0013070395504463455  ; error: 111
Estimating model C0*an_2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + an_2 1.44834384493757*an_2*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + an_2 C0*an_2*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + an_2                                                     ; p: 0.0001767799079308721  ; error: 111
Estimating model C0*n + an_1*an_18






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*an_18 an_1*an_18 + 4.07336963986265*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*an_18 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*an_18 C0*n + an_1*an_18 17 [1, 2, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[18]]) Matrix([[2584]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_18 + 111*n                                                    ; p: 6.626889540365226e-07  ; error: 111
Estimating model C0*n + an_2*an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2*an_4 an_2*an_4 - 3.38302469052073*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2*an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2*an_4 C0*n + an_2*an_4 3 [1, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [5], [6], [7]]) Matrix([[3], [3], [5], [3]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*an_4 + 111*n                                                     ; p: 1.7427830546014797e-05 ; error: 111
Estimating model C0*an_1 + C1*an_2 + C2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2 + C2*n + n**2 1.56262061547632*an_1 + 3.61839448123135*an_2 + n**2 + 2.36423613755898*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2 + C2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2 + C2*n + n**2 C0*an_1 + C1*an_2 + C2*n + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 2], [1, 1, 3], [2, 1, 4], [3, 2, 5], [5, 3, 6], [8, 5, 7]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2 + n**2 + 111*n                                    ; p: 1.0115279622405302e-06 ; error: 111
Estimating model C0*n**3 + C1*n + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**3 + C1*n + an_1*an_2 an_1*an_2 + 1.60804358510192*n**3 + 4.5434551134315*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**3 + C1*n + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**3 + C1*n + an_1*an_2 C0*n**3 + C1*n + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8, 2], [27, 3], [64, 4], [125, 5], [216, 6], [343, 7]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*n**3 + 111*n                                          ; p: 2.809799895112584e-06  ; error: 111
Estimating model C0*an_1*n**2 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*n + n -4.95874108371112*an_1*n**2 - 2.74128807803748*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*n + n C0*an_1*n**2 + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 4], [3, 9], [4, 32], [5, 75], [6, 180], [7, 392]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*n                                                 ; p: 7.778374351147226e-05  ; error: 111
Estimating model an_1**2*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_3*n**2 an_1**2*an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_3*n**2 an_1**2*an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-61], [-220], [-1792], [-9395]])
x []
model: an_1**2*an_3*n**2                                                     ; p: 8.01486516783132e-06   ; error: 111
Estimating model C0*an_1*n + n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n**4 0.133805101810338*an_1*n + n**4 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n**4 C0*an_1*n + n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-15], [-79], [-253], [-620], [-1288], [-2388]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n**4                                                     ; p: 2.3149923664128657e-05 ; error: 111
Estimating model an_2*an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*an_4 an_2*an_4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*an_4 an_2*an_4 3 [3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [3], [5], [3]])
x []
model: an_2*an_4                                                             ; p: 0.00014523192121678998 ; error: 111
Estimating model an_2**3*an_6*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2**3*an_6*n an_2**3*an_6*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2**3*an_6*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2**3*an_6*n an_2**3*an_6*n 5 [1, 3, 7] 1 6
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 6
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0]]) Matrix([[8], [-862]])
x []
model: an_2**3*an_6*n                                                        ; p: 8.419262008910353e-09  ; error: 111
Estimating model C0*an_1*n + an_1**3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1**3*n an_1**3*n - 4.10165864013899*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1**3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1**3*n C0*an_1*n + an_1**3*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-29], [-130], [-742], [-3571]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*n + 111*an_1*n                                                ; p: 6.9578818805092585e-06 ; error: 111
Estimating model C0*an_1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + n 0.683905627288907*an_1*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + n C0*an_1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + n                                                        ; p: 0.0057874809160321635  ; error: 111
Estimating model C0*an_2*n + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + C1*n + n 0.656169246815236*an_2*n - 2.26359549332221*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + C1*n + n C0*an_2*n + C1*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 3], [4, 4], [5, 10], [6, 18], [7, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + 112*n                                                    ; p: 0.00010486717557254841 ; error: 111
Estimating model C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 -1.79289234968428*an_1**2*an_9 + 4.74027401532273*an_1 - 2.48061731332473*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 C0*an_1**2*an_9 + C1*an_1 + C2*n + an_1 8 [1, 2, 10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[34], [55], [89]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[21, 9, 0], [34, 10, 1156], [55, 11, 3025]]) Matrix([[13], [21], [34]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_9 + 112*an_1 + 111*n                                   ; p: 3.9306599993346483e-10 ; error: 111
Estimating model C0*an_1*an_2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + an_2 -4.77743096784286*an_1*an_2*n + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + an_2 C0*an_1*an_2*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [8], [30], [90], [280]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + an_2                                                ; p: 2.368310980295938e-05  ; error: 111
Estimating model C0*an_1**3*an_2*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*an_2*n**3 + n 1.91464422237747*an_1**3*an_2*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*an_2*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*an_2*n**3 + n C0*an_1**3*an_2*n**3 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [27], [512], [6750], [81000], [878080]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3*an_2*n**3 + n                                             ; p: 8.404962727452765e-08  ; error: 111
Estimating model C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 1.15147462696038*an_1*n**2 - 1.50662780322782*an_1 + 2.24120385524223*an_3*n + 3.29150881186522*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*n + an_1 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 9, 0], [2, 4, 32, 4], [3, 5, 75, 5], [5, 6, 180, 12], [8, 7, 392, 21]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n                         ; p: 5.566305504407362e-09  ; error: 111
Estimating model C0*an_4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4 + n 2.91933130945589*an_4 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4 + n C0*an_4 + n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_4 + n                                                          ; p: 0.0004307633587787359  ; error: 111
Estimating model C0*an_1 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n**2 an_1*n**2 + 3.68151141218052*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n**2 C0*an_1 + an_1*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_1                                                  ; p: 0.00038767286288699643 ; error: 111
Estimating model C0*n + an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2*n**3 an_2*n**3 - 0.821083318603265*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2*n**3 C0*n + an_2*n**3 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [-25], [-61], [-245], [-640], [-1702]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n**3 + 111*n                                                     ; p: 6.991145038169892e-05  ; error: 111
Estimating model C0*an_1**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + n 2.16554316116902*an_1**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + n C0*an_1**2 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + n                                                       ; p: 0.001938364314434982   ; error: 111
Estimating model C0*an_1**2*n + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + an_2*n**2 -3.13696835197748*an_1**2*n + an_2*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + an_2*n**2 C0*an_1**2*n + an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [16], [45], [150], [448]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_2*n**2                                             ; p: 3.13689492107123e-06   ; error: 111
Estimating model C0*an_2 + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + an_2*n**2 an_2*n**2 + 4.59612377935806*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + an_2*n**2 C0*an_2 + an_2*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n**2 + 111*an_2                                                  ; p: 3.535598158617442e-05  ; error: 111
Estimating model an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**2 an_3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**2 an_3*n**2 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-13], [-20], [-64], [-134]])
x []
model: an_3*n**2                                                             ; p: 0.0004465648854963054  ; error: 111
Estimating model C0*an_2*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**2 + n -2.47267156017275*an_2*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**2 + n C0*an_2*n**2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [9], [16], [50], [108], [245]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**2 + n                                                     ; p: 0.00017477862595424736 ; error: 111
Estimating model C0*an_1 + C1*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + n 2.04511154936517*an_1 + 3.44460967165178*an_3 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + n C0*an_1 + C1*an_3 + n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 1], [3, 1], [5, 2], [8, 3]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_3 + n                                               ; p: 0.00010768690635749815 ; error: 111
Estimating model an_1**2*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2**2*n**2 an_1**2*an_2**2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2**2*n**2 an_1**2*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-61], [-895], [-8092], [-78387]])
x []
model: an_1**2*an_2**2*n**2                                                  ; p: 2.1152090434710134e-06 ; error: 111
Estimating model C0*an_14*an_2 + an_1**2*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_14*an_2 + an_1**2*an_2 an_1**2*an_2 - 0.668696737508376*an_14*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_14*an_2 + an_1**2*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_14*an_2 + an_1**2*an_2 C0*an_14*an_2 + an_1**2*an_2 13 [2, 3, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[-7817239]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2 + 111*an_14*an_2                                         ; p: 6.055325596076297e-09  ; error: 111
Estimating model an_3*n**5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n**5 an_3*n**5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n**5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n**5 an_3*n**5 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1021], [-3120], [-15544], [-50408]])
x []
model: an_3*n**5                                                             ; p: 3.572519083970444e-06  ; error: 111
Estimating model C0*n**3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**3 + n 1.70061797985273*n**3 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**3 + n C0*n**3 + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [8], [27], [64], [125], [216], [343], [512]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**3 + n                                                          ; p: 0.0008640000000000001  ; error: 111
Estimating model C0*an_1*an_2*n + C1*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + C1*n**2 + an_1 -0.121251127164708*an_1*an_2*n + an_1 - 1.21438650262513*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + C1*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + C1*n**2 + an_1 C0*an_1*an_2*n + C1*n**2 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 0], [9, 3], [16, 8], [25, 30], [36, 90], [49, 280]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + an_1 + 111*n**2                                     ; p: 1.8821369526427377e-06 ; error: 111
Estimating model an_1**3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*n an_1**3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*n an_1**3*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-29], [-130], [-742], [-3571]])
x []
model: an_1**3*n                                                             ; p: 0.0004328027190628946  ; error: 111
Estimating model C0*n + an_1**3*an_2*an_22*n**6






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1**3*an_2*an_22*n**6 an_1**3*an_2*an_22*n**6 + 0.589159206313236*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1**3*an_2*an_22*n**6 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1**3*an_2*an_22*n**6 C0*n + an_1**3*an_2*an_22*n**6 21 [1, 2, 3, 23] 1 22
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 22
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0]]) Matrix([[17711]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[22]]) Matrix([[17711]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**3*an_2*an_22*n**6 + 111*n                                       ; p: 2.566400842205913e-13  ; error: 111
Estimating model C0*an_1*n + C1*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n**2 + an_1 1.66968478975079*an_1*n + an_1 - 4.57665457432342*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n**2 + an_1 C0*an_1*n + C1*n**2 + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [4, 2], [9, 3], [16, 8], [25, 15], [36, 30], [49, 56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_1 + 111*n**2                                          ; p: 4.652074354643957e-05  ; error: 111
Estimating model C0*an_1 + C1*an_3*n**2 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3*n**2 + C2*n + an_1 4.34891475302001*an_1 - 0.695563347921562*an_3*n**2 + 3.19286864977299*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3*n**2 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3*n**2 + C2*n + an_1 C0*an_1 + C1*an_3*n**2 + C2*n + an_1 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 0], [2, 4, 16], [3, 5, 25], [5, 6, 72], [8, 7, 147]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*an_3*n**2 + 111*n                                      ; p: 4.1549061030037555e-08 ; error: 111
Estimating model C0*an_1*n + C1*an_1 + C2*n + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + C2*n + an_3 2.1128637199654*an_1*n - 2.13888010193321*an_1 + an_3 + 1.4015802683764*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + C2*n + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + C2*n + an_3 C0*an_1*n + C1*an_1 + C2*n + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 3], [2, 4, 8], [3, 5, 15], [5, 6, 30], [8, 7, 56]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_1 + an_3 + 111*n                                  ; p: 1.7312108762515647e-06 ; error: 111
Estimating model an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4 an_4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4 an_4 3 [5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [4], [7], [11]])
x []
model: an_4                                                                  ; p: 0.0035896946564894657  ; error: 111
Estimating model C0*an_2*n**4 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**4 + C1*n + n 2.08796481064918*an_2*n**4 + 0.99590983635438*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**4 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**4 + C1*n + n C0*an_2*n**4 + C1*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 81], [4, 256], [5, 1250], [6, 3888], [7, 12005]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**4 + 112*n                                                 ; p: 8.389374045803875e-07  ; error: 111
Estimating model C0*an_2 + C1*n + an_1*an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*an_3*n**2 an_1*an_3*n**2 - 3.96203474071017*an_2 + 3.41239900672101*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*an_3*n**2 C0*an_2 + C1*n + an_1*an_3*n**2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[2], [-29], [-70], [-352], [-1163]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_3*n**2 + 111*an_2 + 111*n                                     ; p: 1.742719400595114e-07  ; error: 111
Estimating model an_1**3*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*an_2*n**2 an_1**3*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*an_2*n**2 an_1**3*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-125], [-1345], [-13492], [-125427]])
x []
model: an_1**3*an_2*n**2                                                     ; p: 3.5020678031053164e-06 ; error: 111
Estimating model C0*an_1 + an_1**2*an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1**2*an_3 an_1**2*an_3 - 3.46523900044234*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1**2*an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1**2*an_3 C0*an_1 + an_1**2*an_3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [5], [8]]) Matrix([[2], [-1], [-4], [-42], [-179]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_3 + 111*an_1                                               ; p: 1.610620805673426e-05  ; error: 111
Estimating model C0*an_4 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_4 + an_1*n**2 an_1*n**2 - 3.83500293520329*an_4 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_4 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_4 + an_1*n**2 C0*an_4 + an_1*n**2 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2]]) Matrix([[-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_4                                                  ; p: 1.1541827399341898e-05 ; error: 111
Estimating model C0*an_11*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_11*n**2 + n 1.87146773022218*an_11*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_11*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_11*n**2 + n C0*an_11*n**2 + n 10 [1, 12] 1 11
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 11
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[89]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[78]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_11*n**2 + n                                                    ; p: 1.6522626751145045e-06 ; error: 111
Estimating model C0*an_1**2 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*n + n 3.43794182864189*an_1**2 + 2.61269015938446*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*n + n C0*an_1**2 + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [4, 4], [9, 5], [25, 6], [64, 7]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + 112*n                                                   ; p: 0.00023260371773219785 ; error: 111
Estimating model C0*an_1*an_2*n**4 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n**4 + an_1 -4.87546432473242*an_1*an_2*n**4 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n**4 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n**4 + an_1 C0*an_1*an_2*n**4 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [81], [512], [3750], [19440], [96040]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n**4 + an_1                                             ; p: 6.273789842142459e-07  ; error: 111
Estimating model C0*an_1*an_2*n**2 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n**2 + n**2 0.650016422212819*an_1*an_2*n**2 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n**2 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n**2 + n**2 C0*an_1*an_2*n**2 + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [9], [32], [150], [540], [1960]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n**2 + n**2                                             ; p: 4.682999825187641e-06  ; error: 111
Estimating model an_1*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_3*n an_1*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_3*n an_1*an_3*n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-5], [-10], [-52], [-155]])
x []
model: an_1*an_3*n                                                           ; p: 0.0005982605908749898  ; error: 111
Estimating model an_4*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_4*n an_4*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_4*n an_4*n 3 [1, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [0], [2], [-1]])
x []
model: an_4*n                                                                ; p: 0.0007179389312978932  ; error: 111
Estimating model C0*an_1 + n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + n**4 3.05566155965454*an_1 + n**4 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + n**4 C0*an_1 + n**4 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[0], [-15], [-79], [-253], [-620], [-1288], [-2388]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n**4                                                       ; p: 0.00011574961832064328 ; error: 111
Estimating model C0*an_1**2*an_2 + an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2 + an_3*n 2.11656522148265*an_1**2*an_2 + an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2 + an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2 + an_3*n C0*an_1**2*an_2 + an_3*n 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [18], [75], [320]]) Matrix([[2], [-1], [0], [-4], [-8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2 + an_3*n                                             ; p: 9.727966119736914e-07  ; error: 111
Estimating model an_1**2*an_4*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_4*n**4 an_1**2*an_4*n**4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_4*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_4*n**4 an_1**2*an_4*n**4 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-5620], [-32392], [-307315]])
x []
model: an_1**2*an_4*n**4                                                     ; p: 1.0308349662010555e-07 ; error: 111
Estimating model C0*n**5 + C1*n**4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**5 + C1*n**4 + n 2.7331116336686*n**5 - 4.0519015693774*n**4 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**5 + C1*n**4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**5 + C1*n**4 + n C0*n**5 + C1*n**4 + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [32, 16], [243, 81], [1024, 256], [3125, 625], [7776, 1296], [16807, 2401], [32768, 4096]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**5 + 111*n**4 + n                                               ; p: 3.317760000000001e-08  ; error: 111
Estimating model C0*an_1*an_4*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_4*n**3 + an_1 -2.45256903555531*an_1*an_4*n**3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_4*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_4*n**3 + an_1 C0*an_1*an_4*n**3 + an_1 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [375], [1080], [5488]]) Matrix([[1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_4*n**3 + an_1                                             ; p: 3.0925048986031656e-07 ; error: 111
Estimating model C0*an_1*an_2*n**2 + C1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n**2 + C1*n + an_2 -1.39497947121646*an_1*an_2*n**2 + an_2 + 2.75576535379405*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n**2 + C1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n**2 + C1*n + an_2 C0*an_1*an_2*n**2 + C1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 9], [4, 32], [5, 150], [6, 540], [7, 1960]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n**2 + an_2 + 111*n                                     ; p: 6.820735623252302e-08  ; error: 111
Estimating model C0*an_1 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1**2 an_1**2 - 0.49756530731916*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1**2 C0*an_1 + an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*an_1                                                    ; p: 0.0012984081571886835  ; error: 111
Estimating model an_24






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_24 an_24 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_24 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_24 an_24 23 [25] 1 24
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 24
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_24
model: an_24                                                                 ; p: 0.00034351145049486674 ; error: 100000000
Estimating model C0*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + n -4.94712223480481*an_2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + n C0*an_2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + n                                                          ; p: 0.004369465648856183   ; error: 111
Estimating model C0*an_1*n + C1*an_3**2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_3**2*n + n**2 2.64771603080498*an_1*n - 4.63921057393598*an_3**2*n + n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_3**2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_3**2*n + n**2 C0*an_1*n + C1*an_3**2*n + n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [8, 4], [15, 5], [30, 24], [56, 63]]) Matrix([[-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_3**2*n + n**2                                     ; p: 1.0686486890441672e-08 ; error: 111
Estimating model C0*n + an_15






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_15 an_15 - 0.702786818014081*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_15 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_15 C0*n + an_15 14 [1, 16] 1 15
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 15
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[610]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[15]]) Matrix([[610]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_15 + 111*n                                                         ; p: 4.1222064107741216e-05 ; error: 111
Estimating model C0*an_1*n**2 + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + an_1*an_2*n an_1*an_2*n - 0.0583359170769726*an_1*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + an_1*an_2*n C0*an_1*n**2 + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [32], [75], [180], [392]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_1*n**2                                           ; p: 3.13689492107123e-06   ; error: 111
Estimating model C0*n**2 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + C1*n + an_1*n an_1*n + 4.75450203333323*n**2 - 2.91355655536619*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + C1*n + an_1*n C0*n**2 + C1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [4, 2], [9, 3], [16, 4], [25, 5], [36, 6], [49, 7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*n**2 + 111*n                                             ; p: 0.00013889954198477192 ; error: 111
Estimating model an_1**2*an_2*an_4*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_4*n**3 an_1**2*an_2*an_4*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_4*n**3 an_1**2*an_2*an_4*n**3 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-2245], [-16192], [-219507]])
x []
model: an_1**2*an_2*an_4*n**3                                                ; p: 2.0852768400256185e-08 ; error: 111
Estimating model C0*an_1 + C1*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + n**2 -2.31114457977909*an_1 + n**2 - 4.06811360220485*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + n**2 C0*an_1 + C1*n + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + n**2 + 111*n                                               ; p: 0.0007503226021795872  ; error: 111
Estimating model C0*an_2*an_4*n**2 + C1*n + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_4*n**2 + C1*n + an_1**2 an_1**2 + 1.29378585802197*an_2*an_4*n**2 - 3.01334250522429*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_4*n**2 + C1*n + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_4*n**2 + C1*n + an_1**2 C0*an_2*an_4*n**2 + C1*n + an_1**2 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 0], [5, 50], [6, 108], [7, 490]]) Matrix([[-1], [-4], [-17], [-51]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*an_2*an_4*n**2 + 111*n                                  ; p: 7.506996624092227e-09  ; error: 111
Estimating model an_19*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_19*n an_19*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_19*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_19*n an_19*n 18 [1, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_19*n
model: an_19*n                                                               ; p: 6.870229939217204e-05  ; error: 100000000
Estimating model C0*an_1*n + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_1 1.56750700462588*an_1*n + an_1 + 0.0642241832589607*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_1 C0*an_1*n + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 2], [3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_1 + 111*n                                             ; p: 2.7912446127863743e-05 ; error: 111
Estimating model an_1*an_2*an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_4 an_1*an_2*an_4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_4 an_1*an_2*an_4 3 [2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-1], [-7], [-67]])
x []
model: an_1*an_2*an_4                                                        ; p: 1.9456642880575433e-05 ; error: 111
Estimating model C0*an_1 + C1*n + an_15






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_15 0.871491396723314*an_1 + an_15 + 4.51061234067913*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_15 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_15 C0*an_1 + C1*n + an_15 14 [1, 2, 16] 1 15
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 15
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[610], [987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[377, 15], [610, 16]]) Matrix([[610], [986]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_15 + 111*n                                              ; p: 3.9761984890501115e-07 ; error: 111
Estimating model C0*an_2 + C1*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**2 + n 0.598880111234263*an_2 - 4.81658699583192*n**2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**2 + n C0*an_2 + C1*n**2 + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 4], [1, 9], [1, 16], [2, 25], [3, 36], [5, 49]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + 111*n**2 + n                                               ; p: 0.00010486717557254839 ; error: 111
Estimating model C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n -1.59181754082775*an_1**2*an_2 - 1.0664646235058*an_1*n - 3.99998185104211*an_1 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n C0*an_1**2*an_2 + C1*an_1*n + C2*an_1 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 2], [1, 1, 3], [2, 4, 8], [3, 18, 15], [5, 75, 30], [8, 320, 56]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2 + 111*an_1*n + 111*an_1 + n                          ; p: 1.013407528856135e-07  ; error: 111
Estimating model C0*an_1**3*n + an_1**2*an_13*an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3*n + an_1**2*an_13*an_2*n**3 3.39285159289763*an_1**3*n + an_1**2*an_13*an_2*n**3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3*n + an_1**2*an_13*an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3*n + an_1**2*an_13*an_2*n**3 C0*an_1**3*n + an_1**2*an_13*an_2*n**3 12 [1, 2, 3, 14] 1 13
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 13
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[233]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[38817792]]) Matrix([[233]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3*n + an_1**2*an_13*an_2*n**3                               ; p: 5.758732745110909e-13  ; error: 111
Estimating model an_1*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n**2 an_1*an_2*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n**2 an_1*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-29], [-145], [-532], [-1947]])
x []
model: an_1*an_2*n**2                                                        ; p: 0.0003902499854323033  ; error: 111
Estimating model C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n -1.11779118573117*an_1*n + 1.48728885394458*an_1 - 0.134902932081427*an_2 + 4.11558261684663*an_3*n**2 - 2.59962919983344*an_3 + n (C0, C1, C2, C3, C4)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n C0*an_1*n + C1*an_1 + C2*an_2 + C3*an_3*n**2 + C4*an_3 + n 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1, 0, 3, 0], [2, 1, 1, 8, 16], [3, 2, 1, 15, 25], [5, 3, 2, 30, 72], [8, 5, 3, 56, 147]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_1 + 111*an_2 + 111*an_3*n**2 + 111*an_3 + n       ; p: 1.251120405995209e-11  ; error: 111
--->>>--->>>--->>>--->>> model.params [111, 111, 111, 111, 111]
Estimating model C0*an_2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + an_1 an_1 + 3.45519163442991*an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + an_1 C0*an_2*n + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*an_2*n                                                     ; p: 0.000585374978148455   ; error: 111
Estimating model C0*an_1*an_2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + an_1*n 3.96094204226357*an_1*an_2 + an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + an_1*n C0*an_1*an_2 + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_1*n                                                ; p: 7.842237302678073e-05  ; error: 111
Estimating model C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n 1.13748812741692*an_1*an_2*n**2 + an_1*n + 0.174726460633733*an_1 - 1.28573868138618*an_2*an_3 - 1.59253901309623*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n C0*an_1*an_2*n**2 + C1*an_1 + C2*an_2*an_3 + C3*n + an_1*n 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3, 0, 9], [2, 4, 1, 32], [3, 5, 2, 150], [5, 6, 6, 540], [8, 7, 15, 1960]]) Matrix([[-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n**2 + an_1*n + 111*an_1 + 111*an_2*an_3 + 111*n        ; p: 9.11121272763185e-12   ; error: 111
Estimating model C0*an_1*an_2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + an_1 4.63342764364848*an_1*an_2 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + an_1 C0*an_1*an_2 + an_1 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_1                                                  ; p: 0.0003921118651339037  ; error: 111
Estimating model C0*an_7 + C1*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_7 + C1*n**2 + n -0.233219189805468*an_7 + 4.06876295965483*n**2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_7 + C1*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_7 + C1*n**2 + n C0*an_7 + C1*n**2 + n 6 [1, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 49], [1, 64]]) Matrix([[6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_7 + 111*n**2 + n                                               ; p: 1.241736183206178e-06  ; error: 111
Estimating model an_1**2*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_3*n an_1**2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_3*n an_1**2*an_3*n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-13], [-40], [-292], [-1331]])
x []
model: an_1**2*an_3*n                                                        ; p: 4.007432583915659e-05  ; error: 111
Estimating model C0*an_1*an_3*n + an_4*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_3*n + an_4*n**3 -2.26298941143127*an_1*an_3*n + an_4*n**3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_3*n + an_4*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_3*n + an_4*n**3 C0*an_1*an_3*n + an_4*n**3 3 [1, 2, 4, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [15], [60], [168]]) Matrix([[3], [-120], [-208], [-673]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_3*n + an_4*n**3                                           ; p: 5.72686092333915e-09   ; error: 111
Estimating model C0*an_1 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + n 0.950433352707293*an_1 - 0.197158955978419*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + n C0*an_1 + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 112*n                                                      ; p: 0.0038371475609124926  ; error: 111
Estimating model C0*an_3 + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + an_2*n an_2*n - 2.6186706038438*an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + an_2*n C0*an_3 + an_2*n 2 [1, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n + 111*an_3                                                     ; p: 5.4201386865597254e-05 ; error: 111
Estimating model C0*an_1**2*an_3 + C1*n + an_1*an_14






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_3 + C1*n + an_1*an_14 0.321159647374702*an_1**2*an_3 + an_1*an_14 - 1.66036003975007*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_3 + C1*n + an_1*an_14 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_3 + C1*n + an_1*an_14 C0*an_1**2*an_3 + C1*n + an_1*an_14 13 [1, 2, 4, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377], [610]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[14, 4831721], [15, 20466576]]) Matrix([[377], [233]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_3 + an_1*an_14 + 111*n                                 ; p: 7.377300826333937e-10  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_1 + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1 + an_1*an_2*n an_1*an_2*n + 2.61373051676764*an_1*an_2 + 4.13352560271488*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1 + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1 + an_1*an_2*n C0*an_1*an_2 + C1*an_1 + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 1], [2, 2], [3, 6], [5, 15], [8, 40]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_1*an_2 + 111*an_1                                ; p: 2.550360827605654e-07  ; error: 111
Estimating model C0*an_2*n**2 + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**2 + an_1*an_2*n an_1*an_2*n + 1.33091429097906*an_2*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**2 + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**2 + an_1*an_2*n C0*an_2*n**2 + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [9], [16], [50], [108], [245]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_2*n**2                                           ; p: 9.473243921183752e-07  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_1 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1 + an_1*n**2 -2.38793008861192*an_1*an_2 + an_1*n**2 - 3.24640884889865*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1 + an_1*n**2 C0*an_1*an_2 + C1*an_1 + an_1*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 1], [2, 2], [3, 6], [5, 15], [8, 40]]) Matrix([[-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_1*n**2 + 111*an_1                                  ; p: 1.2607444091179139e-06 ; error: 111
Estimating model C0*an_1**2 + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + an_1**2 -2.57651838090556*an_1**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + an_1**2 C0*an_1**2 + an_1**2 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [4], [9], [25], [64]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1**2                                                           ; p: 0.0001739470470127314  ; error: 111
Estimating model C0*an_1*an_2*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + an_2*n -3.75004502650811*an_1*an_2*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + an_2*n C0*an_1*an_2*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [8], [30], [90], [280]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + an_2*n                                              ; p: 4.736621960591877e-06  ; error: 111
Estimating model C0*an_11*n**2 + C1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_11*n**2 + C1*n + an_2 -2.49156850304515*an_11*n**2 + an_2 - 4.81679048930495*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_11*n**2 + C1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_11*n**2 + C1*n + an_2 C0*an_11*n**2 + C1*n + an_2 10 [1, 3, 12] 1 11
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 11
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[89], [144]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[11, 0], [12, 144]]) Matrix([[55], [89]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_11*n**2 + an_2 + 111*n                                         ; p: 5.775604001440042e-10  ; error: 111
Estimating model C0*an_1**2*n + C1*n**2 + C2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*n**2 + C2*n + an_2 -3.51083766452663*an_1**2*n + an_2 - 3.23835969126093*n**2 + 1.41727608918176*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*n**2 + C2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*n**2 + C2*n + an_2 C0*an_1**2*n + C1*n**2 + C2*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 2, 2], [9, 3, 3], [16, 4, 16], [25, 5, 45], [36, 6, 150], [49, 7, 448]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + an_2 + 111*n**2 + 111*n                               ; p: 2.2585643431712852e-07 ; error: 111
Estimating model C0*an_22 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_22 + an_2 an_2 - 2.93773446185808*an_22 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_22 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_22 + an_2 C0*an_22 + an_2 21 [3, 23] 1 22
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 22
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[22, 10946, 6765, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0]]) Matrix([[17711]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[10946]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2 + 111*an_22                                                      ; p: 8.338674932926214e-06  ; error: 111
Estimating model an_1*an_10*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_10*n**2 an_1*an_10*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_10*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_10*n**2 an_1*an_10*n**2 9 [1, 2, 11] 1 10
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 10
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1*an_10*n**2
model: an_1*an_10*n**2                                                       ; p: 1.85348319384121e-06   ; error: 100000000
Estimating model C0*an_1*n**3 + C1*an_1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + C1*an_1*n + an_1*n -1.98421343559621*an_1*n**3 + 1.94574614522309*an_1*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + C1*an_1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + C1*an_1*n + an_1*n C0*an_1*n**3 + C1*an_1*n + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [8, 2], [27, 3], [128, 8], [375, 15], [1080, 30], [2744, 56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**3 + 112*an_1*n                                            ; p: 2.4929436618022726e-07 ; error: 111
Estimating model C0*an_1*n + C1*an_2 + C2*n**3 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*n**3 + n**2 -3.70591174632871*an_1*n + 4.16405839644025*an_2 - 4.35513244750352*n**3 + n**2 (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*n**3 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*n**3 + n**2 C0*an_1*n + C1*an_2 + C2*n**3 + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 8, 2], [1, 27, 3], [1, 64, 8], [2, 125, 15], [3, 216, 30], [5, 343, 56]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_2 + 111*n**3 + n**2                               ; p: 6.743519748270201e-08  ; error: 111
Estimating model C0*an_1 + C1*n**2 + an_16






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + an_16 2.76806273065146*an_1 + an_16 + 2.58132347143337*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + an_16 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + an_16 C0*an_1 + C1*n**2 + an_16 15 [1, 2, 17] 1 16
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 16
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[987], [1597]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 256], [987, 289]]) Matrix([[987], [1596]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_16 + 111*n**2                                           ; p: 6.626919826077551e-07  ; error: 111
Estimating model C0*an_1 + C1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_2 4.55733896773386*an_1 + an_2 - 3.25137434646814*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_2 C0*an_1 + C1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 8.42939968533775e-05   ; error: 0
Estimating model C0*n**2 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + C1*n + n 0.736606889367923*n**2 - 2.58588552284222*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + C1*n + n C0*n**2 + C1*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [4, 2], [9, 3], [16, 4], [25, 5], [36, 6], [49, 7], [64, 8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**2 + 112*n                                                      ; p: 0.0005184              ; error: 111
Estimating model C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 an_1**2*an_2*an_3*n**3 + 0.244852213146274*an_1*an_2 + 3.46385480939959*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 C0*an_1*an_2 + C1*an_1 + an_1**2*an_2*an_3*n**3 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [2, 2], [3, 6], [5, 15], [8, 40]]) Matrix([[2], [-253], [-2245], [-32392], [-329267]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2*an_3*n**3 + 111*an_1*an_2 + 111*an_1                     ; p: 1.6953115285197628e-11 ; error: 111
Estimating model C0*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_2*n an_2*n + 0.0309832141076138*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_2*n C0*n + an_2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2*n + 111*n                                                        ; p: 0.001747786259542473   ; error: 111
Estimating model C0*n**4 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**4 + n -3.33761903354664*n**4 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**4 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**4 + n C0*n**4 + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [16], [81], [256], [625], [1296], [2401], [4096]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**4 + n                                                          ; p: 0.00017280000000000003 ; error: 111
Estimating model C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 1.07195994253479*an_1**2*an_2*n - 2.44443205499208*an_1*n + an_2 + 1.24836156236528*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 C0*an_1**2*an_2*n + C1*an_1*n + C2*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 2, 0], [3, 3, 3], [4, 8, 16], [5, 15, 90], [6, 30, 450], [7, 56, 2240]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2*n + 111*an_1*n + an_2 + 111*n                        ; p: 6.120865986253569e-09  ; error: 111
Estimating model an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_3*n an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_3*n an_3*n 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-1], [0], [-4], [-8]])
x []
model: an_3*n                                                                ; p: 0.0022328244274815267  ; error: 111
Estimating model an_1**4*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**4*n an_1**4*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**4*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**4*n an_1**4*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-61], [-400], [-3742], [-28659]])
x []
model: an_1**4*n                                                             ; p: 5.798234900424381e-05  ; error: 111
Estimating model C0*an_1*n + C1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + an_2 -3.53667816614799*an_1*n + an_2 - 0.358007549153398*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + an_2 C0*an_1*n + C1*n + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 2], [3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_2 + 111*n                                             ; p: 7.02449973778146e-05   ; error: 111
Estimating model an_1**3*n**5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*n**5 an_1**3*n**5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*n**5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*n**5 an_1**3*n**5 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-31], [-241], [-8189], [-84370], [-971992], [-8605171]])
x []
model: an_1**3*n**5                                                          ; p: 6.924843505006314e-07  ; error: 111
Estimating model C0*an_1 + C1*an_5*n + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_5*n + C2*n + an_1 2.53962021675418*an_1 + 2.65352313746023*an_5*n - 1.92877491742274*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_5*n + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_5*n + C2*n + an_1 C0*an_1 + C1*an_5*n + C2*n + an_1 4 [1, 2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 5, 0], [5, 6, 6], [8, 7, 7]]) Matrix([[2], [3], [5]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*an_5*n + 111*n                                         ; p: 2.0428288339767133e-07 ; error: 111
Estimating model C0*an_1 + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*n**3 an_1*n**3 + 1.25055115426106*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*n**3 C0*an_1 + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**3 + 111*an_1                                                  ; p: 7.753457257739928e-05  ; error: 111
Estimating model C0*an_1**2 + C1*an_1*n + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*an_1*n + C2*n + an_1 -0.839718745895811*an_1**2 + 2.28313085759652*an_1*n + an_1 - 2.4399989034481*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*an_1*n + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*an_1*n + C2*n + an_1 C0*an_1**2 + C1*an_1*n + C2*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1, 0], [1, 2, 2], [1, 3, 3], [4, 4, 8], [9, 5, 15], [25, 6, 30], [64, 7, 56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + 111*an_1*n + an_1 + 111*n                               ; p: 4.02686085994533e-08   ; error: 111
Estimating model C0*an_1*an_3*n**2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_3*n**2 + n 0.52170381061956*an_1*an_3*n**2 + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_3*n**2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_3*n**2 + n C0*an_1*an_3*n**2 + n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [32], [75], [360], [1176]]) Matrix([[-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_3*n**2 + n                                                ; p: 7.1791270904998776e-06 ; error: 111
Estimating model C0*an_2 + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + an_1*n**2 an_1*n**2 + 3.69487358198363*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + an_1*n**2 C0*an_2 + an_1*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_2                                                  ; p: 0.000117074995629691   ; error: 111
Estimating model C0*an_1**3 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**3 + C1*n + n -3.93538906466631*an_1**3 + 2.05531124516689*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**3 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**3 + C1*n + n C0*an_1**3 + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [8, 4], [27, 5], [125, 6], [512, 7]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**3 + 112*n                                                   ; p: 3.1161795772528414e-05 ; error: 111
Estimating model an_1**3*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*an_3*n an_1**3*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*an_3*n an_1**3*an_3*n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-29], [-130], [-1492], [-10739]])
x []
model: an_1**3*an_3*n                                                        ; p: 5.368736018911422e-06  ; error: 111
Estimating model an_21






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_21 an_21 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_21 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_21 an_21 20 [22] 1 21
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 21
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_21
model: an_21                                                                 ; p: 0.0003435114545738056  ; error: 100000000
Estimating model an_1**2*an_2*an_7






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_7 an_1**2*an_2*an_7 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_7 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_7 an_1**2*an_2*an_7 6 [2, 3, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[13]])
x []
model: an_1**2*an_2*an_7                                                     ; p: 3.1307837628679856e-07 ; error: 111
Estimating model C0*an_2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + n**2 4.43098364055675*an_2*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + n**2 C0*an_2*n + n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [4], [10], [18], [35]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n + n**2                                                     ; p: 0.0003495572519084946  ; error: 111
Estimating model C0*an_1*n + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_1**2*n an_1**2*n - 1.99403752819478*an_1*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_1**2*n C0*an_1*n + an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*an_1*n                                                ; p: 5.193632628754735e-05  ; error: 111
Estimating model C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 1.70578023979234*an_2*an_4*n + an_2*n**4 + 1.81886708552808*n**2 + 2.73427738472863*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 C0*an_2*an_4*n + C1*n**2 + C2*n + an_2*n**4 3 [1, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[16, 4, 0], [25, 5, 10], [36, 6, 18], [49, 7, 70]]) Matrix([[-253], [-1245], [-3880], [-11992]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*an_4*n + an_2*n**4 + 111*n**2 + 111*n                        ; p: 3.249079761275656e-12  ; error: 111
Estimating model C0*an_2 + n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + n**4 2.17516727758826*an_2 + n**4 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + n**4 C0*an_2 + n**4 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[-15], [-79], [-253], [-620], [-1288], [-2388]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + n**4                                                       ; p: 3.495572519084947e-05  ; error: 111
Estimating model C0*an_1*an_2*n + C1*an_17*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + C1*an_17*n + n -4.60228619278437*an_1*an_2*n - 0.0488595738957465*an_17*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + C1*an_17*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + C1*an_17*n + n C0*an_1*an_2*n + C1*an_17*n + n 16 [1, 2, 3, 18] 1 17
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 17
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1597], [2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 10235190], [18, 28372302]]) Matrix([[1580], [2566]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + 111*an_17*n + n                                     ; p: 5.362221619191048e-09  ; error: 111
Estimating model C0*an_1 + C1*n + an_1**4*an_5*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1**4*an_5*n**3 an_1**4*an_5*n**3 + 2.95119683970354*an_1 - 2.95306602396692*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1**4*an_5*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1**4*an_5*n**3 C0*an_1 + C1*n + an_1**4*an_5*n**3 4 [1, 2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 5], [5, 6], [8, 7]]) Matrix([[5], [-134992], [-1404915]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**4*an_5*n**3 + 111*an_1 + 111*n                                  ; p: 3.2745995330563104e-11 ; error: 111
Estimating model C0*an_2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + an_1*n an_1*n + 1.05531566245547*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + an_1*n C0*an_2 + an_1*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5]]) Matrix([[-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_2                                                     ; p: 0.00117074995629691    ; error: 111
Estimating model C0*an_2 + C1*n + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1*n**2 an_1*n**2 - 0.198242444884307*an_2 + 0.375452239532209*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1*n**2 C0*an_2 + C1*n + an_1*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_2 + 111*n                                          ; p: 1.4048999475562919e-05 ; error: 111
Estimating model C0*an_1*n + an_13






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_13 -3.09791576926758*an_1*n + an_13 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_13 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_13 C0*an_1*n + an_13 12 [1, 2, 14] 1 13
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 13
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[233]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1872]]) Matrix([[233]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_13                                                    ; p: 5.5234326456661136e-06 ; error: 111
Estimating model C0*an_1 + C1*an_3 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + C2*n + an_1 3.42051643483608*an_1 - 0.38874627360358*an_3 + 1.16374532239735*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + C2*n + an_1 C0*an_1 + C1*an_3 + C2*n + an_1 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 3], [2, 1, 4], [3, 1, 5], [5, 2, 6], [8, 3, 7]]) Matrix([[1], [1], [2], [3], [5]])
x [Matrix([
[ 1],
[-1],
[ 0]])]
{'x': [1, -1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: 2*an_1 - an_3                                                         ; p: 8.656054381257823e-06  ; error: 0
Estimating model C0*an_1*n**2 + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + an_2*n**2 -4.46280176543664*an_1*n**2 + an_2*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + an_2*n**2 C0*an_1*n**2 + an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4], [9], [32], [75], [180], [392]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + an_2*n**2                                             ; p: 4.68299982518764e-06   ; error: 111
Estimating model C0*an_1**2*n**2 + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + an_3 -2.34553214905973*an_1**2*n**2 + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + an_3 C0*an_1**2*n**2 + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[9], [64], [225], [900], [3136]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**2 + an_3                                               ; p: 4.8089191006987895e-06 ; error: 111
Estimating model C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 1.53415350264769*an_1**2*n + 4.31956998181497*an_1*n**3 - 3.02991299439295*an_1*n + 3.00873190465973*an_1 - 4.25579997397537*an_2 (C0, C1, C2, C3, C4)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 C0*an_1**2*n + C1*an_1*n**3 + C2*an_1*n + C3*an_1 + C4*an_2 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 2, 8, 2], [1, 1, 3, 27, 3], [2, 1, 16, 128, 8], [3, 2, 45, 375, 15], [5, 3, 150, 1080, 30], [8, 5, 448, 2744, 56]]) Matrix([[0], [1], [1], [2], [3], [5]])
x [Matrix([
[0],
[1],
[0],
[0],
[0]])]
{'x': [0, 1, 0, 0, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.Zero'>
model: an_1*n**3 + an_1                                                      ; p: 5.2382746397719266e-12 ; error: 0
--->>>--->>>--->>>--->>> model.params [0, 1, 0, 0, 0]
Estimating model an_22






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_22 an_22 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_22 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_22 an_22 21 [23] 1 22
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 22
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_22
model: an_22                                                                 ; p: 0.0003435114516393172  ; error: 100000000
Estimating model C0*n + an_1**2*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1**2*an_2*n an_1**2*an_2*n - 1.49975264670806*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1**2*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1**2*an_2*n C0*n + an_1**2*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-13], [-85], [-442], [-2227]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*an_2*n + 111*n                                                ; p: 1.568447460535615e-05  ; error: 111
Estimating model C0*an_1*n + C1*an_1 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + C2*n + an_1 0.35490009571873*an_1*n + 2.4384862128625*an_1 + 4.74631344103763*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + C2*n + an_1 C0*an_1*n + C1*an_1 + C2*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1, 0], [1, 2, 2], [1, 3, 3], [2, 4, 8], [3, 5, 15], [5, 6, 30], [8, 7, 56]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 112*an_1 + 111*n                                         ; p: 2.243649295622046e-06  ; error: 111
Estimating model C0*an_1*an_4*n + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_4*n + an_1**2 an_1**2 + 3.39110853417192*an_1*an_4*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_4*n + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_4*n + an_1**2 C0*an_1*an_4*n + an_1**2 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [15], [30], [112]]) Matrix([[-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*an_1*an_4*n                                             ; p: 1.0357530719561228e-06 ; error: 111
Estimating model C0*an_1**2*an_4 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_4 + C1*n + an_1*n -2.26894269324677*an_1**2*an_4 + an_1*n + 2.91699407844984*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_4 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_4 + C1*n + an_1*n C0*an_1**2*an_4 + C1*n + an_1*n 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 0], [5, 9], [6, 25], [7, 128]]) Matrix([[-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_4 + an_1*n + 111*n                                     ; p: 1.2429036863473475e-07 ; error: 111
Estimating model C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 -2.47160418266856*an_1*an_2*an_3 + an_1 + 4.78405407567035*an_2*n**2 - 2.70681494682794*n**3 + 1.90288929409023*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 C0*an_1*an_2*an_3 + C1*an_2*n**2 + C2*n**3 + C3*n + an_1 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[27, 3, 9, 0], [64, 4, 16, 2], [125, 5, 50, 6], [216, 6, 108, 30], [343, 7, 245, 120]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*an_3 + an_1 + 111*an_2*n**2 + 111*n**3 + 111*n          ; p: 2.7203848827793434e-12 ; error: 111
Estimating model C0*an_1 + C1*an_14 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_14 + C2*n + an_1 5.68236061713233*an_1 + 4.86434061348514*an_14 - 2.58276289803311*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_14 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_14 + C2*n + an_1 C0*an_1 + C1*an_14 + C2*n + an_1 13 [1, 2, 15] 1 14
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 14
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[14, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[377], [610], [987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[233, 0, 14], [377, 1, 15], [610, 1, 16]]) Matrix([[144], [233], [377]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*an_14 + 111*n                                          ; p: 2.663549969349563e-07  ; error: 111
Estimating model C0*an_1*an_2*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n**2 + an_1 -0.201526097766931*an_1*an_2*n**2 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n**2 + an_1 C0*an_1*an_2*n**2 + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [9], [32], [150], [540], [1960]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n**2 + an_1                                             ; p: 1.5684474605356152e-05 ; error: 111
Estimating model an_1*an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n**3 an_1*an_2*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n**3 an_1*an_2*n**3 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-25], [-125], [-745], [-3232], [-13707]])
x []
model: an_1*an_2*n**3                                                        ; p: 3.9024998543230345e-05 ; error: 111
Estimating model C0*an_1 + C1*n**2 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + n**2 -2.46599062821411*an_1 - 0.541624654933892*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + n**2 C0*an_1 + C1*n**2 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 4], [1, 9], [2, 16], [3, 25], [5, 36], [8, 49]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 112*n**2                                                   ; p: 6.944977099238596e-05  ; error: 111
Estimating model C0*n + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1**2*n an_1**2*n + 4.90345264325636*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1**2*n C0*n + an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*n                                                     ; p: 0.00038767286288699643 ; error: 111
Estimating model C0*n**2 + C1*n + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + C1*n + an_2 an_2 + 2.03425700914706*n**2 - 1.0215397575794*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + C1*n + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + C1*n + an_2 C0*n**2 + C1*n + an_2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 2], [9, 3], [16, 4], [25, 5], [36, 6], [49, 7]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_2 + 111*n**2 + 111*n                                               ; p: 0.00010486717557254839 ; error: 111
Estimating model C0*an_1*an_12 + an_1*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_12 + an_1*an_3*n -2.18140041239807*an_1*an_12 + an_1*an_3*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_12 + an_1*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_12 + an_1*an_3*n C0*an_1*an_12 + an_1*an_3*n 11 [1, 2, 4, 13] 1 12
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 12
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[144]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[-36168]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_12 + an_1*an_3*n                                          ; p: 9.183016603569755e-09  ; error: 111
Estimating model C0*an_1 + C1*an_8*n + C2*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_8*n + C2*n + an_2*n 4.72349211894235*an_1 + an_2*n + 1.92077602637276*an_8*n + 4.45897121941411*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_8*n + C2*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_8*n + C2*n + an_2*n C0*an_1 + C1*an_8*n + C2*n + an_2*n 7 [1, 2, 3, 9] 1 8
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 8
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[21], [34], [55]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[13, 8, 0], [21, 9, 9], [34, 10, 10]]) Matrix([[-43], [-83], [-155]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_2*n + 111*an_8*n + 111*n                                ; p: 3.4635985054397364e-09 ; error: 111
Estimating model C0*n + an_1**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1**2 an_1**2 + 4.56730910663824*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1**2 C0*n + an_1**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7]]) Matrix([[1], [0], [1], [-1], [-4], [-17], [-51]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2 + 111*n                                                       ; p: 0.001938364314434982   ; error: 111
Estimating model an_18






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_18 an_18 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_18 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_18 an_18 17 [19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_18
model: an_18                                                                 ; p: 0.00034351160564561576 ; error: 100000000
Estimating model C0*an_1*n + an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + an_2*n -1.37661256553782*an_1*n + an_2*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + an_2*n C0*an_1*n + an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [8], [15], [30], [56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + an_2*n                                                   ; p: 0.000351224986889073   ; error: 111
Estimating model C0*an_1*n + C1*an_1 + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_1**2*n an_1**2*n + 0.0284782316441767*an_1*n - 0.281873392487161*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_1**2*n C0*an_1*n + C1*an_1 + an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*an_1*n + 111*an_1                                     ; p: 4.174729128305554e-06  ; error: 111
Estimating model C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 -2.13536725154088*an_1*n**2 + 3.74889478167281*an_1 + 3.00875137344403*an_3*n - 3.17762262043619*an_9 - 4.13071515363983*n (C0, C1, C2, C3, C4)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 C0*an_1*n**2 + C1*an_1 + C2*an_3*n + C3*an_9 + C4*n + an_1 8 [1, 2, 4, 10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[34], [55], [89], [144], [233]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[21, 0, 9, 1701, 72], [34, 1, 10, 3400, 130], [55, 1, 11, 6655, 231], [89, 2, 12, 12816, 408], [144, 3, 13, 24336, 715]]) Matrix([[13], [21], [34], [55], [89]])
x []
{'x': [111, 111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*an_9 + 111*n              ; p: 1.3039986322575237e-12 ; error: 111
--->>>--->>>--->>>--->>> model.params [111, 111, 111, 111, 111]
Estimating model C0*an_3 + C1*n + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + C1*n + an_1*n an_1*n - 4.54400865174787*an_3 + 4.80532347383092*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + C1*n + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + C1*n + an_1*n C0*an_3 + C1*n + an_1*n 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 3], [1, 4], [1, 5], [2, 6], [3, 7]]) Matrix([[-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*an_3 + 111*n                                             ; p: 2.1537381271499633e-05 ; error: 111
Estimating model C0*an_1**2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*n + an_1 -4.58479226436862*an_1**2 + an_1 + 1.89032389104839*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*n + an_1 C0*an_1**2 + C1*n + an_1 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [4, 4], [9, 5], [25, 6], [64, 7]]) Matrix([[1], [0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + an_1 + 111*n                                            ; p: 0.00015580897886264205 ; error: 111
Estimating model C0*an_1*n + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*n + n 4.25870391007791*an_1*n - 3.23650544286906*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*n + n C0*an_1*n + C1*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 2], [3, 3], [4, 8], [5, 15], [6, 30], [7, 56]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 112*n                                                    ; p: 0.00034724885496192985 ; error: 111
Estimating model C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 -3.19899829305789*an_1**2*an_2*n + 4.40853013625085*an_1**2*an_5*n**3 + an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 C0*an_1**2*an_2*n + C1*an_1**2*an_5*n**3 + an_1 4 [1, 2, 3, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[90, 0], [450, 5400], [2240, 21952]]) Matrix([[2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2*n + 111*an_1**2*an_5*n**3 + an_1                     ; p: 1.324837979023153e-12  ; error: 111
Estimating model an_1**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**4 an_1**4 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**4 an_1**4 0 [2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [0], [1], [-13], [-76], [-617], [-4083]])
x []
model: an_1**4                                                               ; p: 0.000289911745021219   ; error: 111
Estimating model C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n 0.256463158528083*an_1*n + 3.7007918900394*an_2 - 0.299592178769361*an_3 - 3.86411908237259*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n C0*an_1*n + C1*an_2 + C2*an_3 + C3*n + n 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 3, 3], [1, 1, 4, 8], [2, 1, 5, 15], [3, 2, 6, 30], [5, 3, 7, 56]]) Matrix([[-1], [-1], [0], [2], [6]])
x [Matrix([
[ 2],
[ 1],
[-1],
[ 0]])]
{'x': [2, 1, -1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.Integer'>
model: 2*an_1*n + an_2 - an_3 + n                                            ; p: 6.273789842142408e-08  ; error: 0
Estimating model C0*an_1*an_2 + C1*an_1 + C2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1 + C2*n + n**2 4.33316924798572*an_1*an_2 - 0.325637754205923*an_1 + n**2 + 4.44223763515448*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1 + C2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1 + C2*n + n**2 C0*an_1*an_2 + C1*an_1 + C2*n + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2, 0], [1, 3, 1], [2, 4, 2], [3, 5, 6], [5, 6, 15], [8, 7, 40]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + 111*an_1 + n**2 + 111*n                               ; p: 1.3551386059027712e-07 ; error: 111
Estimating model C0*an_1**2 + C1*an_1 + an_3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*an_1 + an_3*n**2 -3.21721158583467*an_1**2 - 0.161897504098929*an_1 + an_3*n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*an_1 + an_3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*an_1 + an_3*n**2 C0*an_1**2 + C1*an_1 + an_3*n**2 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [4, 2], [9, 3], [25, 5], [64, 8]]) Matrix([[2], [-13], [-20], [-64], [-134]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + 111*an_1 + an_3*n**2                                    ; p: 3.8654899336162227e-07 ; error: 111
Estimating model C0*an_3**2*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3**2*n + n**2 -4.86928141853267*an_3**2*n + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3**2*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3**2*n + n**2 C0*an_3**2*n + n**2 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [5], [24], [63]]) Matrix([[-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_3**2*n + n**2                                                  ; p: 6.647339898610945e-07  ; error: 111
Estimating model C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 -3.85797088650511*an_1**2 + an_1*an_2**2*n**2 + 2.73086394417175*an_1*n + 2.81342716654817*an_2 - 1.11763679699376*n**3 (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 C0*an_1**2 + C1*an_1*n + C2*an_2 + C3*n**3 + an_1*an_2**2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 8, 2], [1, 1, 27, 3], [4, 1, 64, 8], [9, 2, 125, 15], [25, 3, 216, 30], [64, 5, 343, 56]]) Matrix([[1], [-7], [-29], [-295], [-1612], [-9787]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + an_1*an_2**2*n**2 + 111*an_1*n + 111*an_2 + 111*n**3    ; p: 1.592445241312357e-13  ; error: 111
Estimating model C0*an_2*n**3 + C1*n**3 + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n**3 + C1*n**3 + C2*n + n -2.94971015081501*an_2*n**3 - 2.38305980360422*n**3 - 1.23871462301292*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n**3 + C1*n**3 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n**3 + C1*n**3 + C2*n + n C0*an_2*n**3 + C1*n**3 + C2*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8, 2, 0], [27, 3, 27], [64, 4, 64], [125, 5, 250], [216, 6, 648], [343, 7, 1715]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2*n**3 + 111*n**3 + 112*n                                      ; p: 2.4161397251915157e-09 ; error: 111
Estimating model an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2*n**3 an_2*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2*n**3 an_2*n**3 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-25], [-61], [-245], [-640], [-1702]])
x []
model: an_2*n**3                                                             ; p: 0.00029129770992374554 ; error: 111
Estimating model C0*an_1**2*an_2*n + C1*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2*n + C1*n + n**2 1.94708570521888*an_1**2*an_2*n + n**2 + 4.05945373203151*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2*n + C1*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2*n + C1*n + n**2 C0*an_1**2*an_2*n + C1*n + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 3], [4, 16], [5, 90], [6, 450], [7, 2240]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2*n + n**2 + 111*n                                     ; p: 3.764273905285476e-07  ; error: 111
Estimating model an_1*an_7






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_7 an_1*an_7 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_7 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_7 an_1*an_7 6 [2, 8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[13]])
x []
model: an_1*an_7                                                             ; p: 5.7762060048967765e-05 ; error: 111
Estimating model C0*an_1*n + C1*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_2*n + n 3.31353769258191*an_1*n - 1.42380927905186*an_2*n + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_2*n + n C0*an_1*n + C1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 3], [8, 4], [15, 10], [30, 18], [56, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_2*n + n                                           ; p: 1.404899947556292e-05  ; error: 111
Estimating model C0*an_2 + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + an_1 an_1 - 0.891856936871614*an_2 + 2.72956251208147*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + an_1 C0*an_2 + C1*n + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[0], [1], [1], [2], [3], [5]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 0.00035122498688907293 ; error: 0
Estimating model an_6*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_6*n**2 an_6*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_6*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_6*n**2 an_6*n**2 5 [1, 7] 1 6
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 6
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0]]) Matrix([[8], [-36]])
x []
model: an_6*n**2                                                             ; p: 2.5426717557255202e-05 ; error: 111
Estimating model an_11*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_11*n an_11*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_11*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_11*n an_11*n 10 [1, 12] 1 11
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 11
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_11*n
model: an_11*n                                                               ; p: 6.884427812977101e-05  ; error: 100000000
Estimating model C0*an_1 + C1*n**3 + C2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**3 + C2*n + n -0.516042738680152*an_1 - 4.75404462576457*n**3 + 5.38892032992333*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**3 + C2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**3 + C2*n + n C0*an_1 + C1*n**3 + C2*n + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1, 1], [1, 8, 2], [1, 27, 3], [2, 64, 4], [3, 125, 5], [5, 216, 6], [8, 343, 7]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*n**3 + 112*n                                           ; p: 8.333972519086317e-06  ; error: 111
Estimating model an_16






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_16 an_16 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_16 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_16 an_16 15 [17] 1 16
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 16
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_16
model: an_16                                                                 ; p: 0.0003435131755365285  ; error: 100000000
Estimating model C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 -4.71105382804325*an_1*an_2 + an_1*n**3 - 1.5932220136401*an_1 - 2.82248656692451*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 C0*an_1*an_2 + C1*an_1 + C2*n + an_1*n**3 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2, 0], [1, 3, 1], [2, 4, 2], [3, 5, 6], [5, 6, 15], [8, 7, 40]]) Matrix([[-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_1*n**3 + 111*an_1 + 111*n                          ; p: 3.025786581882993e-08  ; error: 111
Estimating model C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 4.35422447836953*an_1 + an_2**2*n**3 + 1.52330965676114*n**2 - 0.415586592631518*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 C0*an_1 + C1*n**2 + C2*n + an_2**2*n**3 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 4, 2], [1, 9, 3], [2, 16, 4], [3, 25, 5], [5, 36, 6], [8, 49, 7]]) Matrix([[1], [-25], [-61], [-495], [-1936], [-8562]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_2**2*n**3 + 111*n**2 + 111*n                            ; p: 9.428984925583986e-13  ; error: 111
Estimating model C0*an_1 + C1*an_2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + an_1 2.37716665687477*an_1 - 4.2896984239784*an_2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + an_1 C0*an_1 + C1*an_2*n + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [2, 4], [3, 10], [5, 18], [8, 35]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 112*an_1 + 111*an_2*n                                                 ; p: 4.705342381606845e-05  ; error: 111
Estimating model C0*an_15*n + an_1*an_16*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_15*n + an_1*an_16*an_2 an_1*an_16*an_2 - 0.974287415694483*an_15*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_15*n + an_1*an_16*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_15*n + an_1*an_16*an_2 C0*an_15*n + an_1*an_16*an_2 15 [1, 2, 3, 16, 17] 1 16
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 16
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[16]]) Matrix([[987]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_16*an_2 + 111*an_15*n                                         ; p: 8.527878873985633e-11  ; error: 111
Estimating model C0*an_1*an_2 + C1*an_2*n + C2*n + an_4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 1.70108509994735*an_1*an_2 - 3.95730267939227*an_2*n + an_4 - 4.84245750502735*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 C0*an_1*an_2 + C1*an_2*n + C2*n + an_4 3 [1, 2, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 2, 4], [5, 6, 10], [6, 15, 18], [7, 40, 35]]) Matrix([[3], [4], [7], [11]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + 111*an_2*n + an_4 + 111*n                             ; p: 9.793743288046453e-11  ; error: 111
Estimating model C0*an_1 + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_3 -0.467417444727125*an_1 + an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_3 C0*an_1 + an_3 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [5], [8]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_3                                                       ; p: 0.0008973908863124845  ; error: 111
Estimating model an_1**3*an_11*an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*an_11*an_2*n**3 an_1**3*an_11*an_2*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*an_11*an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*an_11*an_2*n**3 an_1**3*an_11*an_2*n**3 10 [1, 2, 3, 12] 1 11
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 11
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**3*an_11*an_2*n**3
model: an_1**3*an_11*an_2*n**3                                               ; p: 2.678859220736651e-10  ; error: 100000000
Estimating model C0*an_3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + an_1 an_1 - 0.488345935963137*an_3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + an_1 C0*an_3 + an_1 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*an_3                                                       ; p: 0.0008973908863124845  ; error: 111
Estimating model C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 -0.565914398588981*an_1**2*n - 1.01882745802837*an_1*an_2*n + an_1 - 3.60355919026339*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 C0*an_1**2*n + C1*an_1*an_2*n + C2*n + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 2, 0], [3, 3, 3], [4, 16, 8], [5, 45, 30], [6, 150, 90], [7, 448, 280]]) Matrix([[0], [1], [1], [2], [3], [5]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_1*an_2*n + an_1 + 111*n                        ; p: 2.4321780692547244e-09 ; error: 111
Estimating model C0*an_1**2*n + C1*an_1 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1 + n 1.26906155343561*an_1**2*n + 2.07659725169582*an_1 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1 + n C0*an_1**2*n + C1*an_1 + n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 2], [1, 3], [2, 16], [3, 45], [5, 150], [8, 448]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_1 + n                                          ; p: 3.1161795772528414e-05 ; error: 111
Estimating model an_1**3*an_15






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**3*an_15 an_1**3*an_15 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**3*an_15 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**3*an_15 an_1**3*an_15 14 [2, 16] 1 15
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 15
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**3*an_15
model: an_1**3*an_15                                                         ; p: 8.259732144081182e-07  ; error: 100000000
Estimating model C0*an_1**2*an_2 + C1*an_1*an_2 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 4.18715918654403*an_1**2*an_2 - 0.162730002342547*an_1*an_2 + n**2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 C0*an_1**2*an_2 + C1*an_1*an_2 + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0], [1, 1], [4, 2], [18, 6], [75, 15], [320, 40]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*an_2 + 111*an_1*an_2 + n**2                               ; p: 5.100721655211306e-08  ; error: 111
Estimating model C0*n**2 + an_3*an_4*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_3*an_4*n**2 an_3*an_4*n**2 + 0.305638284597449*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_3*an_4*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_3*an_4*n**2 C0*n**2 + an_3*an_4*n**2 3 [1, 4, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[16], [25], [36], [49]]) Matrix([[3], [-20], [-64], [-281]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_3*an_4*n**2 + 111*n**2                                             ; p: 4.2747508886451136e-08 ; error: 111
Estimating model an_7






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_7 an_7 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_7 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_7 an_7 6 [8] 1 7
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 7
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[13]])
x []
model: an_7                                                                  ; p: 0.00043115839694658954 ; error: 111
Estimating model an_1**2*an_19*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_19*n an_1**2*an_19*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_19*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_19*n an_1**2*an_19*n 18 [1, 2, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**2*an_19*n
model: an_1**2*an_19*n                                                       ; p: 1.233056346864949e-06  ; error: 100000000
Estimating model C0*an_1*an_2*n + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + an_1*an_2 2.94397858168846*an_1*an_2*n + an_1*an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + an_1*an_2 C0*an_1*an_2*n + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [8], [30], [90], [280]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + an_1*an_2                                           ; p: 3.1728135652065205e-06 ; error: 111
Estimating model C0*an_1*n + C1*an_1 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + an_2 -4.02913242498718*an_1*n - 4.38212151593722*an_1 + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + an_2 C0*an_1*n + C1*an_1 + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2], [1, 3], [2, 8], [3, 15], [5, 30], [8, 56]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1*n + an_2                                                         ; p: 4.705342381606845e-05  ; error: 0
Estimating model an_1*an_4*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_4*n**2 an_1*an_4*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_4*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_4*n**2 an_1*an_4*n**2 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0]]) Matrix([[3], [-70], [-172], [-771]])
x []
model: an_1*an_4*n**2                                                        ; p: 1.9236378998903164e-05 ; error: 111
Estimating model C0*an_18*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_18*n + n -0.337123305056753*an_18*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_18*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_18*n + n C0*an_18*n + n 17 [1, 19] 1 18
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 18
chosen final nof_eqs: 1
X an Y shapes: (1, 25) (1, 1)
--<< inside model2data end
X, Y: Matrix([[18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0]]) Matrix([[2566]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_18*n + n                                                       ; p: 8.244278535494778e-06  ; error: 111
Estimating model C0*an_2 + an_4*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + an_4*n**2 -0.260906324073112*an_2 + an_4*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + an_4*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + an_4*n**2 C0*an_2 + an_4*n**2 3 [1, 3, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [5]]) Matrix([[3], [-20], [-28], [-85]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + an_4*n**2                                                  ; p: 3.4855661092029596e-06 ; error: 111
Estimating model C0*an_1**2*n + C1*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_2 + n 3.30846928281942*an_1**2*n - 3.57267780636129*an_2 + n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_2 + n C0*an_1**2*n + C1*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 16], [2, 45], [3, 150], [5, 448]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_2 + n                                          ; p: 9.410684763213688e-06  ; error: 111
Estimating model an_1**4*n**5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**4*n**5 an_1**4*n**5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**4*n**5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**4*n**5 an_1**4*n**5 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-31], [-241], [-16381], [-253120], [-4859992], [-68841459]])
x []
model: an_1**4*n**5                                                          ; p: 9.277175840679011e-08  ; error: 111
Estimating model C0*n + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + an_1*an_2*n an_1*an_2*n + 2.63887709096573*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + an_1*an_2*n C0*n + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2], [3], [4], [5], [6], [7]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*n                                                   ; p: 0.00011707499562969098 ; error: 111
Estimating model C0*an_1 + C1*an_3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_3 + an_1 5.96111812475546*an_1 + 2.06829923408625*an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_3 + an_1 C0*an_1 + C1*an_3 + an_1 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [2, 1], [3, 1], [5, 2], [8, 3]]) Matrix([[1], [1], [2], [3], [5]])
x [Matrix([
[ 1],
[-1]])]
{'x': [1, -1], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: 2*an_1 - an_3                                                         ; p: 7.213378651048185e-05  ; error: 0
Estimating model an_1*an_5*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_5*n an_1*an_5*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_5*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_5*n an_1*an_5*n 4 [1, 2, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[5], [-22], [-43]])
x []
model: an_1*an_5*n                                                           ; p: 3.5297374861622094e-05 ; error: 111
Estimating model C0*an_1 + C1*n + an_15*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_15*an_2 -1.65302379623547*an_1 + an_15*an_2 + 4.3008022781332*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_15*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_15*an_2 C0*an_1 + C1*n + an_15*an_2 14 [1, 2, 3, 16] 1 15
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 15
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[610], [987]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[377, 15], [610, 16]]) Matrix([[610], [610]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_15*an_2 + 111*n                                         ; p: 1.0775773627970504e-08 ; error: 111
Estimating model C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 -2.1631319867771*an_1*an_16*an_3*n + 2.13140378935401*an_1 + 1.37753442058852*n**2 (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 C0*an_1*an_16*an_3*n + C1*an_1 + C2*n**2 + an_1 15 [1, 2, 4, 17] 1 16
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 16
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[987], [1597], [2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[610, 256, 0], [987, 289, 6325683], [1597, 324, 17535060]]) Matrix([[377], [610], [987]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_16*an_3*n + 112*an_1 + 111*n**2                           ; p: 1.7704622961346587e-11 ; error: 111
Estimating model C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 3.16223152448429*an_1*an_2*n + 2.04891536641726*an_1*an_2 + 0.410315588022709*an_2*n**5 + n**2 + 0.564176151172452*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 C0*an_1*an_2*n + C1*an_1*an_2 + C2*an_2*n**5 + C3*n + n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0, 0, 0], [3, 1, 243, 3], [4, 2, 1024, 8], [5, 6, 6250, 30], [6, 15, 23328, 90], [7, 40, 84035, 280]]) Matrix([[-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + 111*an_1*an_2 + 111*an_2*n**5 + n**2 + 111*n        ; p: 7.09811194029814e-14   ; error: 111
Estimating model C0*an_2 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n + n -1.22635847525029*an_2 + 3.49682557926697*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n + n C0*an_2 + C1*n + n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 2], [1, 3], [1, 4], [2, 5], [3, 6], [5, 7]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_2 + 112*n                                                      ; p: 0.0005243358778627419  ; error: 111
Estimating model C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 an_1*an_19*an_2 - 2.44615896816716*an_1*an_2*an_3*n + 0.254721436153107*an_1 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 C0*an_1*an_2*an_3*n + C1*an_1 + an_1*an_19*an_2 18 [1, 2, 3, 4, 20] 1 19
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 19
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[19, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0], [20, 4181, 2584, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0]]) Matrix([[4181], [6765]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2584, 77387029944], [4181, 345070305760]]) Matrix([[4181], [-10796939]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_19*an_2 + 111*an_1*an_2*an_3*n + 111*an_1                     ; p: 1.2074870074065041e-12 ; error: 111
Estimating model C0*n**3 + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**3 + an_1*an_2 an_1*an_2 - 2.54787868587489*n**3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**3 + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**3 + an_1*an_2 C0*n**3 + an_1*an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[8], [27], [64], [125], [216], [343]]) Matrix([[1], [1], [1], [-1], [-7], [-27]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*n**3                                                  ; p: 2.3414999125938203e-05 ; error: 111
Estimating model C0*an_1 + an_1*an_2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1*an_2*n an_1*an_2*n - 1.0462711344048*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1*an_2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1*an_2*n C0*an_1 + an_1*an_2*n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [1], [2], [3], [5], [8]]) Matrix([[1], [-1], [-5], [-25], [-82], [-267]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2*n + 111*an_1                                                ; p: 7.842237302678076e-05  ; error: 111
Estimating model C0*an_1**2*n**3 + C1*an_1 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**3 + C1*an_1 + an_2 4.6143447078842*an_1**2*n**3 + 1.35941382140291*an_1 + an_2 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**3 + C1*an_1 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**3 + C1*an_1 + an_2 C0*an_1**2*n**3 + C1*an_1 + an_2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 8], [1, 27], [2, 256], [3, 1125], [5, 5400], [8, 21952]]) Matrix([[1], [1], [2], [3], [5], [8]])
x [Matrix([
[1],
[0]])]
{'x': [1, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1**2*n**3 + an_2                                                   ; p: 2.5214888182358285e-07 ; error: 0
Estimating model an_1**2*an_2*an_23*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*an_2*an_23*n**2 an_1**2*an_2*an_23*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*an_2*an_23*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*an_2*an_23*n**2 an_1**2*an_2*an_23*n**2 22 [1, 2, 3, 24] 1 23
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 23
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1**2*an_2*an_23*n**2
model: an_1**2*an_2*an_23*n**2                                               ; p: 9.977401159403935e-09  ; error: 100000000
Estimating model C0*n**3 + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**3 + C1*n + n 1.54131705419895*n**3 - 2.69128458213788*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**3 + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**3 + C1*n + n C0*n**3 + C1*n + n 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [8, 2], [27, 3], [64, 4], [125, 5], [216, 6], [343, 7], [512, 8]]) Matrix([[0], [-1], [-1], [-1], [0], [2], [6], [13]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*n**3 + 112*n                                                      ; p: 0.00010368000000000001 ; error: 111
Estimating model C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n 1.21289660461733*an_1*an_11*an_3*n**2 + 3.83401707440427*an_1*n**2 - 2.30112861133065*an_2 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n C0*an_1*an_11*an_3*n**2 + C1*an_1*n**2 + C2*an_2 + n 10 [1, 2, 3, 4, 12] 1 11
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 11
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [12, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [13, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[89], [144], [233]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[34, 6655, 0], [55, 12816, 435744], [89, 24336, 1338480]]) Matrix([[78], [132], [220]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_11*an_3*n**2 + 111*an_1*n**2 + 111*an_2 + n               ; p: 2.1430873765893048e-13 ; error: 111
Estimating model C0*n**2 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n**2 + an_1*n an_1*n + 1.66800534660719*n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n**2 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n**2 + an_1*n C0*n**2 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [4], [9], [16], [25], [36], [49]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n + 111*n**2                                                     ; p: 0.0005787480916032164  ; error: 111
Estimating model C0*an_3 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n**2 -1.92999886519664*an_3 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n**2 C0*an_3 + n**2 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_3 + n**2                                                       ; p: 0.0002679389312977832  ; error: 111
Estimating model C0*an_3 + n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3 + n**3 -3.04759235583574*an_3 + n**3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3 + n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3 + n**3 C0*an_3 + n**3 2 [1, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3]]) Matrix([[-25], [-61], [-120], [-208], [-330]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_3 + n**3                                                       ; p: 5.358778625955664e-05  ; error: 111
Estimating model C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 1.72440724113784*an_1**2 + an_1*an_2*n**2 + 0.842243272122379*an_2*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 C0*an_1**2 + C1*an_2*n + an_1*an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0], [1, 3], [4, 4], [9, 10], [25, 18], [64, 35]]) Matrix([[1], [-7], [-29], [-145], [-532], [-1947]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2 + an_1*an_2*n**2 + 111*an_2*n                             ; p: 1.0201443310422612e-08 ; error: 111
Estimating model C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n 0.473244628449114*an_1*n**2 + 1.51929624992158*an_1*n + 2.07334647914608*an_1 (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n C0*an_1*n**2 + C1*an_1*n + C2*an_1 + an_1*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 0, 0], [1, 4, 2], [1, 9, 3], [2, 32, 8], [3, 75, 15], [5, 180, 30], [8, 392, 56]]) Matrix([[1], [-1], [-1], [-5], [-10], [-22], [-43]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + 112*an_1*n + 111*an_1                                 ; p: 1.001934990793333e-07  ; error: 111
Estimating model C0*an_1*an_2 + an_2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + an_2*n**3 2.82314924491663*an_1*an_2 + an_2*n**3 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + an_2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + an_2*n**3 C0*an_1*an_2 + an_2*n**3 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[1], [-25], [-61], [-245], [-640], [-1702]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_2*n**3                                             ; p: 9.473243921183754e-07  ; error: 111
Estimating model C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 0.961624235991934*an_1**2*n**2 + an_1*n**3 - 3.37148773887089*an_1 - 0.61530692654043*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 C0*an_1**2*n**2 + C1*an_1 + C2*n + an_1*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1, 0], [1, 2, 4], [1, 3, 9], [2, 4, 64], [3, 5, 225], [5, 6, 900], [8, 7, 3136]]) Matrix([[1], [-7], [-25], [-125], [-370], [-1072], [-2731]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n**2 + an_1*n**3 + 111*an_1 + 111*n                       ; p: 4.007739963173331e-09  ; error: 111
Estimating model C0*an_1*an_3*n**2 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_3*n**2 + an_2 4.12677290260627*an_1*an_3*n**2 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_3*n**2 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_3*n**2 + an_2 C0*an_1*an_3*n**2 + an_2 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [32], [75], [360], [1176]]) Matrix([[1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_3*n**2 + an_2                                             ; p: 1.452266167162595e-06  ; error: 111
Estimating model C0*an_1 + C1*an_2 + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2 + an_3 3.8094379894124*an_1 - 4.40592023752438*an_2 + an_3 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2 + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2 + an_3 C0*an_1 + C1*an_2 + an_3 2 [2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 1], [2, 1], [3, 2], [5, 3], [8, 5]]) Matrix([[2], [2], [4], [6], [10]])
x [Matrix([
[0],
[2]])]
{'x': [0, 2], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.Zero'>
model: 2*an_2 + an_3                                                         ; p: 2.178399250743892e-05  ; error: 0
Estimating model C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 -4.72758373605025*an_1**2*n + 3.01243566827846*an_1*n + 0.449772761937752*an_1 + an_3 - 0.963134330281032*n**2 (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 C0*an_1**2*n + C1*an_1*n + C2*an_1 + C3*n**2 + an_3 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 9, 3, 3], [2, 16, 16, 8], [3, 25, 45, 15], [5, 36, 150, 30], [8, 49, 448, 56]]) Matrix([[2], [2], [4], [6], [10]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1**2*n + 111*an_1*n + 111*an_1 + an_3 + 111*n**2               ; p: 5.994182196103467e-11  ; error: 111
Estimating model C0*n + n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*n + n**3 n**3 + 0.563556946961433*n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*n + n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*n + n**3 C0*n + n**3 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1], [2], [3], [4], [5], [6], [7], [8]]) Matrix([[0], [-7], [-25], [-61], [-120], [-208], [-330], [-491]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: n**3 + 111*n                                                          ; p: 0.0008640000000000001  ; error: 111
Estimating model C0*an_1**2*n + C1*an_1*n**2 + C2*an_1 + C3*an_2*n + C4*an_22*an_4 + C5*n**2 + C6*n + an_1
--->>>--->>>--->>>--->>> model.params [-1.3409704233462116, 3.7178218711110866, -0.6082297700586625, -3.7916838229963066, 2.2229582861571506, -3.1993975556482503, -1.342509545209859]
printing model params, since len(model.params) >5 model: -1.34097042334621*an_1**2*n + 3.71782187111109*an_1*n**2 + 0.391770229941337*an_1 - 3.79168382299631*an_2*n + 2.22295828615715*an_22*an_4 - 3.19939755564825*n**2 - 1.34250954520986*n; p: 8.571535750405164e-19  ; error: 100000000model.params: [-1.3409704233462116, 3.7178218711110866, -0.6082297700586625, -3.7916838229963066, 2.2229582861571506, -3.1993975556482503, -1.342509545209859]
model: -1.34097042334621*an_1**2*n + 3.71782187111109*an_1*n**2 + 0.391770229941337*an_1 - 3.79168382299631*an_2*n + 2.22295828615715*an_22*an_4 - 3.19939755564825*n**2 - 1.34250954520986*n; p: 8.571535750405164e-19  ; error: 100000000
--->>>--->>>--->>>--->>> model.params [-1.3409704233462116, 3.7178218711110866, -0.6082297700586625, -3.7916838229963066, 2.2229582861571506, -3.1993975556482503, -1.342509545209859]
Estimating model an_1**2*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1**2*n**3 an_1**2*n**3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1**2*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1**2*n**3 an_1**2*n**3 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-25], [-253], [-1120], [-5392], [-21939]])
x []
model: an_1**2*n**3                                                          ; p: 0.00012922428762899882 ; error: 111
Estimating model an_1*an_2*n**5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*n**5 an_1*an_2*n**5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*n**5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*n**5 an_1*an_2*n**5 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-241], [-2045], [-18745], [-116632], [-672267]])
x []
model: an_1*an_2*n**5                                                        ; p: 1.560999941729213e-06  ; error: 111
Estimating model C0*an_1*n + C1*an_1 + C2*n + an_2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 -2.77268089326147*an_1*n - 0.867355398733272*an_1 + an_2*n**2 + 0.873737266839494*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 C0*an_1*n + C1*an_1 + C2*n + an_2*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 2, 2], [1, 3, 3], [2, 4, 8], [3, 5, 15], [5, 6, 30], [8, 7, 56]]) Matrix([[1], [-7], [-13], [-45], [-100], [-232]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n + 111*an_1 + an_2*n**2 + 111*n                             ; p: 2.2585643431712857e-07 ; error: 111
Estimating model C0*an_2*n + C1*n + an_1*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2*n + C1*n + an_1*n**2 an_1*n**2 - 0.0663923064967542*an_2*n - 4.92820075832199*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2*n + C1*n + an_1*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2*n + C1*n + an_1*n**2 C0*an_2*n + C1*n + an_1*n**2 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[2, 0], [3, 3], [4, 4], [5, 10], [6, 18], [7, 35]]) Matrix([[-3], [-7], [-29], [-70], [-172], [-379]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*n**2 + 111*an_2*n + 111*n                                        ; p: 2.809799895112584e-06  ; error: 111
Estimating model C0*an_1 + an_1**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + an_1**2*n an_1**2*n + 3.06271518260447*an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + an_1**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + an_1**2*n C0*an_1 + an_1**2*n 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [1], [2], [3], [5], [8]]) Matrix([[1], [-1], [-1], [-13], [-40], [-142], [-435]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n + 111*an_1                                                  ; p: 0.0002596816314377368  ; error: 111
Estimating model an_2**2*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2**2*n an_2**2*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2**2*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2**2*n an_2**2*n 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-1], [-1], [-15], [-46], [-162]])
x []
model: an_2**2*n                                                             ; p: 0.0002946331798847868  ; error: 111
Estimating model C0*an_1 + C1*n + an_1*an_3*n**4






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1*an_3*n**4 an_1*an_3*n**4 + 0.6194991882621*an_1 + 3.69278866995292*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1*an_3*n**4 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1*an_3*n**4 C0*an_1 + C1*n + an_1*an_3*n**4 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[2], [-509], [-1870], [-12952], [-57611]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_3*n**4 + 111*an_1 + 111*n                                     ; p: 2.7699374020025042e-09 ; error: 111
Estimating model C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 an_1*an_2 - 4.21120593597924*an_1*n**3 + 1.04391066723043*an_1 - 0.348234171121771*an_15 - 2.01940453664141*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 C0*an_1*n**3 + C1*an_1 + C2*an_15 + C3*n + an_1*an_2 14 [1, 2, 3, 16] 1 15
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 15
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[15, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [16, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0], [17, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0], [18, 1597, 987, 610, 377, 233, 144, 89, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[610], [987], [1597], [2584]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[377, 0, 15, 1272375], [610, 1, 16, 2498560], [987, 1, 17, 4849131], [1597, 2, 18, 9313704]]) Matrix([[-87231], [-228983], [-600473], [-1573655]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1*an_2 + 111*an_1*n**3 + 111*an_1 + 111*an_15 + 111*n              ; p: 9.978333476377917e-14  ; error: 111
Estimating model C0*an_3*n + C1*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_3*n + C1*n + an_1 an_1 + 3.47173305412074*an_3*n + 3.47445340087523*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_3*n + C1*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_3*n + C1*n + an_1 C0*an_3*n + C1*n + an_1 2 [1, 2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [4, 4], [5, 5], [6, 12], [7, 21]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1 + 111*an_3*n + 111*n                                             ; p: 2.153738127149963e-05  ; error: 111
Estimating model an_1*an_24*an_3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_24*an_3 an_1*an_24*an_3 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_24*an_3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_24*an_3 an_1*an_24*an_3 23 [2, 4, 25] 1 24
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 24
chosen final nof_eqs: 0
My raise in model2data(): removed too many rows or             adding 0 rows since no constants
Excepted an error inside fit_one: Of type <class 'IndexError'> and message:My raise in model2data(): removed too many rows or             adding 0 rows since no constants!! 
Model: an_1*an_24*an_3
model: an_1*an_24*an_3                                                       ; p: 5.708593426260661e-07  ; error: 100000000
Estimating model an_5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_5 an_5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_5 an_5 4 [6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0]]) Matrix([[5], [7], [12]])
x []
model: an_5                                                                  ; p: 0.001317366412214015   ; error: 111
Estimating model C0*an_1 + C1*n + an_1**2*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_1**2*n**2 an_1**2*n**2 - 2.19097157169257*an_1 + 2.27068989089742*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_1**2*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_1**2*n**2 C0*an_1 + C1*n + an_1**2*n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 1], [1, 2], [1, 3], [2, 4], [3, 5], [5, 6], [8, 7]]) Matrix([[1], [-3], [-7], [-61], [-220], [-892], [-3123]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: an_1**2*n**2 + 111*an_1 + 111*n                                       ; p: 6.2323591545056834e-06 ; error: 111
Estimating model C0*an_1*an_2 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2 + an_2 1.37504853401399*an_1*an_2 + an_2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2 + an_2 C0*an_1*an_2 + an_2 1 [2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [1], [2], [6], [15], [40]]) Matrix([[1], [1], [2], [3], [5], [8]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2 + an_2                                                  ; p: 0.0001184155490147969  ; error: 111
Estimating model n**5






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params n**5 n**5 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] n**5 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order n**5 n**5 0 [1] 1 0
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 0
chosen final nof_eqs: 8
X an Y shapes: (8, 25) (8, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13], [21]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0], [0], [0]]) Matrix([[0], [-31], [-241], [-1021], [-3120], [-7768], [-16794], [-32747]])
x []
model: n**5                                                                  ; p: 0.000288               ; error: 111
Estimating model C0*an_1 + C1*n + an_9*n**3






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*n + an_9*n**3 2.91501965307437*an_1 + an_9*n**3 - 1.16774329964166*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*n + an_9*n**3 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*n + an_9*n**3 C0*an_1 + C1*n + an_9*n**3 8 [1, 2, 10] 1 9
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 9
chosen final nof_eqs: 2
X an Y shapes: (2, 25) (2, 1)
--<< inside model2data end
X, Y: Matrix([[9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[34], [55]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[21, 9], [34, 10]]) Matrix([[34], [-945]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + an_9*n**3 + 111*n                                          ; p: 2.7116252217011476e-08 ; error: 111
Estimating model C0*an_1*an_4*n + C1*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_4*n + C1*n + n -2.83400210497794*an_1*an_4*n - 2.19928048937993*n (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_4*n + C1*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_4*n + C1*n + n C0*an_1*an_4*n + C1*n + n 3 [1, 2, 5] 1 4
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 4
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[4, 0], [5, 15], [6, 30], [7, 112]]) Matrix([[-1], [0], [2], [6]])
x []
{'x': [111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_4*n + 112*n                                               ; p: 1.385019287921028e-06  ; error: 111
Estimating model C0*an_1*an_2*n + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_2*n + n 1.08850186545922*an_1*an_2*n + n (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_2*n + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_2*n + n C0*an_1*an_2*n + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [3], [8], [30], [90], [280]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_2*n + n                                                   ; p: 0.00011707499562969102 ; error: 111
Estimating model C0*an_1**3*n + C1*an_1**2*an_4*n + C2*an_1**2*n + C3*an_1 + C4*an_2 + C5*n + an_1**2
--->>>--->>>--->>>--->>> model.params [-1.2111847708783208, 0.34068219826224433, -1.5198871574823325, -4.063511231528189, 3.523421406626376, 2.6371188035439443]
printing model params, since len(model.params) >5 model: -1.21118477087832*an_1**3*n + 0.340682198262244*an_1**2*an_4*n - 1.51988715748233*an_1**2*n + an_1**2 - 4.06351123152819*an_1 + 3.52342140662638*an_2 + 2.63711880354394*n; p: 2.0190534632243422e-17 ; error: 100000000model.params: [-1.2111847708783208, 0.34068219826224433, -1.5198871574823325, -4.063511231528189, 3.523421406626376, 2.6371188035439443]
model: -1.21118477087832*an_1**3*n + 0.340682198262244*an_1**2*an_4*n - 1.51988715748233*an_1**2*n + an_1**2 - 4.06351123152819*an_1 + 3.52342140662638*an_2 + 2.63711880354394*n; p: 2.0190534632243422e-17 ; error: 100000000
--->>>--->>>--->>>--->>> model.params [-1.2111847708783208, 0.34068219826224433, -1.5198871574823325, -4.063511231528189, 3.523421406626376, 2.6371188035439443]
Estimating model C0*an_1 + C1*an_5 + an_2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_5 + an_2 -0.163077789121659*an_1 + an_2 - 1.79633955928861*an_5 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_5 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_5 + an_2 C0*an_1 + C1*an_5 + an_2 4 [2, 3, 6] 1 5
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 5
chosen final nof_eqs: 3
X an Y shapes: (3, 25) (3, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [5, 1], [8, 1]]) Matrix([[3], [5], [8]])
x [Matrix([
[1],
[0]])]
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_5 + an_2 -0.163077789121659*an_1 + an_2 - 1.79633955928861*an_5 (C0, C1)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_5 + an_2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_5 + an_2 C0*an_1 + C1*an_5 + an_2 4 [2, 3, 6] 1 5
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[5], [8], [13], [21], [34]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[3, 0], [5, 1], [8, 1], [13, 2], [21, 3]]) Matrix([[3], [5], [8], [13], [21]])
x [Matrix([
[1],
[0]])]
Uuhuu! Eqation found even after double checking with {SECOND_CHECK_nof_eqs} equations :)
Excepted an error inside fit_one: Of type <class 'AttributeError'> and message:'list' object has no attribute 'T'!! 
Model: C0*an_1 + C1*an_5 + an_2
model: -0.163077789121659*an_1 + an_2 - 1.79633955928861*an_5                ; p: 2.570511115877626e-06  ; error: 100000000
Estimating model an_1*an_2*an_3*n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_1*an_2*an_3*n an_1*an_2*an_3*n ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_1*an_2*an_3*n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_1*an_2*an_3*n an_1*an_2*an_3*n 2 [1, 2, 3, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0]]) Matrix([[2], [-5], [-25], [-172], [-827]])
x []
model: an_1*an_2*an_3*n                                                      ; p: 1.2102218059688294e-05 ; error: 111
Estimating model C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 2.75563977514054*an_1*an_3*an_4 + 4.83645605477074*an_1*n - 0.603017942200379*an_8 + n**2 - 1.72781986645185*n (C0, C1, C2, C3)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 C0*an_1*an_3*an_4 + C1*an_1*n + C2*an_8 + C3*n + n**2 7 [1, 2, 4, 5, 9] 1 8
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 8
chosen final nof_eqs: 4
X an Y shapes: (4, 25) (4, 1)
--<< inside model2data end
X, Y: Matrix([[8, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [9, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [10, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [11, 55, 34, 21, 13, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[21], [34], [55], [89]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 8, 104, 195], [1, 9, 189, 840], [1, 10, 340, 3536], [2, 11, 605, 15015]]) Matrix([[-43], [-47], [-45], [-32]])
x []
{'x': [111, 111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_3*an_4 + 111*an_1*n + 111*an_8 + n**2 + 111*n             ; p: 9.805496786702815e-16  ; error: 111
Estimating model C0*an_1*an_3 + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*an_3 + an_1 -2.63313204792764*an_1*an_3 + an_1 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*an_3 + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*an_3 + an_1 C0*an_1*an_3 + an_1 2 [2, 4] 1 3
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 3
chosen final nof_eqs: 5
X an Y shapes: (5, 25) (5, 1)
--<< inside model2data end
X, Y: Matrix([[3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [2], [3], [10], [24]]) Matrix([[1], [1], [2], [3], [5]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*an_3 + an_1                                                  ; p: 0.00012022297751746976 ; error: 111
Estimating model an_2**3*n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params an_2**3*n**2 an_2**3*n**2 ()
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] an_2**3*n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order an_2**3*n**2 an_2**3*n**2 1 [1, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [0], [0], [0], [0], [0]]) Matrix([[1], [-7], [-13], [-195], [-964], [-6112]])
x []
model: an_2**3*n**2                                                          ; p: 2.3840547379997045e-06 ; error: 111
Estimating model C0*an_1*n**2 + n**2






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1*n**2 + n**2 4.59980705197069*an_1*n**2 + n**2 (C0,)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1*n**2 + n**2 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1*n**2 + n**2 C0*an_1*n**2 + n**2 0 [1, 2] 1 1
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 1
chosen final nof_eqs: 7
X an Y shapes: (7, 25) (7, 1)
--<< inside model2data end
X, Y: Matrix([[1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0], [4], [9], [32], [75], [180], [392]]) Matrix([[0], [-3], [-7], [-13], [-20], [-28], [-36]])
x []
{'x': [111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1*n**2 + n**2                                                  ; p: 0.00011574961832064325 ; error: 111
Estimating model C0*an_1 + C1*an_2*n + C2*an_2 + n






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_1 + C1*an_2*n + C2*an_2 + n -4.00132678533896*an_1 - 4.79048658921621*an_2*n + 0.118973505334493*an_2 + n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_1 + C1*an_2*n + C2*an_2 + n <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_1 + C1*an_2*n + C2*an_2 + n C0*an_1 + C1*an_2*n + C2*an_2 + n 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[1, 0, 0], [1, 1, 3], [2, 1, 4], [3, 2, 10], [5, 3, 18], [8, 5, 35]]) Matrix([[-1], [-1], [-1], [0], [2], [6]])
x []
{'x': [111, 111, 111], 'fun': 111} <class 'list'> <class 'int'>
model: 111*an_1 + 111*an_2*n + 111*an_2 + n                                  ; p: 1.7051839058130751e-06 ; error: 111
Estimating model C0*an_2 + C1*n**3 + C2*n + an_1






estimation_settings {'task_type': 'algebraic', 'verbosity': 3, 'timeout': inf, 'lower_upper_bounds': (-4, 4), 'optimizer': 'oeis_exact', 'default_error': 1000000000, 'oeis_nof_eqs': None, 'oeis_sanity_nof_eqs': 7, 'objective_function': <function model_error at 0x7f6ecfd35e50>}
estimation_settings[optimizer] oeis_exact
nof_eqs None
sanity_nof_eqs 7
-->> inside model2data begin
model.expr, model.get_full_expr, model.sym_params C0*an_2 + C1*n**3 + C2*n + an_1 an_1 + 4.09587418733435*an_2 + 4.585841683696*n**3 - 4.03876320479249*n (C0, C1, C2)
[n, an_1, an_2, an_3, an_4, an_5, an_6, an_7, an_8, an_9, an_10, an_11, an_12, an_13, an_14, an_15, an_16, an_17, an_18, an_19, an_20, an_21, an_22, an_23, an_24] C0*an_2 + C1*n**3 + C2*n + an_1 <class 'list'>
model, model.expr, remove_rows, has_vars, nonrecursive_variables,  recursion_order C0*an_2 + C1*n**3 + C2*n + an_1 C0*an_2 + C1*n**3 + C2*n + an_1 1 [1, 2, 3] 1 2
sanity check for sanity :) before final setting of nof_eqs:nof_eqs, sanity_nof_eqs, recursion_order None 7 2
chosen final nof_eqs: 6
X an Y shapes: (6, 25) (6, 1)
--<< inside model2data end
X, Y: Matrix([[2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [4, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [6, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [7, 8, 5, 3, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]) Matrix([[1], [2], [3], [5], [8], [13]])
->-> inside model2diophant() --- 
-<-< exiting model2diophant() --- 
A, b: Matrix([[0, 8, 2], [1, 27, 3], [1, 64, 4], [2, 125, 5], [3, 216, 6], [5, 343, 7]]) Matrix([[0], [1], [1], [2], [3], [5]])
x [Matrix([
[1],
[0],
[0]])]
{'x': [1, 0, 0], 'fun': 0} <class 'list'> <class 'sympy.core.numbers.One'>
model: an_1 + an_2                                                           ; p: 1.6858799370675502e-06 ; error: 0

Parameter fitting for sequence A000045 took 8.802815604001808 secconds.

Final score:
model: 112*an_1 + 111*n              ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: n**3                          ; error: 111            
model: 111*an_3 + n                  ; error: 111            
model: an_1**2                       ; error: 111            
model: n                             ; error: 111            
model: an_14*n + 111*n               ; error: 111            
model: an_1 + 111*n**2               ; error: 111            
model: n**2                          ; error: 111            
model: 111*an_1 + 111*an_2*n + n     ; error: 111            
model: an_1**3 + 111*an_1 + 111*an_3 ; error: 111            
model: an_1                          ; error: 111            
model: 111*an_1**3 + 111*an_1*an_3*n + an_2; error: 111            
model: 111*an_1**2*n + n             ; error: 111            
model: an_1**2*n                     ; error: 111            
model: an_2*n**2                     ; error: 111            
model: an_2 + 111*n                  ; error: 111            
model: 111*an_2 + 111*n**3 + n       ; error: 111            
model: 111*an_1**2 + an_1*n          ; error: 111            
model: an_1*an_4*n + 111*an_1 + 111*n; error: 111            
model: an_1*n**2 + 111*n             ; error: 111            
model: 111*an_1*n + an_2             ; error: 111            
model: an_1*an_3*n**2                ; error: 111            
model: 111*an_1**2*an_3 + an_1**2    ; error: 111            
model: an_1*n                        ; error: 111            
model: an_2                          ; error: 111            
model: an_3*n**3                     ; error: 111            
model: an_1*an_3*n**3                ; error: 111            
model: an_3**2*n                     ; error: 111            
model: 111*an_2*n + n                ; error: 111            
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n; error: 111            
model: an_1**3                       ; error: 111            
model: 111*an_1 + n                  ; error: 111            
model: 111*an_1*n + an_3             ; error: 111            
model: an_1*n + 111*an_2 + 111*n     ; error: 111            
model: an_1 + 111*n                  ; error: 111            
model: an_1**2*n + 111*an_1 + 111*an_2**2*n; error: 111            
model: 111*an_1*n**3 + an_2*n        ; error: 111            
model: 111*an_1**2*n + an_2*n        ; error: 111            
model: an_1**2*an_2*n + 111*n**2     ; error: 111            
model: 111*an_1*n**3 + n             ; error: 111            
model: an_1 + 111*an_2*an_3*n        ; error: 111            
model: an_1*n**2                     ; error: 111            
model: an_3                          ; error: 111            
model: an_4*n**3                     ; error: 111            
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n; error: 111            
model: an_1*n**3 + 111*n             ; error: 111            
model: 111*an_1**2*n**3 + an_2*n     ; error: 111            
model: 111*an_1**2*n**2 + n          ; error: 111            
model: 111*an_1 + 111*an_7 + n       ; error: 111            
model: an_1*an_24*n**2               ; error: 100000000      
model: an_1*an_2                     ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n; error: 111            
model: 111*an_18 + an_2*n + 111*n    ; error: 111            
model: an_1*an_2 + 111*n**2          ; error: 111            
model: 111*an_1**2*an_2*n**3 + an_1  ; error: 111            
model: an_3*n + 111*n                ; error: 111            
model: 111*an_1*n + an_1             ; error: 111            
model: an_1*n + 111*an_1             ; error: 111            
model: n**2 + 111*n                  ; error: 111            
model: an_1*an_2*n + 111*an_1*n + 111*n; error: 111            
model: an_2*n                        ; error: 111            
model: an_1*an_2*an_3*n**2           ; error: 111            
model: an_1*an_2*n                   ; error: 111            
model: 112*an_1*n                    ; error: 111            
model: 111*an_1*n + 111*an_1 + n     ; error: 111            
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n; error: 111            
model: an_1*an_5                     ; error: 111            
model: an_1*n**2 + 111*n**2          ; error: 111            
model: 111*an_4*n**3 + n             ; error: 111            
model: 111*an_1*an_2 + n             ; error: 111            
model: 112*n                         ; error: 111            
model: an_1**2*an_2*an_3*n**3        ; error: 111            
model: 111*an_1 + n**2               ; error: 111            
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n; error: 111            
model: 111*an_1 + 111*an_2*n + 112*n ; error: 111            
model: 111*an_1*n + 111*an_2 + 112*n ; error: 111            
model: an_1**2 + 111*an_1*n + 111*n**2; error: 111            
model: an_1*n + 111*an_1 + 111*n     ; error: 111            
model: 111*an_1**4*n**2 + an_1 + 111*n; error: 111            
model: an_1**2*an_2*n**2             ; error: 111            
model: an_2*an_3*n                   ; error: 111            
model: 111*an_2*n**3 + 111*an_2 + n  ; error: 111            
model: an_1**3*n**4 + 111*an_1*n + 111*an_1; error: 111            
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; error: 100000000      
model: an_9                          ; error: 100000000      
model: an_1**2*an_2*n                ; error: 111            
model: an_17                         ; error: 100000000      
model: 111*an_1*n + n**2             ; error: 111            
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n; error: 111            
model: an_1*n + 111*n                ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: 111*an_1 + 111*n**2 + n       ; error: 111            
model: an_1*an_2 + an_1              ; error: 0              
model: an_1 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1**2*n + an_1 + 111*n  ; error: 111            
model: 2*an_2 + an_3                 ; error: 0              
model: 111*an_1**2*an_3 + 112*n      ; error: 111            
model: an_1**2*an_20                 ; error: 100000000      
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3; error: 111            
model: an_2**2 + 111*n               ; error: 111            
model: 111*n**2 + n                  ; error: 111            
model: 112*an_1                      ; error: 111            
model: an_1**2*an_2                  ; error: 111            
model: 111*an_2*n + an_2             ; error: 111            
model: an_1*an_18 + 111*n            ; error: 111            
model: an_2*an_4 + 111*n             ; error: 111            
model: 111*an_1 + 111*an_2 + n**2 + 111*n; error: 111            
model: an_1*an_2 + 111*n**3 + 111*n  ; error: 111            
model: 111*an_1*n**2 + 112*n         ; error: 111            
model: an_1**2*an_3*n**2             ; error: 111            
model: 111*an_1*n + n**4             ; error: 111            
model: an_2*an_4                     ; error: 111            
model: an_2**3*an_6*n                ; error: 111            
model: an_1**3*n + 111*an_1*n        ; error: 111            
model: 111*an_1*n + n                ; error: 111            
model: 111*an_2*n + 112*n            ; error: 111            
model: 111*an_1**2*an_9 + 112*an_1 + 111*n; error: 111            
model: 111*an_1*an_2*n + an_2        ; error: 111            
model: 111*an_1**3*an_2*n**3 + n     ; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n; error: 111            
model: 111*an_4 + n                  ; error: 111            
model: an_1*n**2 + 111*an_1          ; error: 111            
model: an_2*n**3 + 111*n             ; error: 111            
model: 111*an_1**2 + n               ; error: 111            
model: 111*an_1**2*n + an_2*n**2     ; error: 111            
model: an_2*n**2 + 111*an_2          ; error: 111            
model: an_3*n**2                     ; error: 111            
model: 111*an_2*n**2 + n             ; error: 111            
model: 111*an_1 + 111*an_3 + n       ; error: 111            
model: an_1**2*an_2**2*n**2          ; error: 111            
model: an_1**2*an_2 + 111*an_14*an_2 ; error: 111            
model: an_3*n**5                     ; error: 111            
model: 111*n**3 + n                  ; error: 111            
model: 111*an_1*an_2*n + an_1 + 111*n**2; error: 111            
model: an_1**3*n                     ; error: 111            
model: an_1**3*an_2*an_22*n**6 + 111*n; error: 111            
model: 111*an_1*n + an_1 + 111*n**2  ; error: 111            
model: 112*an_1 + 111*an_3*n**2 + 111*n; error: 111            
model: 111*an_1*n + 111*an_1 + an_3 + 111*n; error: 111            
model: an_4                          ; error: 111            
model: 111*an_2*n**4 + 112*n         ; error: 111            
model: an_1*an_3*n**2 + 111*an_2 + 111*n; error: 111            
model: an_1**3*an_2*n**2             ; error: 111            
model: an_1**2*an_3 + 111*an_1       ; error: 111            
model: an_1*n**2 + 111*an_4          ; error: 111            
model: 111*an_11*n**2 + n            ; error: 111            
model: 111*an_1**2 + 112*n           ; error: 111            
model: 111*an_1*an_2*n**4 + an_1     ; error: 111            
model: 111*an_1*an_2*n**2 + n**2     ; error: 111            
model: an_1*an_3*n                   ; error: 111            
model: an_4*n                        ; error: 111            
model: 111*an_1 + n**4               ; error: 111            
model: 111*an_1**2*an_2 + an_3*n     ; error: 111            
model: an_1**2*an_4*n**4             ; error: 111            
model: 111*n**5 + 111*n**4 + n       ; error: 111            
model: 111*an_1*an_4*n**3 + an_1     ; error: 111            
model: 111*an_1*an_2*n**2 + an_2 + 111*n; error: 111            
model: an_1**2 + 111*an_1            ; error: 111            
model: an_24                         ; error: 100000000      
model: 111*an_2 + n                  ; error: 111            
model: 111*an_1*n + 111*an_3**2*n + n**2; error: 111            
model: an_15 + 111*n                 ; error: 111            
model: an_1*an_2*n + 111*an_1*n**2   ; error: 111            
model: an_1*n + 111*n**2 + 111*n     ; error: 111            
model: an_1**2*an_2*an_4*n**3        ; error: 111            
model: 111*an_1 + n**2 + 111*n       ; error: 111            
model: an_1**2 + 111*an_2*an_4*n**2 + 111*n; error: 111            
model: an_19*n                       ; error: 100000000      
model: 111*an_1*n + an_1 + 111*n     ; error: 111            
model: an_1*an_2*an_4                ; error: 111            
model: 111*an_1 + an_15 + 111*n      ; error: 111            
model: 111*an_2 + 111*n**2 + n       ; error: 111            
model: 111*an_1**2*an_2 + 111*an_1*n + 111*an_1 + n; error: 111            
model: 111*an_1**3*n + an_1**2*an_13*an_2*n**3; error: 111            
model: an_1*an_2*n**2                ; error: 111            
model: 111*an_1*n + 111*an_1 + 111*an_2 + 111*an_3*n**2 + 111*an_3 + n; error: 111            
model: an_1 + 111*an_2*n             ; error: 111            
model: 111*an_1*an_2 + an_1*n        ; error: 111            
model: 111*an_1*an_2*n**2 + an_1*n + 111*an_1 + 111*an_2*an_3 + 111*n; error: 111            
model: 111*an_1*an_2 + an_1          ; error: 111            
model: 111*an_7 + 111*n**2 + n       ; error: 111            
model: an_1**2*an_3*n                ; error: 111            
model: 111*an_1*an_3*n + an_4*n**3   ; error: 111            
model: 111*an_1 + 112*n              ; error: 111            
model: an_2*n + 111*an_3             ; error: 111            
model: 111*an_1**2*an_3 + an_1*an_14 + 111*n; error: 111            
model: an_1*an_2*n + 111*an_1*an_2 + 111*an_1; error: 111            
model: an_1*an_2*n + 111*an_2*n**2   ; error: 111            
model: 111*an_1*an_2 + an_1*n**2 + 111*an_1; error: 111            
model: 112*an_1**2                   ; error: 111            
model: 111*an_1*an_2*n + an_2*n      ; error: 111            
model: 111*an_11*n**2 + an_2 + 111*n ; error: 111            
model: 111*an_1**2*n + an_2 + 111*n**2 + 111*n; error: 111            
model: an_2 + 111*an_22              ; error: 111            
model: an_1*an_10*n**2               ; error: 100000000      
model: 111*an_1*n**3 + 112*an_1*n    ; error: 111            
model: 111*an_1*n + 111*an_2 + 111*n**3 + n**2; error: 111            
model: 111*an_1 + an_16 + 111*n**2   ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: 111*n**2 + 112*n              ; error: 111            
model: an_1**2*an_2*an_3*n**3 + 111*an_1*an_2 + 111*an_1; error: 111            
model: an_2*n + 111*n                ; error: 111            
model: 111*n**4 + n                  ; error: 111            
model: 111*an_1**2*an_2*n + 111*an_1*n + an_2 + 111*n; error: 111            
model: an_3*n                        ; error: 111            
model: an_1**4*n                     ; error: 111            
model: 111*an_1*n + an_2 + 111*n     ; error: 111            
model: an_1**3*n**5                  ; error: 111            
model: 112*an_1 + 111*an_5*n + 111*n ; error: 111            
model: an_1*n**3 + 111*an_1          ; error: 111            
model: 111*an_1**2 + 111*an_1*n + an_1 + 111*n; error: 111            
model: 111*an_1*an_3*n**2 + n        ; error: 111            
model: an_1*n**2 + 111*an_2          ; error: 111            
model: 111*an_1**3 + 112*n           ; error: 111            
model: an_1**3*an_3*n                ; error: 111            
model: an_21                         ; error: 100000000      
model: an_1**2*an_2*an_7             ; error: 111            
model: 111*an_2*n + n**2             ; error: 111            
model: an_1**2*n + 111*an_1*n        ; error: 111            
model: 111*an_2*an_4*n + an_2*n**4 + 111*n**2 + 111*n; error: 111            
model: 111*an_2 + n**4               ; error: 111            
model: 111*an_1*an_2*n + 111*an_17*n + n; error: 111            
model: an_1**4*an_5*n**3 + 111*an_1 + 111*n; error: 111            
model: an_1*n + 111*an_2             ; error: 111            
model: an_1*n**2 + 111*an_2 + 111*n  ; error: 111            
model: 111*an_1*n + an_13            ; error: 111            
model: 2*an_1 - an_3                 ; error: 0              
model: 111*an_1*n**2 + an_2*n**2     ; error: 111            
model: 111*an_1**2*n**2 + an_3       ; error: 111            
model: an_1*n**3 + an_1              ; error: 0              
model: an_22                         ; error: 100000000      
model: an_1**2*an_2*n + 111*n        ; error: 111            
model: 111*an_1*n + 112*an_1 + 111*n ; error: 111            
model: an_1**2 + 111*an_1*an_4*n     ; error: 111            
model: 111*an_1**2*an_4 + an_1*n + 111*n; error: 111            
model: 111*an_1*an_2*an_3 + an_1 + 111*an_2*n**2 + 111*n**3 + 111*n; error: 111            
model: 112*an_1 + 111*an_14 + 111*n  ; error: 111            
model: 111*an_1*an_2*n**2 + an_1     ; error: 111            
model: an_1*an_2*n**3                ; error: 111            
model: 111*an_1 + 112*n**2           ; error: 111            
model: an_1**2*n + 111*n             ; error: 111            
model: an_2 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1*an_12 + an_1*an_3*n  ; error: 111            
model: 111*an_1 + an_2*n + 111*an_8*n + 111*n; error: 111            
model: an_1**2 + 111*n               ; error: 111            
model: an_18                         ; error: 100000000      
model: 111*an_1*n + an_2*n           ; error: 111            
model: an_1**2*n + 111*an_1*n + 111*an_1; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*an_9 + 111*n; error: 111            
model: an_1*n + 111*an_3 + 111*n     ; error: 111            
model: 111*an_1**2 + an_1 + 111*n    ; error: 111            
model: 111*an_1*n + 112*n            ; error: 111            
model: 111*an_1**2*an_2*n + 111*an_1**2*an_5*n**3 + an_1; error: 111            
model: an_1**4                       ; error: 111            
model: 2*an_1*n + an_2 - an_3 + n    ; error: 0              
model: 111*an_1*an_2 + 111*an_1 + n**2 + 111*n; error: 111            
model: 111*an_1**2 + 111*an_1 + an_3*n**2; error: 111            
model: 111*an_3**2*n + n**2          ; error: 111            
model: 111*an_1**2 + an_1*an_2**2*n**2 + 111*an_1*n + 111*an_2 + 111*n**3; error: 111            
model: 111*an_2*n**3 + 111*n**3 + 112*n; error: 111            
model: an_2*n**3                     ; error: 111            
model: 111*an_1**2*an_2*n + n**2 + 111*n; error: 111            
model: an_1*an_7                     ; error: 111            
model: 111*an_1*n + 111*an_2*n + n   ; error: 111            
model: an_1 + an_2                   ; error: 0              
model: an_6*n**2                     ; error: 111            
model: an_11*n                       ; error: 100000000      
model: 111*an_1 + 111*n**3 + 112*n   ; error: 111            
model: an_16                         ; error: 100000000      
model: 111*an_1*an_2 + an_1*n**3 + 111*an_1 + 111*n; error: 111            
model: 111*an_1 + an_2**2*n**3 + 111*n**2 + 111*n; error: 111            
model: 112*an_1 + 111*an_2*n         ; error: 111            
model: an_1*an_16*an_2 + 111*an_15*n ; error: 111            
model: 111*an_1*an_2 + 111*an_2*n + an_4 + 111*n; error: 111            
model: 111*an_1 + an_3               ; error: 111            
model: an_1**3*an_11*an_2*n**3       ; error: 100000000      
model: an_1 + 111*an_3               ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_2*n + an_1 + 111*n; error: 111            
model: 111*an_1**2*n + 111*an_1 + n  ; error: 111            
model: an_1**3*an_15                 ; error: 100000000      
model: 111*an_1**2*an_2 + 111*an_1*an_2 + n**2; error: 111            
model: an_3*an_4*n**2 + 111*n**2     ; error: 111            
model: an_7                          ; error: 111            
model: an_1**2*an_19*n               ; error: 100000000      
model: 111*an_1*an_2*n + an_1*an_2   ; error: 111            
model: an_1*n + an_2                 ; error: 0              
model: an_1*an_4*n**2                ; error: 111            
model: 111*an_18*n + n               ; error: 111            
model: 111*an_2 + an_4*n**2          ; error: 111            
model: 111*an_1**2*n + 111*an_2 + n  ; error: 111            
model: an_1**4*n**5                  ; error: 111            
model: an_1*an_2*n + 111*n           ; error: 111            
model: 2*an_1 - an_3                 ; error: 0              
model: an_1*an_5*n                   ; error: 111            
model: 111*an_1 + an_15*an_2 + 111*n ; error: 111            
model: 111*an_1*an_16*an_3*n + 112*an_1 + 111*n**2; error: 111            
model: 111*an_1*an_2*n + 111*an_1*an_2 + 111*an_2*n**5 + n**2 + 111*n; error: 111            
model: 111*an_2 + 112*n              ; error: 111            
model: an_1*an_19*an_2 + 111*an_1*an_2*an_3*n + 111*an_1; error: 111            
model: an_1*an_2 + 111*n**3          ; error: 111            
model: an_1*an_2*n + 111*an_1        ; error: 111            
model: an_1**2*n**3 + an_2           ; error: 0              
model: an_1**2*an_2*an_23*n**2       ; error: 100000000      
model: 111*n**3 + 112*n              ; error: 111            
model: 111*an_1*an_11*an_3*n**2 + 111*an_1*n**2 + 111*an_2 + n; error: 111            
model: an_1*n + 111*n**2             ; error: 111            
model: 111*an_3 + n**2               ; error: 111            
model: 111*an_3 + n**3               ; error: 111            
model: 111*an_1**2 + an_1*an_2*n**2 + 111*an_2*n; error: 111            
model: 111*an_1*n**2 + 112*an_1*n + 111*an_1; error: 111            
model: 111*an_1*an_2 + an_2*n**3     ; error: 111            
model: 111*an_1**2*n**2 + an_1*n**3 + 111*an_1 + 111*n; error: 111            
model: 111*an_1*an_3*n**2 + an_2     ; error: 111            
model: 2*an_2 + an_3                 ; error: 0              
model: 111*an_1**2*n + 111*an_1*n + 111*an_1 + an_3 + 111*n**2; error: 111            
model: n**3 + 111*n                  ; error: 111            
model: -1.34097042334621*an_1**2*n + 3.71782187111109*an_1*n**2 + 0.391770229941337*an_1 - 3.79168382299631*an_2*n + 2.22295828615715*an_22*an_4 - 3.19939755564825*n**2 - 1.34250954520986*n; error: 100000000      
model: an_1**2*n**3                  ; error: 111            
model: an_1*an_2*n**5                ; error: 111            
model: 111*an_1*n + 111*an_1 + an_2*n**2 + 111*n; error: 111            
model: an_1*n**2 + 111*an_2*n + 111*n; error: 111            
model: an_1**2*n + 111*an_1          ; error: 111            
model: an_2**2*n                     ; error: 111            
model: an_1*an_3*n**4 + 111*an_1 + 111*n; error: 111            
model: an_1*an_2 + 111*an_1*n**3 + 111*an_1 + 111*an_15 + 111*n; error: 111            
model: an_1 + 111*an_3*n + 111*n     ; error: 111            
model: an_1*an_24*an_3               ; error: 100000000      
model: an_5                          ; error: 111            
model: an_1**2*n**2 + 111*an_1 + 111*n; error: 111            
model: 111*an_1*an_2 + an_2          ; error: 111            
model: n**5                          ; error: 111            
model: 111*an_1 + an_9*n**3 + 111*n  ; error: 111            
model: 111*an_1*an_4*n + 112*n       ; error: 111            
model: 111*an_1*an_2*n + n           ; error: 111            
model: -1.21118477087832*an_1**3*n + 0.340682198262244*an_1**2*an_4*n - 1.51988715748233*an_1**2*n + an_1**2 - 4.06351123152819*an_1 + 3.52342140662638*an_2 + 2.63711880354394*n; error: 100000000      
model: -0.163077789121659*an_1 + an_2 - 1.79633955928861*an_5; error: 100000000      
model: an_1*an_2*an_3*n              ; error: 111            
model: 111*an_1*an_3*an_4 + 111*an_1*n + 111*an_8 + n**2 + 111*n; error: 111            
model: 111*an_1*an_3 + an_1          ; error: 111            
model: an_2**3*n**2                  ; error: 111            
model: 111*an_1*n**2 + n**2          ; error: 111            
model: 111*an_1 + 111*an_2*n + 111*an_2 + n; error: 111            
model: an_1 + an_2                   ; error: 0              

Final score (sorted):
model: an_1 + an_2                   ; error: 0              
model: an_1**2*n**3 + an_2           ; error: 0              
model: an_1*n + an_2                 ; error: 0              
model: an_1 + an_2                   ; error: 0              
model: 2*an_2 + an_3                 ; error: 0              
model: 2*an_1 - an_3                 ; error: 0              
model: an_1*n**3 + an_1              ; error: 0              
model: an_1 + an_2                   ; error: 0              
model: 2*an_2 + an_3                 ; error: 0              
model: 2*an_1 - an_3                 ; error: 0              
model: an_1 + an_2                   ; error: 0              
model: an_1*an_2 + an_1              ; error: 0              
model: an_1 + an_2                   ; error: 0              
model: 2*an_1*n + an_2 - an_3 + n    ; error: 0              
model: 111*an_2 + n**4               ; error: 111            
model: 111*an_2*an_4*n + an_2*n**4 + 111*n**2 + 111*n; error: 111            
model: 111*an_1*an_12 + an_1*an_3*n  ; error: 111            
model: an_1**2*n + 111*an_1*n        ; error: 111            
model: 111*an_2*n + n**2             ; error: 111            
model: an_1*an_2*n**3                ; error: 111            
model: 111*an_1*an_2*n + 111*an_17*n + n; error: 111            
model: an_1**2*an_2*an_7             ; error: 111            
model: an_1**3*an_3*n                ; error: 111            
model: 111*an_1**3 + 112*n           ; error: 111            
model: an_1*n**2 + 111*an_2          ; error: 111            
model: 111*an_1*an_3*n**2 + n        ; error: 111            
model: 111*an_1 + an_2*n + 111*an_8*n + 111*n; error: 111            
model: an_1**4*an_5*n**3 + 111*an_1 + 111*n; error: 111            
model: an_1*n**2 + 111*an_2 + 111*n  ; error: 111            
model: 111*an_1 + 112*n**2           ; error: 111            
model: an_2 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1*n + an_13            ; error: 111            
model: 111*an_1*n**2 + an_2*n**2     ; error: 111            
model: 111*an_1**2 + 111*an_1*n + an_1 + 111*n; error: 111            
model: an_1**2*n + 111*n             ; error: 111            
model: an_1**2*an_2*n + 111*n        ; error: 111            
model: 111*an_1*n + 112*an_1 + 111*n ; error: 111            
model: an_1**2 + 111*an_1*an_4*n     ; error: 111            
model: 111*an_1**2*an_4 + an_1*n + 111*n; error: 111            
model: 111*an_1*an_2*an_3 + an_1 + 111*an_2*n**2 + 111*n**3 + 111*n; error: 111            
model: 112*an_1 + 111*an_14 + 111*n  ; error: 111            
model: 111*an_1*an_2*n**2 + an_1     ; error: 111            
model: an_1*n + 111*an_2             ; error: 111            
model: 111*an_1**2*n**2 + an_3       ; error: 111            
model: an_1**3*n**5                  ; error: 111            
model: 112*an_1 + 111*an_5*n + 111*n ; error: 111            
model: an_2*n + 111*an_3             ; error: 111            
model: 111*an_1 + 112*n              ; error: 111            
model: 111*an_1*an_3*n + an_4*n**3   ; error: 111            
model: an_1**2*an_3*n                ; error: 111            
model: 111*an_7 + 111*n**2 + n       ; error: 111            
model: 111*an_1*an_2 + an_1          ; error: 111            
model: 111*an_1*an_2*n**2 + an_1*n + 111*an_1 + 111*an_2*an_3 + 111*n; error: 111            
model: 111*an_1*an_2 + an_1*n        ; error: 111            
model: an_1 + 111*an_2*n             ; error: 111            
model: 111*an_1*n + 111*an_1 + 111*an_2 + 111*an_3*n**2 + 111*an_3 + n; error: 111            
model: an_1*an_2*n**2                ; error: 111            
model: 111*an_1**3*n + an_1**2*an_13*an_2*n**3; error: 111            
model: 111*an_1**2*an_2 + 111*an_1*n + 111*an_1 + n; error: 111            
model: 111*an_2 + 111*n**2 + n       ; error: 111            
model: 111*an_1 + 111*an_2*n + 111*an_2 + n; error: 111            
model: an_1*an_2*an_4                ; error: 111            
model: 111*an_1*n + an_1 + 111*n     ; error: 111            
model: 111*an_1**2*an_3 + an_1*an_14 + 111*n; error: 111            
model: an_1*n**3 + 111*an_1          ; error: 111            
model: an_1*an_2*n + 111*an_1*an_2 + 111*an_1; error: 111            
model: 111*an_1*an_2 + an_1*n**2 + 111*an_1; error: 111            
model: an_1**2 + 111*n               ; error: 111            
model: 111*an_1*n + an_2 + 111*n     ; error: 111            
model: an_1**4*n                     ; error: 111            
model: an_3*n                        ; error: 111            
model: 111*an_1**2*an_2*n + 111*an_1*n + an_2 + 111*n; error: 111            
model: 111*n**4 + n                  ; error: 111            
model: an_2*n + 111*n                ; error: 111            
model: an_1**2*an_2*an_3*n**3 + 111*an_1*an_2 + 111*an_1; error: 111            
model: 111*n**2 + 112*n              ; error: 111            
model: 111*an_1 + an_16 + 111*n**2   ; error: 111            
model: 111*an_1*n + 111*an_2 + 111*n**3 + n**2; error: 111            
model: 111*an_1*n**3 + 112*an_1*n    ; error: 111            
model: an_2 + 111*an_22              ; error: 111            
model: 111*an_1**2*n + an_2 + 111*n**2 + 111*n; error: 111            
model: 111*an_11*n**2 + an_2 + 111*n ; error: 111            
model: 111*an_1*an_2*n + an_2*n      ; error: 111            
model: 112*an_1**2                   ; error: 111            
model: an_1*an_2*n + 111*an_2*n**2   ; error: 111            
model: 111*an_1*n + an_2*n           ; error: 111            
model: 111*an_1**2 + an_1 + 111*n    ; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*an_9 + 111*n; error: 111            
model: an_1**2*n**3                  ; error: 111            
model: n**3 + 111*n                  ; error: 111            
model: 111*an_1**2*n + 111*an_1*n + 111*an_1 + an_3 + 111*n**2; error: 111            
model: 111*an_1*an_3*n**2 + an_2     ; error: 111            
model: 111*an_1**2*n**2 + an_1*n**3 + 111*an_1 + 111*n; error: 111            
model: 111*an_1*an_2 + an_2*n**3     ; error: 111            
model: 111*an_1*n**2 + 112*an_1*n + 111*an_1; error: 111            
model: an_1*an_2*n**5                ; error: 111            
model: 111*an_1**2 + an_1*an_2*n**2 + 111*an_2*n; error: 111            
model: 111*an_3 + n**2               ; error: 111            
model: an_1*n + 111*n**2             ; error: 111            
model: 111*an_1*an_11*an_3*n**2 + 111*an_1*n**2 + 111*an_2 + n; error: 111            
model: 111*n**3 + 112*n              ; error: 111            
model: an_1*an_2*n + 111*an_1        ; error: 111            
model: an_1*an_2 + 111*n**3          ; error: 111            
model: an_1*an_19*an_2 + 111*an_1*an_2*an_3*n + 111*an_1; error: 111            
model: 111*an_3 + n**3               ; error: 111            
model: 111*an_2 + 112*n              ; error: 111            
model: 111*an_1*n + 111*an_1 + an_2*n**2 + 111*n; error: 111            
model: an_1**2*n + 111*an_1          ; error: 111            
model: 111*an_1*n**2 + n**2          ; error: 111            
model: an_2**3*n**2                  ; error: 111            
model: 111*an_1*an_3 + an_1          ; error: 111            
model: 111*an_1*an_3*an_4 + 111*an_1*n + 111*an_8 + n**2 + 111*n; error: 111            
model: an_1*an_2*an_3*n              ; error: 111            
model: 111*an_1*an_2*n + n           ; error: 111            
model: 111*an_1*an_4*n + 112*n       ; error: 111            
model: an_1*n**2 + 111*an_2*n + 111*n; error: 111            
model: 111*an_1 + an_9*n**3 + 111*n  ; error: 111            
model: 111*an_1*an_2 + an_2          ; error: 111            
model: an_1**2*n**2 + 111*an_1 + 111*n; error: 111            
model: an_5                          ; error: 111            
model: an_1 + 111*an_3*n + 111*n     ; error: 111            
model: an_1*an_2 + 111*an_1*n**3 + 111*an_1 + 111*an_15 + 111*n; error: 111            
model: an_1*an_3*n**4 + 111*an_1 + 111*n; error: 111            
model: an_2**2*n                     ; error: 111            
model: n**5                          ; error: 111            
model: an_1**2*n + 111*an_1*n + 111*an_1; error: 111            
model: 111*an_1*an_2*n + 111*an_1*an_2 + 111*an_2*n**5 + n**2 + 111*n; error: 111            
model: 111*an_1 + an_15*an_2 + 111*n ; error: 111            
model: 111*an_1 + 111*n**3 + 112*n   ; error: 111            
model: an_6*n**2                     ; error: 111            
model: 111*an_1*n + 111*an_2*n + n   ; error: 111            
model: an_1*an_7                     ; error: 111            
model: 111*an_1**2*an_2*n + n**2 + 111*n; error: 111            
model: an_2*n**3                     ; error: 111            
model: 111*an_2*n**3 + 111*n**3 + 112*n; error: 111            
model: 111*an_1*an_2 + an_1*n**3 + 111*an_1 + 111*n; error: 111            
model: 111*an_1**2 + an_1*an_2**2*n**2 + 111*an_1*n + 111*an_2 + 111*n**3; error: 111            
model: 111*an_1**2 + 111*an_1 + an_3*n**2; error: 111            
model: 111*an_1*an_2 + 111*an_1 + n**2 + 111*n; error: 111            
model: an_1**4                       ; error: 111            
model: 111*an_1**2*an_2*n + 111*an_1**2*an_5*n**3 + an_1; error: 111            
model: 111*an_1*n + 112*n            ; error: 111            
model: an_1**2 + 111*an_2*an_4*n**2 + 111*n; error: 111            
model: an_1*n + 111*an_3 + 111*n     ; error: 111            
model: 111*an_3**2*n + n**2          ; error: 111            
model: 111*an_1*an_16*an_3*n + 112*an_1 + 111*n**2; error: 111            
model: 111*an_1 + an_2**2*n**3 + 111*n**2 + 111*n; error: 111            
model: an_1*an_16*an_2 + 111*an_15*n ; error: 111            
model: an_1*an_5*n                   ; error: 111            
model: an_1*an_2*n + 111*n           ; error: 111            
model: an_1**4*n**5                  ; error: 111            
model: 111*an_1**2*n + 111*an_2 + n  ; error: 111            
model: 111*an_2 + an_4*n**2          ; error: 111            
model: 111*an_18*n + n               ; error: 111            
model: an_1*an_4*n**2                ; error: 111            
model: 112*an_1 + 111*an_2*n         ; error: 111            
model: 111*an_1*an_2*n + an_1*an_2   ; error: 111            
model: an_3*an_4*n**2 + 111*n**2     ; error: 111            
model: 111*an_1**2*an_2 + 111*an_1*an_2 + n**2; error: 111            
model: 111*an_1**2*n + 111*an_1 + n  ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_2*n + an_1 + 111*n; error: 111            
model: an_1 + 111*an_3               ; error: 111            
model: 111*an_1 + an_3               ; error: 111            
model: 111*an_1*an_2 + 111*an_2*n + an_4 + 111*n; error: 111            
model: an_7                          ; error: 111            
model: 111*an_1 + n**2 + 111*n       ; error: 111            
model: 112*an_1 + 111*n              ; error: 111            
model: an_1*n + 111*n**2 + 111*n     ; error: 111            
model: an_1*an_2*n + 111*an_1*n + 111*n; error: 111            
model: n**2 + 111*n                  ; error: 111            
model: an_1*n + 111*an_1             ; error: 111            
model: 111*an_1*n + an_1             ; error: 111            
model: an_3*n + 111*n                ; error: 111            
model: 111*an_1**2*an_2*n**3 + an_1  ; error: 111            
model: an_1*an_2 + 111*n**2          ; error: 111            
model: an_2*n                        ; error: 111            
model: 111*an_18 + an_2*n + 111*n    ; error: 111            
model: an_1*an_2                     ; error: 111            
model: 111*an_1 + 111*an_7 + n       ; error: 111            
model: 111*an_1**2*n**2 + n          ; error: 111            
model: 111*an_1**2*n**3 + an_2*n     ; error: 111            
model: an_1*n**3 + 111*n             ; error: 111            
model: 111*an_1**2*an_2**2*n**4 + 111*an_1 + an_3 + 111*n; error: 111            
model: an_4*n**3                     ; error: 111            
model: 111*an_1**2*n + 111*an_1*an_7*n**2 + 111*an_2 + an_20*n + 111*n; error: 111            
model: an_1*an_2*an_3*n**2           ; error: 111            
model: an_1*an_2*n                   ; error: 111            
model: 112*an_1*n                    ; error: 111            
model: an_2*an_3*n                   ; error: 111            
model: an_1**2*an_2*n**2             ; error: 111            
model: 111*an_1**4*n**2 + an_1 + 111*n; error: 111            
model: an_1**2*an_2*an_4*n**3        ; error: 111            
model: an_1**2 + 111*an_1*n + 111*n**2; error: 111            
model: 111*an_1*n + 111*an_2 + 112*n ; error: 111            
model: 111*an_1 + 111*an_2*n + 112*n ; error: 111            
model: an_1**3*an_2*an_21*n**2 + 111*an_2 + 111*n; error: 111            
model: 111*an_1 + n**2               ; error: 111            
model: an_1**2*an_2*an_3*n**3        ; error: 111            
model: 112*n                         ; error: 111            
model: 111*an_1*an_2 + n             ; error: 111            
model: 111*an_4*n**3 + n             ; error: 111            
model: an_1*n**2 + 111*n**2          ; error: 111            
model: an_1*an_5                     ; error: 111            
model: 111*an_1*an_2 + 111*an_1*n**2 + 111*an_4 + n; error: 111            
model: 111*an_1*n + 111*an_1 + n     ; error: 111            
model: an_3                          ; error: 111            
model: an_1*n**2                     ; error: 111            
model: an_1 + 111*an_2*an_3*n        ; error: 111            
model: 111*an_1*n**3 + n             ; error: 111            
model: 111*an_1**2 + an_1*n          ; error: 111            
model: 111*an_2 + 111*n**3 + n       ; error: 111            
model: an_2 + 111*n                  ; error: 111            
model: an_2*n**2                     ; error: 111            
model: an_1**2*n                     ; error: 111            
model: 111*an_1**2*n + n             ; error: 111            
model: 111*an_1**3 + 111*an_1*an_3*n + an_2; error: 111            
model: an_1                          ; error: 111            
model: an_1**3 + 111*an_1 + 111*an_3 ; error: 111            
model: 111*an_1 + 111*an_2*n + n     ; error: 111            
model: n**2                          ; error: 111            
model: an_1 + 111*n**2               ; error: 111            
model: an_14*n + 111*n               ; error: 111            
model: n                             ; error: 111            
model: an_1**2                       ; error: 111            
model: 111*an_3 + n                  ; error: 111            
model: n**3                          ; error: 111            
model: an_1*an_4*n + 111*an_1 + 111*n; error: 111            
model: 111*an_2*n**3 + 111*an_2 + n  ; error: 111            
model: an_1*n**2 + 111*n             ; error: 111            
model: an_1*an_3*n**2                ; error: 111            
model: an_1**2*an_2*n + 111*n**2     ; error: 111            
model: 111*an_1**2*n + an_2*n        ; error: 111            
model: 111*an_1*n**3 + an_2*n        ; error: 111            
model: an_1**2*n + 111*an_1 + 111*an_2**2*n; error: 111            
model: an_1 + 111*n                  ; error: 111            
model: an_1*n + 111*an_2 + 111*n     ; error: 111            
model: 111*an_1*n + an_3             ; error: 111            
model: 111*an_1 + n                  ; error: 111            
model: an_1**3                       ; error: 111            
model: an_1*an_2**2*n**2 + 111*an_1 + 111*n; error: 111            
model: 111*an_2*n + n                ; error: 111            
model: an_3**2*n                     ; error: 111            
model: an_1*an_3*n**3                ; error: 111            
model: an_3*n**3                     ; error: 111            
model: an_2                          ; error: 111            
model: an_1*n                        ; error: 111            
model: 111*an_1**2*an_3 + an_1**2    ; error: 111            
model: 111*an_1*n + an_2             ; error: 111            
model: an_1**3*n**4 + 111*an_1*n + 111*an_1; error: 111            
model: an_1*n + 111*an_1 + 111*n     ; error: 111            
model: 111*an_1**2*n + an_2*n**2     ; error: 111            
model: an_4                          ; error: 111            
model: 111*an_1*n + 111*an_1 + an_3 + 111*n; error: 111            
model: 112*an_1 + 111*an_3*n**2 + 111*n; error: 111            
model: 111*an_1*n + an_1 + 111*n**2  ; error: 111            
model: an_1**3*an_2*an_22*n**6 + 111*n; error: 111            
model: an_1**3*n                     ; error: 111            
model: 111*an_1*an_2*n + an_1 + 111*n**2; error: 111            
model: 111*n**3 + n                  ; error: 111            
model: an_3*n**5                     ; error: 111            
model: an_1**2*an_2 + 111*an_14*an_2 ; error: 111            
model: an_1**2*an_2**2*n**2          ; error: 111            
model: 111*an_1 + 111*an_3 + n       ; error: 111            
model: 111*an_2*n**2 + n             ; error: 111            
model: an_3*n**2                     ; error: 111            
model: an_2*n**2 + 111*an_2          ; error: 111            
model: 111*an_1**2 + n               ; error: 111            
model: an_2*n**3 + 111*n             ; error: 111            
model: 111*an_2*n**4 + 112*n         ; error: 111            
model: an_1*an_3*n**2 + 111*an_2 + 111*n; error: 111            
model: an_1**3*an_2*n**2             ; error: 111            
model: an_1**2*an_3 + 111*an_1       ; error: 111            
model: an_1*an_2*n + 111*an_1*n**2   ; error: 111            
model: an_15 + 111*n                 ; error: 111            
model: 111*an_1*n + 111*an_3**2*n + n**2; error: 111            
model: 111*an_2 + n                  ; error: 111            
model: an_1**2 + 111*an_1            ; error: 111            
model: 111*an_1*an_2*n**2 + an_2 + 111*n; error: 111            
model: 111*an_1*an_4*n**3 + an_1     ; error: 111            
model: 111*n**5 + 111*n**4 + n       ; error: 111            
model: an_1*n**2 + 111*an_1          ; error: 111            
model: an_1**2*an_4*n**4             ; error: 111            
model: 111*an_1 + n**4               ; error: 111            
model: an_4*n                        ; error: 111            
model: an_1*an_3*n                   ; error: 111            
model: 111*an_1*an_2*n**2 + n**2     ; error: 111            
model: 111*an_1*an_2*n**4 + an_1     ; error: 111            
model: 111*an_1**2 + 112*n           ; error: 111            
model: 111*an_11*n**2 + n            ; error: 111            
model: an_1*n**2 + 111*an_4          ; error: 111            
model: 111*an_1**2*an_2 + an_3*n     ; error: 111            
model: 111*an_4 + n                  ; error: 111            
model: 111*an_1 + an_15 + 111*n      ; error: 111            
model: 111*an_1**3*an_2*n**3 + n     ; error: 111            
model: 111*an_1 + 111*an_2 + n**2 + 111*n; error: 111            
model: an_2*an_4 + 111*n             ; error: 111            
model: an_1*an_18 + 111*n            ; error: 111            
model: 111*an_2*n + an_2             ; error: 111            
model: 111*an_1**3*n + 111*an_1*n + an_19 + 111*n; error: 111            
model: 111*an_1*n**2 + 112*an_1 + 111*an_3*n + 111*n; error: 111            
model: an_1*an_2 + 111*n**3 + 111*n  ; error: 111            
model: an_1*n + 111*n                ; error: 111            
model: an_1**2*an_2                  ; error: 111            
model: 112*an_1                      ; error: 111            
model: 111*n**2 + n                  ; error: 111            
model: an_2**2 + 111*n               ; error: 111            
model: 111*an_1*an_14*n + 112*an_1 + 111*n**3; error: 111            
model: an_1 + 111*n**2 + 111*n       ; error: 111            
model: 111*an_1 + 111*n**2 + n       ; error: 111            
model: 111*an_1*n**2 + 112*n         ; error: 111            
model: 111*an_1**2*an_3 + 112*n      ; error: 111            
model: 111*an_1*n + n                ; error: 111            
model: an_1**2*an_3*n**2             ; error: 111            
model: 111*an_1*n + n**4             ; error: 111            
model: an_2*an_4                     ; error: 111            
model: 111*an_1*an_2*n + an_2        ; error: 111            
model: an_2**3*an_6*n                ; error: 111            
model: 111*an_1*n + n**2             ; error: 111            
model: an_1**3*n + 111*an_1*n        ; error: 111            
model: 111*an_1**2*n + an_1 + 111*n  ; error: 111            
model: 111*an_2*n + 112*n            ; error: 111            
model: 111*an_1**2*an_9 + 112*an_1 + 111*n; error: 111            
model: an_1**2*an_2*n                ; error: 111            
model: an_19*n                       ; error: 100000000      
model: -1.21118477087832*an_1**3*n + 0.340682198262244*an_1**2*an_4*n - 1.51988715748233*an_1**2*n + an_1**2 - 4.06351123152819*an_1 + 3.52342140662638*an_2 + 2.63711880354394*n; error: 100000000      
model: an_17                         ; error: 100000000      
model: -0.163077789121659*an_1 + an_2 - 1.79633955928861*an_5; error: 100000000      
model: an_18                         ; error: 100000000      
model: an_24                         ; error: 100000000      
model: an_16                         ; error: 100000000      
model: an_1**2*an_20                 ; error: 100000000      
model: an_11*n                       ; error: 100000000      
model: an_22                         ; error: 100000000      
model: -1.34097042334621*an_1**2*n + 3.71782187111109*an_1*n**2 + 0.391770229941337*an_1 - 3.79168382299631*an_2*n + 2.22295828615715*an_22*an_4 - 3.19939755564825*n**2 - 1.34250954520986*n; error: 100000000      
model: an_1*an_10*n**2               ; error: 100000000      
model: an_1**3*an_11*an_2*n**3       ; error: 100000000      
model: an_1**3*an_15                 ; error: 100000000      
model: an_1**2*an_2*an_23*n**2       ; error: 100000000      
model: an_1**2*an_19*n               ; error: 100000000      
model: an_21                         ; error: 100000000      
model: 0.144394820372789*an_1*an_17*n**2 + an_1 + 4.49629202348225*an_2 - 4.51797990849179*n; error: 100000000      
model: an_1*an_24*n**2               ; error: 100000000      
model: an_1*an_24*an_3               ; error: 100000000      

Total time consumed by now:12.890453158994205


Equation discovery for all (chosen) OEIS sequences took 12.890461718998267 secconds, i.e. 0.21484102864997112 minutes or 0.003580683810832852 hours.
