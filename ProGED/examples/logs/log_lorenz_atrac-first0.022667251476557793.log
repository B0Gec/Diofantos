["'x'", "'y'", "'z'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'x' [0.33]
    V -> 'y' [0.33]
    V -> 'z' [0.34]
50 =samples cardinality
Estimating model C0*z**3 + C1
Estimating model C0*y
Estimating model C0*z
Estimating model C0*x**2*y*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y*z
Estimating model C0*x*z + C1
Estimating model C0*x + C1
Estimating model C0*y + C1
Estimating model C0*x*y
Estimating model C0*z + C1
Estimating model C0*x
Estimating model C0*y + C1*z + C2
Estimating model C0*x*z + C1*x + C2*y**2*z + C3
Estimating model C0*x + C1*z
Estimating model C0*x*z**2
Estimating model C0*x + C1*y**3
Estimating model C0*x*y + C1*x*z + C2
Estimating model C0*x*z + C1*x + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*y
Estimating model C0*x**2 + C1*z
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2 + C1*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x**2*y + C1
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*x**2*y + C1
Estimating model C0*y*z + C1
Estimating model C0*x**2
Estimating model C0*y + C1*z**3
Estimating model C0*y**2
Estimating model C0*y*z + C1*z**2 + C2
Estimating model C0*x*y + C1
ModelBox: 28 models
-> C0*z**3 + C1, p = 0.0002173353984000001, parse trees = 1, valid = True, error = 1.3211318959746619
-> C0*y, p = 0.04752, parse trees = 1, valid = True, error = 0.0018941730042872987
-> C0*z, p = 0.048960000000000004, parse trees = 1, valid = True, error = 4.248228244228097
-> C0*x**2*y*z, p = 0.00011260643328000003, parse trees = 1, valid = False
-> C0*x*z + C1, p = 8.934064128e-05, parse trees = 1, valid = True, error = 0.46131563972455397
-> C0*x + C1, p = 0.02371088941056, parse trees = 5, valid = True, error = 0.020963880663223883
-> C0*y + C1, p = 0.025548931491220686, parse trees = 4, valid = True, error = 0.000144802685116617
-> C0*x*y, p = 0.006272640000000001, parse trees = 1, valid = True, error = 4.873767962316755
-> C0*z + C1, p = 0.011750400000000001, parse trees = 1, valid = True, error = 0.8794492370706803
-> C0*x, p = 0.04752, parse trees = 1, valid = True, error = 5.506869976665
-> C0*y + C1*z + C2, p = 8.934064128000002e-05, parse trees = 1, valid = True, error = 4.486039399900997e-05
-> C0*x*z + C1*x + C2*y**2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 0.0008744325202768186
-> C0*x + C1*z, p = 0.0031021056, parse trees = 2, valid = True, error = 0.011146736034780553
-> C0*x*z**2, p = 0.0008789299200000002, parse trees = 1, valid = True, error = 10.544407746854123
-> C0*x + C1*y**3, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 1.1835520845996725
-> C0*x*y + C1*x*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 0.031143667945212443
-> C0*x*z + C1*x + C2, p = 1.1792964648960004e-05, parse trees = 1, valid = True, error = 0.007185485573003223
-> C0*x*y*z, p = 0.0017061580800000003, parse trees = 2, valid = True, error = 9.54560228221248
-> C0*x + C1*y, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 2.94709382690573e-06
-> C0*x**2 + C1*z, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*y + C2, p = 1.5823106262171657e-07, parse trees = 1, valid = True, error = 2.4772067855792343e-06
-> C0*x**2*y + C1, p = 0.0001987172352000001, parse trees = 1, valid = False
-> C0*y*z + C1, p = 0.0031021056000000006, parse trees = 2, valid = True, error = 0.4024136242437685
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 13.951287290954978
-> C0*y + C1*z**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 0.0006381389192723204
-> C0*y**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 1.401499123127071
-> C0*y*z + C1*z**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 0.07534781492560932
-> C0*x*y + C1, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 0.17937592619486167

Final score:
model: 5.23381264299876*y + 0.458466510151283                                ; error: 0.000144802685116617
model: 5.3303111518946*y - 0.442035396434731*z + 0.499574728388214           ; error: 4.486039399900997e-05
model: 1.26958921981701*x*z + 10.0*x - 0.0321260625728185*y**2*z + 1.19431556625444; error: 0.0008744325202768186
model: -9.85764357227234*x + 9.9333747564978*y                               ; error: 2.94709382690573e-06
model: -9.55829580188787*x + 9.78920618974904*y + 0.0232261285460231         ; error: 2.4772067855792343e-06
model: 5.42124324909132*y - 0.0194742550754757*z**3                          ; error: 0.0006381389192723204
[1] [2, 3]

========================== discussion: ==============================
model: -9.85764357227234*x + 9.9333747564978*y                               ; error: 2.94709382690573e-06
model: -9.55829580188787*x + 9.78920618974904*y + 0.0232261285460231         ; error: 2.4772067855792343e-06

Really: dx_dt = \rho(y-x) = -\rho*x + \rho*y,
where \rho:= 10, tj. -10*x + 10*y.
we can see eq_dicoverer found the right equation.