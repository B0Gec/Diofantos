["'z'", "'x'", "'y'"]
Grammar with 9 productions (start state = S)
    S -> S '+' R [0.4]
    S -> R [0.6]
    R -> T [1.0]
    R -> 'C' '*' F '(' T ')' [0]
    T -> T '*' V [0.4]
    T -> 'C' [0.6]
    V -> 'z' [0.33]
    V -> 'x' [0.33]
    V -> 'y' [0.34]
50 =samples cardinality
Estimating model C0*y**3 + C1
Estimating model C0*x
Estimating model C0*y
Estimating model C0*x*y*z**2
Estimating model C0*y*z + C1
Estimating model C0*z + C1
Estimating model C0*x + C1
Estimating model C0*x*z
Estimating model C0*y + C1
Estimating model C0*z
Estimating model C0*x + C1*y + C2
Estimating model C0*x**2*y + C1*y*z + C2*z + C3
Estimating model C0*y + C1*z
Estimating model C0*y**2*z
Estimating model C0*x**3 + C1*z
Estimating model C0*x*z + C1*y*z + C2
Estimating model C0*y*z + C1*z + C2
Estimating model C0*x*y*z
Estimating model C0*x + C1*z
Estimating model C0*y + C1*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*y + C1*z**2
Estimating model C0*x + C1*z + C2
Estimating model C0*x*z**2 + C1
Estimating model C0*x*y + C1
Estimating model C0*z**2
Excepted an error: The map-like callable must be of the form f(func, iterable), returning a sequence of numbers the same length as 'iterable'!! 
Model: C0*z**2
Estimating model C0*x + C1*y**3
Estimating model C0*x**2
Estimating model C0*x*y + C1*y**2 + C2
Estimating model C0*x*z + C1
ModelBox: 28 models
-> C0*y**3 + C1, p = 0.0002173353984000001, parse trees = 1, valid = True, error = 0.00017756817747860746
-> C0*x, p = 0.04752, parse trees = 1, valid = True, error = 0.0004527204573003162
-> C0*y, p = 0.048960000000000004, parse trees = 1, valid = True, error = 0.008138600924796688
-> C0*x*y*z**2, p = 0.00011260643328000003, parse trees = 1, valid = True, error = 0.05228399058830974
-> C0*y*z + C1, p = 8.934064128e-05, parse trees = 1, valid = True, error = 6.767137206051004e-06
-> C0*z + C1, p = 0.02371088941056, parse trees = 5, valid = True, error = 1.7523546596041983e-08
-> C0*x + C1, p = 0.025548931491220686, parse trees = 4, valid = True, error = 0.00044768888917059334
-> C0*x*z, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.017237334797766183
-> C0*y + C1, p = 0.011750400000000001, parse trees = 1, valid = True, error = 1.0743783643498417e-06
-> C0*z, p = 0.04752, parse trees = 1, valid = True, error = 1.3736264379186823e-06
-> C0*x + C1*y + C2, p = 8.934064128000002e-05, parse trees = 1, valid = True, error = 1.4574699297355663e-07
-> C0*x**2*y + C1*y*z + C2*z + C3, p = 2.794536378191317e-08, parse trees = 1, valid = True, error = 4.082221818769962e-10
-> C0*y + C1*z, p = 0.0031021056, parse trees = 2, valid = True, error = 7.892148842765436e-09
-> C0*y**2*z, p = 0.0008789299200000002, parse trees = 1, valid = True, error = 0.03638681120398741
-> C0*x**3 + C1*z, p = 2.6230675046400015e-05, parse trees = 1, valid = True, error = 1.013240069849313e-06
-> C0*x*z + C1*y*z + C2, p = 6.486130556928003e-06, parse trees = 1, valid = True, error = 1.8783287844885056e-07
-> C0*y*z + C1*z + C2, p = 1.1792964648960004e-05, parse trees = 1, valid = True, error = 8.703892179585059e-09
-> C0*x*y*z, p = 0.0017061580800000003, parse trees = 2, valid = True, error = 0.048677732094303504
-> C0*x + C1*z, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 1.46729457432883e-07
-> C0*y + C1*z**2, p = 0.0002047389696000001, parse trees = 1, valid = False
-> C0*x + C1*z + C2, p = 1.5823106262171657e-07, parse trees = 1, valid = True, error = 9.855465221451947e-09
-> C0*x*z**2 + C1, p = 0.0001987172352000001, parse trees = 1, valid = True, error = 0.00034765159272469727
-> C0*x*y + C1, p = 0.0031021056000000006, parse trees = 2, valid = True, error = 8.844241224700161e-05
-> C0*z**2, p = 0.006272640000000001, parse trees = 1, valid = False
-> C0*x + C1*y**3, p = 2.868827258880001e-05, parse trees = 1, valid = True, error = 9.071341177056339e-05
-> C0*x**2, p = 0.006272640000000001, parse trees = 1, valid = True, error = 0.04335947701614274
-> C0*x*y + C1*y**2 + C2, p = 3.965866802675714e-07, parse trees = 1, valid = True, error = 1.3546710396887561e-05
-> C0*x*z + C1, p = 0.0015054336000000002, parse trees = 1, valid = True, error = 0.00022023921284598569

Final score:
model: -4.66585745020294*y*z - 0.838642239029694                             ; error: 6.767137206051004e-06
model: -3.1905380437644*z - 0.0535619219876371                               ; error: 1.7523546596041983e-08
model: -1.72310551534707*y - 0.888405174208406                               ; error: 1.0743783643498417e-06
model: -3.35640243869634*z                                                   ; error: 1.3736264379186823e-06
model: 1.86984546669419*x - 1.78121556861794*y - 1.09645048532827            ; error: 1.4574699297355663e-07
model: 7.89896641847439*x**2*y - 0.0713521081370894*y*z - 3.31504162772157*z - 0.0227398960331782; error: 4.082221818769962e-10
model: 0.11074522096973*y - 3.39567084146624*z                               ; error: 7.892148842765436e-09
model: -9.95866961939276*x**3 - 3.30803002198571*z                           ; error: 1.013240069849313e-06
model: -9.99988149829111*x*z - 2.910810771625*y*z - 0.556735907345223        ; error: 1.8783287844885056e-07
model: -0.164431463853151*y*z - 3.08026213229163*z - 0.0805440809938018      ; error: 8.703892179585059e-09
model: -0.516573435771711*x - 3.17187814909564*z                             ; error: 1.46729457432883e-07
model: 0.165221788255765*x - 3.19991565783602*z - 0.0695848208742389         ; error: 9.855465221451947e-09
[3] [1, 2]
